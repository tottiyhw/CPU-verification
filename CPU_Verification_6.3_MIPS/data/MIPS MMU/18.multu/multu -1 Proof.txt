
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,rT,0,0,25}                       Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F37)
	S15= CtrlPCInc=0                                            Premise(F38)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F39)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F44)
	S20= IMem[{pid,addr}]={0,rS,rT,0,0,25}                      IMem-Hold(S2,S19)
	S21= CtrlGPR=0                                              Premise(F47)
	S22= GPR[rS]=a                                              GPR-Hold(S3,S21)
	S23= GPR[rT]=b                                              GPR-Hold(S4,S21)

IMMU	S24= PC.Out=addr                                            PC-Out(S16)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S26= PC.Out=>ICache.IEA                                     Premise(F56)
	S27= ICache.IEA=addr                                        Path(S24,S26)
	S28= IAddrReg.Out=>IMem.RAddr                               Premise(F61)
	S29= IMem.RAddr={pid,addr}                                  Path(S25,S28)
	S30= IMem.Out={0,rS,rT,0,0,25}                              IMem-Read(S29,S20)
	S31= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S29,S20)
	S32= IMem.Out=>IRMux.MemData                                Premise(F62)
	S33= IRMux.MemData={0,rS,rT,0,0,25}                         Path(S30,S32)
	S34= IRMux.Out={0,rS,rT,0,0,25}                             IRMux-Select(S33)
	S35= IRMux.Out=>IR.In                                       Premise(F66)
	S36= IR.In={0,rS,rT,0,0,25}                                 Path(S34,S35)
	S37= IMem.MEM8WordOut=>ICache.WData                         Premise(F67)
	S38= ICache.WData=IMemGet8Word({pid,addr})                  Path(S31,S37)
	S39= CtrlPC=0                                               Premise(F84)
	S40= CtrlPCInc=1                                            Premise(F85)
	S41= PC[Out]=addr+4                                         PC-Inc(S16,S39,S40)
	S42= CtrlICache=1                                           Premise(F88)
	S43= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S27,S38,S42)
	S44= CtrlIR=1                                               Premise(F93)
	S45= [IR]={0,rS,rT,0,0,25}                                  IR-Write(S36,S44)
	S46= CtrlGPR=0                                              Premise(F94)
	S47= GPR[rS]=a                                              GPR-Hold(S22,S46)
	S48= GPR[rT]=b                                              GPR-Hold(S23,S46)

ID	S49= IR.Out25_21=rS                                         IR-Out(S45)
	S50= IR.Out20_16=rT                                         IR-Out(S45)
	S51= IR.Out25_21=>GPR.RReg1                                 Premise(F117)
	S52= GPR.RReg1=rS                                           Path(S49,S51)
	S53= GPR.Rdata1=a                                           GPR-Read(S52,S47)
	S54= IR.Out20_16=>GPR.RReg2                                 Premise(F118)
	S55= GPR.RReg2=rT                                           Path(S50,S54)
	S56= GPR.Rdata2=b                                           GPR-Read(S55,S48)
	S57= GPR.Rdata1=>A.In                                       Premise(F120)
	S58= A.In=a                                                 Path(S53,S57)
	S59= GPR.Rdata2=>B.In                                       Premise(F121)
	S60= B.In=b                                                 Path(S56,S59)
	S61= CtrlPC=0                                               Premise(F131)
	S62= CtrlPCInc=0                                            Premise(F132)
	S63= PC[Out]=addr+4                                         PC-Hold(S41,S61,S62)
	S64= CtrlICache=0                                           Premise(F135)
	S65= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S43,S64)
	S66= CtrlA=1                                                Premise(F142)
	S67= [A]=a                                                  A-Write(S58,S66)
	S68= CtrlB=1                                                Premise(F143)
	S69= [B]=b                                                  B-Write(S60,S68)

EX	S70= A.Out=a                                                A-Out(S67)
	S71= B.Out=b                                                B-Out(S69)
	S72= A.Out=>MDU.A                                           Premise(F169)
	S73= MDU.A=a                                                Path(S70,S72)
	S74= B.Out=>MDU.B                                           Premise(F170)
	S75= MDU.B=b                                                Path(S71,S74)
	S76= MDU.lo=(a*b)[31:0]                                     MDU(S73,S75)
	S77= MDU.hi=(a*b)[63:32]                                    MDU(S73,S75)
	S78= MDU.hi=>Hi.In                                          Premise(F172)
	S79= Hi.In=(a*b)[63:32]                                     Path(S77,S78)
	S80= MDU.lo=>Lo.In                                          Premise(F173)
	S81= Lo.In=(a*b)[31:0]                                      Path(S76,S80)
	S82= CtrlPC=0                                               Premise(F179)
	S83= CtrlPCInc=0                                            Premise(F180)
	S84= PC[Out]=addr+4                                         PC-Hold(S63,S82,S83)
	S85= CtrlICache=0                                           Premise(F183)
	S86= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S65,S85)
	S87= CtrlHi=1                                               Premise(F192)
	S88= [Hi]=(a*b)[63:32]                                      Hi-Write(S79,S87)
	S89= CtrlLo=1                                               Premise(F193)
	S90= [Lo]=(a*b)[31:0]                                       Lo-Write(S81,S89)

MEM	S91= CtrlPC=0                                               Premise(F226)
	S92= CtrlPCInc=0                                            Premise(F227)
	S93= PC[Out]=addr+4                                         PC-Hold(S84,S91,S92)
	S94= CtrlICache=0                                           Premise(F230)
	S95= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S86,S94)
	S96= CtrlHi=0                                               Premise(F239)
	S97= [Hi]=(a*b)[63:32]                                      Hi-Hold(S88,S96)
	S98= CtrlLo=0                                               Premise(F240)
	S99= [Lo]=(a*b)[31:0]                                       Lo-Hold(S90,S98)

DMMU1	S100= CtrlPC=0                                              Premise(F273)
	S101= CtrlPCInc=0                                           Premise(F274)
	S102= PC[Out]=addr+4                                        PC-Hold(S93,S100,S101)
	S103= CtrlICache=0                                          Premise(F277)
	S104= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S95,S103)
	S105= CtrlHi=0                                              Premise(F286)
	S106= [Hi]=(a*b)[63:32]                                     Hi-Hold(S97,S105)
	S107= CtrlLo=0                                              Premise(F287)
	S108= [Lo]=(a*b)[31:0]                                      Lo-Hold(S99,S107)

DMMU2	S109= CtrlPC=0                                              Premise(F320)
	S110= CtrlPCInc=0                                           Premise(F321)
	S111= PC[Out]=addr+4                                        PC-Hold(S102,S109,S110)
	S112= CtrlICache=0                                          Premise(F324)
	S113= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S104,S112)
	S114= CtrlHi=0                                              Premise(F333)
	S115= [Hi]=(a*b)[63:32]                                     Hi-Hold(S106,S114)
	S116= CtrlLo=0                                              Premise(F334)
	S117= [Lo]=(a*b)[31:0]                                      Lo-Hold(S108,S116)

WB	S118= CtrlPC=0                                              Premise(F367)
	S119= CtrlPCInc=0                                           Premise(F368)
	S120= PC[Out]=addr+4                                        PC-Hold(S111,S118,S119)
	S121= CtrlICache=0                                          Premise(F371)
	S122= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S113,S121)
	S123= CtrlHi=0                                              Premise(F380)
	S124= [Hi]=(a*b)[63:32]                                     Hi-Hold(S115,S123)
	S125= CtrlLo=0                                              Premise(F381)
	S126= [Lo]=(a*b)[31:0]                                      Lo-Hold(S117,S125)

POST	S120= PC[Out]=addr+4                                        PC-Hold(S111,S118,S119)
	S122= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S113,S121)
	S124= [Hi]=(a*b)[63:32]                                     Hi-Hold(S115,S123)
	S126= [Lo]=(a*b)[31:0]                                      Lo-Hold(S117,S125)

