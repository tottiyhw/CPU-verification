
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={4,rS,rT,offset}                       Premise(F2)
	S3= ICache[addr]={4,rS,rT,offset}                           Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F6)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F7)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= PC.Out=>ICache.IEA                                     Premise(F10)
	S14= ICache.IEA=addr                                        Path(S5,S13)
	S15= ICache.Out={4,rS,rT,offset}                            ICache-Search(S14,S3)
	S16= ICache.Out=>ICacheReg.In                               Premise(F11)
	S17= ICacheReg.In={4,rS,rT,offset}                          Path(S15,S16)
	S18= CtrlPC=0                                               Premise(F42)
	S19= CtrlPCInc=0                                            Premise(F43)
	S20= PC[Out]=addr                                           PC-Hold(S1,S18,S19)
	S21= CtrlIAddrReg=1                                         Premise(F44)
	S22= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S21)
	S23= CtrlICacheReg=1                                        Premise(F47)
	S24= [ICacheReg]={4,rS,rT,offset}                           ICacheReg-Write(S17,S23)
	S25= CtrlIMem=0                                             Premise(F49)
	S26= IMem[{pid,addr}]={4,rS,rT,offset}                      IMem-Hold(S2,S25)

IMMU	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S22)
	S28= ICacheReg.Out={4,rS,rT,offset}                         ICacheReg-Out(S24)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F66)
	S30= IMem.RAddr={pid,addr}                                  Path(S27,S29)
	S31= IMem.Out={4,rS,rT,offset}                              IMem-Read(S30,S26)
	S32= IMem.Out=>IRMux.MemData                                Premise(F67)
	S33= IRMux.MemData={4,rS,rT,offset}                         Path(S31,S32)
	S34= ICacheReg.Out=>IRMux.CacheData                         Premise(F68)
	S35= IRMux.CacheData={4,rS,rT,offset}                       Path(S28,S34)
	S36= IRMux.Out={4,rS,rT,offset}                             IRMux-Select(S33,S35)
	S37= IRMux.Out=>IR.In                                       Premise(F71)
	S38= IR.In={4,rS,rT,offset}                                 Path(S36,S37)
	S39= CtrlPC=0                                               Premise(F93)
	S40= CtrlPCInc=1                                            Premise(F94)
	S41= PC[CIA]=addr                                           PC-Inc(S20,S39,S40)
	S42= CtrlIR=1                                               Premise(F102)
	S43= [IR]={4,rS,rT,offset}                                  IR-Write(S38,S42)

ID	S44= CtrlPCInc=0                                            Premise(F145)
	S45= PC[CIA]=addr                                           PC-Hold(S41,S44)
	S46= CtrlIR=0                                               Premise(F153)
	S47= [IR]={4,rS,rT,offset}                                  IR-Hold(S43,S46)

EX	S48= PC.CIA=addr                                            PC-Out(S45)
	S49= IR.Out15_0=offset                                      IR-Out(S47)
	S50= IR.Out15_0=>SEXT.In                                    Premise(F181)
	S51= SEXT.In=offset                                         Path(S49,S50)
	S52= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S51)
	S53= PC.CIA=>ALU.A                                          Premise(F182)
	S54= ALU.A=addr                                             Path(S48,S53)
	S55= SEXT.Out=>ALU.B                                        Premise(F183)
	S56= ALU.B={14{offset[15]},offset,2{0}}                     Path(S52,S55)
	S57= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S54,S56)
	S58= ALU.Out=>ALUOut.In                                     Premise(F185)
	S59= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S57,S58)
	S60= CtrlALUOut=1                                           Premise(F210)
	S61= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S59,S60)

MEM	S62= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S61)
	S63= ALUOut.Out=>PC.In                                      Premise(F241)
	S64= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S62,S63)
	S65= CtrlPC=1                                               Premise(F248)
	S66= CtrlPCInc=0                                            Premise(F249)
	S67= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S64,S65,S66)

DMMU1	S68= CtrlPC=0                                               Premise(F299)
	S69= CtrlPCInc=0                                            Premise(F300)
	S70= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S67,S68,S69)

DMMU2	S71= CtrlPC=0                                               Premise(F350)
	S72= CtrlPCInc=0                                            Premise(F351)
	S73= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S70,S71,S72)

WB	S74= CtrlPC=0                                               Premise(F401)
	S75= CtrlPCInc=0                                            Premise(F402)
	S76= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S73,S74,S75)

POST	S76= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S73,S74,S75)

