
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rS,1,offset}                        Premise(F2)
	S3= ICache[addr]={1,rS,1,offset}                            Premise(F3)
	S4= GPR[rS]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={1,rS,1,offset}                             ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={1,rS,1,offset}                           Path(S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F43)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S19)
	S21= CtrlICacheReg=1                                        Premise(F46)
	S22= [ICacheReg]={1,rS,1,offset}                            ICacheReg-Write(S18,S21)
	S23= CtrlIMem=0                                             Premise(F48)
	S24= IMem[{pid,addr}]={1,rS,1,offset}                       IMem-Hold(S2,S23)
	S25= CtrlGPR=0                                              Premise(F51)
	S26= GPR[rS]=a                                              GPR-Hold(S4,S25)

IMMU	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S28= ICacheReg.Out={1,rS,1,offset}                          ICacheReg-Out(S22)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F65)
	S30= IMem.RAddr={pid,addr}                                  Path(S27,S29)
	S31= IMem.Out={1,rS,1,offset}                               IMem-Read(S30,S24)
	S32= IMem.Out=>IRMux.MemData                                Premise(F66)
	S33= IRMux.MemData={1,rS,1,offset}                          Path(S31,S32)
	S34= ICacheReg.Out=>IRMux.CacheData                         Premise(F67)
	S35= IRMux.CacheData={1,rS,1,offset}                        Path(S28,S34)
	S36= IRMux.Out={1,rS,1,offset}                              IRMux-Select(S33,S35)
	S37= IRMux.Out=>IR.In                                       Premise(F70)
	S38= IR.In={1,rS,1,offset}                                  Path(S36,S37)
	S39= CtrlIR=1                                               Premise(F101)
	S40= [IR]={1,rS,1,offset}                                   IR-Write(S38,S39)
	S41= CtrlGPR=0                                              Premise(F102)
	S42= GPR[rS]=a                                              GPR-Hold(S26,S41)

ID	S43= IR.Out25_21=rS                                         IR-Out(S40)
	S44= IR.Out25_21=>GPR.RReg1                                 Premise(F125)
	S45= GPR.RReg1=rS                                           Path(S43,S44)
	S46= GPR.Rdata1=a                                           GPR-Read(S45,S42)
	S47= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S48= GPR.Rdata1=>A.In                                       Premise(F127)
	S49= A.In=a                                                 Path(S46,S48)
	S50= GPR.Rdata2=>B.In                                       Premise(F128)
	S51= B.In=32'b0                                             Path(S47,S50)
	S52= CtrlA=1                                                Premise(F154)
	S53= [A]=a                                                  A-Write(S49,S52)
	S54= CtrlB=1                                                Premise(F155)
	S55= [B]=32'b0                                              B-Write(S51,S54)

EX	S56= A.Out=a                                                A-Out(S53)
	S57= B.Out=32'b0                                            B-Out(S55)
	S58= A.Out=>CMPU.A                                          Premise(F185)
	S59= CMPU.A=a                                               Path(S56,S58)
	S60= B.Out=>CMPU.B                                          Premise(F186)
	S61= CMPU.B=32'b0                                           Path(S57,S60)
	S62= CMPU.lt=CompareS(a,32'b0)                              CMPU-CMPS(S59,S61)
	S63= CMPU.lt=>ConditionReg.In                               Premise(F188)
	S64= ConditionReg.In=CompareS(a,32'b0)                      Path(S62,S63)
	S65= CtrlConditionReg=1                                     Premise(F210)
	S66= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Write(S64,S65)

MEM	S67= CtrlConditionReg=0                                     Premise(F261)
	S68= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S66,S67)

DMMU1	S69= CtrlConditionReg=0                                     Premise(F312)
	S70= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S68,S69)

DMMU2	S71= CtrlConditionReg=0                                     Premise(F363)
	S72= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S70,S71)

WB	S73= CtrlConditionReg=0                                     Premise(F414)
	S74= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S72,S73)

POST	S74= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S72,S73)

