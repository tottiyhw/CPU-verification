
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rS,17,offset}                       Premise(F2)
	S3= ICache[addr]={1,rS,17,offset}                           Premise(F3)
	S4= GPR[rS]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={1,rS,17,offset}                            ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={1,rS,17,offset}                          Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F42)
	S20= CtrlPCInc=0                                            Premise(F43)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F44)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F47)
	S25= [ICacheReg]={1,rS,17,offset}                           ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F49)
	S27= IMem[{pid,addr}]={1,rS,17,offset}                      IMem-Hold(S2,S26)
	S28= CtrlGPR=0                                              Premise(F52)
	S29= GPR[rS]=a                                              GPR-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={1,rS,17,offset}                         ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F66)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={1,rS,17,offset}                              IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F67)
	S36= IRMux.MemData={1,rS,17,offset}                         Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F68)
	S38= IRMux.CacheData={1,rS,17,offset}                       Path(S31,S37)
	S39= IRMux.Out={1,rS,17,offset}                             IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F71)
	S41= IR.In={1,rS,17,offset}                                 Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F94)
	S43= CtrlPCInc=1                                            Premise(F95)
	S44= PC[Out]=addr+4                                         PC-Inc(S21,S42,S43)
	S45= CtrlIR=1                                               Premise(F103)
	S46= [IR]={1,rS,17,offset}                                  IR-Write(S41,S45)
	S47= CtrlGPR=0                                              Premise(F104)
	S48= GPR[rS]=a                                              GPR-Hold(S29,S47)

ID	S49= IR.Out25_21=rS                                         IR-Out(S46)
	S50= IR.Out25_21=>GPR.RReg1                                 Premise(F127)
	S51= GPR.RReg1=rS                                           Path(S49,S50)
	S52= GPR.Rdata1=a                                           GPR-Read(S51,S48)
	S53= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S54= GPR.Rdata1=>A.In                                       Premise(F129)
	S55= A.In=a                                                 Path(S52,S54)
	S56= GPR.Rdata2=>B.In                                       Premise(F130)
	S57= B.In=32'b0                                             Path(S53,S56)
	S58= CtrlPC=0                                               Premise(F146)
	S59= CtrlPCInc=0                                            Premise(F147)
	S60= PC[Out]=addr+4                                         PC-Hold(S44,S58,S59)
	S61= CtrlA=1                                                Premise(F157)
	S62= [A]=a                                                  A-Write(S55,S61)
	S63= CtrlB=1                                                Premise(F158)
	S64= [B]=32'b0                                              B-Write(S57,S63)

EX	S65= PC.Out=addr+4                                          PC-Out(S60)
	S66= A.Out=a                                                A-Out(S62)
	S67= B.Out=32'b0                                            B-Out(S64)
	S68= A.Out=>CMPU.A                                          Premise(F188)
	S69= CMPU.A=a                                               Path(S66,S68)
	S70= B.Out=>CMPU.B                                          Premise(F189)
	S71= CMPU.B=32'b0                                           Path(S67,S70)
	S72= CMPU.lt=CompareS(a,32'b0)                              CMPU-CMPS(S69,S71)
	S73= CMPU.lt=>ConditionReg.In                               Premise(F191)
	S74= ConditionReg.In=CompareS(a,32'b0)                      Path(S72,S73)
	S75= GPR.WReg=5'd31                                         Premise(F192)
	S76= PC.Out=>GPR.WData                                      Premise(F193)
	S77= GPR.WData=addr+4                                       Path(S65,S76)
	S78= CtrlGPR=1                                              Premise(F211)
	S79= GPR[5'd31]=addr+4                                      GPR-Write(S75,S77,S78)
	S80= CtrlConditionReg=1                                     Premise(F215)
	S81= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Write(S74,S80)

MEM	S82= CtrlGPR=0                                              Premise(F263)
	S83= GPR[5'd31]=addr+4                                      GPR-Hold(S79,S82)
	S84= CtrlConditionReg=0                                     Premise(F267)
	S85= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S81,S84)

DMMU1	S86= CtrlGPR=0                                              Premise(F315)
	S87= GPR[5'd31]=addr+4                                      GPR-Hold(S83,S86)
	S88= CtrlConditionReg=0                                     Premise(F319)
	S89= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S85,S88)

DMMU2	S90= CtrlGPR=0                                              Premise(F367)
	S91= GPR[5'd31]=addr+4                                      GPR-Hold(S87,S90)
	S92= CtrlConditionReg=0                                     Premise(F371)
	S93= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S89,S92)

WB	S94= CtrlGPR=0                                              Premise(F419)
	S95= GPR[5'd31]=addr+4                                      GPR-Hold(S91,S94)
	S96= CtrlConditionReg=0                                     Premise(F423)
	S97= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S93,S96)

POST	S95= GPR[5'd31]=addr+4                                      GPR-Hold(S91,S94)
	S97= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S93,S96)

