
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={7,rS,0,offset}                        Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F40)
	S14= CtrlPCInc=0                                            Premise(F41)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F42)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F47)
	S19= IMem[{pid,addr}]={7,rS,0,offset}                       IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F50)
	S21= GPR[rS]=a                                              GPR-Hold(S3,S20)

IMMU	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= PC.Out=>ICache.IEA                                     Premise(F59)
	S25= ICache.IEA=addr                                        Path(S22,S24)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F64)
	S27= IMem.RAddr={pid,addr}                                  Path(S23,S26)
	S28= IMem.Out={7,rS,0,offset}                               IMem-Read(S27,S19)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S19)
	S30= IMem.Out=>IRMux.MemData                                Premise(F65)
	S31= IRMux.MemData={7,rS,0,offset}                          Path(S28,S30)
	S32= IRMux.Out={7,rS,0,offset}                              IRMux-Select(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F69)
	S34= IR.In={7,rS,0,offset}                                  Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F70)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= CtrlPC=0                                               Premise(F91)
	S38= CtrlPCInc=1                                            Premise(F92)
	S39= PC[CIA]=addr                                           PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F95)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S36,S40)
	S42= CtrlIR=1                                               Premise(F100)
	S43= [IR]={7,rS,0,offset}                                   IR-Write(S34,S42)
	S44= CtrlGPR=0                                              Premise(F101)
	S45= GPR[rS]=a                                              GPR-Hold(S21,S44)

ID	S46= IR.Out25_21=rS                                         IR-Out(S43)
	S47= IR.Out25_21=>GPR.RReg1                                 Premise(F124)
	S48= GPR.RReg1=rS                                           Path(S46,S47)
	S49= GPR.Rdata1=a                                           GPR-Read(S48,S45)
	S50= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S51= GPR.Rdata1=>A.In                                       Premise(F126)
	S52= A.In=a                                                 Path(S49,S51)
	S53= GPR.Rdata2=>B.In                                       Premise(F127)
	S54= B.In=32'b0                                             Path(S50,S53)
	S55= CtrlPCInc=0                                            Premise(F143)
	S56= PC[CIA]=addr                                           PC-Hold(S39,S55)
	S57= CtrlICache=0                                           Premise(F146)
	S58= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S57)
	S59= CtrlIR=0                                               Premise(F151)
	S60= [IR]={7,rS,0,offset}                                   IR-Hold(S43,S59)
	S61= CtrlA=1                                                Premise(F153)
	S62= [A]=a                                                  A-Write(S52,S61)
	S63= CtrlB=1                                                Premise(F154)
	S64= [B]=32'b0                                              B-Write(S54,S63)

EX	S65= PC.CIA=addr                                            PC-Out(S56)
	S66= IR.Out15_0=offset                                      IR-Out(S60)
	S67= A.Out=a                                                A-Out(S62)
	S68= B.Out=32'b0                                            B-Out(S64)
	S69= IR.Out15_0=>SEXT.In                                    Premise(F179)
	S70= SEXT.In=offset                                         Path(S66,S69)
	S71= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S70)
	S72= PC.CIA=>ALU.A                                          Premise(F180)
	S73= ALU.A=addr                                             Path(S65,S72)
	S74= SEXT.Out=>ALU.B                                        Premise(F181)
	S75= ALU.B={14{offset[15]},offset,2{0}}                     Path(S71,S74)
	S76= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S73,S75)
	S77= ALU.Out=>ALUOut.In                                     Premise(F183)
	S78= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S76,S77)
	S79= A.Out=>CMPU.A                                          Premise(F184)
	S80= CMPU.A=a                                               Path(S67,S79)
	S81= B.Out=>CMPU.B                                          Premise(F185)
	S82= CMPU.B=32'b0                                           Path(S68,S81)
	S83= CMPU.gt=CompareS(a,32'b0)                              CMPU-CMPS(S80,S82)
	S84= CMPU.gt=>ConditionReg.In                               Premise(F187)
	S85= ConditionReg.In=CompareS(a,32'b0)                      Path(S83,S84)
	S86= CtrlICache=0                                           Premise(F199)
	S87= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S58,S86)
	S88= CtrlALUOut=1                                           Premise(F208)
	S89= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S78,S88)
	S90= CtrlConditionReg=1                                     Premise(F209)
	S91= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Write(S85,S90)

MEM	S92= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S89)
	S93= ALUOut.Out=>PC.In                                      Premise(F239)
	S94= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S92,S93)
	S95= CtrlPC=1                                               Premise(F246)
	S96= CtrlPCInc=0                                            Premise(F247)
	S97= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S94,S95,S96)
	S98= CtrlICache=0                                           Premise(F250)
	S99= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S87,S98)
	S100= CtrlConditionReg=0                                    Premise(F260)
	S101= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S91,S100)

DMMU1	S102= CtrlPC=0                                              Premise(F297)
	S103= CtrlPCInc=0                                           Premise(F298)
	S104= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S97,S102,S103)
	S105= CtrlICache=0                                          Premise(F301)
	S106= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S99,S105)
	S107= CtrlConditionReg=0                                    Premise(F311)
	S108= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S101,S107)

DMMU2	S109= CtrlPC=0                                              Premise(F348)
	S110= CtrlPCInc=0                                           Premise(F349)
	S111= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S104,S109,S110)
	S112= CtrlICache=0                                          Premise(F352)
	S113= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S106,S112)
	S114= CtrlConditionReg=0                                    Premise(F362)
	S115= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S108,S114)

WB	S116= CtrlPC=0                                              Premise(F399)
	S117= CtrlPCInc=0                                           Premise(F400)
	S118= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S111,S116,S117)
	S119= CtrlICache=0                                          Premise(F403)
	S120= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S113,S119)
	S121= CtrlConditionReg=0                                    Premise(F413)
	S122= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S115,S121)

POST	S118= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S111,S116,S117)
	S120= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S113,S119)
	S122= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S115,S121)

