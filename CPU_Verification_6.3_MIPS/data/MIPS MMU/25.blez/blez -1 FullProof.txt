
----------------------------------- FullProof -----------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={6,rS,0,offset}                        Premise(F2)
	S0= ICache[addr]={6,rS,0,offset}                            Premise(F3)
	S0= GPR[rS]=a                                               Premise(F4)

IF	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F6)
	S0= IMMU.IEA=addr                                           Path(S0,S0)
	S0= IMMU.Addr={pid,addr}                                    IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr)                              IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F7)
	S0= IAddrReg.In={pid,addr}                                  Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F8)
	S0= IMMUHitReg.In=IMMUHit(pid,addr)                         Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F9)
	S0= ICache.IEA=addr                                         Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr)                              ICache-Search(S0)
	S0= ICache.Out={6,rS,0,offset}                              ICache-Search(S0,S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F10)
	S0= ICacheReg.In={6,rS,0,offset}                            Path(S0,S0)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F11)
	S0= ICacheHitReg.In=ICacheHit(addr)                         Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F12)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F13)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F14)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F15)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F16)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F17)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F18)
	S0= IRMux.Out=>IR.In                                        Premise(F19)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F20)
	S0= PC.Out=>ICache.IEA                                      Premise(F21)
	S0= IR.Out31_26=>CU.Op                                      Premise(F22)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F23)
	S0= IR.Out20_16=>GPR.RReg2                                  Premise(F24)
	S0= GPR.Rdata1=>A.In                                        Premise(F25)
	S0= GPR.Rdata2=>B.In                                        Premise(F26)
	S0= IR.Out15_0=>SEXT.In                                     Premise(F27)
	S0= PC.CIA=>ALU.A                                           Premise(F28)
	S0= SEXT.Out=>ALU.B                                         Premise(F29)
	S0= ALU.Out=>ALUOut.In                                      Premise(F30)
	S0= A.Out=>CMPU.A                                           Premise(F31)
	S0= B.Out=>CMPU.B                                           Premise(F32)
	S0= CMPU.gt=>ConditionReg.In                                Premise(F33)
	S0= ALUOut.Out=>PC.In                                       Premise(F34)
	S0= ConditionReg.Out=>CU.gt                                 Premise(F35)
	S0= CtrlASIDIn=0                                            Premise(F36)
	S0= CtrlCP0=0                                               Premise(F37)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F38)
	S0= CtrlExCodeIn=0                                          Premise(F39)
	S0= CtrlIMMU=0                                              Premise(F40)
	S0= CtrlPC=0                                                Premise(F41)
	S0= CtrlPCInc=0                                             Premise(F42)
	S0= PC[Out]=addr                                            PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=1                                          Premise(F43)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Write(S0,S0)
	S0= CtrlIMMUHitReg=1                                        Premise(F44)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Write(S0,S0)
	S0= CtrlICache=0                                            Premise(F45)
	S0= ICache[addr]={6,rS,0,offset}                            ICache-Hold(S0,S0)
	S0= CtrlICacheReg=1                                         Premise(F46)
	S0= [ICacheReg]={6,rS,0,offset}                             ICacheReg-Write(S0,S0)
	S0= CtrlICacheHitReg=1                                      Premise(F47)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Write(S0,S0)
	S0= CtrlIMem=0                                              Premise(F48)
	S0= IMem[{pid,addr}]={6,rS,0,offset}                        IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F49)
	S0= CtrlIR=0                                                Premise(F50)
	S0= CtrlGPR=0                                               Premise(F51)
	S0= GPR[rS]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F52)
	S0= CtrlB=0                                                 Premise(F53)
	S0= CtrlALUOut=0                                            Premise(F54)
	S0= CtrlConditionReg=0                                      Premise(F55)

IMMU	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={6,rS,0,offset}                           ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{6,rS,0,offset}}[1:0]                 ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{6,rS,0,offset}}[4:0]                 ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= CP0.ASID=>IMMU.PID                                      Premise(F56)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F57)
	S0= IMMU.IEA=addr                                           Path(S0,S0)
	S0= IMMU.Addr={pid,addr}                                    IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr)                              IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F58)
	S0= IAddrReg.In={pid,addr}                                  Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F59)
	S0= IMMUHitReg.In=IMMUHit(pid,addr)                         Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F60)
	S0= ICache.IEA=addr                                         Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr)                              ICache-Search(S0)
	S0= ICache.Out={6,rS,0,offset}                              ICache-Search(S0,S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F61)
	S0= ICacheReg.In={6,rS,0,offset}                            Path(S0,S0)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F62)
	S0= ICacheHitReg.In=ICacheHit(addr)                         Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F63)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F64)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F65)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={6,rS,0,offset}                                IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F66)
	S0= IRMux.MemData={6,rS,0,offset}                           Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F67)
	S0= IRMux.CacheData={6,rS,0,offset}                         Path(S0,S0)
	S0= IRMux.Out={6,rS,0,offset}                               IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F68)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F69)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F70)
	S0= IR.In={6,rS,0,offset}                                   Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F71)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F72)
	S0= IR.Out31_26=>CU.Op                                      Premise(F73)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F74)
	S0= IR.Out20_16=>GPR.RReg2                                  Premise(F75)
	S0= GPR.Rdata1=>A.In                                        Premise(F76)
	S0= GPR.Rdata2=>B.In                                        Premise(F77)
	S0= IR.Out15_0=>SEXT.In                                     Premise(F78)
	S0= PC.CIA=>ALU.A                                           Premise(F79)
	S0= SEXT.Out=>ALU.B                                         Premise(F80)
	S0= ALU.Out=>ALUOut.In                                      Premise(F81)
	S0= A.Out=>CMPU.A                                           Premise(F82)
	S0= B.Out=>CMPU.B                                           Premise(F83)
	S0= CMPU.gt=>ConditionReg.In                                Premise(F84)
	S0= ALUOut.Out=>PC.In                                       Premise(F85)
	S0= ConditionReg.Out=>CU.gt                                 Premise(F86)
	S0= CtrlASIDIn=0                                            Premise(F87)
	S0= CtrlCP0=0                                               Premise(F88)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F89)
	S0= CtrlExCodeIn=0                                          Premise(F90)
	S0= CtrlIMMU=0                                              Premise(F91)
	S0= CtrlPC=0                                                Premise(F92)
	S0= CtrlPCInc=1                                             Premise(F93)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F94)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F95)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F96)
	S0= ICache[addr]={6,rS,0,offset}                            ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F97)
	S0= [ICacheReg]={6,rS,0,offset}                             ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F98)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F99)
	S0= IMem[{pid,addr}]={6,rS,0,offset}                        IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F100)
	S0= CtrlIR=1                                                Premise(F101)
	S0= [IR]={6,rS,0,offset}                                    IR-Write(S0,S0)
	S0= CtrlGPR=0                                               Premise(F102)
	S0= GPR[rS]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F103)
	S0= CtrlB=0                                                 Premise(F104)
	S0= CtrlALUOut=0                                            Premise(F105)
	S0= CtrlConditionReg=0                                      Premise(F106)

ID	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={6,rS,0,offset}                           ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{6,rS,0,offset}}[1:0]                 ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{6,rS,0,offset}}[4:0]                 ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= IR.Out={6,rS,0,offset}                                  IR-Out(S0)
	S0= IR.Out31_26=6                                           IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=0                                           IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= CP0.ASID=>IMMU.PID                                      Premise(F107)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F108)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F109)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F110)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F111)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F112)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F113)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F114)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F115)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F116)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={6,rS,0,offset}                                IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F117)
	S0= IRMux.MemData={6,rS,0,offset}                           Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F118)
	S0= IRMux.CacheData={6,rS,0,offset}                         Path(S0,S0)
	S0= IRMux.Out={6,rS,0,offset}                               IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F119)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F120)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F121)
	S0= IR.In={6,rS,0,offset}                                   Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F122)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F123)
	S0= IR.Out31_26=>CU.Op                                      Premise(F124)
	S0= CU.Op=6                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F125)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>GPR.RReg2                                  Premise(F126)
	S0= GPR.RReg2=0                                             Path(S0,S0)
	S0= GPR.Rdata2=32'b0                                        GPR-ReadGPR0()
	S0= GPR.Rdata1=>A.In                                        Premise(F127)
	S0= A.In=a                                                  Path(S0,S0)
	S0= GPR.Rdata2=>B.In                                        Premise(F128)
	S0= B.In=32'b0                                              Path(S0,S0)
	S0= IR.Out15_0=>SEXT.In                                     Premise(F129)
	S0= SEXT.In=offset                                          Path(S0,S0)
	S0= SEXT.Out={14{offset[15]},offset,2{0}}                   SEXT(S0)
	S0= PC.CIA=>ALU.A                                           Premise(F130)
	S0= ALU.A=addr                                              Path(S0,S0)
	S0= SEXT.Out=>ALU.B                                         Premise(F131)
	S0= ALU.B={14{offset[15]},offset,2{0}}                      Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F132)
	S0= A.Out=>CMPU.A                                           Premise(F133)
	S0= B.Out=>CMPU.B                                           Premise(F134)
	S0= CMPU.gt=>ConditionReg.In                                Premise(F135)
	S0= ALUOut.Out=>PC.In                                       Premise(F136)
	S0= ConditionReg.Out=>CU.gt                                 Premise(F137)
	S0= CtrlASIDIn=0                                            Premise(F138)
	S0= CtrlCP0=0                                               Premise(F139)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F140)
	S0= CtrlExCodeIn=0                                          Premise(F141)
	S0= CtrlIMMU=0                                              Premise(F142)
	S0= CtrlPC=0                                                Premise(F143)
	S0= CtrlPCInc=0                                             Premise(F144)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F145)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F146)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F147)
	S0= ICache[addr]={6,rS,0,offset}                            ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F148)
	S0= [ICacheReg]={6,rS,0,offset}                             ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F149)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F150)
	S0= IMem[{pid,addr}]={6,rS,0,offset}                        IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F151)
	S0= CtrlIR=0                                                Premise(F152)
	S0= [IR]={6,rS,0,offset}                                    IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F153)
	S0= GPR[rS]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=1                                                 Premise(F154)
	S0= [A]=a                                                   A-Write(S0,S0)
	S0= CtrlB=1                                                 Premise(F155)
	S0= [B]=32'b0                                               B-Write(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F156)
	S0= CtrlConditionReg=0                                      Premise(F157)

EX	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={6,rS,0,offset}                           ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{6,rS,0,offset}}[1:0]                 ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{6,rS,0,offset}}[4:0]                 ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= IR.Out={6,rS,0,offset}                                  IR-Out(S0)
	S0= IR.Out31_26=6                                           IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=0                                           IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out=32'b0                                             B-Out(S0)
	S0= B.Out1_0={32'b0}[1:0]                                   B-Out(S0)
	S0= B.Out4_0={32'b0}[4:0]                                   B-Out(S0)
	S0= CP0.ASID=>IMMU.PID                                      Premise(F158)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F159)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F160)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F161)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F162)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F163)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F164)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F165)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F166)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F167)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={6,rS,0,offset}                                IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F168)
	S0= IRMux.MemData={6,rS,0,offset}                           Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F169)
	S0= IRMux.CacheData={6,rS,0,offset}                         Path(S0,S0)
	S0= IRMux.Out={6,rS,0,offset}                               IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F170)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F171)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F172)
	S0= IR.In={6,rS,0,offset}                                   Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F173)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F174)
	S0= IR.Out31_26=>CU.Op                                      Premise(F175)
	S0= CU.Op=6                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F176)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>GPR.RReg2                                  Premise(F177)
	S0= GPR.RReg2=0                                             Path(S0,S0)
	S0= GPR.Rdata2=32'b0                                        GPR-ReadGPR0()
	S0= GPR.Rdata1=>A.In                                        Premise(F178)
	S0= A.In=a                                                  Path(S0,S0)
	S0= GPR.Rdata2=>B.In                                        Premise(F179)
	S0= B.In=32'b0                                              Path(S0,S0)
	S0= IR.Out15_0=>SEXT.In                                     Premise(F180)
	S0= SEXT.In=offset                                          Path(S0,S0)
	S0= SEXT.Out={14{offset[15]},offset,2{0}}                   SEXT(S0)
	S0= PC.CIA=>ALU.A                                           Premise(F181)
	S0= ALU.A=addr                                              Path(S0,S0)
	S0= SEXT.Out=>ALU.B                                         Premise(F182)
	S0= ALU.B={14{offset[15]},offset,2{0}}                      Path(S0,S0)
	S0= ALU.Func=6'b010010                                      Premise(F183)
	S0= ALU.Out=addr+{14{offset[15]},offset,2{0}}               ALU(S0,S0)
	S0= ALU.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]     ALU(S0,S0)
	S0= ALU.CMP=Compare0(addr+{14{offset[15]},offset,2{0}})     ALU(S0,S0)
	S0= ALU.OV=OverFlow(addr+{14{offset[15]},offset,2{0}})      ALU(S0,S0)
	S0= ALU.CA=Carry(addr+{14{offset[15]},offset,2{0}})         ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F184)
	S0= ALUOut.In=addr+{14{offset[15]},offset,2{0}}             Path(S0,S0)
	S0= A.Out=>CMPU.A                                           Premise(F185)
	S0= CMPU.A=a                                                Path(S0,S0)
	S0= B.Out=>CMPU.B                                           Premise(F186)
	S0= CMPU.B=32'b0                                            Path(S0,S0)
	S0= CMPU.Func=6'b000011                                     Premise(F187)
	S0= CMPU.Out=CompareS(a,32'b0)                              CMPU-CMPS(S0,S0)
	S0= CMPU.zero=CompareS(a,32'b0)                             CMPU-CMPS(S0,S0)
	S0= CMPU.gt=CompareS(a,32'b0)                               CMPU-CMPS(S0,S0)
	S0= CMPU.lt=CompareS(a,32'b0)                               CMPU-CMPS(S0,S0)
	S0= CMPU.gt=>ConditionReg.In                                Premise(F188)
	S0= ConditionReg.In=CompareS(a,32'b0)                       Path(S0,S0)
	S0= ALUOut.Out=>PC.In                                       Premise(F189)
	S0= ConditionReg.Out=>CU.gt                                 Premise(F190)
	S0= CtrlASIDIn=0                                            Premise(F191)
	S0= CtrlCP0=0                                               Premise(F192)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F193)
	S0= CtrlExCodeIn=0                                          Premise(F194)
	S0= CtrlIMMU=0                                              Premise(F195)
	S0= CtrlPC=0                                                Premise(F196)
	S0= CtrlPCInc=0                                             Premise(F197)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F198)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F199)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F200)
	S0= ICache[addr]={6,rS,0,offset}                            ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F201)
	S0= [ICacheReg]={6,rS,0,offset}                             ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F202)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F203)
	S0= IMem[{pid,addr}]={6,rS,0,offset}                        IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F204)
	S0= CtrlIR=0                                                Premise(F205)
	S0= [IR]={6,rS,0,offset}                                    IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F206)
	S0= GPR[rS]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F207)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F208)
	S0= [B]=32'b0                                               B-Hold(S0,S0)
	S0= CtrlALUOut=1                                            Premise(F209)
	S0= [ALUOut]=addr+{14{offset[15]},offset,2{0}}              ALUOut-Write(S0,S0)
	S0= CtrlConditionReg=1                                      Premise(F210)
	S0= [ConditionReg]=CompareS(a,32'b0)                        ConditionReg-Write(S0,S0)

MEM	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={6,rS,0,offset}                           ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{6,rS,0,offset}}[1:0]                 ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{6,rS,0,offset}}[4:0]                 ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= IR.Out={6,rS,0,offset}                                  IR-Out(S0)
	S0= IR.Out31_26=6                                           IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=0                                           IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out=32'b0                                             B-Out(S0)
	S0= B.Out1_0={32'b0}[1:0]                                   B-Out(S0)
	S0= B.Out4_0={32'b0}[4:0]                                   B-Out(S0)
	S0= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}            ALUOut-Out(S0)
	S0= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]  ALUOut-Out(S0)
	S0= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]  ALUOut-Out(S0)
	S0= ConditionReg.Out=CompareS(a,32'b0)                      ConditionReg-Out(S0)
	S0= ConditionReg.Out1_0={CompareS(a,32'b0)}[1:0]            ConditionReg-Out(S0)
	S0= ConditionReg.Out4_0={CompareS(a,32'b0)}[4:0]            ConditionReg-Out(S0)
	S0= CP0.ASID=>IMMU.PID                                      Premise(F211)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F212)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F213)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F214)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F215)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F216)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F217)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F218)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F219)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F220)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={6,rS,0,offset}                                IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F221)
	S0= IRMux.MemData={6,rS,0,offset}                           Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F222)
	S0= IRMux.CacheData={6,rS,0,offset}                         Path(S0,S0)
	S0= IRMux.Out={6,rS,0,offset}                               IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F223)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F224)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F225)
	S0= IR.In={6,rS,0,offset}                                   Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F226)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F227)
	S0= IR.Out31_26=>CU.Op                                      Premise(F228)
	S0= CU.Op=6                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F229)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>GPR.RReg2                                  Premise(F230)
	S0= GPR.RReg2=0                                             Path(S0,S0)
	S0= GPR.Rdata2=32'b0                                        GPR-ReadGPR0()
	S0= GPR.Rdata1=>A.In                                        Premise(F231)
	S0= A.In=a                                                  Path(S0,S0)
	S0= GPR.Rdata2=>B.In                                        Premise(F232)
	S0= B.In=32'b0                                              Path(S0,S0)
	S0= IR.Out15_0=>SEXT.In                                     Premise(F233)
	S0= SEXT.In=offset                                          Path(S0,S0)
	S0= SEXT.Out={14{offset[15]},offset,2{0}}                   SEXT(S0)
	S0= PC.CIA=>ALU.A                                           Premise(F234)
	S0= ALU.A=addr                                              Path(S0,S0)
	S0= SEXT.Out=>ALU.B                                         Premise(F235)
	S0= ALU.B={14{offset[15]},offset,2{0}}                      Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F236)
	S0= A.Out=>CMPU.A                                           Premise(F237)
	S0= CMPU.A=a                                                Path(S0,S0)
	S0= B.Out=>CMPU.B                                           Premise(F238)
	S0= CMPU.B=32'b0                                            Path(S0,S0)
	S0= CMPU.gt=>ConditionReg.In                                Premise(F239)
	S0= ALUOut.Out=>PC.In                                       Premise(F240)
	S0= PC.In=addr+{14{offset[15]},offset,2{0}}                 Path(S0,S0)
	S0= ConditionReg.Out=>CU.gt                                 Premise(F241)
	S0= CU.gt=CompareS(a,32'b0)                                 Path(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F242)
	S0= CtrlCP0=0                                               Premise(F243)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F244)
	S0= CtrlExCodeIn=0                                          Premise(F245)
	S0= CtrlIMMU=0                                              Premise(F246)
	S0= CtrlPC=1                                                Premise(F247)
	S0= CtrlPCInc=0                                             Premise(F248)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+{14{offset[15]},offset,2{0}}               PC-Write(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F249)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F250)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F251)
	S0= ICache[addr]={6,rS,0,offset}                            ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F252)
	S0= [ICacheReg]={6,rS,0,offset}                             ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F253)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F254)
	S0= IMem[{pid,addr}]={6,rS,0,offset}                        IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F255)
	S0= CtrlIR=0                                                Premise(F256)
	S0= [IR]={6,rS,0,offset}                                    IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F257)
	S0= GPR[rS]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F258)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F259)
	S0= [B]=32'b0                                               B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F260)
	S0= [ALUOut]=addr+{14{offset[15]},offset,2{0}}              ALUOut-Hold(S0,S0)
	S0= CtrlConditionReg=0                                      Premise(F261)
	S0= [ConditionReg]=CompareS(a,32'b0)                        ConditionReg-Hold(S0,S0)

DMMU1	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+{14{offset[15]},offset,2{0}}                PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={6,rS,0,offset}                           ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{6,rS,0,offset}}[1:0]                 ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{6,rS,0,offset}}[4:0]                 ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= IR.Out={6,rS,0,offset}                                  IR-Out(S0)
	S0= IR.Out31_26=6                                           IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=0                                           IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out=32'b0                                             B-Out(S0)
	S0= B.Out1_0={32'b0}[1:0]                                   B-Out(S0)
	S0= B.Out4_0={32'b0}[4:0]                                   B-Out(S0)
	S0= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}            ALUOut-Out(S0)
	S0= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]  ALUOut-Out(S0)
	S0= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]  ALUOut-Out(S0)
	S0= ConditionReg.Out=CompareS(a,32'b0)                      ConditionReg-Out(S0)
	S0= ConditionReg.Out1_0={CompareS(a,32'b0)}[1:0]            ConditionReg-Out(S0)
	S0= ConditionReg.Out4_0={CompareS(a,32'b0)}[4:0]            ConditionReg-Out(S0)
	S0= CP0.ASID=>IMMU.PID                                      Premise(F262)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F263)
	S0= IMMU.IEA=addr+{14{offset[15]},offset,2{0}}              Path(S0,S0)
	S0= IMMU.Addr={pid,addr+{14{offset[15]},offset,2{0}}}       IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+{14{offset[15]},offset,2{0}}) IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F264)
	S0= IAddrReg.In={pid,addr+{14{offset[15]},offset,2{0}}}     Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F265)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+{14{offset[15]},offset,2{0}})Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F266)
	S0= ICache.IEA=addr+{14{offset[15]},offset,2{0}}            Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+{14{offset[15]},offset,2{0}}) ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F267)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F268)
	S0= ICacheHitReg.In=ICacheHit(addr+{14{offset[15]},offset,2{0}})Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F269)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F270)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F271)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={6,rS,0,offset}                                IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F272)
	S0= IRMux.MemData={6,rS,0,offset}                           Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F273)
	S0= IRMux.CacheData={6,rS,0,offset}                         Path(S0,S0)
	S0= IRMux.Out={6,rS,0,offset}                               IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F274)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F275)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F276)
	S0= IR.In={6,rS,0,offset}                                   Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F277)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F278)
	S0= IR.Out31_26=>CU.Op                                      Premise(F279)
	S0= CU.Op=6                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F280)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>GPR.RReg2                                  Premise(F281)
	S0= GPR.RReg2=0                                             Path(S0,S0)
	S0= GPR.Rdata2=32'b0                                        GPR-ReadGPR0()
	S0= GPR.Rdata1=>A.In                                        Premise(F282)
	S0= A.In=a                                                  Path(S0,S0)
	S0= GPR.Rdata2=>B.In                                        Premise(F283)
	S0= B.In=32'b0                                              Path(S0,S0)
	S0= IR.Out15_0=>SEXT.In                                     Premise(F284)
	S0= SEXT.In=offset                                          Path(S0,S0)
	S0= SEXT.Out={14{offset[15]},offset,2{0}}                   SEXT(S0)
	S0= PC.CIA=>ALU.A                                           Premise(F285)
	S0= ALU.A=addr                                              Path(S0,S0)
	S0= SEXT.Out=>ALU.B                                         Premise(F286)
	S0= ALU.B={14{offset[15]},offset,2{0}}                      Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F287)
	S0= A.Out=>CMPU.A                                           Premise(F288)
	S0= CMPU.A=a                                                Path(S0,S0)
	S0= B.Out=>CMPU.B                                           Premise(F289)
	S0= CMPU.B=32'b0                                            Path(S0,S0)
	S0= CMPU.gt=>ConditionReg.In                                Premise(F290)
	S0= ALUOut.Out=>PC.In                                       Premise(F291)
	S0= PC.In=addr+{14{offset[15]},offset,2{0}}                 Path(S0,S0)
	S0= ConditionReg.Out=>CU.gt                                 Premise(F292)
	S0= CU.gt=CompareS(a,32'b0)                                 Path(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F293)
	S0= CtrlCP0=0                                               Premise(F294)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F295)
	S0= CtrlExCodeIn=0                                          Premise(F296)
	S0= CtrlIMMU=0                                              Premise(F297)
	S0= CtrlPC=0                                                Premise(F298)
	S0= CtrlPCInc=0                                             Premise(F299)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+{14{offset[15]},offset,2{0}}               PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F300)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F301)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F302)
	S0= ICache[addr]={6,rS,0,offset}                            ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F303)
	S0= [ICacheReg]={6,rS,0,offset}                             ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F304)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F305)
	S0= IMem[{pid,addr}]={6,rS,0,offset}                        IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F306)
	S0= CtrlIR=0                                                Premise(F307)
	S0= [IR]={6,rS,0,offset}                                    IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F308)
	S0= GPR[rS]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F309)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F310)
	S0= [B]=32'b0                                               B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F311)
	S0= [ALUOut]=addr+{14{offset[15]},offset,2{0}}              ALUOut-Hold(S0,S0)
	S0= CtrlConditionReg=0                                      Premise(F312)
	S0= [ConditionReg]=CompareS(a,32'b0)                        ConditionReg-Hold(S0,S0)

DMMU2	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+{14{offset[15]},offset,2{0}}                PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={6,rS,0,offset}                           ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{6,rS,0,offset}}[1:0]                 ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{6,rS,0,offset}}[4:0]                 ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= IR.Out={6,rS,0,offset}                                  IR-Out(S0)
	S0= IR.Out31_26=6                                           IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=0                                           IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out=32'b0                                             B-Out(S0)
	S0= B.Out1_0={32'b0}[1:0]                                   B-Out(S0)
	S0= B.Out4_0={32'b0}[4:0]                                   B-Out(S0)
	S0= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}            ALUOut-Out(S0)
	S0= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]  ALUOut-Out(S0)
	S0= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]  ALUOut-Out(S0)
	S0= ConditionReg.Out=CompareS(a,32'b0)                      ConditionReg-Out(S0)
	S0= ConditionReg.Out1_0={CompareS(a,32'b0)}[1:0]            ConditionReg-Out(S0)
	S0= ConditionReg.Out4_0={CompareS(a,32'b0)}[4:0]            ConditionReg-Out(S0)
	S0= CP0.ASID=>IMMU.PID                                      Premise(F313)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F314)
	S0= IMMU.IEA=addr+{14{offset[15]},offset,2{0}}              Path(S0,S0)
	S0= IMMU.Addr={pid,addr+{14{offset[15]},offset,2{0}}}       IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+{14{offset[15]},offset,2{0}}) IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F315)
	S0= IAddrReg.In={pid,addr+{14{offset[15]},offset,2{0}}}     Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F316)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+{14{offset[15]},offset,2{0}})Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F317)
	S0= ICache.IEA=addr+{14{offset[15]},offset,2{0}}            Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+{14{offset[15]},offset,2{0}}) ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F318)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F319)
	S0= ICacheHitReg.In=ICacheHit(addr+{14{offset[15]},offset,2{0}})Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F320)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F321)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F322)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={6,rS,0,offset}                                IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F323)
	S0= IRMux.MemData={6,rS,0,offset}                           Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F324)
	S0= IRMux.CacheData={6,rS,0,offset}                         Path(S0,S0)
	S0= IRMux.Out={6,rS,0,offset}                               IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F325)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F326)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F327)
	S0= IR.In={6,rS,0,offset}                                   Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F328)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F329)
	S0= IR.Out31_26=>CU.Op                                      Premise(F330)
	S0= CU.Op=6                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F331)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>GPR.RReg2                                  Premise(F332)
	S0= GPR.RReg2=0                                             Path(S0,S0)
	S0= GPR.Rdata2=32'b0                                        GPR-ReadGPR0()
	S0= GPR.Rdata1=>A.In                                        Premise(F333)
	S0= A.In=a                                                  Path(S0,S0)
	S0= GPR.Rdata2=>B.In                                        Premise(F334)
	S0= B.In=32'b0                                              Path(S0,S0)
	S0= IR.Out15_0=>SEXT.In                                     Premise(F335)
	S0= SEXT.In=offset                                          Path(S0,S0)
	S0= SEXT.Out={14{offset[15]},offset,2{0}}                   SEXT(S0)
	S0= PC.CIA=>ALU.A                                           Premise(F336)
	S0= ALU.A=addr                                              Path(S0,S0)
	S0= SEXT.Out=>ALU.B                                         Premise(F337)
	S0= ALU.B={14{offset[15]},offset,2{0}}                      Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F338)
	S0= A.Out=>CMPU.A                                           Premise(F339)
	S0= CMPU.A=a                                                Path(S0,S0)
	S0= B.Out=>CMPU.B                                           Premise(F340)
	S0= CMPU.B=32'b0                                            Path(S0,S0)
	S0= CMPU.gt=>ConditionReg.In                                Premise(F341)
	S0= ALUOut.Out=>PC.In                                       Premise(F342)
	S0= PC.In=addr+{14{offset[15]},offset,2{0}}                 Path(S0,S0)
	S0= ConditionReg.Out=>CU.gt                                 Premise(F343)
	S0= CU.gt=CompareS(a,32'b0)                                 Path(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F344)
	S0= CtrlCP0=0                                               Premise(F345)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F346)
	S0= CtrlExCodeIn=0                                          Premise(F347)
	S0= CtrlIMMU=0                                              Premise(F348)
	S0= CtrlPC=0                                                Premise(F349)
	S0= CtrlPCInc=0                                             Premise(F350)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+{14{offset[15]},offset,2{0}}               PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F351)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F352)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F353)
	S0= ICache[addr]={6,rS,0,offset}                            ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F354)
	S0= [ICacheReg]={6,rS,0,offset}                             ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F355)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F356)
	S0= IMem[{pid,addr}]={6,rS,0,offset}                        IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F357)
	S0= CtrlIR=0                                                Premise(F358)
	S0= [IR]={6,rS,0,offset}                                    IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F359)
	S0= GPR[rS]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F360)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F361)
	S0= [B]=32'b0                                               B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F362)
	S0= [ALUOut]=addr+{14{offset[15]},offset,2{0}}              ALUOut-Hold(S0,S0)
	S0= CtrlConditionReg=0                                      Premise(F363)
	S0= [ConditionReg]=CompareS(a,32'b0)                        ConditionReg-Hold(S0,S0)

WB	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+{14{offset[15]},offset,2{0}}                PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={6,rS,0,offset}                           ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{6,rS,0,offset}}[1:0]                 ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{6,rS,0,offset}}[4:0]                 ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= IR.Out={6,rS,0,offset}                                  IR-Out(S0)
	S0= IR.Out31_26=6                                           IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=0                                           IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out=32'b0                                             B-Out(S0)
	S0= B.Out1_0={32'b0}[1:0]                                   B-Out(S0)
	S0= B.Out4_0={32'b0}[4:0]                                   B-Out(S0)
	S0= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}            ALUOut-Out(S0)
	S0= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]  ALUOut-Out(S0)
	S0= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]  ALUOut-Out(S0)
	S0= ConditionReg.Out=CompareS(a,32'b0)                      ConditionReg-Out(S0)
	S0= ConditionReg.Out1_0={CompareS(a,32'b0)}[1:0]            ConditionReg-Out(S0)
	S0= ConditionReg.Out4_0={CompareS(a,32'b0)}[4:0]            ConditionReg-Out(S0)
	S0= CP0.ASID=>IMMU.PID                                      Premise(F364)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F365)
	S0= IMMU.IEA=addr+{14{offset[15]},offset,2{0}}              Path(S0,S0)
	S0= IMMU.Addr={pid,addr+{14{offset[15]},offset,2{0}}}       IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+{14{offset[15]},offset,2{0}}) IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F366)
	S0= IAddrReg.In={pid,addr+{14{offset[15]},offset,2{0}}}     Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F367)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+{14{offset[15]},offset,2{0}})Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F368)
	S0= ICache.IEA=addr+{14{offset[15]},offset,2{0}}            Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+{14{offset[15]},offset,2{0}}) ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F369)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F370)
	S0= ICacheHitReg.In=ICacheHit(addr+{14{offset[15]},offset,2{0}})Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F371)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F372)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F373)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={6,rS,0,offset}                                IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F374)
	S0= IRMux.MemData={6,rS,0,offset}                           Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F375)
	S0= IRMux.CacheData={6,rS,0,offset}                         Path(S0,S0)
	S0= IRMux.Out={6,rS,0,offset}                               IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F376)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F377)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F378)
	S0= IR.In={6,rS,0,offset}                                   Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F379)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F380)
	S0= IR.Out31_26=>CU.Op                                      Premise(F381)
	S0= CU.Op=6                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F382)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>GPR.RReg2                                  Premise(F383)
	S0= GPR.RReg2=0                                             Path(S0,S0)
	S0= GPR.Rdata2=32'b0                                        GPR-ReadGPR0()
	S0= GPR.Rdata1=>A.In                                        Premise(F384)
	S0= A.In=a                                                  Path(S0,S0)
	S0= GPR.Rdata2=>B.In                                        Premise(F385)
	S0= B.In=32'b0                                              Path(S0,S0)
	S0= IR.Out15_0=>SEXT.In                                     Premise(F386)
	S0= SEXT.In=offset                                          Path(S0,S0)
	S0= SEXT.Out={14{offset[15]},offset,2{0}}                   SEXT(S0)
	S0= PC.CIA=>ALU.A                                           Premise(F387)
	S0= ALU.A=addr                                              Path(S0,S0)
	S0= SEXT.Out=>ALU.B                                         Premise(F388)
	S0= ALU.B={14{offset[15]},offset,2{0}}                      Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F389)
	S0= A.Out=>CMPU.A                                           Premise(F390)
	S0= CMPU.A=a                                                Path(S0,S0)
	S0= B.Out=>CMPU.B                                           Premise(F391)
	S0= CMPU.B=32'b0                                            Path(S0,S0)
	S0= CMPU.gt=>ConditionReg.In                                Premise(F392)
	S0= ALUOut.Out=>PC.In                                       Premise(F393)
	S0= PC.In=addr+{14{offset[15]},offset,2{0}}                 Path(S0,S0)
	S0= ConditionReg.Out=>CU.gt                                 Premise(F394)
	S0= CU.gt=CompareS(a,32'b0)                                 Path(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F395)
	S0= CtrlCP0=0                                               Premise(F396)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F397)
	S0= CtrlExCodeIn=0                                          Premise(F398)
	S0= CtrlIMMU=0                                              Premise(F399)
	S0= CtrlPC=0                                                Premise(F400)
	S0= CtrlPCInc=0                                             Premise(F401)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+{14{offset[15]},offset,2{0}}               PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F402)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F403)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F404)
	S0= ICache[addr]={6,rS,0,offset}                            ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F405)
	S0= [ICacheReg]={6,rS,0,offset}                             ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F406)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F407)
	S0= IMem[{pid,addr}]={6,rS,0,offset}                        IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F408)
	S0= CtrlIR=0                                                Premise(F409)
	S0= [IR]={6,rS,0,offset}                                    IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F410)
	S0= GPR[rS]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F411)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F412)
	S0= [B]=32'b0                                               B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F413)
	S0= [ALUOut]=addr+{14{offset[15]},offset,2{0}}              ALUOut-Hold(S0,S0)
	S0= CtrlConditionReg=0                                      Premise(F414)
	S0= [ConditionReg]=CompareS(a,32'b0)                        ConditionReg-Hold(S0,S0)

POST	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+{14{offset[15]},offset,2{0}}               PC-Hold(S0,S0,S0)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= ICache[addr]={6,rS,0,offset}                            ICache-Hold(S0,S0)
	S0= [ICacheReg]={6,rS,0,offset}                             ICacheReg-Hold(S0,S0)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= IMem[{pid,addr}]={6,rS,0,offset}                        IMem-Hold(S0,S0)
	S0= [IR]={6,rS,0,offset}                                    IR-Hold(S0,S0)
	S0= GPR[rS]=a                                               GPR-Hold(S0,S0)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= [B]=32'b0                                               B-Hold(S0,S0)
	S0= [ALUOut]=addr+{14{offset[15]},offset,2{0}}              ALUOut-Hold(S0,S0)
	S0= [ConditionReg]=CompareS(a,32'b0)                        ConditionReg-Hold(S0,S0)

