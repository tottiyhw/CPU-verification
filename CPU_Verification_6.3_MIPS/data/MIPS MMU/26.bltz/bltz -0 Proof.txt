
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rS,0,offset}                        Premise(F2)
	S3= ICache[addr]={1,rS,0,offset}                            Premise(F3)
	S4= GPR[rS]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={1,rS,0,offset}                             ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={1,rS,0,offset}                           Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F41)
	S20= CtrlPCInc=0                                            Premise(F42)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F43)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F46)
	S25= [ICacheReg]={1,rS,0,offset}                            ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F48)
	S27= IMem[{pid,addr}]={1,rS,0,offset}                       IMem-Hold(S2,S26)
	S28= CtrlGPR=0                                              Premise(F51)
	S29= GPR[rS]=a                                              GPR-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={1,rS,0,offset}                          ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F65)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={1,rS,0,offset}                               IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F66)
	S36= IRMux.MemData={1,rS,0,offset}                          Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F67)
	S38= IRMux.CacheData={1,rS,0,offset}                        Path(S31,S37)
	S39= IRMux.Out={1,rS,0,offset}                              IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F70)
	S41= IR.In={1,rS,0,offset}                                  Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F92)
	S43= CtrlPCInc=1                                            Premise(F93)
	S44= PC[CIA]=addr                                           PC-Inc(S21,S42,S43)
	S45= CtrlIR=1                                               Premise(F101)
	S46= [IR]={1,rS,0,offset}                                   IR-Write(S41,S45)
	S47= CtrlGPR=0                                              Premise(F102)
	S48= GPR[rS]=a                                              GPR-Hold(S29,S47)

ID	S49= IR.Out25_21=rS                                         IR-Out(S46)
	S50= IR.Out25_21=>GPR.RReg1                                 Premise(F125)
	S51= GPR.RReg1=rS                                           Path(S49,S50)
	S52= GPR.Rdata1=a                                           GPR-Read(S51,S48)
	S53= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S54= GPR.Rdata1=>A.In                                       Premise(F127)
	S55= A.In=a                                                 Path(S52,S54)
	S56= GPR.Rdata2=>B.In                                       Premise(F128)
	S57= B.In=32'b0                                             Path(S53,S56)
	S58= CtrlPCInc=0                                            Premise(F144)
	S59= PC[CIA]=addr                                           PC-Hold(S44,S58)
	S60= CtrlIR=0                                               Premise(F152)
	S61= [IR]={1,rS,0,offset}                                   IR-Hold(S46,S60)
	S62= CtrlA=1                                                Premise(F154)
	S63= [A]=a                                                  A-Write(S55,S62)
	S64= CtrlB=1                                                Premise(F155)
	S65= [B]=32'b0                                              B-Write(S57,S64)

EX	S66= PC.CIA=addr                                            PC-Out(S59)
	S67= IR.Out15_0=offset                                      IR-Out(S61)
	S68= A.Out=a                                                A-Out(S63)
	S69= B.Out=32'b0                                            B-Out(S65)
	S70= IR.Out15_0=>SEXT.In                                    Premise(F180)
	S71= SEXT.In=offset                                         Path(S67,S70)
	S72= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S71)
	S73= PC.CIA=>ALU.A                                          Premise(F181)
	S74= ALU.A=addr                                             Path(S66,S73)
	S75= SEXT.Out=>ALU.B                                        Premise(F182)
	S76= ALU.B={14{offset[15]},offset,2{0}}                     Path(S72,S75)
	S77= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S74,S76)
	S78= ALU.Out=>ALUOut.In                                     Premise(F184)
	S79= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S77,S78)
	S80= A.Out=>CMPU.A                                          Premise(F185)
	S81= CMPU.A=a                                               Path(S68,S80)
	S82= B.Out=>CMPU.B                                          Premise(F186)
	S83= CMPU.B=32'b0                                           Path(S69,S82)
	S84= CMPU.lt=CompareS(a,32'b0)                              CMPU-CMPS(S81,S83)
	S85= CMPU.lt=>ConditionReg.In                               Premise(F188)
	S86= ConditionReg.In=CompareS(a,32'b0)                      Path(S84,S85)
	S87= CtrlALUOut=1                                           Premise(F209)
	S88= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S79,S87)
	S89= CtrlConditionReg=1                                     Premise(F210)
	S90= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Write(S86,S89)

MEM	S91= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S88)
	S92= ALUOut.Out=>PC.In                                      Premise(F240)
	S93= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S91,S92)
	S94= CtrlPC=1                                               Premise(F247)
	S95= CtrlPCInc=0                                            Premise(F248)
	S96= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S93,S94,S95)
	S97= CtrlConditionReg=0                                     Premise(F261)
	S98= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S90,S97)

DMMU1	S99= CtrlPC=0                                               Premise(F298)
	S100= CtrlPCInc=0                                           Premise(F299)
	S101= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S96,S99,S100)
	S102= CtrlConditionReg=0                                    Premise(F312)
	S103= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S98,S102)

DMMU2	S104= CtrlPC=0                                              Premise(F349)
	S105= CtrlPCInc=0                                           Premise(F350)
	S106= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S101,S104,S105)
	S107= CtrlConditionReg=0                                    Premise(F363)
	S108= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S103,S107)

WB	S109= CtrlPC=0                                              Premise(F400)
	S110= CtrlPCInc=0                                           Premise(F401)
	S111= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S106,S109,S110)
	S112= CtrlConditionReg=0                                    Premise(F414)
	S113= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S108,S112)

POST	S111= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S106,S109,S110)
	S113= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S108,S112)

