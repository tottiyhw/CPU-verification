
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rS,16,offset}                       Premise(F2)
	S3= ICache[addr]={1,rS,16,offset}                           Premise(F3)
	S4= GPR[rS]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={1,rS,16,offset}                            ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={1,rS,16,offset}                          Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F42)
	S20= CtrlPCInc=0                                            Premise(F43)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F44)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F47)
	S25= [ICacheReg]={1,rS,16,offset}                           ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F49)
	S27= IMem[{pid,addr}]={1,rS,16,offset}                      IMem-Hold(S2,S26)
	S28= CtrlGPR=0                                              Premise(F52)
	S29= GPR[rS]=a                                              GPR-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={1,rS,16,offset}                         ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F66)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={1,rS,16,offset}                              IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F67)
	S36= IRMux.MemData={1,rS,16,offset}                         Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F68)
	S38= IRMux.CacheData={1,rS,16,offset}                       Path(S31,S37)
	S39= IRMux.Out={1,rS,16,offset}                             IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F71)
	S41= IR.In={1,rS,16,offset}                                 Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F94)
	S43= CtrlPCInc=1                                            Premise(F95)
	S44= PC[Out]=addr+4                                         PC-Inc(S21,S42,S43)
	S45= PC[CIA]=addr                                           PC-Inc(S21,S42,S43)
	S46= CtrlIR=1                                               Premise(F103)
	S47= [IR]={1,rS,16,offset}                                  IR-Write(S41,S46)
	S48= CtrlGPR=0                                              Premise(F104)
	S49= GPR[rS]=a                                              GPR-Hold(S29,S48)

ID	S50= IR.Out25_21=rS                                         IR-Out(S47)
	S51= IR.Out25_21=>GPR.RReg1                                 Premise(F127)
	S52= GPR.RReg1=rS                                           Path(S50,S51)
	S53= GPR.Rdata1=a                                           GPR-Read(S52,S49)
	S54= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S55= GPR.Rdata1=>A.In                                       Premise(F129)
	S56= A.In=a                                                 Path(S53,S55)
	S57= GPR.Rdata2=>B.In                                       Premise(F130)
	S58= B.In=32'b0                                             Path(S54,S57)
	S59= CtrlPC=0                                               Premise(F146)
	S60= CtrlPCInc=0                                            Premise(F147)
	S61= PC[CIA]=addr                                           PC-Hold(S45,S60)
	S62= PC[Out]=addr+4                                         PC-Hold(S44,S59,S60)
	S63= CtrlIR=0                                               Premise(F155)
	S64= [IR]={1,rS,16,offset}                                  IR-Hold(S47,S63)
	S65= CtrlA=1                                                Premise(F157)
	S66= [A]=a                                                  A-Write(S56,S65)
	S67= CtrlB=1                                                Premise(F158)
	S68= [B]=32'b0                                              B-Write(S58,S67)

EX	S69= PC.CIA=addr                                            PC-Out(S61)
	S70= PC.Out=addr+4                                          PC-Out(S62)
	S71= IR.Out15_0=offset                                      IR-Out(S64)
	S72= A.Out=a                                                A-Out(S66)
	S73= B.Out=32'b0                                            B-Out(S68)
	S74= IR.Out15_0=>SEXT.In                                    Premise(F183)
	S75= SEXT.In=offset                                         Path(S71,S74)
	S76= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S75)
	S77= PC.CIA=>ALU.A                                          Premise(F184)
	S78= ALU.A=addr                                             Path(S69,S77)
	S79= SEXT.Out=>ALU.B                                        Premise(F185)
	S80= ALU.B={14{offset[15]},offset,2{0}}                     Path(S76,S79)
	S81= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S78,S80)
	S82= ALU.Out=>ALUOut.In                                     Premise(F187)
	S83= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S81,S82)
	S84= A.Out=>CMPU.A                                          Premise(F188)
	S85= CMPU.A=a                                               Path(S72,S84)
	S86= B.Out=>CMPU.B                                          Premise(F189)
	S87= CMPU.B=32'b0                                           Path(S73,S86)
	S88= CMPU.lt=CompareS(a,32'b0)                              CMPU-CMPS(S85,S87)
	S89= CMPU.lt=>ConditionReg.In                               Premise(F191)
	S90= ConditionReg.In=CompareS(a,32'b0)                      Path(S88,S89)
	S91= GPR.WReg=5'd31                                         Premise(F192)
	S92= PC.Out=>GPR.WData                                      Premise(F193)
	S93= GPR.WData=addr+4                                       Path(S70,S92)
	S94= CtrlGPR=1                                              Premise(F211)
	S95= GPR[5'd31]=addr+4                                      GPR-Write(S91,S93,S94)
	S96= CtrlALUOut=1                                           Premise(F214)
	S97= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S83,S96)
	S98= CtrlConditionReg=1                                     Premise(F215)
	S99= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Write(S90,S98)

MEM	S100= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}          ALUOut-Out(S97)
	S101= ALUOut.Out=>PC.In                                     Premise(F246)
	S102= PC.In=addr+{14{offset[15]},offset,2{0}}               Path(S100,S101)
	S103= CtrlPC=1                                              Premise(F253)
	S104= CtrlPCInc=0                                           Premise(F254)
	S105= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Write(S102,S103,S104)
	S106= CtrlGPR=0                                             Premise(F263)
	S107= GPR[5'd31]=addr+4                                     GPR-Hold(S95,S106)
	S108= CtrlConditionReg=0                                    Premise(F267)
	S109= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S99,S108)

DMMU1	S110= CtrlPC=0                                              Premise(F305)
	S111= CtrlPCInc=0                                           Premise(F306)
	S112= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S105,S110,S111)
	S113= CtrlGPR=0                                             Premise(F315)
	S114= GPR[5'd31]=addr+4                                     GPR-Hold(S107,S113)
	S115= CtrlConditionReg=0                                    Premise(F319)
	S116= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S109,S115)

DMMU2	S117= CtrlPC=0                                              Premise(F357)
	S118= CtrlPCInc=0                                           Premise(F358)
	S119= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S112,S117,S118)
	S120= CtrlGPR=0                                             Premise(F367)
	S121= GPR[5'd31]=addr+4                                     GPR-Hold(S114,S120)
	S122= CtrlConditionReg=0                                    Premise(F371)
	S123= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S116,S122)

WB	S124= CtrlPC=0                                              Premise(F409)
	S125= CtrlPCInc=0                                           Premise(F410)
	S126= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S119,S124,S125)
	S127= CtrlGPR=0                                             Premise(F419)
	S128= GPR[5'd31]=addr+4                                     GPR-Hold(S121,S127)
	S129= CtrlConditionReg=0                                    Premise(F423)
	S130= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S123,S129)

POST	S126= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S119,S124,S125)
	S128= GPR[5'd31]=addr+4                                     GPR-Hold(S121,S127)
	S130= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S123,S129)

