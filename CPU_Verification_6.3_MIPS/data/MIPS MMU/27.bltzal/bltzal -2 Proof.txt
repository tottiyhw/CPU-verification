
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rS,16,offset}                       Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F41)
	S14= CtrlPCInc=0                                            Premise(F42)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F43)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F48)
	S19= IMem[{pid,addr}]={1,rS,16,offset}                      IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F51)
	S21= GPR[rS]=a                                              GPR-Hold(S3,S20)

IMMU	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= PC.Out=>ICache.IEA                                     Premise(F60)
	S25= ICache.IEA=addr                                        Path(S22,S24)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F65)
	S27= IMem.RAddr={pid,addr}                                  Path(S23,S26)
	S28= IMem.Out={1,rS,16,offset}                              IMem-Read(S27,S19)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S19)
	S30= IMem.Out=>IRMux.MemData                                Premise(F66)
	S31= IRMux.MemData={1,rS,16,offset}                         Path(S28,S30)
	S32= IRMux.Out={1,rS,16,offset}                             IRMux-Select(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F70)
	S34= IR.In={1,rS,16,offset}                                 Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F71)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= CtrlPC=0                                               Premise(F93)
	S38= CtrlPCInc=1                                            Premise(F94)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= PC[CIA]=addr                                           PC-Inc(S15,S37,S38)
	S41= CtrlICache=1                                           Premise(F97)
	S42= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S36,S41)
	S43= CtrlIR=1                                               Premise(F102)
	S44= [IR]={1,rS,16,offset}                                  IR-Write(S34,S43)
	S45= CtrlGPR=0                                              Premise(F103)
	S46= GPR[rS]=a                                              GPR-Hold(S21,S45)

ID	S47= IR.Out25_21=rS                                         IR-Out(S44)
	S48= IR.Out25_21=>GPR.RReg1                                 Premise(F126)
	S49= GPR.RReg1=rS                                           Path(S47,S48)
	S50= GPR.Rdata1=a                                           GPR-Read(S49,S46)
	S51= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S52= GPR.Rdata1=>A.In                                       Premise(F128)
	S53= A.In=a                                                 Path(S50,S52)
	S54= GPR.Rdata2=>B.In                                       Premise(F129)
	S55= B.In=32'b0                                             Path(S51,S54)
	S56= CtrlPC=0                                               Premise(F145)
	S57= CtrlPCInc=0                                            Premise(F146)
	S58= PC[CIA]=addr                                           PC-Hold(S40,S57)
	S59= PC[Out]=addr+4                                         PC-Hold(S39,S56,S57)
	S60= CtrlICache=0                                           Premise(F149)
	S61= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S42,S60)
	S62= CtrlIR=0                                               Premise(F154)
	S63= [IR]={1,rS,16,offset}                                  IR-Hold(S44,S62)
	S64= CtrlA=1                                                Premise(F156)
	S65= [A]=a                                                  A-Write(S53,S64)
	S66= CtrlB=1                                                Premise(F157)
	S67= [B]=32'b0                                              B-Write(S55,S66)

EX	S68= PC.CIA=addr                                            PC-Out(S58)
	S69= PC.Out=addr+4                                          PC-Out(S59)
	S70= IR.Out15_0=offset                                      IR-Out(S63)
	S71= A.Out=a                                                A-Out(S65)
	S72= B.Out=32'b0                                            B-Out(S67)
	S73= IR.Out15_0=>SEXT.In                                    Premise(F182)
	S74= SEXT.In=offset                                         Path(S70,S73)
	S75= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S74)
	S76= PC.CIA=>ALU.A                                          Premise(F183)
	S77= ALU.A=addr                                             Path(S68,S76)
	S78= SEXT.Out=>ALU.B                                        Premise(F184)
	S79= ALU.B={14{offset[15]},offset,2{0}}                     Path(S75,S78)
	S80= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S77,S79)
	S81= ALU.Out=>ALUOut.In                                     Premise(F186)
	S82= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S80,S81)
	S83= A.Out=>CMPU.A                                          Premise(F187)
	S84= CMPU.A=a                                               Path(S71,S83)
	S85= B.Out=>CMPU.B                                          Premise(F188)
	S86= CMPU.B=32'b0                                           Path(S72,S85)
	S87= CMPU.lt=CompareS(a,32'b0)                              CMPU-CMPS(S84,S86)
	S88= CMPU.lt=>ConditionReg.In                               Premise(F190)
	S89= ConditionReg.In=CompareS(a,32'b0)                      Path(S87,S88)
	S90= GPR.WReg=5'd31                                         Premise(F191)
	S91= PC.Out=>GPR.WData                                      Premise(F192)
	S92= GPR.WData=addr+4                                       Path(S69,S91)
	S93= CtrlICache=0                                           Premise(F204)
	S94= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S61,S93)
	S95= CtrlGPR=1                                              Premise(F210)
	S96= GPR[5'd31]=addr+4                                      GPR-Write(S90,S92,S95)
	S97= CtrlALUOut=1                                           Premise(F213)
	S98= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S82,S97)
	S99= CtrlConditionReg=1                                     Premise(F214)
	S100= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Write(S89,S99)

MEM	S101= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}          ALUOut-Out(S98)
	S102= ALUOut.Out=>PC.In                                     Premise(F245)
	S103= PC.In=addr+{14{offset[15]},offset,2{0}}               Path(S101,S102)
	S104= CtrlPC=1                                              Premise(F252)
	S105= CtrlPCInc=0                                           Premise(F253)
	S106= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Write(S103,S104,S105)
	S107= CtrlICache=0                                          Premise(F256)
	S108= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S94,S107)
	S109= CtrlGPR=0                                             Premise(F262)
	S110= GPR[5'd31]=addr+4                                     GPR-Hold(S96,S109)
	S111= CtrlConditionReg=0                                    Premise(F266)
	S112= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S100,S111)

DMMU1	S113= CtrlPC=0                                              Premise(F304)
	S114= CtrlPCInc=0                                           Premise(F305)
	S115= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S106,S113,S114)
	S116= CtrlICache=0                                          Premise(F308)
	S117= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S108,S116)
	S118= CtrlGPR=0                                             Premise(F314)
	S119= GPR[5'd31]=addr+4                                     GPR-Hold(S110,S118)
	S120= CtrlConditionReg=0                                    Premise(F318)
	S121= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S112,S120)

DMMU2	S122= CtrlPC=0                                              Premise(F356)
	S123= CtrlPCInc=0                                           Premise(F357)
	S124= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S115,S122,S123)
	S125= CtrlICache=0                                          Premise(F360)
	S126= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S117,S125)
	S127= CtrlGPR=0                                             Premise(F366)
	S128= GPR[5'd31]=addr+4                                     GPR-Hold(S119,S127)
	S129= CtrlConditionReg=0                                    Premise(F370)
	S130= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S121,S129)

WB	S131= CtrlPC=0                                              Premise(F408)
	S132= CtrlPCInc=0                                           Premise(F409)
	S133= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S124,S131,S132)
	S134= CtrlICache=0                                          Premise(F412)
	S135= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S126,S134)
	S136= CtrlGPR=0                                             Premise(F418)
	S137= GPR[5'd31]=addr+4                                     GPR-Hold(S128,S136)
	S138= CtrlConditionReg=0                                    Premise(F422)
	S139= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S130,S138)

POST	S133= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S124,S131,S132)
	S135= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S126,S134)
	S137= GPR[5'd31]=addr+4                                     GPR-Hold(S128,S136)
	S139= [ConditionReg]=CompareS(a,32'b0)                      ConditionReg-Hold(S130,S138)

