
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={5,rS,rT,offset}                       Premise(F2)
	S3= ICache[addr]={5,rS,rT,offset}                           Premise(F3)
	S4= GPR[rS]=a                                               Premise(F4)
	S5= GPR[rT]=b                                               Premise(F5)

IF	S6= CP0.ASID=pid                                            ASID-Read(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F10)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={5,rS,rT,offset}                            ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F11)
	S19= ICacheReg.In={5,rS,rT,offset}                          Path(S17,S18)
	S20= CtrlPC=0                                               Premise(F42)
	S21= CtrlPCInc=0                                            Premise(F43)
	S22= PC[Out]=addr                                           PC-Hold(S1,S20,S21)
	S23= CtrlIAddrReg=1                                         Premise(F44)
	S24= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S23)
	S25= CtrlICacheReg=1                                        Premise(F47)
	S26= [ICacheReg]={5,rS,rT,offset}                           ICacheReg-Write(S19,S25)
	S27= CtrlIMem=0                                             Premise(F49)
	S28= IMem[{pid,addr}]={5,rS,rT,offset}                      IMem-Hold(S2,S27)
	S29= CtrlGPR=0                                              Premise(F52)
	S30= GPR[rS]=a                                              GPR-Hold(S4,S29)
	S31= GPR[rT]=b                                              GPR-Hold(S5,S29)

IMMU	S32= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S24)
	S33= ICacheReg.Out={5,rS,rT,offset}                         ICacheReg-Out(S26)
	S34= IAddrReg.Out=>IMem.RAddr                               Premise(F66)
	S35= IMem.RAddr={pid,addr}                                  Path(S32,S34)
	S36= IMem.Out={5,rS,rT,offset}                              IMem-Read(S35,S28)
	S37= IMem.Out=>IRMux.MemData                                Premise(F67)
	S38= IRMux.MemData={5,rS,rT,offset}                         Path(S36,S37)
	S39= ICacheReg.Out=>IRMux.CacheData                         Premise(F68)
	S40= IRMux.CacheData={5,rS,rT,offset}                       Path(S33,S39)
	S41= IRMux.Out={5,rS,rT,offset}                             IRMux-Select(S38,S40)
	S42= IRMux.Out=>IR.In                                       Premise(F71)
	S43= IR.In={5,rS,rT,offset}                                 Path(S41,S42)
	S44= CtrlPC=0                                               Premise(F93)
	S45= CtrlPCInc=1                                            Premise(F94)
	S46= PC[CIA]=addr                                           PC-Inc(S22,S44,S45)
	S47= CtrlIR=1                                               Premise(F102)
	S48= [IR]={5,rS,rT,offset}                                  IR-Write(S43,S47)
	S49= CtrlGPR=0                                              Premise(F103)
	S50= GPR[rS]=a                                              GPR-Hold(S30,S49)
	S51= GPR[rT]=b                                              GPR-Hold(S31,S49)

ID	S52= IR.Out25_21=rS                                         IR-Out(S48)
	S53= IR.Out20_16=rT                                         IR-Out(S48)
	S54= IR.Out25_21=>GPR.RReg1                                 Premise(F126)
	S55= GPR.RReg1=rS                                           Path(S52,S54)
	S56= GPR.Rdata1=a                                           GPR-Read(S55,S50)
	S57= IR.Out20_16=>GPR.RReg2                                 Premise(F127)
	S58= GPR.RReg2=rT                                           Path(S53,S57)
	S59= GPR.Rdata2=b                                           GPR-Read(S58,S51)
	S60= GPR.Rdata1=>A.In                                       Premise(F128)
	S61= A.In=a                                                 Path(S56,S60)
	S62= GPR.Rdata2=>B.In                                       Premise(F129)
	S63= B.In=b                                                 Path(S59,S62)
	S64= CtrlPCInc=0                                            Premise(F145)
	S65= PC[CIA]=addr                                           PC-Hold(S46,S64)
	S66= CtrlIR=0                                               Premise(F153)
	S67= [IR]={5,rS,rT,offset}                                  IR-Hold(S48,S66)
	S68= CtrlA=1                                                Premise(F155)
	S69= [A]=a                                                  A-Write(S61,S68)
	S70= CtrlB=1                                                Premise(F156)
	S71= [B]=b                                                  B-Write(S63,S70)

EX	S72= PC.CIA=addr                                            PC-Out(S65)
	S73= IR.Out15_0=offset                                      IR-Out(S67)
	S74= A.Out=a                                                A-Out(S69)
	S75= B.Out=b                                                B-Out(S71)
	S76= IR.Out15_0=>SEXT.In                                    Premise(F181)
	S77= SEXT.In=offset                                         Path(S73,S76)
	S78= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S77)
	S79= PC.CIA=>ALU.A                                          Premise(F182)
	S80= ALU.A=addr                                             Path(S72,S79)
	S81= SEXT.Out=>ALU.B                                        Premise(F183)
	S82= ALU.B={14{offset[15]},offset,2{0}}                     Path(S78,S81)
	S83= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S80,S82)
	S84= ALU.Out=>ALUOut.In                                     Premise(F185)
	S85= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S83,S84)
	S86= A.Out=>CMPU.A                                          Premise(F186)
	S87= CMPU.A=a                                               Path(S74,S86)
	S88= B.Out=>CMPU.B                                          Premise(F187)
	S89= CMPU.B=b                                               Path(S75,S88)
	S90= CMPU.zero=CompareS(a,b)                                CMPU-CMPS(S87,S89)
	S91= CMPU.zero=>ConditionReg.In                             Premise(F189)
	S92= ConditionReg.In=CompareS(a,b)                          Path(S90,S91)
	S93= CtrlALUOut=1                                           Premise(F210)
	S94= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S85,S93)
	S95= CtrlConditionReg=1                                     Premise(F211)
	S96= [ConditionReg]=CompareS(a,b)                           ConditionReg-Write(S92,S95)

MEM	S97= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S94)
	S98= ALUOut.Out=>PC.In                                      Premise(F241)
	S99= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S97,S98)
	S100= CtrlPC=1                                              Premise(F248)
	S101= CtrlPCInc=0                                           Premise(F249)
	S102= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Write(S99,S100,S101)
	S103= CtrlConditionReg=0                                    Premise(F262)
	S104= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S96,S103)

DMMU1	S105= CtrlPC=0                                              Premise(F299)
	S106= CtrlPCInc=0                                           Premise(F300)
	S107= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S102,S105,S106)
	S108= CtrlConditionReg=0                                    Premise(F313)
	S109= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S104,S108)

DMMU2	S110= CtrlPC=0                                              Premise(F350)
	S111= CtrlPCInc=0                                           Premise(F351)
	S112= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S107,S110,S111)
	S113= CtrlConditionReg=0                                    Premise(F364)
	S114= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S109,S113)

WB	S115= CtrlPC=0                                              Premise(F401)
	S116= CtrlPCInc=0                                           Premise(F402)
	S117= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S112,S115,S116)
	S118= CtrlConditionReg=0                                    Premise(F415)
	S119= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S114,S118)

POST	S117= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S112,S115,S116)
	S119= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S114,S118)

