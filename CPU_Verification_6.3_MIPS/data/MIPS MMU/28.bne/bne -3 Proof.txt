
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={5,rS,rT,offset}                       Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F41)
	S15= CtrlPCInc=0                                            Premise(F42)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F43)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F48)
	S20= IMem[{pid,addr}]={5,rS,rT,offset}                      IMem-Hold(S2,S19)
	S21= CtrlGPR=0                                              Premise(F51)
	S22= GPR[rS]=a                                              GPR-Hold(S3,S21)
	S23= GPR[rT]=b                                              GPR-Hold(S4,S21)

IMMU	S24= PC.Out=addr                                            PC-Out(S16)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S26= PC.Out=>ICache.IEA                                     Premise(F60)
	S27= ICache.IEA=addr                                        Path(S24,S26)
	S28= IAddrReg.Out=>IMem.RAddr                               Premise(F65)
	S29= IMem.RAddr={pid,addr}                                  Path(S25,S28)
	S30= IMem.Out={5,rS,rT,offset}                              IMem-Read(S29,S20)
	S31= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S29,S20)
	S32= IMem.Out=>IRMux.MemData                                Premise(F66)
	S33= IRMux.MemData={5,rS,rT,offset}                         Path(S30,S32)
	S34= IRMux.Out={5,rS,rT,offset}                             IRMux-Select(S33)
	S35= IRMux.Out=>IR.In                                       Premise(F70)
	S36= IR.In={5,rS,rT,offset}                                 Path(S34,S35)
	S37= IMem.MEM8WordOut=>ICache.WData                         Premise(F71)
	S38= ICache.WData=IMemGet8Word({pid,addr})                  Path(S31,S37)
	S39= CtrlPC=0                                               Premise(F92)
	S40= CtrlPCInc=1                                            Premise(F93)
	S41= PC[CIA]=addr                                           PC-Inc(S16,S39,S40)
	S42= CtrlICache=1                                           Premise(F96)
	S43= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S27,S38,S42)
	S44= CtrlIR=1                                               Premise(F101)
	S45= [IR]={5,rS,rT,offset}                                  IR-Write(S36,S44)
	S46= CtrlGPR=0                                              Premise(F102)
	S47= GPR[rS]=a                                              GPR-Hold(S22,S46)
	S48= GPR[rT]=b                                              GPR-Hold(S23,S46)

ID	S49= IR.Out25_21=rS                                         IR-Out(S45)
	S50= IR.Out20_16=rT                                         IR-Out(S45)
	S51= IR.Out25_21=>GPR.RReg1                                 Premise(F125)
	S52= GPR.RReg1=rS                                           Path(S49,S51)
	S53= GPR.Rdata1=a                                           GPR-Read(S52,S47)
	S54= IR.Out20_16=>GPR.RReg2                                 Premise(F126)
	S55= GPR.RReg2=rT                                           Path(S50,S54)
	S56= GPR.Rdata2=b                                           GPR-Read(S55,S48)
	S57= GPR.Rdata1=>A.In                                       Premise(F127)
	S58= A.In=a                                                 Path(S53,S57)
	S59= GPR.Rdata2=>B.In                                       Premise(F128)
	S60= B.In=b                                                 Path(S56,S59)
	S61= CtrlPCInc=0                                            Premise(F144)
	S62= PC[CIA]=addr                                           PC-Hold(S41,S61)
	S63= CtrlICache=0                                           Premise(F147)
	S64= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S43,S63)
	S65= CtrlIR=0                                               Premise(F152)
	S66= [IR]={5,rS,rT,offset}                                  IR-Hold(S45,S65)
	S67= CtrlA=1                                                Premise(F154)
	S68= [A]=a                                                  A-Write(S58,S67)
	S69= CtrlB=1                                                Premise(F155)
	S70= [B]=b                                                  B-Write(S60,S69)

EX	S71= PC.CIA=addr                                            PC-Out(S62)
	S72= IR.Out15_0=offset                                      IR-Out(S66)
	S73= A.Out=a                                                A-Out(S68)
	S74= B.Out=b                                                B-Out(S70)
	S75= IR.Out15_0=>SEXT.In                                    Premise(F180)
	S76= SEXT.In=offset                                         Path(S72,S75)
	S77= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S76)
	S78= PC.CIA=>ALU.A                                          Premise(F181)
	S79= ALU.A=addr                                             Path(S71,S78)
	S80= SEXT.Out=>ALU.B                                        Premise(F182)
	S81= ALU.B={14{offset[15]},offset,2{0}}                     Path(S77,S80)
	S82= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S79,S81)
	S83= ALU.Out=>ALUOut.In                                     Premise(F184)
	S84= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S82,S83)
	S85= A.Out=>CMPU.A                                          Premise(F185)
	S86= CMPU.A=a                                               Path(S73,S85)
	S87= B.Out=>CMPU.B                                          Premise(F186)
	S88= CMPU.B=b                                               Path(S74,S87)
	S89= CMPU.zero=CompareS(a,b)                                CMPU-CMPS(S86,S88)
	S90= CMPU.zero=>ConditionReg.In                             Premise(F188)
	S91= ConditionReg.In=CompareS(a,b)                          Path(S89,S90)
	S92= CtrlICache=0                                           Premise(F200)
	S93= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S64,S92)
	S94= CtrlALUOut=1                                           Premise(F209)
	S95= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S84,S94)
	S96= CtrlConditionReg=1                                     Premise(F210)
	S97= [ConditionReg]=CompareS(a,b)                           ConditionReg-Write(S91,S96)

MEM	S98= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S95)
	S99= ALUOut.Out=>PC.In                                      Premise(F240)
	S100= PC.In=addr+{14{offset[15]},offset,2{0}}               Path(S98,S99)
	S101= CtrlPC=1                                              Premise(F247)
	S102= CtrlPCInc=0                                           Premise(F248)
	S103= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Write(S100,S101,S102)
	S104= CtrlICache=0                                          Premise(F251)
	S105= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S93,S104)
	S106= CtrlConditionReg=0                                    Premise(F261)
	S107= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S97,S106)

DMMU1	S108= CtrlPC=0                                              Premise(F298)
	S109= CtrlPCInc=0                                           Premise(F299)
	S110= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S103,S108,S109)
	S111= CtrlICache=0                                          Premise(F302)
	S112= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S105,S111)
	S113= CtrlConditionReg=0                                    Premise(F312)
	S114= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S107,S113)

DMMU2	S115= CtrlPC=0                                              Premise(F349)
	S116= CtrlPCInc=0                                           Premise(F350)
	S117= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S110,S115,S116)
	S118= CtrlICache=0                                          Premise(F353)
	S119= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S112,S118)
	S120= CtrlConditionReg=0                                    Premise(F363)
	S121= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S114,S120)

WB	S122= CtrlPC=0                                              Premise(F400)
	S123= CtrlPCInc=0                                           Premise(F401)
	S124= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S117,S122,S123)
	S125= CtrlICache=0                                          Premise(F404)
	S126= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S119,S125)
	S127= CtrlConditionReg=0                                    Premise(F414)
	S128= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S121,S127)

POST	S124= PC[Out]=addr+{14{offset[15]},offset,2{0}}             PC-Hold(S117,S122,S123)
	S126= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S119,S125)
	S128= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S121,S127)

