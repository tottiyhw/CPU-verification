
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={2,imm}                                Premise(F2)
	S3= ICache[addr]={2,imm}                                    Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= PC.Out=>ICache.IEA                                     Premise(F8)
	S14= ICache.IEA=addr                                        Path(S5,S13)
	S15= ICache.Out={2,imm}                                     ICache-Search(S14,S3)
	S16= ICache.Out=>ICacheReg.In                               Premise(F9)
	S17= ICacheReg.In={2,imm}                                   Path(S15,S16)
	S18= CtrlPC=0                                               Premise(F30)
	S19= CtrlPCInc=0                                            Premise(F31)
	S20= PC[Out]=addr                                           PC-Hold(S1,S18,S19)
	S21= CtrlIAddrReg=1                                         Premise(F32)
	S22= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S21)
	S23= CtrlICacheReg=1                                        Premise(F35)
	S24= [ICacheReg]={2,imm}                                    ICacheReg-Write(S17,S23)
	S25= CtrlIMem=0                                             Premise(F37)
	S26= IMem[{pid,addr}]={2,imm}                               IMem-Hold(S2,S25)

IMMU	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S22)
	S28= ICacheReg.Out={2,imm}                                  ICacheReg-Out(S24)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F49)
	S30= IMem.RAddr={pid,addr}                                  Path(S27,S29)
	S31= IMem.Out={2,imm}                                       IMem-Read(S30,S26)
	S32= IMem.Out=>IRMux.MemData                                Premise(F50)
	S33= IRMux.MemData={2,imm}                                  Path(S31,S32)
	S34= ICacheReg.Out=>IRMux.CacheData                         Premise(F51)
	S35= IRMux.CacheData={2,imm}                                Path(S28,S34)
	S36= IRMux.Out={2,imm}                                      IRMux-Select(S33,S35)
	S37= IRMux.Out=>IR.In                                       Premise(F54)
	S38= IR.In={2,imm}                                          Path(S36,S37)
	S39= CtrlPC=0                                               Premise(F66)
	S40= CtrlPCInc=1                                            Premise(F67)
	S41= PC[CIA]=addr                                           PC-Inc(S20,S39,S40)
	S42= CtrlIR=1                                               Premise(F75)
	S43= [IR]={2,imm}                                           IR-Write(S38,S42)

ID	S44= PC.CIA31_28=addr[31:28]                                PC-Out(S41)
	S45= IR.Out25_0=imm                                         IR-Out(S43)
	S46= PC.CIA31_28=>ADDREXT.PCpart                            Premise(F94)
	S47= ADDREXT.PCpart=addr[31:28]                             Path(S44,S46)
	S48= IR.Out25_0=>ADDREXT.In                                 Premise(F95)
	S49= ADDREXT.In=imm                                         Path(S45,S48)
	S50= ADDREXT.Out={addr[31:28],imm,2'b0}                     ADDREXT-EXT(S47,S49)
	S51= ADDREXT.Out=>PC.In                                     Premise(F96)
	S52= PC.In={addr[31:28],imm,2'b0}                           Path(S50,S51)
	S53= CtrlPC=1                                               Premise(F102)
	S54= CtrlPCInc=0                                            Premise(F103)
	S55= PC[Out]={addr[31:28],imm,2'b0}                         PC-Write(S52,S53,S54)

EX	S56= CtrlPC=0                                               Premise(F138)
	S57= CtrlPCInc=0                                            Premise(F139)
	S58= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S55,S56,S57)

MEM	S59= CtrlPC=0                                               Premise(F174)
	S60= CtrlPCInc=0                                            Premise(F175)
	S61= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S58,S59,S60)

DMMU1	S62= CtrlPC=0                                               Premise(F210)
	S63= CtrlPCInc=0                                            Premise(F211)
	S64= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S61,S62,S63)

DMMU2	S65= CtrlPC=0                                               Premise(F246)
	S66= CtrlPCInc=0                                            Premise(F247)
	S67= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S64,S65,S66)

WB	S68= CtrlPC=0                                               Premise(F282)
	S69= CtrlPCInc=0                                            Premise(F283)
	S70= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S67,S68,S69)

POST	S70= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S67,S68,S69)

