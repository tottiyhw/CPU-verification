
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={2,imm}                                Premise(F2)

IF	S3= CP0.ASID=pid                                            ASID-Read(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= CP0.ASID=>IMMU.PID                                      Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F29)
	S13= CtrlPCInc=0                                            Premise(F30)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F31)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F36)
	S18= IMem[{pid,addr}]={2,imm}                               IMem-Hold(S2,S17)

IMMU	S19= PC.Out=addr                                            PC-Out(S14)
	S20= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S21= PC.Out=>ICache.IEA                                     Premise(F43)
	S22= ICache.IEA=addr                                        Path(S19,S21)
	S23= IAddrReg.Out=>IMem.RAddr                               Premise(F48)
	S24= IMem.RAddr={pid,addr}                                  Path(S20,S23)
	S25= IMem.Out={2,imm}                                       IMem-Read(S24,S18)
	S26= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S24,S18)
	S27= IMem.Out=>IRMux.MemData                                Premise(F49)
	S28= IRMux.MemData={2,imm}                                  Path(S25,S27)
	S29= IRMux.Out={2,imm}                                      IRMux-Select(S28)
	S30= IRMux.Out=>IR.In                                       Premise(F53)
	S31= IR.In={2,imm}                                          Path(S29,S30)
	S32= IMem.MEM8WordOut=>ICache.WData                         Premise(F54)
	S33= ICache.WData=IMemGet8Word({pid,addr})                  Path(S26,S32)
	S34= CtrlPC=0                                               Premise(F65)
	S35= CtrlPCInc=1                                            Premise(F66)
	S36= PC[CIA]=addr                                           PC-Inc(S14,S34,S35)
	S37= CtrlICache=1                                           Premise(F69)
	S38= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S22,S33,S37)
	S39= CtrlIR=1                                               Premise(F74)
	S40= [IR]={2,imm}                                           IR-Write(S31,S39)

ID	S41= PC.CIA31_28=addr[31:28]                                PC-Out(S36)
	S42= IR.Out25_0=imm                                         IR-Out(S40)
	S43= PC.CIA31_28=>ADDREXT.PCpart                            Premise(F93)
	S44= ADDREXT.PCpart=addr[31:28]                             Path(S41,S43)
	S45= IR.Out25_0=>ADDREXT.In                                 Premise(F94)
	S46= ADDREXT.In=imm                                         Path(S42,S45)
	S47= ADDREXT.Out={addr[31:28],imm,2'b0}                     ADDREXT-EXT(S44,S46)
	S48= ADDREXT.Out=>PC.In                                     Premise(F95)
	S49= PC.In={addr[31:28],imm,2'b0}                           Path(S47,S48)
	S50= CtrlPC=1                                               Premise(F101)
	S51= CtrlPCInc=0                                            Premise(F102)
	S52= PC[Out]={addr[31:28],imm,2'b0}                         PC-Write(S49,S50,S51)
	S53= CtrlICache=0                                           Premise(F105)
	S54= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S38,S53)

EX	S55= CtrlPC=0                                               Premise(F137)
	S56= CtrlPCInc=0                                            Premise(F138)
	S57= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S52,S55,S56)
	S58= CtrlICache=0                                           Premise(F141)
	S59= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S54,S58)

MEM	S60= CtrlPC=0                                               Premise(F173)
	S61= CtrlPCInc=0                                            Premise(F174)
	S62= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S57,S60,S61)
	S63= CtrlICache=0                                           Premise(F177)
	S64= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S59,S63)

DMMU1	S65= CtrlPC=0                                               Premise(F209)
	S66= CtrlPCInc=0                                            Premise(F210)
	S67= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S62,S65,S66)
	S68= CtrlICache=0                                           Premise(F213)
	S69= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S64,S68)

DMMU2	S70= CtrlPC=0                                               Premise(F245)
	S71= CtrlPCInc=0                                            Premise(F246)
	S72= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S67,S70,S71)
	S73= CtrlICache=0                                           Premise(F249)
	S74= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S69,S73)

WB	S75= CtrlPC=0                                               Premise(F281)
	S76= CtrlPCInc=0                                            Premise(F282)
	S77= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S72,S75,S76)
	S78= CtrlICache=0                                           Premise(F285)
	S79= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S74,S78)

POST	S77= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S72,S75,S76)
	S79= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S74,S78)

