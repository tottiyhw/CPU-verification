
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={3,imm}                                Premise(F2)
	S3= ICache[addr]={3,imm}                                    Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= PC.Out=>ICache.IEA                                     Premise(F8)
	S14= ICache.IEA=addr                                        Path(S5,S13)
	S15= ICache.Out={3,imm}                                     ICache-Search(S14,S3)
	S16= ICache.Out=>ICacheReg.In                               Premise(F9)
	S17= ICacheReg.In={3,imm}                                   Path(S15,S16)
	S18= CtrlPC=0                                               Premise(F31)
	S19= CtrlPCInc=0                                            Premise(F32)
	S20= PC[Out]=addr                                           PC-Hold(S1,S18,S19)
	S21= CtrlIAddrReg=1                                         Premise(F33)
	S22= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S21)
	S23= CtrlICacheReg=1                                        Premise(F36)
	S24= [ICacheReg]={3,imm}                                    ICacheReg-Write(S17,S23)
	S25= CtrlIMem=0                                             Premise(F38)
	S26= IMem[{pid,addr}]={3,imm}                               IMem-Hold(S2,S25)

IMMU	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S22)
	S28= ICacheReg.Out={3,imm}                                  ICacheReg-Out(S24)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F51)
	S30= IMem.RAddr={pid,addr}                                  Path(S27,S29)
	S31= IMem.Out={3,imm}                                       IMem-Read(S30,S26)
	S32= IMem.Out=>IRMux.MemData                                Premise(F52)
	S33= IRMux.MemData={3,imm}                                  Path(S31,S32)
	S34= ICacheReg.Out=>IRMux.CacheData                         Premise(F53)
	S35= IRMux.CacheData={3,imm}                                Path(S28,S34)
	S36= IRMux.Out={3,imm}                                      IRMux-Select(S33,S35)
	S37= IRMux.Out=>IR.In                                       Premise(F56)
	S38= IR.In={3,imm}                                          Path(S36,S37)
	S39= CtrlPC=0                                               Premise(F69)
	S40= CtrlPCInc=1                                            Premise(F70)
	S41= PC[Out]=addr+4                                         PC-Inc(S20,S39,S40)
	S42= PC[CIA]=addr                                           PC-Inc(S20,S39,S40)
	S43= CtrlIR=1                                               Premise(F78)
	S44= [IR]={3,imm}                                           IR-Write(S38,S43)

ID	S45= PC.Out=addr+4                                          PC-Out(S41)
	S46= PC.CIA31_28=addr[31:28]                                PC-Out(S42)
	S47= IR.Out25_0=imm                                         IR-Out(S44)
	S48= PC.CIA31_28=>ADDREXT.PCpart                            Premise(F98)
	S49= ADDREXT.PCpart=addr[31:28]                             Path(S46,S48)
	S50= IR.Out25_0=>ADDREXT.In                                 Premise(F99)
	S51= ADDREXT.In=imm                                         Path(S47,S50)
	S52= ADDREXT.Out={addr[31:28],imm,2'b0}                     ADDREXT-EXT(S49,S51)
	S53= ADDREXT.Out=>PC.In                                     Premise(F100)
	S54= PC.In={addr[31:28],imm,2'b0}                           Path(S52,S53)
	S55= GPR.WReg=5'd31                                         Premise(F101)
	S56= PC.Out=>GPR.WData                                      Premise(F102)
	S57= GPR.WData=addr+4                                       Path(S45,S56)
	S58= CtrlPC=1                                               Premise(F108)
	S59= CtrlPCInc=0                                            Premise(F109)
	S60= PC[Out]={addr[31:28],imm,2'b0}                         PC-Write(S54,S58,S59)
	S61= CtrlGPR=1                                              Premise(F118)
	S62= GPR[5'd31]=addr+4                                      GPR-Write(S55,S57,S61)

EX	S63= CtrlPC=0                                               Premise(F146)
	S64= CtrlPCInc=0                                            Premise(F147)
	S65= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S60,S63,S64)
	S66= CtrlGPR=0                                              Premise(F156)
	S67= GPR[5'd31]=addr+4                                      GPR-Hold(S62,S66)

MEM	S68= CtrlPC=0                                               Premise(F184)
	S69= CtrlPCInc=0                                            Premise(F185)
	S70= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S65,S68,S69)
	S71= CtrlGPR=0                                              Premise(F194)
	S72= GPR[5'd31]=addr+4                                      GPR-Hold(S67,S71)

DMMU1	S73= CtrlPC=0                                               Premise(F222)
	S74= CtrlPCInc=0                                            Premise(F223)
	S75= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S70,S73,S74)
	S76= CtrlGPR=0                                              Premise(F232)
	S77= GPR[5'd31]=addr+4                                      GPR-Hold(S72,S76)

DMMU2	S78= CtrlPC=0                                               Premise(F260)
	S79= CtrlPCInc=0                                            Premise(F261)
	S80= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S75,S78,S79)
	S81= CtrlGPR=0                                              Premise(F270)
	S82= GPR[5'd31]=addr+4                                      GPR-Hold(S77,S81)

WB	S83= CtrlPC=0                                               Premise(F298)
	S84= CtrlPCInc=0                                            Premise(F299)
	S85= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S80,S83,S84)
	S86= CtrlGPR=0                                              Premise(F308)
	S87= GPR[5'd31]=addr+4                                      GPR-Hold(S82,S86)

POST	S85= PC[Out]={addr[31:28],imm,2'b0}                         PC-Hold(S80,S83,S84)
	S87= GPR[5'd31]=addr+4                                      GPR-Hold(S82,S86)

