
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,0,0,hint,8}                      Premise(F2)
	S3= ICache[addr]={0,rS,0,0,hint,8}                          Premise(F3)
	S4= GPR[rS]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={0,rS,0,0,hint,8}                           ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={0,rS,0,0,hint,8}                         Path(S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F33)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S19)
	S21= CtrlICacheReg=1                                        Premise(F36)
	S22= [ICacheReg]={0,rS,0,0,hint,8}                          ICacheReg-Write(S18,S21)
	S23= CtrlIMem=0                                             Premise(F38)
	S24= IMem[{pid,addr}]={0,rS,0,0,hint,8}                     IMem-Hold(S2,S23)
	S25= CtrlGPR=0                                              Premise(F41)
	S26= GPR[rS]=a                                              GPR-Hold(S4,S25)

IMMU	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S28= ICacheReg.Out={0,rS,0,0,hint,8}                        ICacheReg-Out(S22)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F51)
	S30= IMem.RAddr={pid,addr}                                  Path(S27,S29)
	S31= IMem.Out={0,rS,0,0,hint,8}                             IMem-Read(S30,S24)
	S32= IMem.Out=>IRMux.MemData                                Premise(F52)
	S33= IRMux.MemData={0,rS,0,0,hint,8}                        Path(S31,S32)
	S34= ICacheReg.Out=>IRMux.CacheData                         Premise(F53)
	S35= IRMux.CacheData={0,rS,0,0,hint,8}                      Path(S28,S34)
	S36= IRMux.Out={0,rS,0,0,hint,8}                            IRMux-Select(S33,S35)
	S37= IRMux.Out=>IR.In                                       Premise(F56)
	S38= IR.In={0,rS,0,0,hint,8}                                Path(S36,S37)
	S39= CtrlIR=1                                               Premise(F77)
	S40= [IR]={0,rS,0,0,hint,8}                                 IR-Write(S38,S39)
	S41= CtrlGPR=0                                              Premise(F78)
	S42= GPR[rS]=a                                              GPR-Hold(S26,S41)

ID	S43= IR.Out25_21=rS                                         IR-Out(S40)
	S44= IR.Out25_21=>GPR.RReg1                                 Premise(F97)
	S45= GPR.RReg1=rS                                           Path(S43,S44)
	S46= GPR.Rdata1=a                                           GPR-Read(S45,S42)
	S47= GPR.Rdata1=>PC.In                                      Premise(F99)
	S48= PC.In=a                                                Path(S46,S47)
	S49= CtrlPC=1                                               Premise(F105)
	S50= CtrlPCInc=0                                            Premise(F106)
	S51= PC[Out]=a                                              PC-Write(S48,S49,S50)

EX	S52= CtrlPC=0                                               Premise(F142)
	S53= CtrlPCInc=0                                            Premise(F143)
	S54= PC[Out]=a                                              PC-Hold(S51,S52,S53)

MEM	S55= CtrlPC=0                                               Premise(F179)
	S56= CtrlPCInc=0                                            Premise(F180)
	S57= PC[Out]=a                                              PC-Hold(S54,S55,S56)

DMMU1	S58= CtrlPC=0                                               Premise(F216)
	S59= CtrlPCInc=0                                            Premise(F217)
	S60= PC[Out]=a                                              PC-Hold(S57,S58,S59)

DMMU2	S61= CtrlPC=0                                               Premise(F253)
	S62= CtrlPCInc=0                                            Premise(F254)
	S63= PC[Out]=a                                              PC-Hold(S60,S61,S62)

WB	S64= CtrlPC=0                                               Premise(F290)
	S65= CtrlPCInc=0                                            Premise(F291)
	S66= PC[Out]=a                                              PC-Hold(S63,S64,S65)

POST	S66= PC[Out]=a                                              PC-Hold(S63,S64,S65)

