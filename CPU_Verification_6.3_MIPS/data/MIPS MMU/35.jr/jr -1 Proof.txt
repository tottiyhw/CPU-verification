
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,0,0,hint,8}                      Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F30)
	S14= CtrlPCInc=0                                            Premise(F31)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F32)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F37)
	S19= IMem[{pid,addr}]={0,rS,0,0,hint,8}                     IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F40)
	S21= GPR[rS]=a                                              GPR-Hold(S3,S20)

IMMU	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= PC.Out=>ICache.IEA                                     Premise(F45)
	S25= ICache.IEA=addr                                        Path(S22,S24)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F50)
	S27= IMem.RAddr={pid,addr}                                  Path(S23,S26)
	S28= IMem.Out={0,rS,0,0,hint,8}                             IMem-Read(S27,S19)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S19)
	S30= IMem.Out=>IRMux.MemData                                Premise(F51)
	S31= IRMux.MemData={0,rS,0,0,hint,8}                        Path(S28,S30)
	S32= IRMux.Out={0,rS,0,0,hint,8}                            IRMux-Select(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F55)
	S34= IR.In={0,rS,0,0,hint,8}                                Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F56)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= CtrlICache=1                                           Premise(F71)
	S38= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S36,S37)
	S39= CtrlIR=1                                               Premise(F76)
	S40= [IR]={0,rS,0,0,hint,8}                                 IR-Write(S34,S39)
	S41= CtrlGPR=0                                              Premise(F77)
	S42= GPR[rS]=a                                              GPR-Hold(S21,S41)

ID	S43= IR.Out25_21=rS                                         IR-Out(S40)
	S44= IR.Out25_21=>GPR.RReg1                                 Premise(F96)
	S45= GPR.RReg1=rS                                           Path(S43,S44)
	S46= GPR.Rdata1=a                                           GPR-Read(S45,S42)
	S47= GPR.Rdata1=>PC.In                                      Premise(F98)
	S48= PC.In=a                                                Path(S46,S47)
	S49= CtrlPC=1                                               Premise(F104)
	S50= CtrlPCInc=0                                            Premise(F105)
	S51= PC[Out]=a                                              PC-Write(S48,S49,S50)
	S52= CtrlICache=0                                           Premise(F108)
	S53= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S38,S52)

EX	S54= CtrlPC=0                                               Premise(F141)
	S55= CtrlPCInc=0                                            Premise(F142)
	S56= PC[Out]=a                                              PC-Hold(S51,S54,S55)
	S57= CtrlICache=0                                           Premise(F145)
	S58= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S53,S57)

MEM	S59= CtrlPC=0                                               Premise(F178)
	S60= CtrlPCInc=0                                            Premise(F179)
	S61= PC[Out]=a                                              PC-Hold(S56,S59,S60)
	S62= CtrlICache=0                                           Premise(F182)
	S63= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S58,S62)

DMMU1	S64= CtrlPC=0                                               Premise(F215)
	S65= CtrlPCInc=0                                            Premise(F216)
	S66= PC[Out]=a                                              PC-Hold(S61,S64,S65)
	S67= CtrlICache=0                                           Premise(F219)
	S68= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S63,S67)

DMMU2	S69= CtrlPC=0                                               Premise(F252)
	S70= CtrlPCInc=0                                            Premise(F253)
	S71= PC[Out]=a                                              PC-Hold(S66,S69,S70)
	S72= CtrlICache=0                                           Premise(F256)
	S73= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S68,S72)

WB	S74= CtrlPC=0                                               Premise(F289)
	S75= CtrlPCInc=0                                            Premise(F290)
	S76= PC[Out]=a                                              PC-Hold(S71,S74,S75)
	S77= CtrlICache=0                                           Premise(F293)
	S78= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S73,S77)

POST	S76= PC[Out]=a                                              PC-Hold(S71,S74,S75)
	S78= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S73,S77)

