
----------------------------------- FullProof -----------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={32,rS,rT,offset}                      Premise(F2)
	S0= ICache[addr]={32,rS,rT,offset}                          Premise(F3)
	S0= GPR[rS]=base                                            Premise(F4)
	S0= DMem[{pid,base+{16{offset[15]},offset}}]=a              Premise(F5)
	S0= DCache[DCacheRLineEA(base+{16{offset[15]},offset})]=dataPremise(F6)

IF	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= CP0.ASID=>IMMU.PID                                      Premise(F7)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F8)
	S0= IMMU.IEA=addr                                           Path(S0,S0)
	S0= IMMU.Addr={pid,addr}                                    IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr)                              IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F9)
	S0= IAddrReg.In={pid,addr}                                  Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F10)
	S0= IMMUHitReg.In=IMMUHit(pid,addr)                         Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F11)
	S0= ICache.IEA=addr                                         Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr)                              ICache-Search(S0)
	S0= ICache.Out={32,rS,rT,offset}                            ICache-Search(S0,S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F12)
	S0= ICacheReg.In={32,rS,rT,offset}                          Path(S0,S0)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F13)
	S0= ICacheHitReg.In=ICacheHit(addr)                         Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F14)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F15)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F16)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F17)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F18)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F19)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F20)
	S0= IRMux.Out=>IR.In                                        Premise(F21)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F22)
	S0= PC.Out=>ICache.IEA                                      Premise(F23)
	S0= IR.Out31_26=>CU.Op                                      Premise(F24)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F25)
	S0= IR.Out15_0=>IMMEXT.In                                   Premise(F26)
	S0= GPR.Rdata1=>A.In                                        Premise(F27)
	S0= IMMEXT.Out=>B.In                                        Premise(F28)
	S0= A.Out=>ALU.A                                            Premise(F29)
	S0= B.Out=>ALU.B                                            Premise(F30)
	S0= ALU.Out=>ALUOut.In                                      Premise(F31)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F32)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F33)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F34)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F35)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F36)
	S0= DCache.Out=>DCacheReg.In                                Premise(F37)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F38)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F39)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F40)
	S0= DCacheReg.Out=>DR.In                                    Premise(F41)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F42)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F43)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F44)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F45)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F46)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F47)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F48)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F49)
	S0= DMem.Out=>DR.In                                         Premise(F50)
	S0= IR.Out20_16=>GPR.WReg                                   Premise(F51)
	S0= DR.Out=>MemDataSel.In                                   Premise(F52)
	S0= ALUOut.Out1_0=>MemDataSel.Addr                          Premise(F53)
	S0= MemDataSel.Out=>GPR.WData                               Premise(F54)
	S0= CtrlASIDIn=0                                            Premise(F55)
	S0= CtrlCP0=0                                               Premise(F56)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F57)
	S0= CtrlExCodeIn=0                                          Premise(F58)
	S0= CtrlIMMU=0                                              Premise(F59)
	S0= CtrlPC=0                                                Premise(F60)
	S0= CtrlPCInc=0                                             Premise(F61)
	S0= PC[Out]=addr                                            PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=1                                          Premise(F62)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Write(S0,S0)
	S0= CtrlIMMUHitReg=1                                        Premise(F63)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Write(S0,S0)
	S0= CtrlICache=0                                            Premise(F64)
	S0= ICache[addr]={32,rS,rT,offset}                          ICache-Hold(S0,S0)
	S0= CtrlICacheReg=1                                         Premise(F65)
	S0= [ICacheReg]={32,rS,rT,offset}                           ICacheReg-Write(S0,S0)
	S0= CtrlICacheHitReg=1                                      Premise(F66)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Write(S0,S0)
	S0= CtrlIMem=0                                              Premise(F67)
	S0= IMem[{pid,addr}]={32,rS,rT,offset}                      IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F68)
	S0= CtrlIR=0                                                Premise(F69)
	S0= CtrlGPR=0                                               Premise(F70)
	S0= GPR[rS]=base                                            GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F71)
	S0= CtrlB=0                                                 Premise(F72)
	S0= CtrlALUOut=0                                            Premise(F73)
	S0= CtrlDMMU=0                                              Premise(F74)
	S0= CtrlDAddrReg=0                                          Premise(F75)
	S0= CtrlDMMUHitReg=0                                        Premise(F76)
	S0= CtrlDCache=0                                            Premise(F77)
	S0= DCache[DCacheRLineEA(base+{16{offset[15]},offset})]=dataDCache-Hold(S0,S0)
	S0= CtrlDCacheReg=0                                         Premise(F78)
	S0= CtrlDCacheHitReg=0                                      Premise(F79)
	S0= CtrlDR=0                                                Premise(F80)
	S0= CtrlDMem=0                                              Premise(F81)
	S0= DMem[{pid,base+{16{offset[15]},offset}}]=a              DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F82)

IMMU	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={32,rS,rT,offset}                         ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{32,rS,rT,offset}}[1:0]               ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{32,rS,rT,offset}}[4:0]               ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= CP0.ASID=>IMMU.PID                                      Premise(F83)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F84)
	S0= IMMU.IEA=addr                                           Path(S0,S0)
	S0= IMMU.Addr={pid,addr}                                    IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr)                              IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F85)
	S0= IAddrReg.In={pid,addr}                                  Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F86)
	S0= IMMUHitReg.In=IMMUHit(pid,addr)                         Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F87)
	S0= ICache.IEA=addr                                         Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr)                              ICache-Search(S0)
	S0= ICache.Out={32,rS,rT,offset}                            ICache-Search(S0,S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F88)
	S0= ICacheReg.In={32,rS,rT,offset}                          Path(S0,S0)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F89)
	S0= ICacheHitReg.In=ICacheHit(addr)                         Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F90)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F91)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F92)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={32,rS,rT,offset}                              IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F93)
	S0= IRMux.MemData={32,rS,rT,offset}                         Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F94)
	S0= IRMux.CacheData={32,rS,rT,offset}                       Path(S0,S0)
	S0= IRMux.Out={32,rS,rT,offset}                             IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F95)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F96)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F97)
	S0= IR.In={32,rS,rT,offset}                                 Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F98)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F99)
	S0= IR.Out31_26=>CU.Op                                      Premise(F100)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F101)
	S0= IR.Out15_0=>IMMEXT.In                                   Premise(F102)
	S0= GPR.Rdata1=>A.In                                        Premise(F103)
	S0= IMMEXT.Out=>B.In                                        Premise(F104)
	S0= A.Out=>ALU.A                                            Premise(F105)
	S0= B.Out=>ALU.B                                            Premise(F106)
	S0= ALU.Out=>ALUOut.In                                      Premise(F107)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F108)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F109)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F110)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F111)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F112)
	S0= DCache.Out=>DCacheReg.In                                Premise(F113)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F114)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F115)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F116)
	S0= DCacheReg.Out=>DR.In                                    Premise(F117)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F118)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F119)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F120)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F121)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F122)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F123)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F124)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F125)
	S0= DMem.Out=>DR.In                                         Premise(F126)
	S0= IR.Out20_16=>GPR.WReg                                   Premise(F127)
	S0= DR.Out=>MemDataSel.In                                   Premise(F128)
	S0= ALUOut.Out1_0=>MemDataSel.Addr                          Premise(F129)
	S0= MemDataSel.Out=>GPR.WData                               Premise(F130)
	S0= CtrlASIDIn=0                                            Premise(F131)
	S0= CtrlCP0=0                                               Premise(F132)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F133)
	S0= CtrlExCodeIn=0                                          Premise(F134)
	S0= CtrlIMMU=0                                              Premise(F135)
	S0= CtrlPC=0                                                Premise(F136)
	S0= CtrlPCInc=1                                             Premise(F137)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F138)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F139)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F140)
	S0= ICache[addr]={32,rS,rT,offset}                          ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F141)
	S0= [ICacheReg]={32,rS,rT,offset}                           ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F142)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F143)
	S0= IMem[{pid,addr}]={32,rS,rT,offset}                      IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F144)
	S0= CtrlIR=1                                                Premise(F145)
	S0= [IR]={32,rS,rT,offset}                                  IR-Write(S0,S0)
	S0= CtrlGPR=0                                               Premise(F146)
	S0= GPR[rS]=base                                            GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F147)
	S0= CtrlB=0                                                 Premise(F148)
	S0= CtrlALUOut=0                                            Premise(F149)
	S0= CtrlDMMU=0                                              Premise(F150)
	S0= CtrlDAddrReg=0                                          Premise(F151)
	S0= CtrlDMMUHitReg=0                                        Premise(F152)
	S0= CtrlDCache=0                                            Premise(F153)
	S0= DCache[DCacheRLineEA(base+{16{offset[15]},offset})]=dataDCache-Hold(S0,S0)
	S0= CtrlDCacheReg=0                                         Premise(F154)
	S0= CtrlDCacheHitReg=0                                      Premise(F155)
	S0= CtrlDR=0                                                Premise(F156)
	S0= CtrlDMem=0                                              Premise(F157)
	S0= DMem[{pid,base+{16{offset[15]},offset}}]=a              DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F158)

ID	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={32,rS,rT,offset}                         ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{32,rS,rT,offset}}[1:0]               ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{32,rS,rT,offset}}[4:0]               ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= IR.Out={32,rS,rT,offset}                                IR-Out(S0)
	S0= IR.Out31_26=32                                          IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=rT                                          IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= CP0.ASID=>IMMU.PID                                      Premise(F159)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F160)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F161)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F162)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F163)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F164)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F165)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F166)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F167)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F168)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={32,rS,rT,offset}                              IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F169)
	S0= IRMux.MemData={32,rS,rT,offset}                         Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F170)
	S0= IRMux.CacheData={32,rS,rT,offset}                       Path(S0,S0)
	S0= IRMux.Out={32,rS,rT,offset}                             IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F171)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F172)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F173)
	S0= IR.In={32,rS,rT,offset}                                 Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F174)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F175)
	S0= IR.Out31_26=>CU.Op                                      Premise(F176)
	S0= CU.Op=32                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= CU.MemDataSelFunc=mds_lwz                               CU(S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F177)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=base                                         GPR-Read(S0,S0)
	S0= IR.Out15_0=>IMMEXT.In                                   Premise(F178)
	S0= IMMEXT.In=offset                                        Path(S0,S0)
	S0= IMMEXT.Out={16{offset[15]},offset}                      IMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F179)
	S0= A.In=base                                               Path(S0,S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F180)
	S0= B.In={16{offset[15]},offset}                            Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F181)
	S0= B.Out=>ALU.B                                            Premise(F182)
	S0= ALU.Out=>ALUOut.In                                      Premise(F183)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F184)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F185)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F186)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F187)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F188)
	S0= DCache.Out=>DCacheReg.In                                Premise(F189)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F190)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F191)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F192)
	S0= DCacheReg.Out=>DR.In                                    Premise(F193)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F194)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F195)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F196)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F197)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F198)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F199)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F200)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F201)
	S0= DMem.Out=>DR.In                                         Premise(F202)
	S0= IR.Out20_16=>GPR.WReg                                   Premise(F203)
	S0= GPR.WReg=rT                                             Path(S0,S0)
	S0= DR.Out=>MemDataSel.In                                   Premise(F204)
	S0= ALUOut.Out1_0=>MemDataSel.Addr                          Premise(F205)
	S0= MemDataSel.Out=>GPR.WData                               Premise(F206)
	S0= CtrlASIDIn=0                                            Premise(F207)
	S0= CtrlCP0=0                                               Premise(F208)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F209)
	S0= CtrlExCodeIn=0                                          Premise(F210)
	S0= CtrlIMMU=0                                              Premise(F211)
	S0= CtrlPC=0                                                Premise(F212)
	S0= CtrlPCInc=0                                             Premise(F213)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F214)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F215)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F216)
	S0= ICache[addr]={32,rS,rT,offset}                          ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F217)
	S0= [ICacheReg]={32,rS,rT,offset}                           ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F218)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F219)
	S0= IMem[{pid,addr}]={32,rS,rT,offset}                      IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F220)
	S0= CtrlIR=0                                                Premise(F221)
	S0= [IR]={32,rS,rT,offset}                                  IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F222)
	S0= GPR[rS]=base                                            GPR-Hold(S0,S0)
	S0= CtrlA=1                                                 Premise(F223)
	S0= [A]=base                                                A-Write(S0,S0)
	S0= CtrlB=1                                                 Premise(F224)
	S0= [B]={16{offset[15]},offset}                             B-Write(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F225)
	S0= CtrlDMMU=0                                              Premise(F226)
	S0= CtrlDAddrReg=0                                          Premise(F227)
	S0= CtrlDMMUHitReg=0                                        Premise(F228)
	S0= CtrlDCache=0                                            Premise(F229)
	S0= DCache[DCacheRLineEA(base+{16{offset[15]},offset})]=dataDCache-Hold(S0,S0)
	S0= CtrlDCacheReg=0                                         Premise(F230)
	S0= CtrlDCacheHitReg=0                                      Premise(F231)
	S0= CtrlDR=0                                                Premise(F232)
	S0= CtrlDMem=0                                              Premise(F233)
	S0= DMem[{pid,base+{16{offset[15]},offset}}]=a              DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F234)

EX	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={32,rS,rT,offset}                         ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{32,rS,rT,offset}}[1:0]               ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{32,rS,rT,offset}}[4:0]               ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= IR.Out={32,rS,rT,offset}                                IR-Out(S0)
	S0= IR.Out31_26=32                                          IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=rT                                          IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= A.Out=base                                              A-Out(S0)
	S0= A.Out1_0={base}[1:0]                                    A-Out(S0)
	S0= A.Out4_0={base}[4:0]                                    A-Out(S0)
	S0= B.Out={16{offset[15]},offset}                           B-Out(S0)
	S0= B.Out1_0={{16{offset[15]},offset}}[1:0]                 B-Out(S0)
	S0= B.Out4_0={{16{offset[15]},offset}}[4:0]                 B-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= CP0.ASID=>IMMU.PID                                      Premise(F235)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F236)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F237)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F238)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F239)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F240)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F241)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F242)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F243)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F244)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={32,rS,rT,offset}                              IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F245)
	S0= IRMux.MemData={32,rS,rT,offset}                         Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F246)
	S0= IRMux.CacheData={32,rS,rT,offset}                       Path(S0,S0)
	S0= IRMux.Out={32,rS,rT,offset}                             IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F247)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F248)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F249)
	S0= IR.In={32,rS,rT,offset}                                 Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F250)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F251)
	S0= IR.Out31_26=>CU.Op                                      Premise(F252)
	S0= CU.Op=32                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= CU.MemDataSelFunc=mds_lwz                               CU(S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F253)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=base                                         GPR-Read(S0,S0)
	S0= IR.Out15_0=>IMMEXT.In                                   Premise(F254)
	S0= IMMEXT.In=offset                                        Path(S0,S0)
	S0= IMMEXT.Out={16{offset[15]},offset}                      IMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F255)
	S0= A.In=base                                               Path(S0,S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F256)
	S0= B.In={16{offset[15]},offset}                            Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F257)
	S0= ALU.A=base                                              Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F258)
	S0= ALU.B={16{offset[15]},offset}                           Path(S0,S0)
	S0= ALU.Func=6'b010010                                      Premise(F259)
	S0= ALU.Out=base+{16{offset[15]},offset}                    ALU(S0,S0)
	S0= ALU.Out1_0={base+{16{offset[15]},offset}}[1:0]          ALU(S0,S0)
	S0= ALU.CMP=Compare0(base+{16{offset[15]},offset})          ALU(S0,S0)
	S0= ALU.OV=OverFlow(base+{16{offset[15]},offset})           ALU(S0,S0)
	S0= ALU.CA=Carry(base+{16{offset[15]},offset})              ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F260)
	S0= ALUOut.In=base+{16{offset[15]},offset}                  Path(S0,S0)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F261)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F262)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F263)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F264)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F265)
	S0= DCache.Out=>DCacheReg.In                                Premise(F266)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F267)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F268)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F269)
	S0= DCacheReg.Out=>DR.In                                    Premise(F270)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F271)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F272)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F273)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F274)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F275)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F276)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F277)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F278)
	S0= DMem.Out=>DR.In                                         Premise(F279)
	S0= IR.Out20_16=>GPR.WReg                                   Premise(F280)
	S0= GPR.WReg=rT                                             Path(S0,S0)
	S0= DR.Out=>MemDataSel.In                                   Premise(F281)
	S0= ALUOut.Out1_0=>MemDataSel.Addr                          Premise(F282)
	S0= MemDataSel.Out=>GPR.WData                               Premise(F283)
	S0= CtrlASIDIn=0                                            Premise(F284)
	S0= CtrlCP0=0                                               Premise(F285)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F286)
	S0= CtrlExCodeIn=0                                          Premise(F287)
	S0= CtrlIMMU=0                                              Premise(F288)
	S0= CtrlPC=0                                                Premise(F289)
	S0= CtrlPCInc=0                                             Premise(F290)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F291)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F292)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F293)
	S0= ICache[addr]={32,rS,rT,offset}                          ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F294)
	S0= [ICacheReg]={32,rS,rT,offset}                           ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F295)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F296)
	S0= IMem[{pid,addr}]={32,rS,rT,offset}                      IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F297)
	S0= CtrlIR=0                                                Premise(F298)
	S0= [IR]={32,rS,rT,offset}                                  IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F299)
	S0= GPR[rS]=base                                            GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F300)
	S0= [A]=base                                                A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F301)
	S0= [B]={16{offset[15]},offset}                             B-Hold(S0,S0)
	S0= CtrlALUOut=1                                            Premise(F302)
	S0= [ALUOut]=base+{16{offset[15]},offset}                   ALUOut-Write(S0,S0)
	S0= CtrlDMMU=0                                              Premise(F303)
	S0= CtrlDAddrReg=0                                          Premise(F304)
	S0= CtrlDMMUHitReg=0                                        Premise(F305)
	S0= CtrlDCache=0                                            Premise(F306)
	S0= DCache[DCacheRLineEA(base+{16{offset[15]},offset})]=dataDCache-Hold(S0,S0)
	S0= CtrlDCacheReg=0                                         Premise(F307)
	S0= CtrlDCacheHitReg=0                                      Premise(F308)
	S0= CtrlDR=0                                                Premise(F309)
	S0= CtrlDMem=0                                              Premise(F310)
	S0= DMem[{pid,base+{16{offset[15]},offset}}]=a              DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F311)

MEM	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={32,rS,rT,offset}                         ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{32,rS,rT,offset}}[1:0]               ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{32,rS,rT,offset}}[4:0]               ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= IR.Out={32,rS,rT,offset}                                IR-Out(S0)
	S0= IR.Out31_26=32                                          IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=rT                                          IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= A.Out=base                                              A-Out(S0)
	S0= A.Out1_0={base}[1:0]                                    A-Out(S0)
	S0= A.Out4_0={base}[4:0]                                    A-Out(S0)
	S0= B.Out={16{offset[15]},offset}                           B-Out(S0)
	S0= B.Out1_0={{16{offset[15]},offset}}[1:0]                 B-Out(S0)
	S0= B.Out4_0={{16{offset[15]},offset}}[4:0]                 B-Out(S0)
	S0= ALUOut.Out=base+{16{offset[15]},offset}                 ALUOut-Out(S0)
	S0= ALUOut.Out1_0={base+{16{offset[15]},offset}}[1:0]       ALUOut-Out(S0)
	S0= ALUOut.Out4_0={base+{16{offset[15]},offset}}[4:0]       ALUOut-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= CP0.ASID=>IMMU.PID                                      Premise(F312)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F313)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F314)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F315)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F316)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F317)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F318)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F319)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F320)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F321)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={32,rS,rT,offset}                              IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F322)
	S0= IRMux.MemData={32,rS,rT,offset}                         Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F323)
	S0= IRMux.CacheData={32,rS,rT,offset}                       Path(S0,S0)
	S0= IRMux.Out={32,rS,rT,offset}                             IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F324)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F325)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F326)
	S0= IR.In={32,rS,rT,offset}                                 Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F327)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F328)
	S0= IR.Out31_26=>CU.Op                                      Premise(F329)
	S0= CU.Op=32                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= CU.MemDataSelFunc=mds_lwz                               CU(S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F330)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=base                                         GPR-Read(S0,S0)
	S0= IR.Out15_0=>IMMEXT.In                                   Premise(F331)
	S0= IMMEXT.In=offset                                        Path(S0,S0)
	S0= IMMEXT.Out={16{offset[15]},offset}                      IMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F332)
	S0= A.In=base                                               Path(S0,S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F333)
	S0= B.In={16{offset[15]},offset}                            Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F334)
	S0= ALU.A=base                                              Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F335)
	S0= ALU.B={16{offset[15]},offset}                           Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F336)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F337)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F338)
	S0= DMMU.IEA=base+{16{offset[15]},offset}                   Path(S0,S0)
	S0= DMMU.Addr={pid,base+{16{offset[15]},offset}}            DMMU-Search(S0,S0)
	S0= DMMU.Hit=DMMUHit(pid,base+{16{offset[15]},offset})      DMMU-Search(S0,S0)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F339)
	S0= DAddrReg.In={pid,base+{16{offset[15]},offset}}          Path(S0,S0)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F340)
	S0= DMMUHitReg.In=DMMUHit(pid,base+{16{offset[15]},offset}) Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F341)
	S0= DCache.IEA=base+{16{offset[15]},offset}                 Path(S0,S0)
	S0= DCache.Hit=DCacheHit(base+{16{offset[15]},offset})      DCache-Search(S0)
	S0= DCache.Out=>DCacheReg.In                                Premise(F342)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F343)
	S0= DCacheHitReg.In=DCacheHit(base+{16{offset[15]},offset}) Path(S0,S0)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F344)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F345)
	S0= DCacheReg.Out=>DR.In                                    Premise(F346)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F347)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F348)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F349)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F350)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F351)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F352)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F353)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F354)
	S0= DMem.Out=>DR.In                                         Premise(F355)
	S0= IR.Out20_16=>GPR.WReg                                   Premise(F356)
	S0= GPR.WReg=rT                                             Path(S0,S0)
	S0= DR.Out=>MemDataSel.In                                   Premise(F357)
	S0= ALUOut.Out1_0=>MemDataSel.Addr                          Premise(F358)
	S0= MemDataSel.Addr={base+{16{offset[15]},offset}}[1:0]     Path(S0,S0)
	S0= MemDataSel.Out=>GPR.WData                               Premise(F359)
	S0= CtrlASIDIn=0                                            Premise(F360)
	S0= CtrlCP0=0                                               Premise(F361)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F362)
	S0= CtrlExCodeIn=0                                          Premise(F363)
	S0= CtrlIMMU=0                                              Premise(F364)
	S0= CtrlPC=0                                                Premise(F365)
	S0= CtrlPCInc=0                                             Premise(F366)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F367)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F368)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F369)
	S0= ICache[addr]={32,rS,rT,offset}                          ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F370)
	S0= [ICacheReg]={32,rS,rT,offset}                           ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F371)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F372)
	S0= IMem[{pid,addr}]={32,rS,rT,offset}                      IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F373)
	S0= CtrlIR=0                                                Premise(F374)
	S0= [IR]={32,rS,rT,offset}                                  IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F375)
	S0= GPR[rS]=base                                            GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F376)
	S0= [A]=base                                                A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F377)
	S0= [B]={16{offset[15]},offset}                             B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F378)
	S0= [ALUOut]=base+{16{offset[15]},offset}                   ALUOut-Hold(S0,S0)
	S0= CtrlDMMU=0                                              Premise(F379)
	S0= CtrlDAddrReg=1                                          Premise(F380)
	S0= [DAddrReg]={pid,base+{16{offset[15]},offset}}           DAddrReg-Write(S0,S0)
	S0= CtrlDMMUHitReg=1                                        Premise(F381)
	S0= [DMMUHitReg]=DMMUHit(pid,base+{16{offset[15]},offset})  DMMUHitReg-Write(S0,S0)
	S0= CtrlDCache=0                                            Premise(F382)
	S0= DCache[DCacheRLineEA(base+{16{offset[15]},offset})]=dataDCache-Hold(S0,S0)
	S0= CtrlDCacheReg=1                                         Premise(F383)
	S0= CtrlDCacheHitReg=1                                      Premise(F384)
	S0= [DCacheHitReg]=DCacheHit(base+{16{offset[15]},offset})  DCacheHitReg-Write(S0,S0)
	S0= CtrlDR=0                                                Premise(F385)
	S0= CtrlDMem=0                                              Premise(F386)
	S0= DMem[{pid,base+{16{offset[15]},offset}}]=a              DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F387)

DMMU1	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={32,rS,rT,offset}                         ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{32,rS,rT,offset}}[1:0]               ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{32,rS,rT,offset}}[4:0]               ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= IR.Out={32,rS,rT,offset}                                IR-Out(S0)
	S0= IR.Out31_26=32                                          IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=rT                                          IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= A.Out=base                                              A-Out(S0)
	S0= A.Out1_0={base}[1:0]                                    A-Out(S0)
	S0= A.Out4_0={base}[4:0]                                    A-Out(S0)
	S0= B.Out={16{offset[15]},offset}                           B-Out(S0)
	S0= B.Out1_0={{16{offset[15]},offset}}[1:0]                 B-Out(S0)
	S0= B.Out4_0={{16{offset[15]},offset}}[4:0]                 B-Out(S0)
	S0= ALUOut.Out=base+{16{offset[15]},offset}                 ALUOut-Out(S0)
	S0= ALUOut.Out1_0={base+{16{offset[15]},offset}}[1:0]       ALUOut-Out(S0)
	S0= ALUOut.Out4_0={base+{16{offset[15]},offset}}[4:0]       ALUOut-Out(S0)
	S0= DAddrReg.Out={pid,base+{16{offset[15]},offset}}         DAddrReg-Out(S0)
	S0= DAddrReg.Out1_0={{pid,base+{16{offset[15]},offset}}}[1:0]DAddrReg-Out(S0)
	S0= DAddrReg.Out4_0={{pid,base+{16{offset[15]},offset}}}[4:0]DAddrReg-Out(S0)
	S0= DMMUHitReg.Out=DMMUHit(pid,base+{16{offset[15]},offset})DMMUHitReg-Out(S0)
	S0= DMMUHitReg.Out1_0={DMMUHit(pid,base+{16{offset[15]},offset})}[1:0]DMMUHitReg-Out(S0)
	S0= DMMUHitReg.Out4_0={DMMUHit(pid,base+{16{offset[15]},offset})}[4:0]DMMUHitReg-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= DCacheHitReg.Out=DCacheHit(base+{16{offset[15]},offset})DCacheHitReg-Out(S0)
	S0= DCacheHitReg.Out1_0={DCacheHit(base+{16{offset[15]},offset})}[1:0]DCacheHitReg-Out(S0)
	S0= DCacheHitReg.Out4_0={DCacheHit(base+{16{offset[15]},offset})}[4:0]DCacheHitReg-Out(S0)
	S0= CP0.ASID=>IMMU.PID                                      Premise(F388)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F389)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F390)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F391)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F392)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F393)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F394)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F395)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F396)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F397)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={32,rS,rT,offset}                              IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F398)
	S0= IRMux.MemData={32,rS,rT,offset}                         Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F399)
	S0= IRMux.CacheData={32,rS,rT,offset}                       Path(S0,S0)
	S0= IRMux.Out={32,rS,rT,offset}                             IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F400)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F401)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F402)
	S0= IR.In={32,rS,rT,offset}                                 Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F403)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F404)
	S0= IR.Out31_26=>CU.Op                                      Premise(F405)
	S0= CU.Op=32                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= CU.MemDataSelFunc=mds_lwz                               CU(S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F406)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=base                                         GPR-Read(S0,S0)
	S0= IR.Out15_0=>IMMEXT.In                                   Premise(F407)
	S0= IMMEXT.In=offset                                        Path(S0,S0)
	S0= IMMEXT.Out={16{offset[15]},offset}                      IMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F408)
	S0= A.In=base                                               Path(S0,S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F409)
	S0= B.In={16{offset[15]},offset}                            Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F410)
	S0= ALU.A=base                                              Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F411)
	S0= ALU.B={16{offset[15]},offset}                           Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F412)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F413)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F414)
	S0= DMMU.IEA=base+{16{offset[15]},offset}                   Path(S0,S0)
	S0= DMMU.Addr={pid,base+{16{offset[15]},offset}}            DMMU-Search(S0,S0)
	S0= DMMU.Hit=DMMUHit(pid,base+{16{offset[15]},offset})      DMMU-Search(S0,S0)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F415)
	S0= DAddrReg.In={pid,base+{16{offset[15]},offset}}          Path(S0,S0)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F416)
	S0= DMMUHitReg.In=DMMUHit(pid,base+{16{offset[15]},offset}) Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F417)
	S0= DCache.IEA=base+{16{offset[15]},offset}                 Path(S0,S0)
	S0= DCache.Hit=DCacheHit(base+{16{offset[15]},offset})      DCache-Search(S0)
	S0= DCache.Out=>DCacheReg.In                                Premise(F418)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F419)
	S0= DCacheHitReg.In=DCacheHit(base+{16{offset[15]},offset}) Path(S0,S0)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F420)
	S0= CU.DMemHit=DMMUHit(pid,base+{16{offset[15]},offset})    Path(S0,S0)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F421)
	S0= CU.DCacheHit=DCacheHit(base+{16{offset[15]},offset})    Path(S0,S0)
	S0= DCacheReg.Out=>DR.In                                    Premise(F422)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F423)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F424)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F425)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F426)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F427)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F428)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F429)
	S0= DMem.RAddr={pid,base+{16{offset[15]},offset}}           Path(S0,S0)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F430)
	S0= DMem.Out=>DR.In                                         Premise(F431)
	S0= IR.Out20_16=>GPR.WReg                                   Premise(F432)
	S0= GPR.WReg=rT                                             Path(S0,S0)
	S0= DR.Out=>MemDataSel.In                                   Premise(F433)
	S0= ALUOut.Out1_0=>MemDataSel.Addr                          Premise(F434)
	S0= MemDataSel.Addr={base+{16{offset[15]},offset}}[1:0]     Path(S0,S0)
	S0= MemDataSel.Out=>GPR.WData                               Premise(F435)
	S0= CtrlASIDIn=0                                            Premise(F436)
	S0= CtrlCP0=0                                               Premise(F437)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F438)
	S0= CtrlExCodeIn=0                                          Premise(F439)
	S0= CtrlIMMU=0                                              Premise(F440)
	S0= CtrlPC=0                                                Premise(F441)
	S0= CtrlPCInc=0                                             Premise(F442)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F443)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F444)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F445)
	S0= ICache[addr]={32,rS,rT,offset}                          ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F446)
	S0= [ICacheReg]={32,rS,rT,offset}                           ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F447)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F448)
	S0= IMem[{pid,addr}]={32,rS,rT,offset}                      IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F449)
	S0= CtrlIR=0                                                Premise(F450)
	S0= [IR]={32,rS,rT,offset}                                  IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F451)
	S0= GPR[rS]=base                                            GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F452)
	S0= [A]=base                                                A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F453)
	S0= [B]={16{offset[15]},offset}                             B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F454)
	S0= [ALUOut]=base+{16{offset[15]},offset}                   ALUOut-Hold(S0,S0)
	S0= CtrlDMMU=0                                              Premise(F455)
	S0= CtrlDAddrReg=0                                          Premise(F456)
	S0= [DAddrReg]={pid,base+{16{offset[15]},offset}}           DAddrReg-Hold(S0,S0)
	S0= CtrlDMMUHitReg=0                                        Premise(F457)
	S0= [DMMUHitReg]=DMMUHit(pid,base+{16{offset[15]},offset})  DMMUHitReg-Hold(S0,S0)
	S0= CtrlDCache=0                                            Premise(F458)
	S0= DCache[DCacheRLineEA(base+{16{offset[15]},offset})]=dataDCache-Hold(S0,S0)
	S0= CtrlDCacheReg=0                                         Premise(F459)
	S0= CtrlDCacheHitReg=0                                      Premise(F460)
	S0= [DCacheHitReg]=DCacheHit(base+{16{offset[15]},offset})  DCacheHitReg-Hold(S0,S0)
	S0= CtrlDR=0                                                Premise(F461)
	S0= CtrlDMem=0                                              Premise(F462)
	S0= DMem[{pid,base+{16{offset[15]},offset}}]=a              DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F463)
	S0= DMem.Out=a                                              DMem-Read(S0,S0,S0,S0)
	S0= DR.In=a                                                 Path(S0,S0)
	S0= DMem.MEM8WordOut=DMemGet8Word({pid,base+{16{offset[15]},offset}})DMem-Read(S0,S0,S0,S0)
	S0= DCache.WData=DMemGet8Word({pid,base+{16{offset[15]},offset}})Path(S0,S0)

DMMU2	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={32,rS,rT,offset}                         ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{32,rS,rT,offset}}[1:0]               ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{32,rS,rT,offset}}[4:0]               ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= IR.Out={32,rS,rT,offset}                                IR-Out(S0)
	S0= IR.Out31_26=32                                          IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=rT                                          IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= A.Out=base                                              A-Out(S0)
	S0= A.Out1_0={base}[1:0]                                    A-Out(S0)
	S0= A.Out4_0={base}[4:0]                                    A-Out(S0)
	S0= B.Out={16{offset[15]},offset}                           B-Out(S0)
	S0= B.Out1_0={{16{offset[15]},offset}}[1:0]                 B-Out(S0)
	S0= B.Out4_0={{16{offset[15]},offset}}[4:0]                 B-Out(S0)
	S0= ALUOut.Out=base+{16{offset[15]},offset}                 ALUOut-Out(S0)
	S0= ALUOut.Out1_0={base+{16{offset[15]},offset}}[1:0]       ALUOut-Out(S0)
	S0= ALUOut.Out4_0={base+{16{offset[15]},offset}}[4:0]       ALUOut-Out(S0)
	S0= DAddrReg.Out={pid,base+{16{offset[15]},offset}}         DAddrReg-Out(S0)
	S0= DAddrReg.Out1_0={{pid,base+{16{offset[15]},offset}}}[1:0]DAddrReg-Out(S0)
	S0= DAddrReg.Out4_0={{pid,base+{16{offset[15]},offset}}}[4:0]DAddrReg-Out(S0)
	S0= DMMUHitReg.Out=DMMUHit(pid,base+{16{offset[15]},offset})DMMUHitReg-Out(S0)
	S0= DMMUHitReg.Out1_0={DMMUHit(pid,base+{16{offset[15]},offset})}[1:0]DMMUHitReg-Out(S0)
	S0= DMMUHitReg.Out4_0={DMMUHit(pid,base+{16{offset[15]},offset})}[4:0]DMMUHitReg-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= DCacheHitReg.Out=DCacheHit(base+{16{offset[15]},offset})DCacheHitReg-Out(S0)
	S0= DCacheHitReg.Out1_0={DCacheHit(base+{16{offset[15]},offset})}[1:0]DCacheHitReg-Out(S0)
	S0= DCacheHitReg.Out4_0={DCacheHit(base+{16{offset[15]},offset})}[4:0]DCacheHitReg-Out(S0)
	S0= CP0.ASID=>IMMU.PID                                      Premise(F464)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F465)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F466)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F467)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F468)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F469)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F470)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F471)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F472)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F473)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={32,rS,rT,offset}                              IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F474)
	S0= IRMux.MemData={32,rS,rT,offset}                         Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F475)
	S0= IRMux.CacheData={32,rS,rT,offset}                       Path(S0,S0)
	S0= IRMux.Out={32,rS,rT,offset}                             IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F476)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F477)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F478)
	S0= IR.In={32,rS,rT,offset}                                 Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F479)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F480)
	S0= IR.Out31_26=>CU.Op                                      Premise(F481)
	S0= CU.Op=32                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= CU.MemDataSelFunc=mds_lwz                               CU(S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F482)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=base                                         GPR-Read(S0,S0)
	S0= IR.Out15_0=>IMMEXT.In                                   Premise(F483)
	S0= IMMEXT.In=offset                                        Path(S0,S0)
	S0= IMMEXT.Out={16{offset[15]},offset}                      IMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F484)
	S0= A.In=base                                               Path(S0,S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F485)
	S0= B.In={16{offset[15]},offset}                            Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F486)
	S0= ALU.A=base                                              Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F487)
	S0= ALU.B={16{offset[15]},offset}                           Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F488)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F489)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F490)
	S0= DMMU.IEA=base+{16{offset[15]},offset}                   Path(S0,S0)
	S0= DMMU.Addr={pid,base+{16{offset[15]},offset}}            DMMU-Search(S0,S0)
	S0= DMMU.Hit=DMMUHit(pid,base+{16{offset[15]},offset})      DMMU-Search(S0,S0)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F491)
	S0= DAddrReg.In={pid,base+{16{offset[15]},offset}}          Path(S0,S0)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F492)
	S0= DMMUHitReg.In=DMMUHit(pid,base+{16{offset[15]},offset}) Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F493)
	S0= DCache.IEA=base+{16{offset[15]},offset}                 Path(S0,S0)
	S0= DCache.Hit=DCacheHit(base+{16{offset[15]},offset})      DCache-Search(S0)
	S0= DCache.Out=>DCacheReg.In                                Premise(F494)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F495)
	S0= DCacheHitReg.In=DCacheHit(base+{16{offset[15]},offset}) Path(S0,S0)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F496)
	S0= CU.DMemHit=DMMUHit(pid,base+{16{offset[15]},offset})    Path(S0,S0)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F497)
	S0= CU.DCacheHit=DCacheHit(base+{16{offset[15]},offset})    Path(S0,S0)
	S0= DCacheReg.Out=>DR.In                                    Premise(F498)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F499)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F500)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F501)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F502)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F503)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F504)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F505)
	S0= DMem.RAddr={pid,base+{16{offset[15]},offset}}           Path(S0,S0)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F506)
	S0= DMem.Out=>DR.In                                         Premise(F507)
	S0= IR.Out20_16=>GPR.WReg                                   Premise(F508)
	S0= GPR.WReg=rT                                             Path(S0,S0)
	S0= DR.Out=>MemDataSel.In                                   Premise(F509)
	S0= ALUOut.Out1_0=>MemDataSel.Addr                          Premise(F510)
	S0= MemDataSel.Addr={base+{16{offset[15]},offset}}[1:0]     Path(S0,S0)
	S0= MemDataSel.Out=>GPR.WData                               Premise(F511)
	S0= CtrlASIDIn=0                                            Premise(F512)
	S0= CtrlCP0=0                                               Premise(F513)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F514)
	S0= CtrlExCodeIn=0                                          Premise(F515)
	S0= CtrlIMMU=0                                              Premise(F516)
	S0= CtrlPC=0                                                Premise(F517)
	S0= CtrlPCInc=0                                             Premise(F518)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F519)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F520)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F521)
	S0= ICache[addr]={32,rS,rT,offset}                          ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F522)
	S0= [ICacheReg]={32,rS,rT,offset}                           ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F523)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F524)
	S0= IMem[{pid,addr}]={32,rS,rT,offset}                      IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F525)
	S0= CtrlIR=0                                                Premise(F526)
	S0= [IR]={32,rS,rT,offset}                                  IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F527)
	S0= GPR[rS]=base                                            GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F528)
	S0= [A]=base                                                A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F529)
	S0= [B]={16{offset[15]},offset}                             B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F530)
	S0= [ALUOut]=base+{16{offset[15]},offset}                   ALUOut-Hold(S0,S0)
	S0= CtrlDMMU=0                                              Premise(F531)
	S0= CtrlDAddrReg=0                                          Premise(F532)
	S0= [DAddrReg]={pid,base+{16{offset[15]},offset}}           DAddrReg-Hold(S0,S0)
	S0= CtrlDMMUHitReg=0                                        Premise(F533)
	S0= [DMMUHitReg]=DMMUHit(pid,base+{16{offset[15]},offset})  DMMUHitReg-Hold(S0,S0)
	S0= CtrlDCache=1                                            Premise(F534)
	S0= CtrlDCacheReg=0                                         Premise(F535)
	S0= CtrlDCacheHitReg=0                                      Premise(F536)
	S0= [DCacheHitReg]=DCacheHit(base+{16{offset[15]},offset})  DCacheHitReg-Hold(S0,S0)
	S0= CtrlDR=1                                                Premise(F537)
	S0= CtrlDMem=0                                              Premise(F538)
	S0= DMem[{pid,base+{16{offset[15]},offset}}]=a              DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F539)
	S0= DMem.Out=a                                              DMem-Read(S0,S0,S0,S0)
	S0= DR.In=a                                                 Path(S0,S0)
	S0= [DR]=a                                                  DR-Write(S0,S0)
	S0= DMem.MEM8WordOut=DMemGet8Word({pid,base+{16{offset[15]},offset}})DMem-Read(S0,S0,S0,S0)
	S0= DCache.WData=DMemGet8Word({pid,base+{16{offset[15]},offset}})Path(S0,S0)
	S0= DCache[line_base+{16{offset[15]},offset}]=DMemGet8Word({pid,base+{16{offset[15]},offset}})DCache-Write8Word(S0,S0,S0)

WB	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out1_0={{pid,addr}}[1:0]                       IAddrReg-Out(S0)
	S0= IAddrReg.Out4_0={{pid,addr}}[4:0]                       IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out1_0={IMMUHit(pid,addr)}[1:0]              IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out4_0={IMMUHit(pid,addr)}[4:0]              IMMUHitReg-Out(S0)
	S0= ICacheReg.Out={32,rS,rT,offset}                         ICacheReg-Out(S0)
	S0= ICacheReg.Out1_0={{32,rS,rT,offset}}[1:0]               ICacheReg-Out(S0)
	S0= ICacheReg.Out4_0={{32,rS,rT,offset}}[4:0]               ICacheReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out1_0={ICacheHit(addr)}[1:0]              ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out4_0={ICacheHit(addr)}[4:0]              ICacheHitReg-Out(S0)
	S0= IR.Out={32,rS,rT,offset}                                IR-Out(S0)
	S0= IR.Out31_26=32                                          IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=rT                                          IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= A.Out=base                                              A-Out(S0)
	S0= A.Out1_0={base}[1:0]                                    A-Out(S0)
	S0= A.Out4_0={base}[4:0]                                    A-Out(S0)
	S0= B.Out={16{offset[15]},offset}                           B-Out(S0)
	S0= B.Out1_0={{16{offset[15]},offset}}[1:0]                 B-Out(S0)
	S0= B.Out4_0={{16{offset[15]},offset}}[4:0]                 B-Out(S0)
	S0= ALUOut.Out=base+{16{offset[15]},offset}                 ALUOut-Out(S0)
	S0= ALUOut.Out1_0={base+{16{offset[15]},offset}}[1:0]       ALUOut-Out(S0)
	S0= ALUOut.Out4_0={base+{16{offset[15]},offset}}[4:0]       ALUOut-Out(S0)
	S0= DAddrReg.Out={pid,base+{16{offset[15]},offset}}         DAddrReg-Out(S0)
	S0= DAddrReg.Out1_0={{pid,base+{16{offset[15]},offset}}}[1:0]DAddrReg-Out(S0)
	S0= DAddrReg.Out4_0={{pid,base+{16{offset[15]},offset}}}[4:0]DAddrReg-Out(S0)
	S0= DMMUHitReg.Out=DMMUHit(pid,base+{16{offset[15]},offset})DMMUHitReg-Out(S0)
	S0= DMMUHitReg.Out1_0={DMMUHit(pid,base+{16{offset[15]},offset})}[1:0]DMMUHitReg-Out(S0)
	S0= DMMUHitReg.Out4_0={DMMUHit(pid,base+{16{offset[15]},offset})}[4:0]DMMUHitReg-Out(S0)
	S0= DCacheHitReg.Out=DCacheHit(base+{16{offset[15]},offset})DCacheHitReg-Out(S0)
	S0= DCacheHitReg.Out1_0={DCacheHit(base+{16{offset[15]},offset})}[1:0]DCacheHitReg-Out(S0)
	S0= DCacheHitReg.Out4_0={DCacheHit(base+{16{offset[15]},offset})}[4:0]DCacheHitReg-Out(S0)
	S0= DR.Out=a                                                DR-Out(S0)
	S0= DR.Out1_0={a}[1:0]                                      DR-Out(S0)
	S0= DR.Out4_0={a}[4:0]                                      DR-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= CP0.ASID=>IMMU.PID                                      Premise(F540)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F541)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F542)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F543)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F544)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F545)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F546)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F547)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F548)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F549)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={32,rS,rT,offset}                              IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F550)
	S0= IRMux.MemData={32,rS,rT,offset}                         Path(S0,S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F551)
	S0= IRMux.CacheData={32,rS,rT,offset}                       Path(S0,S0)
	S0= IRMux.Out={32,rS,rT,offset}                             IRMux-Select(S0,S0)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F552)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F553)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F554)
	S0= IR.In={32,rS,rT,offset}                                 Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F555)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F556)
	S0= IR.Out31_26=>CU.Op                                      Premise(F557)
	S0= CU.Op=32                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= CU.MemDataSelFunc=mds_lwz                               CU(S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F558)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=base                                         GPR-Read(S0,S0)
	S0= IR.Out15_0=>IMMEXT.In                                   Premise(F559)
	S0= IMMEXT.In=offset                                        Path(S0,S0)
	S0= IMMEXT.Out={16{offset[15]},offset}                      IMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F560)
	S0= A.In=base                                               Path(S0,S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F561)
	S0= B.In={16{offset[15]},offset}                            Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F562)
	S0= ALU.A=base                                              Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F563)
	S0= ALU.B={16{offset[15]},offset}                           Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F564)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F565)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F566)
	S0= DMMU.IEA=base+{16{offset[15]},offset}                   Path(S0,S0)
	S0= DMMU.Addr={pid,base+{16{offset[15]},offset}}            DMMU-Search(S0,S0)
	S0= DMMU.Hit=DMMUHit(pid,base+{16{offset[15]},offset})      DMMU-Search(S0,S0)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F567)
	S0= DAddrReg.In={pid,base+{16{offset[15]},offset}}          Path(S0,S0)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F568)
	S0= DMMUHitReg.In=DMMUHit(pid,base+{16{offset[15]},offset}) Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F569)
	S0= DCache.IEA=base+{16{offset[15]},offset}                 Path(S0,S0)
	S0= DCache.Hit=DCacheHit(base+{16{offset[15]},offset})      DCache-Search(S0)
	S0= DCache.Out=>DCacheReg.In                                Premise(F570)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F571)
	S0= DCacheHitReg.In=DCacheHit(base+{16{offset[15]},offset}) Path(S0,S0)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F572)
	S0= CU.DMemHit=DMMUHit(pid,base+{16{offset[15]},offset})    Path(S0,S0)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F573)
	S0= CU.DCacheHit=DCacheHit(base+{16{offset[15]},offset})    Path(S0,S0)
	S0= DCacheReg.Out=>DR.In                                    Premise(F574)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F575)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= CP0.ASID=>DMMU.PID                                      Premise(F576)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F577)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F578)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F579)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F580)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F581)
	S0= DMem.RAddr={pid,base+{16{offset[15]},offset}}           Path(S0,S0)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F582)
	S0= DMem.Out=>DR.In                                         Premise(F583)
	S0= IR.Out20_16=>GPR.WReg                                   Premise(F584)
	S0= GPR.WReg=rT                                             Path(S0,S0)
	S0= DR.Out=>MemDataSel.In                                   Premise(F585)
	S0= MemDataSel.In=a                                         Path(S0,S0)
	S0= ALUOut.Out1_0=>MemDataSel.Addr                          Premise(F586)
	S0= MemDataSel.Addr={base+{16{offset[15]},offset}}[1:0]     Path(S0,S0)
	S0= MemDataSel.Func=6'b001001                               Premise(F587)
	S0= MemDataSel.Out={24{a[{base+{16{offset[15]},offset}}[1:0]*8+7,{base+{16{offset[15]},offset}}[1:0]*8][7]},a[{base+{16{offset[15]},offset}}[1:0]*8+7,{base+{16{offset[15]},offset}}[1:0]*8]}MemDataSel(S0,S0)
	S0= MemDataSel.Out=>GPR.WData                               Premise(F588)
	S0= GPR.WData={24{a[{base+{16{offset[15]},offset}}[1:0]*8+7,{base+{16{offset[15]},offset}}[1:0]*8][7]},a[{base+{16{offset[15]},offset}}[1:0]*8+7,{base+{16{offset[15]},offset}}[1:0]*8]}Path(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F589)
	S0= CtrlCP0=0                                               Premise(F590)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F591)
	S0= CtrlExCodeIn=0                                          Premise(F592)
	S0= CtrlIMMU=0                                              Premise(F593)
	S0= CtrlPC=0                                                Premise(F594)
	S0= CtrlPCInc=0                                             Premise(F595)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F596)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F597)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F598)
	S0= ICache[addr]={32,rS,rT,offset}                          ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F599)
	S0= [ICacheReg]={32,rS,rT,offset}                           ICacheReg-Hold(S0,S0)
	S0= CtrlICacheHitReg=0                                      Premise(F600)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F601)
	S0= IMem[{pid,addr}]={32,rS,rT,offset}                      IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F602)
	S0= CtrlIR=0                                                Premise(F603)
	S0= [IR]={32,rS,rT,offset}                                  IR-Hold(S0,S0)
	S0= CtrlGPR=1                                               Premise(F604)
	S0= GPR[rT]={24{a[{base+{16{offset[15]},offset}}[1:0]*8+7,{base+{16{offset[15]},offset}}[1:0]*8][7]},a[{base+{16{offset[15]},offset}}[1:0]*8+7,{base+{16{offset[15]},offset}}[1:0]*8]}GPR-Write(S0,S0,S0)
	S0= CtrlA=0                                                 Premise(F605)
	S0= [A]=base                                                A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F606)
	S0= [B]={16{offset[15]},offset}                             B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F607)
	S0= [ALUOut]=base+{16{offset[15]},offset}                   ALUOut-Hold(S0,S0)
	S0= CtrlDMMU=0                                              Premise(F608)
	S0= CtrlDAddrReg=0                                          Premise(F609)
	S0= [DAddrReg]={pid,base+{16{offset[15]},offset}}           DAddrReg-Hold(S0,S0)
	S0= CtrlDMMUHitReg=0                                        Premise(F610)
	S0= [DMMUHitReg]=DMMUHit(pid,base+{16{offset[15]},offset})  DMMUHitReg-Hold(S0,S0)
	S0= CtrlDCache=0                                            Premise(F611)
	S0= DCache[line_base+{16{offset[15]},offset}]=DMemGet8Word({pid,base+{16{offset[15]},offset}})DCache-Hold(S0,S0)
	S0= CtrlDCacheReg=0                                         Premise(F612)
	S0= CtrlDCacheHitReg=0                                      Premise(F613)
	S0= [DCacheHitReg]=DCacheHit(base+{16{offset[15]},offset})  DCacheHitReg-Hold(S0,S0)
	S0= CtrlDR=0                                                Premise(F614)
	S0= [DR]=a                                                  DR-Hold(S0,S0)
	S0= CtrlDMem=0                                              Premise(F615)
	S0= DMem[{pid,base+{16{offset[15]},offset}}]=a              DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F616)
	S0= DMem.Out=a                                              DMem-Read(S0,S0,S0,S0)
	S0= DR.In=a                                                 Path(S0,S0)
	S0= DMem.MEM8WordOut=DMemGet8Word({pid,base+{16{offset[15]},offset}})DMem-Read(S0,S0,S0,S0)
	S0= DCache.WData=DMemGet8Word({pid,base+{16{offset[15]},offset}})Path(S0,S0)

POST	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= ICache[addr]={32,rS,rT,offset}                          ICache-Hold(S0,S0)
	S0= [ICacheReg]={32,rS,rT,offset}                           ICacheReg-Hold(S0,S0)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= IMem[{pid,addr}]={32,rS,rT,offset}                      IMem-Hold(S0,S0)
	S0= [IR]={32,rS,rT,offset}                                  IR-Hold(S0,S0)
	S0= GPR[rT]={24{a[{base+{16{offset[15]},offset}}[1:0]*8+7,{base+{16{offset[15]},offset}}[1:0]*8][7]},a[{base+{16{offset[15]},offset}}[1:0]*8+7,{base+{16{offset[15]},offset}}[1:0]*8]}GPR-Write(S0,S0,S0)
	S0= [A]=base                                                A-Hold(S0,S0)
	S0= [B]={16{offset[15]},offset}                             B-Hold(S0,S0)
	S0= [ALUOut]=base+{16{offset[15]},offset}                   ALUOut-Hold(S0,S0)
	S0= [DAddrReg]={pid,base+{16{offset[15]},offset}}           DAddrReg-Hold(S0,S0)
	S0= [DMMUHitReg]=DMMUHit(pid,base+{16{offset[15]},offset})  DMMUHitReg-Hold(S0,S0)
	S0= DCache[line_base+{16{offset[15]},offset}]=DMemGet8Word({pid,base+{16{offset[15]},offset}})DCache-Hold(S0,S0)
	S0= [DCacheHitReg]=DCacheHit(base+{16{offset[15]},offset})  DCacheHitReg-Hold(S0,S0)
	S0= [DR]=a                                                  DR-Hold(S0,S0)
	S0= DMem[{pid,base+{16{offset[15]},offset}}]=a              DMem-Hold(S0,S0)

