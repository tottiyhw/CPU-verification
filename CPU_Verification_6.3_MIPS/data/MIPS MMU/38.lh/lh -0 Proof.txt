
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={33,rS,rT,offset}                      Premise(F2)
	S3= ICache[addr]={33,rS,rT,offset}                          Premise(F3)
	S4= GPR[rS]=base                                            Premise(F4)
	S5= DCache[base+{16{offset[15]},offset}]=a                  Premise(F6)

IF	S6= CP0.ASID=pid                                            ASID-Read(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F8)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F9)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F10)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F12)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={33,rS,rT,offset}                           ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F13)
	S19= ICacheReg.In={33,rS,rT,offset}                         Path(S17,S18)
	S20= CtrlPC=0                                               Premise(F57)
	S21= CtrlPCInc=0                                            Premise(F58)
	S22= PC[Out]=addr                                           PC-Hold(S1,S20,S21)
	S23= CtrlIAddrReg=1                                         Premise(F59)
	S24= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S23)
	S25= CtrlICacheReg=1                                        Premise(F62)
	S26= [ICacheReg]={33,rS,rT,offset}                          ICacheReg-Write(S19,S25)
	S27= CtrlIMem=0                                             Premise(F64)
	S28= IMem[{pid,addr}]={33,rS,rT,offset}                     IMem-Hold(S2,S27)
	S29= CtrlGPR=0                                              Premise(F67)
	S30= GPR[rS]=base                                           GPR-Hold(S4,S29)
	S31= CtrlDCache=0                                           Premise(F74)
	S32= DCache[base+{16{offset[15]},offset}]=a                 DCache-Hold(S5,S31)

IMMU	S33= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S24)
	S34= ICacheReg.Out={33,rS,rT,offset}                        ICacheReg-Out(S26)
	S35= IAddrReg.Out=>IMem.RAddr                               Premise(F89)
	S36= IMem.RAddr={pid,addr}                                  Path(S33,S35)
	S37= IMem.Out={33,rS,rT,offset}                             IMem-Read(S36,S28)
	S38= IMem.Out=>IRMux.MemData                                Premise(F90)
	S39= IRMux.MemData={33,rS,rT,offset}                        Path(S37,S38)
	S40= ICacheReg.Out=>IRMux.CacheData                         Premise(F91)
	S41= IRMux.CacheData={33,rS,rT,offset}                      Path(S34,S40)
	S42= IRMux.Out={33,rS,rT,offset}                            IRMux-Select(S39,S41)
	S43= IRMux.Out=>IR.In                                       Premise(F94)
	S44= IR.In={33,rS,rT,offset}                                Path(S42,S43)
	S45= CtrlPC=0                                               Premise(F129)
	S46= CtrlPCInc=1                                            Premise(F130)
	S47= PC[Out]=addr+4                                         PC-Inc(S22,S45,S46)
	S48= CtrlIR=1                                               Premise(F138)
	S49= [IR]={33,rS,rT,offset}                                 IR-Write(S44,S48)
	S50= CtrlGPR=0                                              Premise(F139)
	S51= GPR[rS]=base                                           GPR-Hold(S30,S50)
	S52= CtrlDCache=0                                           Premise(F146)
	S53= DCache[base+{16{offset[15]},offset}]=a                 DCache-Hold(S32,S52)

ID	S54= IR.Out25_21=rS                                         IR-Out(S49)
	S55= IR.Out15_0=offset                                      IR-Out(S49)
	S56= IR.Out25_21=>GPR.RReg1                                 Premise(F170)
	S57= GPR.RReg1=rS                                           Path(S54,S56)
	S58= GPR.Rdata1=base                                        GPR-Read(S57,S51)
	S59= IR.Out15_0=>IMMEXT.In                                  Premise(F171)
	S60= IMMEXT.In=offset                                       Path(S55,S59)
	S61= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S60)
	S62= GPR.Rdata1=>A.In                                       Premise(F172)
	S63= A.In=base                                              Path(S58,S62)
	S64= IMMEXT.Out=>B.In                                       Premise(F173)
	S65= B.In={16{offset[15]},offset}                           Path(S61,S64)
	S66= CtrlPC=0                                               Premise(F201)
	S67= CtrlPCInc=0                                            Premise(F202)
	S68= PC[Out]=addr+4                                         PC-Hold(S47,S66,S67)
	S69= CtrlIR=0                                               Premise(F210)
	S70= [IR]={33,rS,rT,offset}                                 IR-Hold(S49,S69)
	S71= CtrlA=1                                                Premise(F212)
	S72= [A]=base                                               A-Write(S63,S71)
	S73= CtrlB=1                                                Premise(F213)
	S74= [B]={16{offset[15]},offset}                            B-Write(S65,S73)
	S75= CtrlDCache=0                                           Premise(F218)
	S76= DCache[base+{16{offset[15]},offset}]=a                 DCache-Hold(S53,S75)

EX	S77= A.Out=base                                             A-Out(S72)
	S78= B.Out={16{offset[15]},offset}                          B-Out(S74)
	S79= A.Out=>ALU.A                                           Premise(F246)
	S80= ALU.A=base                                             Path(S77,S79)
	S81= B.Out=>ALU.B                                           Premise(F247)
	S82= ALU.B={16{offset[15]},offset}                          Path(S78,S81)
	S83= ALU.Out=base+{16{offset[15]},offset}                   ALU(S80,S82)
	S84= ALU.Out=>ALUOut.In                                     Premise(F249)
	S85= ALUOut.In=base+{16{offset[15]},offset}                 Path(S83,S84)
	S86= CtrlPC=0                                               Premise(F274)
	S87= CtrlPCInc=0                                            Premise(F275)
	S88= PC[Out]=addr+4                                         PC-Hold(S68,S86,S87)
	S89= CtrlIR=0                                               Premise(F283)
	S90= [IR]={33,rS,rT,offset}                                 IR-Hold(S70,S89)
	S91= CtrlALUOut=1                                           Premise(F287)
	S92= [ALUOut]=base+{16{offset[15]},offset}                  ALUOut-Write(S85,S91)
	S93= CtrlDCache=0                                           Premise(F291)
	S94= DCache[base+{16{offset[15]},offset}]=a                 DCache-Hold(S76,S93)

MEM	S95= ALUOut.Out=base+{16{offset[15]},offset}                ALUOut-Out(S92)
	S96= ALUOut.Out=>DCache.IEA                                 Premise(F326)
	S97= DCache.IEA=base+{16{offset[15]},offset}                Path(S95,S96)
	S98= DCache.Out=a                                           DCache-Search(S97,S94)
	S99= DCache.Out=>DCacheReg.In                               Premise(F327)
	S100= DCacheReg.In=a                                        Path(S98,S99)
	S101= CtrlPC=0                                              Premise(F346)
	S102= CtrlPCInc=0                                           Premise(F347)
	S103= PC[Out]=addr+4                                        PC-Hold(S88,S101,S102)
	S104= CtrlIR=0                                              Premise(F355)
	S105= [IR]={33,rS,rT,offset}                                IR-Hold(S90,S104)
	S106= CtrlALUOut=0                                          Premise(F359)
	S107= [ALUOut]=base+{16{offset[15]},offset}                 ALUOut-Hold(S92,S106)
	S108= CtrlDCacheReg=1                                       Premise(F364)
	S109= [DCacheReg]=a                                         DCacheReg-Write(S100,S108)

DMMU1	S110= DCacheReg.Out=a                                       DCacheReg-Out(S109)
	S111= DCacheReg.Out=>DR.In                                  Premise(F403)
	S112= DR.In=a                                               Path(S110,S111)
	S113= CtrlPC=0                                              Premise(F418)
	S114= CtrlPCInc=0                                           Premise(F419)
	S115= PC[Out]=addr+4                                        PC-Hold(S103,S113,S114)
	S116= CtrlIR=0                                              Premise(F427)
	S117= [IR]={33,rS,rT,offset}                                IR-Hold(S105,S116)
	S118= CtrlALUOut=0                                          Premise(F431)
	S119= [ALUOut]=base+{16{offset[15]},offset}                 ALUOut-Hold(S107,S118)
	S120= CtrlDR=1                                              Premise(F438)
	S121= [DR]=a                                                DR-Write(S112,S120)

DMMU2	S122= CtrlPC=0                                              Premise(F490)
	S123= CtrlPCInc=0                                           Premise(F491)
	S124= PC[Out]=addr+4                                        PC-Hold(S115,S122,S123)
	S125= CtrlIR=0                                              Premise(F499)
	S126= [IR]={33,rS,rT,offset}                                IR-Hold(S117,S125)
	S127= CtrlALUOut=0                                          Premise(F503)
	S128= [ALUOut]=base+{16{offset[15]},offset}                 ALUOut-Hold(S119,S127)
	S129= CtrlDR=0                                              Premise(F510)
	S130= [DR]=a                                                DR-Hold(S121,S129)

WB	S131= IR.Out20_16=rT                                        IR-Out(S126)
	S132= ALUOut.Out1_0={base+{16{offset[15]},offset}}[1:0]     ALUOut-Out(S128)
	S133= DR.Out=a                                              DR-Out(S130)
	S134= IR.Out20_16=>GPR.WReg                                 Premise(F553)
	S135= GPR.WReg=rT                                           Path(S131,S134)
	S136= DR.Out=>MemDataSel.In                                 Premise(F554)
	S137= MemDataSel.In=a                                       Path(S133,S136)
	S138= ALUOut.Out1_0=>MemDataSel.Addr                        Premise(F555)
	S139= MemDataSel.Addr={base+{16{offset[15]},offset}}[1:0]   Path(S132,S138)
	S140= MemDataSel.Out={16{a[{base+{16{offset[15]},offset}}[1:0]*8+15,{base+{16{offset[15]},offset}}[1:0]*8][15]},a[{base+{16{offset[15]},offset}}[1:0]*8+15,{base+{16{offset[15]},offset}}[1:0]*8]}MemDataSel(S137,S139)
	S141= MemDataSel.Out=>GPR.WData                             Premise(F557)
	S142= GPR.WData={16{a[{base+{16{offset[15]},offset}}[1:0]*8+15,{base+{16{offset[15]},offset}}[1:0]*8][15]},a[{base+{16{offset[15]},offset}}[1:0]*8+15,{base+{16{offset[15]},offset}}[1:0]*8]}Path(S140,S141)
	S143= CtrlPC=0                                              Premise(F563)
	S144= CtrlPCInc=0                                           Premise(F564)
	S145= PC[Out]=addr+4                                        PC-Hold(S124,S143,S144)
	S146= CtrlGPR=1                                             Premise(F573)
	S147= GPR[rT]={16{a[{base+{16{offset[15]},offset}}[1:0]*8+15,{base+{16{offset[15]},offset}}[1:0]*8][15]},a[{base+{16{offset[15]},offset}}[1:0]*8+15,{base+{16{offset[15]},offset}}[1:0]*8]}GPR-Write(S135,S142,S146)

POST	S145= PC[Out]=addr+4                                        PC-Hold(S124,S143,S144)
	S147= GPR[rT]={16{a[{base+{16{offset[15]},offset}}[1:0]*8+15,{base+{16{offset[15]},offset}}[1:0]*8][15]},a[{base+{16{offset[15]},offset}}[1:0]*8+15,{base+{16{offset[15]},offset}}[1:0]*8]}GPR-Write(S135,S142,S146)

