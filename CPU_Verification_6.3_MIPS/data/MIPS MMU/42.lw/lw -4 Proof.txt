
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={35,rS,rT,offset}                      Premise(F2)
	S3= GPR[rS]=base                                            Premise(F3)
	S4= DCache[base+{16{offset[15]},offset}]=a                  Premise(F5)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F7)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F8)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F56)
	S15= CtrlPCInc=0                                            Premise(F57)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F58)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F63)
	S20= IMem[{pid,addr}]={35,rS,rT,offset}                     IMem-Hold(S2,S19)
	S21= CtrlGPR=0                                              Premise(F66)
	S22= GPR[rS]=base                                           GPR-Hold(S3,S21)
	S23= CtrlDCache=0                                           Premise(F73)
	S24= DCache[base+{16{offset[15]},offset}]=a                 DCache-Hold(S4,S23)

IMMU	S25= PC.Out=addr                                            PC-Out(S16)
	S26= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S27= PC.Out=>ICache.IEA                                     Premise(F83)
	S28= ICache.IEA=addr                                        Path(S25,S27)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F88)
	S30= IMem.RAddr={pid,addr}                                  Path(S26,S29)
	S31= IMem.Out={35,rS,rT,offset}                             IMem-Read(S30,S20)
	S32= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S30,S20)
	S33= IMem.Out=>IRMux.MemData                                Premise(F89)
	S34= IRMux.MemData={35,rS,rT,offset}                        Path(S31,S33)
	S35= IRMux.Out={35,rS,rT,offset}                            IRMux-Select(S34)
	S36= IRMux.Out=>IR.In                                       Premise(F93)
	S37= IR.In={35,rS,rT,offset}                                Path(S35,S36)
	S38= IMem.MEM8WordOut=>ICache.WData                         Premise(F94)
	S39= ICache.WData=IMemGet8Word({pid,addr})                  Path(S32,S38)
	S40= CtrlPC=0                                               Premise(F128)
	S41= CtrlPCInc=1                                            Premise(F129)
	S42= PC[Out]=addr+4                                         PC-Inc(S16,S40,S41)
	S43= CtrlICache=1                                           Premise(F132)
	S44= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S28,S39,S43)
	S45= CtrlIR=1                                               Premise(F137)
	S46= [IR]={35,rS,rT,offset}                                 IR-Write(S37,S45)
	S47= CtrlGPR=0                                              Premise(F138)
	S48= GPR[rS]=base                                           GPR-Hold(S22,S47)
	S49= CtrlDCache=0                                           Premise(F145)
	S50= DCache[base+{16{offset[15]},offset}]=a                 DCache-Hold(S24,S49)

ID	S51= IR.Out25_21=rS                                         IR-Out(S46)
	S52= IR.Out15_0=offset                                      IR-Out(S46)
	S53= IR.Out25_21=>GPR.RReg1                                 Premise(F169)
	S54= GPR.RReg1=rS                                           Path(S51,S53)
	S55= GPR.Rdata1=base                                        GPR-Read(S54,S48)
	S56= IR.Out15_0=>IMMEXT.In                                  Premise(F170)
	S57= IMMEXT.In=offset                                       Path(S52,S56)
	S58= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S57)
	S59= GPR.Rdata1=>A.In                                       Premise(F171)
	S60= A.In=base                                              Path(S55,S59)
	S61= IMMEXT.Out=>B.In                                       Premise(F172)
	S62= B.In={16{offset[15]},offset}                           Path(S58,S61)
	S63= CtrlPC=0                                               Premise(F200)
	S64= CtrlPCInc=0                                            Premise(F201)
	S65= PC[Out]=addr+4                                         PC-Hold(S42,S63,S64)
	S66= CtrlICache=0                                           Premise(F204)
	S67= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S44,S66)
	S68= CtrlIR=0                                               Premise(F209)
	S69= [IR]={35,rS,rT,offset}                                 IR-Hold(S46,S68)
	S70= CtrlA=1                                                Premise(F211)
	S71= [A]=base                                               A-Write(S60,S70)
	S72= CtrlB=1                                                Premise(F212)
	S73= [B]={16{offset[15]},offset}                            B-Write(S62,S72)
	S74= CtrlDCache=0                                           Premise(F217)
	S75= DCache[base+{16{offset[15]},offset}]=a                 DCache-Hold(S50,S74)

EX	S76= A.Out=base                                             A-Out(S71)
	S77= B.Out={16{offset[15]},offset}                          B-Out(S73)
	S78= A.Out=>ALU.A                                           Premise(F245)
	S79= ALU.A=base                                             Path(S76,S78)
	S80= B.Out=>ALU.B                                           Premise(F246)
	S81= ALU.B={16{offset[15]},offset}                          Path(S77,S80)
	S82= ALU.Out=base+{16{offset[15]},offset}                   ALU(S79,S81)
	S83= ALU.Out=>ALUOut.In                                     Premise(F248)
	S84= ALUOut.In=base+{16{offset[15]},offset}                 Path(S82,S83)
	S85= CtrlPC=0                                               Premise(F273)
	S86= CtrlPCInc=0                                            Premise(F274)
	S87= PC[Out]=addr+4                                         PC-Hold(S65,S85,S86)
	S88= CtrlICache=0                                           Premise(F277)
	S89= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S67,S88)
	S90= CtrlIR=0                                               Premise(F282)
	S91= [IR]={35,rS,rT,offset}                                 IR-Hold(S69,S90)
	S92= CtrlALUOut=1                                           Premise(F286)
	S93= [ALUOut]=base+{16{offset[15]},offset}                  ALUOut-Write(S84,S92)
	S94= CtrlDCache=0                                           Premise(F290)
	S95= DCache[base+{16{offset[15]},offset}]=a                 DCache-Hold(S75,S94)

MEM	S96= ALUOut.Out=base+{16{offset[15]},offset}                ALUOut-Out(S93)
	S97= ALUOut.Out=>DCache.IEA                                 Premise(F325)
	S98= DCache.IEA=base+{16{offset[15]},offset}                Path(S96,S97)
	S99= DCache.Out=a                                           DCache-Search(S98,S95)
	S100= DCache.Out=>DCacheReg.In                              Premise(F326)
	S101= DCacheReg.In=a                                        Path(S99,S100)
	S102= CtrlPC=0                                              Premise(F345)
	S103= CtrlPCInc=0                                           Premise(F346)
	S104= PC[Out]=addr+4                                        PC-Hold(S87,S102,S103)
	S105= CtrlICache=0                                          Premise(F349)
	S106= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S89,S105)
	S107= CtrlIR=0                                              Premise(F354)
	S108= [IR]={35,rS,rT,offset}                                IR-Hold(S91,S107)
	S109= CtrlALUOut=0                                          Premise(F358)
	S110= [ALUOut]=base+{16{offset[15]},offset}                 ALUOut-Hold(S93,S109)
	S111= CtrlDCacheReg=1                                       Premise(F363)
	S112= [DCacheReg]=a                                         DCacheReg-Write(S101,S111)

DMMU1	S113= DCacheReg.Out=a                                       DCacheReg-Out(S112)
	S114= DCacheReg.Out=>DR.In                                  Premise(F402)
	S115= DR.In=a                                               Path(S113,S114)
	S116= CtrlPC=0                                              Premise(F417)
	S117= CtrlPCInc=0                                           Premise(F418)
	S118= PC[Out]=addr+4                                        PC-Hold(S104,S116,S117)
	S119= CtrlICache=0                                          Premise(F421)
	S120= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S106,S119)
	S121= CtrlIR=0                                              Premise(F426)
	S122= [IR]={35,rS,rT,offset}                                IR-Hold(S108,S121)
	S123= CtrlALUOut=0                                          Premise(F430)
	S124= [ALUOut]=base+{16{offset[15]},offset}                 ALUOut-Hold(S110,S123)
	S125= CtrlDR=1                                              Premise(F437)
	S126= [DR]=a                                                DR-Write(S115,S125)

DMMU2	S127= CtrlPC=0                                              Premise(F489)
	S128= CtrlPCInc=0                                           Premise(F490)
	S129= PC[Out]=addr+4                                        PC-Hold(S118,S127,S128)
	S130= CtrlICache=0                                          Premise(F493)
	S131= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S120,S130)
	S132= CtrlIR=0                                              Premise(F498)
	S133= [IR]={35,rS,rT,offset}                                IR-Hold(S122,S132)
	S134= CtrlALUOut=0                                          Premise(F502)
	S135= [ALUOut]=base+{16{offset[15]},offset}                 ALUOut-Hold(S124,S134)
	S136= CtrlDR=0                                              Premise(F509)
	S137= [DR]=a                                                DR-Hold(S126,S136)

WB	S138= IR.Out20_16=rT                                        IR-Out(S133)
	S139= ALUOut.Out1_0={base+{16{offset[15]},offset}}[1:0]     ALUOut-Out(S135)
	S140= DR.Out=a                                              DR-Out(S137)
	S141= IR.Out20_16=>GPR.WReg                                 Premise(F552)
	S142= GPR.WReg=rT                                           Path(S138,S141)
	S143= DR.Out=>MemDataSel.In                                 Premise(F553)
	S144= MemDataSel.In=a                                       Path(S140,S143)
	S145= ALUOut.Out1_0=>MemDataSel.Addr                        Premise(F554)
	S146= MemDataSel.Addr={base+{16{offset[15]},offset}}[1:0]   Path(S139,S145)
	S147= MemDataSel.Out=a                                      MemDataSel(S144,S146)
	S148= MemDataSel.Out=>GPR.WData                             Premise(F556)
	S149= GPR.WData=a                                           Path(S147,S148)
	S150= CtrlPC=0                                              Premise(F562)
	S151= CtrlPCInc=0                                           Premise(F563)
	S152= PC[Out]=addr+4                                        PC-Hold(S129,S150,S151)
	S153= CtrlICache=0                                          Premise(F566)
	S154= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S131,S153)
	S155= CtrlGPR=1                                             Premise(F572)
	S156= GPR[rT]=a                                             GPR-Write(S142,S149,S155)

POST	S152= PC[Out]=addr+4                                        PC-Hold(S129,S150,S151)
	S154= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S131,S153)
	S156= GPR[rT]=a                                             GPR-Write(S142,S149,S155)

