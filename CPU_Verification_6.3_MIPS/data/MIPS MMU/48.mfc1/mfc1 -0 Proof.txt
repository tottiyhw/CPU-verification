
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={17,0,rT,rD,0}                         Premise(F2)
	S3= ICache[addr]={17,0,rT,rD,0}                             Premise(F3)
	S4= CP1[rD]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={17,0,rT,rD,0}                              ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={17,0,rT,rD,0}                            Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F32)
	S20= CtrlPCInc=0                                            Premise(F33)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F34)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F37)
	S25= [ICacheReg]={17,0,rT,rD,0}                             ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F39)
	S27= IMem[{pid,addr}]={17,0,rT,rD,0}                        IMem-Hold(S2,S26)
	S28= CtrlCP1=0                                              Premise(F42)
	S29= CP1[rD]=a                                              CP1-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={17,0,rT,rD,0}                           ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F53)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={17,0,rT,rD,0}                                IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F54)
	S36= IRMux.MemData={17,0,rT,rD,0}                           Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F55)
	S38= IRMux.CacheData={17,0,rT,rD,0}                         Path(S31,S37)
	S39= IRMux.Out={17,0,rT,rD,0}                               IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F58)
	S41= IR.In={17,0,rT,rD,0}                                   Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F71)
	S43= CtrlPCInc=1                                            Premise(F72)
	S44= PC[Out]=addr+4                                         PC-Inc(S21,S42,S43)
	S45= CtrlIR=1                                               Premise(F80)
	S46= [IR]={17,0,rT,rD,0}                                    IR-Write(S41,S45)
	S47= CtrlCP1=0                                              Premise(F81)
	S48= CP1[rD]=a                                              CP1-Hold(S29,S47)

ID	S49= IR.Out20_16=rT                                         IR-Out(S46)
	S50= IR.Out15_11=rD                                         IR-Out(S46)
	S51= IR.Out15_11=>CP1.RReg                                  Premise(F102)
	S52= CP1.RReg=rD                                            Path(S50,S51)
	S53= CP1.Rdata=a                                            CP1-Read(S52,S48)
	S54= IR.Out20_16=>GPR.WReg                                  Premise(F103)
	S55= GPR.WReg=rT                                            Path(S49,S54)
	S56= CP1.Rdata=>GPR.WData                                   Premise(F104)
	S57= GPR.WData=a                                            Path(S53,S56)
	S58= CtrlPC=0                                               Premise(F110)
	S59= CtrlPCInc=0                                            Premise(F111)
	S60= PC[Out]=addr+4                                         PC-Hold(S44,S58,S59)
	S61= CtrlGPR=1                                              Premise(F121)
	S62= GPR[rT]=a                                              GPR-Write(S55,S57,S61)

EX	S63= CtrlPC=0                                               Premise(F149)
	S64= CtrlPCInc=0                                            Premise(F150)
	S65= PC[Out]=addr+4                                         PC-Hold(S60,S63,S64)
	S66= CtrlGPR=0                                              Premise(F160)
	S67= GPR[rT]=a                                              GPR-Hold(S62,S66)

MEM	S68= CtrlPC=0                                               Premise(F188)
	S69= CtrlPCInc=0                                            Premise(F189)
	S70= PC[Out]=addr+4                                         PC-Hold(S65,S68,S69)
	S71= CtrlGPR=0                                              Premise(F199)
	S72= GPR[rT]=a                                              GPR-Hold(S67,S71)

DMMU1	S73= CtrlPC=0                                               Premise(F227)
	S74= CtrlPCInc=0                                            Premise(F228)
	S75= PC[Out]=addr+4                                         PC-Hold(S70,S73,S74)
	S76= CtrlGPR=0                                              Premise(F238)
	S77= GPR[rT]=a                                              GPR-Hold(S72,S76)

DMMU2	S78= CtrlPC=0                                               Premise(F266)
	S79= CtrlPCInc=0                                            Premise(F267)
	S80= PC[Out]=addr+4                                         PC-Hold(S75,S78,S79)
	S81= CtrlGPR=0                                              Premise(F277)
	S82= GPR[rT]=a                                              GPR-Hold(S77,S81)

WB	S83= CtrlPC=0                                               Premise(F305)
	S84= CtrlPCInc=0                                            Premise(F306)
	S85= PC[Out]=addr+4                                         PC-Hold(S80,S83,S84)
	S86= CtrlGPR=0                                              Premise(F316)
	S87= GPR[rT]=a                                              GPR-Hold(S82,S86)

POST	S85= PC[Out]=addr+4                                         PC-Hold(S80,S83,S84)
	S87= GPR[rT]=a                                              GPR-Hold(S82,S86)

