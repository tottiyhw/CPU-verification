
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,cc,0,0,rD,0,1}                   Premise(F2)
	S3= ICache[addr]={0,rS,cc,0,0,rD,0,1}                       Premise(F3)
	S4= GPR[rS]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={0,rS,cc,0,0,rD,0,1}                        ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={0,rS,cc,0,0,rD,0,1}                      Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F37)
	S20= CtrlPCInc=0                                            Premise(F38)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F39)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F42)
	S25= [ICacheReg]={0,rS,cc,0,0,rD,0,1}                       ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F44)
	S27= IMem[{pid,addr}]={0,rS,cc,0,0,rD,0,1}                  IMem-Hold(S2,S26)
	S28= CtrlGPR=0                                              Premise(F47)
	S29= GPR[rS]=a                                              GPR-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={0,rS,cc,0,0,rD,0,1}                     ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F60)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={0,rS,cc,0,0,rD,0,1}                          IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F61)
	S36= IRMux.MemData={0,rS,cc,0,0,rD,0,1}                     Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F62)
	S38= IRMux.CacheData={0,rS,cc,0,0,rD,0,1}                   Path(S31,S37)
	S39= IRMux.Out={0,rS,cc,0,0,rD,0,1}                         IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F65)
	S41= IR.In={0,rS,cc,0,0,rD,0,1}                             Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F83)
	S43= CtrlPCInc=1                                            Premise(F84)
	S44= PC[Out]=addr+4                                         PC-Inc(S21,S42,S43)
	S45= CtrlIR=1                                               Premise(F92)
	S46= [IR]={0,rS,cc,0,0,rD,0,1}                              IR-Write(S41,S45)
	S47= CtrlGPR=0                                              Premise(F93)
	S48= GPR[rS]=a                                              GPR-Hold(S29,S47)

ID	S49= IR.Out25_21=rS                                         IR-Out(S46)
	S50= IR.Out25_21=>GPR.RReg1                                 Premise(F115)
	S51= GPR.RReg1=rS                                           Path(S49,S50)
	S52= GPR.Rdata1=a                                           GPR-Read(S51,S48)
	S53= GPR.Rdata1=>A.In                                       Premise(F117)
	S54= A.In=a                                                 Path(S52,S53)
	S55= CtrlPC=0                                               Premise(F129)
	S56= CtrlPCInc=0                                            Premise(F130)
	S57= PC[Out]=addr+4                                         PC-Hold(S44,S55,S56)
	S58= CtrlIR=0                                               Premise(F138)
	S59= [IR]={0,rS,cc,0,0,rD,0,1}                              IR-Hold(S46,S58)
	S60= CtrlA=1                                                Premise(F140)
	S61= [A]=a                                                  A-Write(S54,S60)

EX	S62= IR.Out20_18=cc                                         IR-Out(S59)
	S63= IR.Out16=0                                             IR-Out(S59)
	S64= IR.Out20_18=>CP1.cc                                    Premise(F164)
	S65= CP1.cc=cc                                              Path(S62,S64)
	S66= IR.Out16=>CP1.tf                                       Premise(F165)
	S67= CP1.tf=0                                               Path(S63,S66)
	S68= CP1.fp=FPConditionCode(cc,0)                           FP-PRODUCT(S65,S67)
	S69= CP1.fp=>ConditionReg.In                                Premise(F166)
	S70= ConditionReg.In=FPConditionCode(cc,0)                  Path(S68,S69)
	S71= CtrlPC=0                                               Premise(F175)
	S72= CtrlPCInc=0                                            Premise(F176)
	S73= PC[Out]=addr+4                                         PC-Hold(S57,S71,S72)
	S74= CtrlIR=0                                               Premise(F184)
	S75= [IR]={0,rS,cc,0,0,rD,0,1}                              IR-Hold(S59,S74)
	S76= CtrlA=0                                                Premise(F186)
	S77= [A]=a                                                  A-Hold(S61,S76)
	S78= CtrlConditionReg=1                                     Premise(F188)
	S79= [ConditionReg]=FPConditionCode(cc,0)                   ConditionReg-Write(S70,S78)

MEM	S80= CtrlPC=0                                               Premise(F221)
	S81= CtrlPCInc=0                                            Premise(F222)
	S82= PC[Out]=addr+4                                         PC-Hold(S73,S80,S81)
	S83= CtrlIR=0                                               Premise(F230)
	S84= [IR]={0,rS,cc,0,0,rD,0,1}                              IR-Hold(S75,S83)
	S85= CtrlA=0                                                Premise(F232)
	S86= [A]=a                                                  A-Hold(S77,S85)
	S87= CtrlConditionReg=0                                     Premise(F234)
	S88= [ConditionReg]=FPConditionCode(cc,0)                   ConditionReg-Hold(S79,S87)

DMMU1	S89= CtrlPC=0                                               Premise(F267)
	S90= CtrlPCInc=0                                            Premise(F268)
	S91= PC[Out]=addr+4                                         PC-Hold(S82,S89,S90)
	S92= CtrlIR=0                                               Premise(F276)
	S93= [IR]={0,rS,cc,0,0,rD,0,1}                              IR-Hold(S84,S92)
	S94= CtrlA=0                                                Premise(F278)
	S95= [A]=a                                                  A-Hold(S86,S94)
	S96= CtrlConditionReg=0                                     Premise(F280)
	S97= [ConditionReg]=FPConditionCode(cc,0)                   ConditionReg-Hold(S88,S96)

DMMU2	S98= CtrlPC=0                                               Premise(F313)
	S99= CtrlPCInc=0                                            Premise(F314)
	S100= PC[Out]=addr+4                                        PC-Hold(S91,S98,S99)
	S101= CtrlIR=0                                              Premise(F322)
	S102= [IR]={0,rS,cc,0,0,rD,0,1}                             IR-Hold(S93,S101)
	S103= CtrlA=0                                               Premise(F324)
	S104= [A]=a                                                 A-Hold(S95,S103)
	S105= CtrlConditionReg=0                                    Premise(F326)
	S106= [ConditionReg]=FPConditionCode(cc,0)                  ConditionReg-Hold(S97,S105)

WB	S107= IR.Out15_11=rD                                        IR-Out(S102)
	S108= A.Out=a                                               A-Out(S104)
	S109= IR.Out15_11=>GPR.WReg                                 Premise(F351)
	S110= GPR.WReg=rD                                           Path(S107,S109)
	S111= A.Out=>GPR.WData                                      Premise(F352)
	S112= GPR.WData=a                                           Path(S108,S111)
	S113= CtrlPC=0                                              Premise(F359)
	S114= CtrlPCInc=0                                           Premise(F360)
	S115= PC[Out]=addr+4                                        PC-Hold(S100,S113,S114)
	S116= CtrlGPR=1                                             Premise(F369)
	S117= GPR[rD]=a                                             GPR-Write(S110,S112,S116)
	S118= CtrlConditionReg=0                                    Premise(F372)
	S119= [ConditionReg]=FPConditionCode(cc,0)                  ConditionReg-Hold(S106,S118)

POST	S115= PC[Out]=addr+4                                        PC-Hold(S100,S113,S114)
	S117= GPR[rD]=a                                             GPR-Write(S110,S112,S116)
	S119= [ConditionReg]=FPConditionCode(cc,0)                  ConditionReg-Hold(S106,S118)

