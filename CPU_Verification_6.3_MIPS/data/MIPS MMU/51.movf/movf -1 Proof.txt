
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,cc,0,0,rD,0,1}                   Premise(F2)
	S3= ICache[addr]={0,rS,cc,0,0,rD,0,1}                       Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F6)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= PC.Out=>ICache.IEA                                     Premise(F9)
	S14= ICache.IEA=addr                                        Path(S5,S13)
	S15= ICache.Out={0,rS,cc,0,0,rD,0,1}                        ICache-Search(S14,S3)
	S16= ICache.Out=>ICacheReg.In                               Premise(F10)
	S17= ICacheReg.In={0,rS,cc,0,0,rD,0,1}                      Path(S15,S16)
	S18= CtrlPC=0                                               Premise(F37)
	S19= CtrlPCInc=0                                            Premise(F38)
	S20= PC[Out]=addr                                           PC-Hold(S1,S18,S19)
	S21= CtrlIAddrReg=1                                         Premise(F39)
	S22= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S21)
	S23= CtrlICacheReg=1                                        Premise(F42)
	S24= [ICacheReg]={0,rS,cc,0,0,rD,0,1}                       ICacheReg-Write(S17,S23)
	S25= CtrlIMem=0                                             Premise(F44)
	S26= IMem[{pid,addr}]={0,rS,cc,0,0,rD,0,1}                  IMem-Hold(S2,S25)

IMMU	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S22)
	S28= ICacheReg.Out={0,rS,cc,0,0,rD,0,1}                     ICacheReg-Out(S24)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F60)
	S30= IMem.RAddr={pid,addr}                                  Path(S27,S29)
	S31= IMem.Out={0,rS,cc,0,0,rD,0,1}                          IMem-Read(S30,S26)
	S32= IMem.Out=>IRMux.MemData                                Premise(F61)
	S33= IRMux.MemData={0,rS,cc,0,0,rD,0,1}                     Path(S31,S32)
	S34= ICacheReg.Out=>IRMux.CacheData                         Premise(F62)
	S35= IRMux.CacheData={0,rS,cc,0,0,rD,0,1}                   Path(S28,S34)
	S36= IRMux.Out={0,rS,cc,0,0,rD,0,1}                         IRMux-Select(S33,S35)
	S37= IRMux.Out=>IR.In                                       Premise(F65)
	S38= IR.In={0,rS,cc,0,0,rD,0,1}                             Path(S36,S37)
	S39= CtrlPC=0                                               Premise(F83)
	S40= CtrlPCInc=1                                            Premise(F84)
	S41= PC[Out]=addr+4                                         PC-Inc(S20,S39,S40)
	S42= CtrlIR=1                                               Premise(F92)
	S43= [IR]={0,rS,cc,0,0,rD,0,1}                              IR-Write(S38,S42)

ID	S44= CtrlPC=0                                               Premise(F129)
	S45= CtrlPCInc=0                                            Premise(F130)
	S46= PC[Out]=addr+4                                         PC-Hold(S41,S44,S45)
	S47= CtrlIR=0                                               Premise(F138)
	S48= [IR]={0,rS,cc,0,0,rD,0,1}                              IR-Hold(S43,S47)

EX	S49= IR.Out20_18=cc                                         IR-Out(S48)
	S50= IR.Out16=0                                             IR-Out(S48)
	S51= IR.Out20_18=>CP1.cc                                    Premise(F164)
	S52= CP1.cc=cc                                              Path(S49,S51)
	S53= IR.Out16=>CP1.tf                                       Premise(F165)
	S54= CP1.tf=0                                               Path(S50,S53)
	S55= CP1.fp=FPConditionCode(cc,0)                           FP-PRODUCT(S52,S54)
	S56= CP1.fp=>ConditionReg.In                                Premise(F166)
	S57= ConditionReg.In=FPConditionCode(cc,0)                  Path(S55,S56)
	S58= CtrlPC=0                                               Premise(F175)
	S59= CtrlPCInc=0                                            Premise(F176)
	S60= PC[Out]=addr+4                                         PC-Hold(S46,S58,S59)
	S61= CtrlConditionReg=1                                     Premise(F188)
	S62= [ConditionReg]=FPConditionCode(cc,0)                   ConditionReg-Write(S57,S61)

MEM	S63= CtrlPC=0                                               Premise(F221)
	S64= CtrlPCInc=0                                            Premise(F222)
	S65= PC[Out]=addr+4                                         PC-Hold(S60,S63,S64)
	S66= CtrlConditionReg=0                                     Premise(F234)
	S67= [ConditionReg]=FPConditionCode(cc,0)                   ConditionReg-Hold(S62,S66)

DMMU1	S68= CtrlPC=0                                               Premise(F267)
	S69= CtrlPCInc=0                                            Premise(F268)
	S70= PC[Out]=addr+4                                         PC-Hold(S65,S68,S69)
	S71= CtrlConditionReg=0                                     Premise(F280)
	S72= [ConditionReg]=FPConditionCode(cc,0)                   ConditionReg-Hold(S67,S71)

DMMU2	S73= CtrlPC=0                                               Premise(F313)
	S74= CtrlPCInc=0                                            Premise(F314)
	S75= PC[Out]=addr+4                                         PC-Hold(S70,S73,S74)
	S76= CtrlConditionReg=0                                     Premise(F326)
	S77= [ConditionReg]=FPConditionCode(cc,0)                   ConditionReg-Hold(S72,S76)

WB	S78= CtrlPC=0                                               Premise(F359)
	S79= CtrlPCInc=0                                            Premise(F360)
	S80= PC[Out]=addr+4                                         PC-Hold(S75,S78,S79)
	S81= CtrlConditionReg=0                                     Premise(F372)
	S82= [ConditionReg]=FPConditionCode(cc,0)                   ConditionReg-Hold(S77,S81)

POST	S80= PC[Out]=addr+4                                         PC-Hold(S75,S78,S79)
	S82= [ConditionReg]=FPConditionCode(cc,0)                   ConditionReg-Hold(S77,S81)

