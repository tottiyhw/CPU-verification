
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,cc,0,0,rD,0,1}                   Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F36)
	S14= CtrlPCInc=0                                            Premise(F37)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F38)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F43)
	S19= IMem[{pid,addr}]={0,rS,cc,0,0,rD,0,1}                  IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F46)
	S21= GPR[rS]=a                                              GPR-Hold(S3,S20)

IMMU	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= PC.Out=>ICache.IEA                                     Premise(F54)
	S25= ICache.IEA=addr                                        Path(S22,S24)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F59)
	S27= IMem.RAddr={pid,addr}                                  Path(S23,S26)
	S28= IMem.Out={0,rS,cc,0,0,rD,0,1}                          IMem-Read(S27,S19)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S19)
	S30= IMem.Out=>IRMux.MemData                                Premise(F60)
	S31= IRMux.MemData={0,rS,cc,0,0,rD,0,1}                     Path(S28,S30)
	S32= IRMux.Out={0,rS,cc,0,0,rD,0,1}                         IRMux-Select(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F64)
	S34= IR.In={0,rS,cc,0,0,rD,0,1}                             Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F65)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= CtrlPC=0                                               Premise(F82)
	S38= CtrlPCInc=1                                            Premise(F83)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F86)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S36,S40)
	S42= CtrlIR=1                                               Premise(F91)
	S43= [IR]={0,rS,cc,0,0,rD,0,1}                              IR-Write(S34,S42)
	S44= CtrlGPR=0                                              Premise(F92)
	S45= GPR[rS]=a                                              GPR-Hold(S21,S44)

ID	S46= IR.Out25_21=rS                                         IR-Out(S43)
	S47= IR.Out25_21=>GPR.RReg1                                 Premise(F114)
	S48= GPR.RReg1=rS                                           Path(S46,S47)
	S49= GPR.Rdata1=a                                           GPR-Read(S48,S45)
	S50= GPR.Rdata1=>A.In                                       Premise(F116)
	S51= A.In=a                                                 Path(S49,S50)
	S52= CtrlPC=0                                               Premise(F128)
	S53= CtrlPCInc=0                                            Premise(F129)
	S54= PC[Out]=addr+4                                         PC-Hold(S39,S52,S53)
	S55= CtrlICache=0                                           Premise(F132)
	S56= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S55)
	S57= CtrlIR=0                                               Premise(F137)
	S58= [IR]={0,rS,cc,0,0,rD,0,1}                              IR-Hold(S43,S57)
	S59= CtrlA=1                                                Premise(F139)
	S60= [A]=a                                                  A-Write(S51,S59)

EX	S61= IR.Out20_18=cc                                         IR-Out(S58)
	S62= IR.Out16=0                                             IR-Out(S58)
	S63= IR.Out20_18=>CP1.cc                                    Premise(F163)
	S64= CP1.cc=cc                                              Path(S61,S63)
	S65= IR.Out16=>CP1.tf                                       Premise(F164)
	S66= CP1.tf=0                                               Path(S62,S65)
	S67= CP1.fp=FPConditionCode(cc,0)                           FP-PRODUCT(S64,S66)
	S68= CP1.fp=>ConditionReg.In                                Premise(F165)
	S69= ConditionReg.In=FPConditionCode(cc,0)                  Path(S67,S68)
	S70= CtrlPC=0                                               Premise(F174)
	S71= CtrlPCInc=0                                            Premise(F175)
	S72= PC[Out]=addr+4                                         PC-Hold(S54,S70,S71)
	S73= CtrlICache=0                                           Premise(F178)
	S74= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S56,S73)
	S75= CtrlIR=0                                               Premise(F183)
	S76= [IR]={0,rS,cc,0,0,rD,0,1}                              IR-Hold(S58,S75)
	S77= CtrlA=0                                                Premise(F185)
	S78= [A]=a                                                  A-Hold(S60,S77)
	S79= CtrlConditionReg=1                                     Premise(F187)
	S80= [ConditionReg]=FPConditionCode(cc,0)                   ConditionReg-Write(S69,S79)

MEM	S81= CtrlPC=0                                               Premise(F220)
	S82= CtrlPCInc=0                                            Premise(F221)
	S83= PC[Out]=addr+4                                         PC-Hold(S72,S81,S82)
	S84= CtrlICache=0                                           Premise(F224)
	S85= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S74,S84)
	S86= CtrlIR=0                                               Premise(F229)
	S87= [IR]={0,rS,cc,0,0,rD,0,1}                              IR-Hold(S76,S86)
	S88= CtrlA=0                                                Premise(F231)
	S89= [A]=a                                                  A-Hold(S78,S88)
	S90= CtrlConditionReg=0                                     Premise(F233)
	S91= [ConditionReg]=FPConditionCode(cc,0)                   ConditionReg-Hold(S80,S90)

DMMU1	S92= CtrlPC=0                                               Premise(F266)
	S93= CtrlPCInc=0                                            Premise(F267)
	S94= PC[Out]=addr+4                                         PC-Hold(S83,S92,S93)
	S95= CtrlICache=0                                           Premise(F270)
	S96= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S85,S95)
	S97= CtrlIR=0                                               Premise(F275)
	S98= [IR]={0,rS,cc,0,0,rD,0,1}                              IR-Hold(S87,S97)
	S99= CtrlA=0                                                Premise(F277)
	S100= [A]=a                                                 A-Hold(S89,S99)
	S101= CtrlConditionReg=0                                    Premise(F279)
	S102= [ConditionReg]=FPConditionCode(cc,0)                  ConditionReg-Hold(S91,S101)

DMMU2	S103= CtrlPC=0                                              Premise(F312)
	S104= CtrlPCInc=0                                           Premise(F313)
	S105= PC[Out]=addr+4                                        PC-Hold(S94,S103,S104)
	S106= CtrlICache=0                                          Premise(F316)
	S107= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S96,S106)
	S108= CtrlIR=0                                              Premise(F321)
	S109= [IR]={0,rS,cc,0,0,rD,0,1}                             IR-Hold(S98,S108)
	S110= CtrlA=0                                               Premise(F323)
	S111= [A]=a                                                 A-Hold(S100,S110)
	S112= CtrlConditionReg=0                                    Premise(F325)
	S113= [ConditionReg]=FPConditionCode(cc,0)                  ConditionReg-Hold(S102,S112)

WB	S114= IR.Out15_11=rD                                        IR-Out(S109)
	S115= A.Out=a                                               A-Out(S111)
	S116= IR.Out15_11=>GPR.WReg                                 Premise(F350)
	S117= GPR.WReg=rD                                           Path(S114,S116)
	S118= A.Out=>GPR.WData                                      Premise(F351)
	S119= GPR.WData=a                                           Path(S115,S118)
	S120= CtrlPC=0                                              Premise(F358)
	S121= CtrlPCInc=0                                           Premise(F359)
	S122= PC[Out]=addr+4                                        PC-Hold(S105,S120,S121)
	S123= CtrlICache=0                                          Premise(F362)
	S124= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S107,S123)
	S125= CtrlGPR=1                                             Premise(F368)
	S126= GPR[rD]=a                                             GPR-Write(S117,S119,S125)
	S127= CtrlConditionReg=0                                    Premise(F371)
	S128= [ConditionReg]=FPConditionCode(cc,0)                  ConditionReg-Hold(S113,S127)

POST	S122= PC[Out]=addr+4                                        PC-Hold(S105,S120,S121)
	S124= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S107,S123)
	S126= GPR[rD]=a                                             GPR-Write(S117,S119,S125)
	S128= [ConditionReg]=FPConditionCode(cc,0)                  ConditionReg-Hold(S113,S127)

