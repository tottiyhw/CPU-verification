
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,rT,rD,0,10}                      Premise(F2)
	S3= ICache[addr]={0,rS,rT,rD,0,10}                          Premise(F3)
	S4= GPR[rT]=b                                               Premise(F5)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F6)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F7)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F10)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={0,rS,rT,rD,0,10}                           ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F11)
	S18= ICacheReg.In={0,rS,rT,rD,0,10}                         Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F39)
	S20= CtrlPCInc=0                                            Premise(F40)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F41)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F44)
	S25= [ICacheReg]={0,rS,rT,rD,0,10}                          ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F46)
	S27= IMem[{pid,addr}]={0,rS,rT,rD,0,10}                     IMem-Hold(S2,S26)
	S28= CtrlGPR=0                                              Premise(F49)
	S29= GPR[rT]=b                                              GPR-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={0,rS,rT,rD,0,10}                        ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F62)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={0,rS,rT,rD,0,10}                             IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F63)
	S36= IRMux.MemData={0,rS,rT,rD,0,10}                        Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F64)
	S38= IRMux.CacheData={0,rS,rT,rD,0,10}                      Path(S31,S37)
	S39= IRMux.Out={0,rS,rT,rD,0,10}                            IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F67)
	S41= IR.In={0,rS,rT,rD,0,10}                                Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F86)
	S43= CtrlPCInc=1                                            Premise(F87)
	S44= PC[Out]=addr+4                                         PC-Inc(S21,S42,S43)
	S45= CtrlIR=1                                               Premise(F95)
	S46= [IR]={0,rS,rT,rD,0,10}                                 IR-Write(S41,S45)
	S47= CtrlGPR=0                                              Premise(F96)
	S48= GPR[rT]=b                                              GPR-Hold(S29,S47)

ID	S49= IR.Out20_16=rT                                         IR-Out(S46)
	S50= IR.Out20_16=>GPR.RReg2                                 Premise(F119)
	S51= GPR.RReg2=rT                                           Path(S49,S50)
	S52= GPR.Rdata2=b                                           GPR-Read(S51,S48)
	S53= GPR.Rdata2=>B.In                                       Premise(F122)
	S54= B.In=b                                                 Path(S52,S53)
	S55= CtrlPC=0                                               Premise(F133)
	S56= CtrlPCInc=0                                            Premise(F134)
	S57= PC[Out]=addr+4                                         PC-Hold(S44,S55,S56)
	S58= CtrlB=1                                                Premise(F145)
	S59= [B]=b                                                  B-Write(S54,S58)

EX	S60= B.Out=b                                                B-Out(S59)
	S61= CMPU.A=32'b0                                           Premise(F170)
	S62= B.Out=>CMPU.B                                          Premise(F171)
	S63= CMPU.B=b                                               Path(S60,S62)
	S64= CMPU.zero=CompareS(32'b0,b)                            CMPU-CMPS(S61,S63)
	S65= CMPU.zero=>ConditionReg.In                             Premise(F173)
	S66= ConditionReg.In=CompareS(32'b0,b)                      Path(S64,S65)
	S67= CtrlPC=0                                               Premise(F182)
	S68= CtrlPCInc=0                                            Premise(F183)
	S69= PC[Out]=addr+4                                         PC-Hold(S57,S67,S68)
	S70= CtrlConditionReg=1                                     Premise(F195)
	S71= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Write(S66,S70)

MEM	S72= CtrlPC=0                                               Premise(F229)
	S73= CtrlPCInc=0                                            Premise(F230)
	S74= PC[Out]=addr+4                                         PC-Hold(S69,S72,S73)
	S75= CtrlConditionReg=0                                     Premise(F242)
	S76= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S71,S75)

DMMU1	S77= CtrlPC=0                                               Premise(F276)
	S78= CtrlPCInc=0                                            Premise(F277)
	S79= PC[Out]=addr+4                                         PC-Hold(S74,S77,S78)
	S80= CtrlConditionReg=0                                     Premise(F289)
	S81= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S76,S80)

DMMU2	S82= CtrlPC=0                                               Premise(F323)
	S83= CtrlPCInc=0                                            Premise(F324)
	S84= PC[Out]=addr+4                                         PC-Hold(S79,S82,S83)
	S85= CtrlConditionReg=0                                     Premise(F336)
	S86= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S81,S85)

WB	S87= CtrlPC=0                                               Premise(F370)
	S88= CtrlPCInc=0                                            Premise(F371)
	S89= PC[Out]=addr+4                                         PC-Hold(S84,S87,S88)
	S90= CtrlConditionReg=0                                     Premise(F383)
	S91= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S86,S90)

POST	S89= PC[Out]=addr+4                                         PC-Hold(S84,S87,S88)
	S91= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S86,S90)

