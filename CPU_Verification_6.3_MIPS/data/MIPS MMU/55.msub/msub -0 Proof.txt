
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={28,rS,rT,0,0,4}                       Premise(F2)
	S3= ICache[addr]={28,rS,rT,0,0,4}                           Premise(F3)
	S4= GPR[rS]=a                                               Premise(F4)
	S5= GPR[rT]=b                                               Premise(F5)
	S6= [Lo]=lo                                                 Premise(F6)
	S7= [Hi]=hi                                                 Premise(F7)

IF	S8= CP0.ASID=pid                                            ASID-Read(S0)
	S9= PC.Out=addr                                             PC-Out(S1)
	S10= CP0.ASID=>IMMU.PID                                     Premise(F8)
	S11= IMMU.PID=pid                                           Path(S8,S10)
	S12= PC.Out=>IMMU.IEA                                       Premise(F9)
	S13= IMMU.IEA=addr                                          Path(S9,S12)
	S14= IMMU.Addr={pid,addr}                                   IMMU-Search(S11,S13)
	S15= IMMU.Addr=>IAddrReg.In                                 Premise(F10)
	S16= IAddrReg.In={pid,addr}                                 Path(S14,S15)
	S17= PC.Out=>ICache.IEA                                     Premise(F12)
	S18= ICache.IEA=addr                                        Path(S9,S17)
	S19= ICache.Out={28,rS,rT,0,0,4}                            ICache-Search(S18,S3)
	S20= ICache.Out=>ICacheReg.In                               Premise(F13)
	S21= ICacheReg.In={28,rS,rT,0,0,4}                          Path(S19,S20)
	S22= CtrlPC=0                                               Premise(F42)
	S23= CtrlPCInc=0                                            Premise(F43)
	S24= PC[Out]=addr                                           PC-Hold(S1,S22,S23)
	S25= CtrlIAddrReg=1                                         Premise(F44)
	S26= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S16,S25)
	S27= CtrlICacheReg=1                                        Premise(F47)
	S28= [ICacheReg]={28,rS,rT,0,0,4}                           ICacheReg-Write(S21,S27)
	S29= CtrlIMem=0                                             Premise(F49)
	S30= IMem[{pid,addr}]={28,rS,rT,0,0,4}                      IMem-Hold(S2,S29)
	S31= CtrlGPR=0                                              Premise(F52)
	S32= GPR[rS]=a                                              GPR-Hold(S4,S31)
	S33= GPR[rT]=b                                              GPR-Hold(S5,S31)
	S34= CtrlHi=0                                               Premise(F55)
	S35= [Hi]=hi                                                Hi-Hold(S7,S34)
	S36= CtrlLo=0                                               Premise(F56)
	S37= [Lo]=lo                                                Lo-Hold(S6,S36)

IMMU	S38= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S26)
	S39= ICacheReg.Out={28,rS,rT,0,0,4}                         ICacheReg-Out(S28)
	S40= IAddrReg.Out=>IMem.RAddr                               Premise(F66)
	S41= IMem.RAddr={pid,addr}                                  Path(S38,S40)
	S42= IMem.Out={28,rS,rT,0,0,4}                              IMem-Read(S41,S30)
	S43= IMem.Out=>IRMux.MemData                                Premise(F67)
	S44= IRMux.MemData={28,rS,rT,0,0,4}                         Path(S42,S43)
	S45= ICacheReg.Out=>IRMux.CacheData                         Premise(F68)
	S46= IRMux.CacheData={28,rS,rT,0,0,4}                       Path(S39,S45)
	S47= IRMux.Out={28,rS,rT,0,0,4}                             IRMux-Select(S44,S46)
	S48= IRMux.Out=>IR.In                                       Premise(F71)
	S49= IR.In={28,rS,rT,0,0,4}                                 Path(S47,S48)
	S50= CtrlPC=0                                               Premise(F91)
	S51= CtrlPCInc=1                                            Premise(F92)
	S52= PC[Out]=addr+4                                         PC-Inc(S24,S50,S51)
	S53= CtrlIR=1                                               Premise(F100)
	S54= [IR]={28,rS,rT,0,0,4}                                  IR-Write(S49,S53)
	S55= CtrlGPR=0                                              Premise(F101)
	S56= GPR[rS]=a                                              GPR-Hold(S32,S55)
	S57= GPR[rT]=b                                              GPR-Hold(S33,S55)
	S58= CtrlHi=0                                               Premise(F104)
	S59= [Hi]=hi                                                Hi-Hold(S35,S58)
	S60= CtrlLo=0                                               Premise(F105)
	S61= [Lo]=lo                                                Lo-Hold(S37,S60)

ID	S62= IR.Out25_21=rS                                         IR-Out(S54)
	S63= IR.Out20_16=rT                                         IR-Out(S54)
	S64= IR.Out25_21=>GPR.RReg1                                 Premise(F124)
	S65= GPR.RReg1=rS                                           Path(S62,S64)
	S66= GPR.Rdata1=a                                           GPR-Read(S65,S56)
	S67= IR.Out20_16=>GPR.RReg2                                 Premise(F125)
	S68= GPR.RReg2=rT                                           Path(S63,S67)
	S69= GPR.Rdata2=b                                           GPR-Read(S68,S57)
	S70= GPR.Rdata1=>A.In                                       Premise(F127)
	S71= A.In=a                                                 Path(S66,S70)
	S72= GPR.Rdata2=>B.In                                       Premise(F128)
	S73= B.In=b                                                 Path(S69,S72)
	S74= CtrlPC=0                                               Premise(F140)
	S75= CtrlPCInc=0                                            Premise(F141)
	S76= PC[Out]=addr+4                                         PC-Hold(S52,S74,S75)
	S77= CtrlA=1                                                Premise(F151)
	S78= [A]=a                                                  A-Write(S71,S77)
	S79= CtrlB=1                                                Premise(F152)
	S80= [B]=b                                                  B-Write(S73,S79)
	S81= CtrlHi=0                                               Premise(F153)
	S82= [Hi]=hi                                                Hi-Hold(S59,S81)
	S83= CtrlLo=0                                               Premise(F154)
	S84= [Lo]=lo                                                Lo-Hold(S61,S83)

EX	S85= A.Out=a                                                A-Out(S78)
	S86= B.Out=b                                                B-Out(S80)
	S87= Hi.Out=hi                                              Hi-Out(S82)
	S88= Lo.Out=lo                                              Lo-Out(S84)
	S89= Hi.Out=>MDU.Hi                                         Premise(F178)
	S90= MDU.Hi=hi                                              Path(S87,S89)
	S91= Lo.Out=>MDU.Lo                                         Premise(F179)
	S92= MDU.Lo=lo                                              Path(S88,S91)
	S93= A.Out=>MDU.A                                           Premise(F180)
	S94= MDU.A=a                                                Path(S85,S93)
	S95= B.Out=>MDU.B                                           Premise(F181)
	S96= MDU.B=b                                                Path(S86,S95)
	S97= MDU.lo=({hi,lo}-a¡Áb)[31:0]                             MDU(S94,S96,S90,S92)
	S98= MDU.hi=({hi,lo}-a¡Áb)[63:32]                            MDU(S94,S96,S90,S92)
	S99= MDU.hi=>Hi.In                                          Premise(F183)
	S100= Hi.In=({hi,lo}-a¡Áb)[63:32]                            Path(S98,S99)
	S101= MDU.lo=>Lo.In                                         Premise(F184)
	S102= Lo.In=({hi,lo}-a¡Áb)[31:0]                             Path(S97,S101)
	S103= CtrlPC=0                                              Premise(F190)
	S104= CtrlPCInc=0                                           Premise(F191)
	S105= PC[Out]=addr+4                                        PC-Hold(S76,S103,S104)
	S106= CtrlHi=1                                              Premise(F203)
	S107= [Hi]=({hi,lo}-a¡Áb)[63:32]                             Hi-Write(S100,S106)
	S108= CtrlLo=1                                              Premise(F204)
	S109= [Lo]=({hi,lo}-a¡Áb)[31:0]                              Lo-Write(S102,S108)

MEM	S110= CtrlPC=0                                              Premise(F239)
	S111= CtrlPCInc=0                                           Premise(F240)
	S112= PC[Out]=addr+4                                        PC-Hold(S105,S110,S111)
	S113= CtrlHi=0                                              Premise(F252)
	S114= [Hi]=({hi,lo}-a¡Áb)[63:32]                             Hi-Hold(S107,S113)
	S115= CtrlLo=0                                              Premise(F253)
	S116= [Lo]=({hi,lo}-a¡Áb)[31:0]                              Lo-Hold(S109,S115)

DMMU1	S117= CtrlPC=0                                              Premise(F288)
	S118= CtrlPCInc=0                                           Premise(F289)
	S119= PC[Out]=addr+4                                        PC-Hold(S112,S117,S118)
	S120= CtrlHi=0                                              Premise(F301)
	S121= [Hi]=({hi,lo}-a¡Áb)[63:32]                             Hi-Hold(S114,S120)
	S122= CtrlLo=0                                              Premise(F302)
	S123= [Lo]=({hi,lo}-a¡Áb)[31:0]                              Lo-Hold(S116,S122)

DMMU2	S124= CtrlPC=0                                              Premise(F337)
	S125= CtrlPCInc=0                                           Premise(F338)
	S126= PC[Out]=addr+4                                        PC-Hold(S119,S124,S125)
	S127= CtrlHi=0                                              Premise(F350)
	S128= [Hi]=({hi,lo}-a¡Áb)[63:32]                             Hi-Hold(S121,S127)
	S129= CtrlLo=0                                              Premise(F351)
	S130= [Lo]=({hi,lo}-a¡Áb)[31:0]                              Lo-Hold(S123,S129)

WB	S131= CtrlPC=0                                              Premise(F386)
	S132= CtrlPCInc=0                                           Premise(F387)
	S133= PC[Out]=addr+4                                        PC-Hold(S126,S131,S132)
	S134= CtrlHi=0                                              Premise(F399)
	S135= [Hi]=({hi,lo}-a¡Áb)[63:32]                             Hi-Hold(S128,S134)
	S136= CtrlLo=0                                              Premise(F400)
	S137= [Lo]=({hi,lo}-a¡Áb)[31:0]                              Lo-Hold(S130,S136)

POST	S133= PC[Out]=addr+4                                        PC-Hold(S126,S131,S132)
	S135= [Hi]=({hi,lo}-a¡Áb)[63:32]                             Hi-Hold(S128,S134)
	S137= [Lo]=({hi,lo}-a¡Áb)[31:0]                              Lo-Hold(S130,S136)

