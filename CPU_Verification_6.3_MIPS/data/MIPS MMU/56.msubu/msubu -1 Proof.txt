
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={28,rS,rT,0,0,5}                       Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)
	S5= [Lo]=lo                                                 Premise(F5)
	S6= [Hi]=hi                                                 Premise(F6)

IF	S7= CP0.ASID=pid                                            ASID-Read(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= CP0.ASID=>IMMU.PID                                      Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= CtrlPC=0                                               Premise(F41)
	S17= CtrlPCInc=0                                            Premise(F42)
	S18= PC[Out]=addr                                           PC-Hold(S1,S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F43)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S19)
	S21= CtrlIMem=0                                             Premise(F48)
	S22= IMem[{pid,addr}]={28,rS,rT,0,0,5}                      IMem-Hold(S2,S21)
	S23= CtrlGPR=0                                              Premise(F51)
	S24= GPR[rS]=a                                              GPR-Hold(S3,S23)
	S25= GPR[rT]=b                                              GPR-Hold(S4,S23)
	S26= CtrlHi=0                                               Premise(F54)
	S27= [Hi]=hi                                                Hi-Hold(S6,S26)
	S28= CtrlLo=0                                               Premise(F55)
	S29= [Lo]=lo                                                Lo-Hold(S5,S28)

IMMU	S30= PC.Out=addr                                            PC-Out(S18)
	S31= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S32= PC.Out=>ICache.IEA                                     Premise(F60)
	S33= ICache.IEA=addr                                        Path(S30,S32)
	S34= IAddrReg.Out=>IMem.RAddr                               Premise(F65)
	S35= IMem.RAddr={pid,addr}                                  Path(S31,S34)
	S36= IMem.Out={28,rS,rT,0,0,5}                              IMem-Read(S35,S22)
	S37= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S35,S22)
	S38= IMem.Out=>IRMux.MemData                                Premise(F66)
	S39= IRMux.MemData={28,rS,rT,0,0,5}                         Path(S36,S38)
	S40= IRMux.Out={28,rS,rT,0,0,5}                             IRMux-Select(S39)
	S41= IRMux.Out=>IR.In                                       Premise(F70)
	S42= IR.In={28,rS,rT,0,0,5}                                 Path(S40,S41)
	S43= IMem.MEM8WordOut=>ICache.WData                         Premise(F71)
	S44= ICache.WData=IMemGet8Word({pid,addr})                  Path(S37,S43)
	S45= CtrlPC=0                                               Premise(F90)
	S46= CtrlPCInc=1                                            Premise(F91)
	S47= PC[Out]=addr+4                                         PC-Inc(S18,S45,S46)
	S48= CtrlICache=1                                           Premise(F94)
	S49= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S33,S44,S48)
	S50= CtrlIR=1                                               Premise(F99)
	S51= [IR]={28,rS,rT,0,0,5}                                  IR-Write(S42,S50)
	S52= CtrlGPR=0                                              Premise(F100)
	S53= GPR[rS]=a                                              GPR-Hold(S24,S52)
	S54= GPR[rT]=b                                              GPR-Hold(S25,S52)
	S55= CtrlHi=0                                               Premise(F103)
	S56= [Hi]=hi                                                Hi-Hold(S27,S55)
	S57= CtrlLo=0                                               Premise(F104)
	S58= [Lo]=lo                                                Lo-Hold(S29,S57)

ID	S59= IR.Out25_21=rS                                         IR-Out(S51)
	S60= IR.Out20_16=rT                                         IR-Out(S51)
	S61= IR.Out25_21=>GPR.RReg1                                 Premise(F123)
	S62= GPR.RReg1=rS                                           Path(S59,S61)
	S63= GPR.Rdata1=a                                           GPR-Read(S62,S53)
	S64= IR.Out20_16=>GPR.RReg2                                 Premise(F124)
	S65= GPR.RReg2=rT                                           Path(S60,S64)
	S66= GPR.Rdata2=b                                           GPR-Read(S65,S54)
	S67= GPR.Rdata1=>A.In                                       Premise(F126)
	S68= A.In=a                                                 Path(S63,S67)
	S69= GPR.Rdata2=>B.In                                       Premise(F127)
	S70= B.In=b                                                 Path(S66,S69)
	S71= CtrlPC=0                                               Premise(F139)
	S72= CtrlPCInc=0                                            Premise(F140)
	S73= PC[Out]=addr+4                                         PC-Hold(S47,S71,S72)
	S74= CtrlICache=0                                           Premise(F143)
	S75= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S49,S74)
	S76= CtrlA=1                                                Premise(F150)
	S77= [A]=a                                                  A-Write(S68,S76)
	S78= CtrlB=1                                                Premise(F151)
	S79= [B]=b                                                  B-Write(S70,S78)
	S80= CtrlHi=0                                               Premise(F152)
	S81= [Hi]=hi                                                Hi-Hold(S56,S80)
	S82= CtrlLo=0                                               Premise(F153)
	S83= [Lo]=lo                                                Lo-Hold(S58,S82)

EX	S84= A.Out=a                                                A-Out(S77)
	S85= B.Out=b                                                B-Out(S79)
	S86= Hi.Out=hi                                              Hi-Out(S81)
	S87= Lo.Out=lo                                              Lo-Out(S83)
	S88= Hi.Out=>MDU.Hi                                         Premise(F177)
	S89= MDU.Hi=hi                                              Path(S86,S88)
	S90= Lo.Out=>MDU.Lo                                         Premise(F178)
	S91= MDU.Lo=lo                                              Path(S87,S90)
	S92= A.Out=>MDU.A                                           Premise(F179)
	S93= MDU.A=a                                                Path(S84,S92)
	S94= B.Out=>MDU.B                                           Premise(F180)
	S95= MDU.B=b                                                Path(S85,S94)
	S96= MDU.lo=({hi,lo}-a*b)[31:0]                             MDU(S93,S95,S89,S91)
	S97= MDU.hi=({hi,lo}-a*b)[63:32]                            MDU(S93,S95,S89,S91)
	S98= MDU.hi=>Hi.In                                          Premise(F182)
	S99= Hi.In=({hi,lo}-a*b)[63:32]                             Path(S97,S98)
	S100= MDU.lo=>Lo.In                                         Premise(F183)
	S101= Lo.In=({hi,lo}-a*b)[31:0]                             Path(S96,S100)
	S102= CtrlPC=0                                              Premise(F189)
	S103= CtrlPCInc=0                                           Premise(F190)
	S104= PC[Out]=addr+4                                        PC-Hold(S73,S102,S103)
	S105= CtrlICache=0                                          Premise(F193)
	S106= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S75,S105)
	S107= CtrlHi=1                                              Premise(F202)
	S108= [Hi]=({hi,lo}-a*b)[63:32]                             Hi-Write(S99,S107)
	S109= CtrlLo=1                                              Premise(F203)
	S110= [Lo]=({hi,lo}-a*b)[31:0]                              Lo-Write(S101,S109)

MEM	S111= CtrlPC=0                                              Premise(F238)
	S112= CtrlPCInc=0                                           Premise(F239)
	S113= PC[Out]=addr+4                                        PC-Hold(S104,S111,S112)
	S114= CtrlICache=0                                          Premise(F242)
	S115= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S106,S114)
	S116= CtrlHi=0                                              Premise(F251)
	S117= [Hi]=({hi,lo}-a*b)[63:32]                             Hi-Hold(S108,S116)
	S118= CtrlLo=0                                              Premise(F252)
	S119= [Lo]=({hi,lo}-a*b)[31:0]                              Lo-Hold(S110,S118)

DMMU1	S120= CtrlPC=0                                              Premise(F287)
	S121= CtrlPCInc=0                                           Premise(F288)
	S122= PC[Out]=addr+4                                        PC-Hold(S113,S120,S121)
	S123= CtrlICache=0                                          Premise(F291)
	S124= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S115,S123)
	S125= CtrlHi=0                                              Premise(F300)
	S126= [Hi]=({hi,lo}-a*b)[63:32]                             Hi-Hold(S117,S125)
	S127= CtrlLo=0                                              Premise(F301)
	S128= [Lo]=({hi,lo}-a*b)[31:0]                              Lo-Hold(S119,S127)

DMMU2	S129= CtrlPC=0                                              Premise(F336)
	S130= CtrlPCInc=0                                           Premise(F337)
	S131= PC[Out]=addr+4                                        PC-Hold(S122,S129,S130)
	S132= CtrlICache=0                                          Premise(F340)
	S133= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S124,S132)
	S134= CtrlHi=0                                              Premise(F349)
	S135= [Hi]=({hi,lo}-a*b)[63:32]                             Hi-Hold(S126,S134)
	S136= CtrlLo=0                                              Premise(F350)
	S137= [Lo]=({hi,lo}-a*b)[31:0]                              Lo-Hold(S128,S136)

WB	S138= CtrlPC=0                                              Premise(F385)
	S139= CtrlPCInc=0                                           Premise(F386)
	S140= PC[Out]=addr+4                                        PC-Hold(S131,S138,S139)
	S141= CtrlICache=0                                          Premise(F389)
	S142= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S133,S141)
	S143= CtrlHi=0                                              Premise(F398)
	S144= [Hi]=({hi,lo}-a*b)[63:32]                             Hi-Hold(S135,S143)
	S145= CtrlLo=0                                              Premise(F399)
	S146= [Lo]=({hi,lo}-a*b)[31:0]                              Lo-Hold(S137,S145)

POST	S140= PC[Out]=addr+4                                        PC-Hold(S131,S138,S139)
	S142= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S133,S141)
	S144= [Hi]=({hi,lo}-a*b)[63:32]                             Hi-Hold(S135,S143)
	S146= [Lo]=({hi,lo}-a*b)[31:0]                              Lo-Hold(S137,S145)

