
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={17,4,rT,rD,0}                         Premise(F2)
	S3= GPR[rT]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F32)
	S14= CtrlPCInc=0                                            Premise(F33)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F34)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F39)
	S19= IMem[{pid,addr}]={17,4,rT,rD,0}                        IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F42)
	S21= GPR[rT]=a                                              GPR-Hold(S3,S20)

IMMU	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= PC.Out=>ICache.IEA                                     Premise(F49)
	S25= ICache.IEA=addr                                        Path(S22,S24)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F54)
	S27= IMem.RAddr={pid,addr}                                  Path(S23,S26)
	S28= IMem.Out={17,4,rT,rD,0}                                IMem-Read(S27,S19)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S19)
	S30= IMem.Out=>IRMux.MemData                                Premise(F55)
	S31= IRMux.MemData={17,4,rT,rD,0}                           Path(S28,S30)
	S32= IRMux.Out={17,4,rT,rD,0}                               IRMux-Select(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F59)
	S34= IR.In={17,4,rT,rD,0}                                   Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F60)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= CtrlPC=0                                               Premise(F73)
	S38= CtrlPCInc=1                                            Premise(F74)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F77)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S36,S40)
	S42= CtrlIR=1                                               Premise(F82)
	S43= [IR]={17,4,rT,rD,0}                                    IR-Write(S34,S42)
	S44= CtrlGPR=0                                              Premise(F83)
	S45= GPR[rT]=a                                              GPR-Hold(S21,S44)

ID	S46= IR.Out20_16=rT                                         IR-Out(S43)
	S47= IR.Out20_16=>GPR.RReg1                                 Premise(F105)
	S48= GPR.RReg1=rT                                           Path(S46,S47)
	S49= GPR.Rdata1=a                                           GPR-Read(S48,S45)
	S50= GPR.Rdata1=>A.In                                       Premise(F106)
	S51= A.In=a                                                 Path(S49,S50)
	S52= CtrlPC=0                                               Premise(F114)
	S53= CtrlPCInc=0                                            Premise(F115)
	S54= PC[Out]=addr+4                                         PC-Hold(S39,S52,S53)
	S55= CtrlICache=0                                           Premise(F118)
	S56= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S55)
	S57= CtrlIR=0                                               Premise(F123)
	S58= [IR]={17,4,rT,rD,0}                                    IR-Hold(S43,S57)
	S59= CtrlA=1                                                Premise(F125)
	S60= [A]=a                                                  A-Write(S51,S59)

EX	S61= IR.Out15_11=rD                                         IR-Out(S58)
	S62= A.Out=a                                                A-Out(S60)
	S63= IR.Out15_11=>CP1.WReg                                  Premise(F148)
	S64= CP1.WReg=rD                                            Path(S61,S63)
	S65= A.Out=>CP1.Wdata                                       Premise(F149)
	S66= CP1.Wdata=a                                            Path(S62,S65)
	S67= CtrlPC=0                                               Premise(F155)
	S68= CtrlPCInc=0                                            Premise(F156)
	S69= PC[Out]=addr+4                                         PC-Hold(S54,S67,S68)
	S70= CtrlICache=0                                           Premise(F159)
	S71= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S56,S70)
	S72= CtrlCP1=1                                              Premise(F167)
	S73= CP1[rD]=a                                              CP1-Write(S64,S66,S72)

MEM	S74= CtrlPC=0                                               Premise(F196)
	S75= CtrlPCInc=0                                            Premise(F197)
	S76= PC[Out]=addr+4                                         PC-Hold(S69,S74,S75)
	S77= CtrlICache=0                                           Premise(F200)
	S78= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S71,S77)
	S79= CtrlCP1=0                                              Premise(F208)
	S80= CP1[rD]=a                                              CP1-Hold(S73,S79)

DMMU1	S81= CtrlPC=0                                               Premise(F237)
	S82= CtrlPCInc=0                                            Premise(F238)
	S83= PC[Out]=addr+4                                         PC-Hold(S76,S81,S82)
	S84= CtrlICache=0                                           Premise(F241)
	S85= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S78,S84)
	S86= CtrlCP1=0                                              Premise(F249)
	S87= CP1[rD]=a                                              CP1-Hold(S80,S86)

DMMU2	S88= CtrlPC=0                                               Premise(F278)
	S89= CtrlPCInc=0                                            Premise(F279)
	S90= PC[Out]=addr+4                                         PC-Hold(S83,S88,S89)
	S91= CtrlICache=0                                           Premise(F282)
	S92= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S85,S91)
	S93= CtrlCP1=0                                              Premise(F290)
	S94= CP1[rD]=a                                              CP1-Hold(S87,S93)

WB	S95= CtrlPC=0                                               Premise(F319)
	S96= CtrlPCInc=0                                            Premise(F320)
	S97= PC[Out]=addr+4                                         PC-Hold(S90,S95,S96)
	S98= CtrlICache=0                                           Premise(F323)
	S99= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S92,S98)
	S100= CtrlCP1=0                                             Premise(F331)
	S101= CP1[rD]=a                                             CP1-Hold(S94,S100)

POST	S97= PC[Out]=addr+4                                         PC-Hold(S90,S95,S96)
	S99= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S92,S98)
	S101= CP1[rD]=a                                             CP1-Hold(S94,S100)

