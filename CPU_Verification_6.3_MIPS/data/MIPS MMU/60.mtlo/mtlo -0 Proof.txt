
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,0,19}                            Premise(F2)
	S3= ICache[addr]={0,rS,0,19}                                Premise(F3)
	S4= GPR[rS]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={0,rS,0,19}                                 ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={0,rS,0,19}                               Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F31)
	S20= CtrlPCInc=0                                            Premise(F32)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F33)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F36)
	S25= [ICacheReg]={0,rS,0,19}                                ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F38)
	S27= IMem[{pid,addr}]={0,rS,0,19}                           IMem-Hold(S2,S26)
	S28= CtrlGPR=0                                              Premise(F41)
	S29= GPR[rS]=a                                              GPR-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={0,rS,0,19}                              ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F52)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={0,rS,0,19}                                   IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F53)
	S36= IRMux.MemData={0,rS,0,19}                              Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F54)
	S38= IRMux.CacheData={0,rS,0,19}                            Path(S31,S37)
	S39= IRMux.Out={0,rS,0,19}                                  IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F57)
	S41= IR.In={0,rS,0,19}                                      Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F69)
	S43= CtrlPCInc=1                                            Premise(F70)
	S44= PC[Out]=addr+4                                         PC-Inc(S21,S42,S43)
	S45= CtrlIR=1                                               Premise(F78)
	S46= [IR]={0,rS,0,19}                                       IR-Write(S41,S45)
	S47= CtrlGPR=0                                              Premise(F79)
	S48= GPR[rS]=a                                              GPR-Hold(S29,S47)

ID	S49= IR.Out25_21=rS                                         IR-Out(S46)
	S50= IR.Out25_21=>GPR.RReg1                                 Premise(F99)
	S51= GPR.RReg1=rS                                           Path(S49,S50)
	S52= GPR.Rdata1=a                                           GPR-Read(S51,S48)
	S53= GPR.Rdata1=>Lo.In                                      Premise(F101)
	S54= Lo.In=a                                                Path(S52,S53)
	S55= CtrlPC=0                                               Premise(F107)
	S56= CtrlPCInc=0                                            Premise(F108)
	S57= PC[Out]=addr+4                                         PC-Hold(S44,S55,S56)
	S58= CtrlLo=1                                               Premise(F118)
	S59= [Lo]=a                                                 Lo-Write(S54,S58)

EX	S60= CtrlPC=0                                               Premise(F145)
	S61= CtrlPCInc=0                                            Premise(F146)
	S62= PC[Out]=addr+4                                         PC-Hold(S57,S60,S61)
	S63= CtrlLo=0                                               Premise(F156)
	S64= [Lo]=a                                                 Lo-Hold(S59,S63)

MEM	S65= CtrlPC=0                                               Premise(F183)
	S66= CtrlPCInc=0                                            Premise(F184)
	S67= PC[Out]=addr+4                                         PC-Hold(S62,S65,S66)
	S68= CtrlLo=0                                               Premise(F194)
	S69= [Lo]=a                                                 Lo-Hold(S64,S68)

DMMU1	S70= CtrlPC=0                                               Premise(F221)
	S71= CtrlPCInc=0                                            Premise(F222)
	S72= PC[Out]=addr+4                                         PC-Hold(S67,S70,S71)
	S73= CtrlLo=0                                               Premise(F232)
	S74= [Lo]=a                                                 Lo-Hold(S69,S73)

DMMU2	S75= CtrlPC=0                                               Premise(F259)
	S76= CtrlPCInc=0                                            Premise(F260)
	S77= PC[Out]=addr+4                                         PC-Hold(S72,S75,S76)
	S78= CtrlLo=0                                               Premise(F270)
	S79= [Lo]=a                                                 Lo-Hold(S74,S78)

WB	S80= CtrlPC=0                                               Premise(F297)
	S81= CtrlPCInc=0                                            Premise(F298)
	S82= PC[Out]=addr+4                                         PC-Hold(S77,S80,S81)
	S83= CtrlLo=0                                               Premise(F308)
	S84= [Lo]=a                                                 Lo-Hold(S79,S83)

POST	S82= PC[Out]=addr+4                                         PC-Hold(S77,S80,S81)
	S84= [Lo]=a                                                 Lo-Hold(S79,S83)

