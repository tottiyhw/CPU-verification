
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={40,rS,rT,offset}                      Premise(F2)
	S3= ICache[addr]={40,rS,rT,offset}                          Premise(F3)
	S4= GPR[rS]=base                                            Premise(F4)
	S5= GPR[rT]=a                                               Premise(F5)

IF	S6= CP0.ASID=pid                                            ASID-Read(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F10)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={40,rS,rT,offset}                           ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F11)
	S19= ICacheReg.In={40,rS,rT,offset}                         Path(S17,S18)
	S20= CtrlCP0=0                                              Premise(F48)
	S21= CP0[ASID]=pid                                          CP0-Hold(S0,S20)
	S22= CtrlPC=0                                               Premise(F52)
	S23= CtrlPCInc=0                                            Premise(F53)
	S24= PC[Out]=addr                                           PC-Hold(S1,S22,S23)
	S25= CtrlIAddrReg=1                                         Premise(F54)
	S26= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S25)
	S27= CtrlICacheReg=1                                        Premise(F57)
	S28= [ICacheReg]={40,rS,rT,offset}                          ICacheReg-Write(S19,S27)
	S29= CtrlIMem=0                                             Premise(F59)
	S30= IMem[{pid,addr}]={40,rS,rT,offset}                     IMem-Hold(S2,S29)
	S31= CtrlGPR=0                                              Premise(F62)
	S32= GPR[rS]=base                                           GPR-Hold(S4,S31)
	S33= GPR[rT]=a                                              GPR-Hold(S5,S31)

IMMU	S34= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S26)
	S35= ICacheReg.Out={40,rS,rT,offset}                        ICacheReg-Out(S28)
	S36= IAddrReg.Out=>IMem.RAddr                               Premise(F83)
	S37= IMem.RAddr={pid,addr}                                  Path(S34,S36)
	S38= IMem.Out={40,rS,rT,offset}                             IMem-Read(S37,S30)
	S39= IMem.Out=>IRMux.MemData                                Premise(F84)
	S40= IRMux.MemData={40,rS,rT,offset}                        Path(S38,S39)
	S41= ICacheReg.Out=>IRMux.CacheData                         Premise(F85)
	S42= IRMux.CacheData={40,rS,rT,offset}                      Path(S35,S41)
	S43= IRMux.Out={40,rS,rT,offset}                            IRMux-Select(S40,S42)
	S44= IRMux.Out=>IR.In                                       Premise(F88)
	S45= IR.In={40,rS,rT,offset}                                Path(S43,S44)
	S46= CtrlCP0=0                                              Premise(F116)
	S47= CP0[ASID]=pid                                          CP0-Hold(S21,S46)
	S48= CtrlPC=0                                               Premise(F120)
	S49= CtrlPCInc=1                                            Premise(F121)
	S50= PC[Out]=addr+4                                         PC-Inc(S24,S48,S49)
	S51= CtrlIR=1                                               Premise(F129)
	S52= [IR]={40,rS,rT,offset}                                 IR-Write(S45,S51)
	S53= CtrlGPR=0                                              Premise(F130)
	S54= GPR[rS]=base                                           GPR-Hold(S32,S53)
	S55= GPR[rT]=a                                              GPR-Hold(S33,S53)

ID	S56= IR.Out25_21=rS                                         IR-Out(S52)
	S57= IR.Out15_0=offset                                      IR-Out(S52)
	S58= IR.Out25_21=>GPR.RReg1                                 Premise(F160)
	S59= GPR.RReg1=rS                                           Path(S56,S58)
	S60= GPR.Rdata1=base                                        GPR-Read(S59,S54)
	S61= IR.Out15_0=>IMMEXT.In                                  Premise(F161)
	S62= IMMEXT.In=offset                                       Path(S57,S61)
	S63= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S62)
	S64= GPR.Rdata1=>A.In                                       Premise(F162)
	S65= A.In=base                                              Path(S60,S64)
	S66= IMMEXT.Out=>B.In                                       Premise(F163)
	S67= B.In={16{offset[15]},offset}                           Path(S63,S66)
	S68= CtrlCP0=0                                              Premise(F184)
	S69= CP0[ASID]=pid                                          CP0-Hold(S47,S68)
	S70= CtrlPC=0                                               Premise(F188)
	S71= CtrlPCInc=0                                            Premise(F189)
	S72= PC[Out]=addr+4                                         PC-Hold(S50,S70,S71)
	S73= CtrlIR=0                                               Premise(F197)
	S74= [IR]={40,rS,rT,offset}                                 IR-Hold(S52,S73)
	S75= CtrlGPR=0                                              Premise(F198)
	S76= GPR[rT]=a                                              GPR-Hold(S55,S75)
	S77= CtrlA=1                                                Premise(F199)
	S78= [A]=base                                               A-Write(S65,S77)
	S79= CtrlB=1                                                Premise(F200)
	S80= [B]={16{offset[15]},offset}                            B-Write(S67,S79)

EX	S81= IR.Out20_16=rT                                         IR-Out(S74)
	S82= A.Out=base                                             A-Out(S78)
	S83= B.Out={16{offset[15]},offset}                          B-Out(S80)
	S84= A.Out=>ALU.A                                           Premise(F232)
	S85= ALU.A=base                                             Path(S82,S84)
	S86= B.Out=>ALU.B                                           Premise(F233)
	S87= ALU.B={16{offset[15]},offset}                          Path(S83,S86)
	S88= ALU.Out=base+{16{offset[15]},offset}                   ALU(S85,S87)
	S89= ALU.Out1_0={base+{16{offset[15]},offset}}[1:0]         ALU(S85,S87)
	S90= ALU.Out=>ALUOut.In                                     Premise(F235)
	S91= ALUOut.In=base+{16{offset[15]},offset}                 Path(S88,S90)
	S92= IR.Out20_16=>GPR.RReg2                                 Premise(F236)
	S93= GPR.RReg2=rT                                           Path(S81,S92)
	S94= GPR.Rdata2=a                                           GPR-Read(S93,S76)
	S95= GPR.Rdata2=>MemDataSel.In                              Premise(F237)
	S96= MemDataSel.In=a                                        Path(S94,S95)
	S97= ALU.Out1_0=>MemDataSel.Addr                            Premise(F238)
	S98= MemDataSel.Addr={base+{16{offset[15]},offset}}[1:0]    Path(S89,S97)
	S99= MemDataSel.Out={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}MemDataSel(S96,S98)
	S100= MemDataSel.Out=>DR.In                                 Premise(F240)
	S101= DR.In={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}Path(S99,S100)
	S102= CtrlCP0=0                                             Premise(F254)
	S103= CP0[ASID]=pid                                         CP0-Hold(S69,S102)
	S104= CtrlPC=0                                              Premise(F258)
	S105= CtrlPCInc=0                                           Premise(F259)
	S106= PC[Out]=addr+4                                        PC-Hold(S72,S104,S105)
	S107= CtrlALUOut=1                                          Premise(F271)
	S108= [ALUOut]=base+{16{offset[15]},offset}                 ALUOut-Write(S91,S107)
	S109= CtrlDR=1                                              Premise(F272)
	S110= [DR]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DR-Write(S101,S109)

MEM	S111= CP0.ASID=pid                                          ASID-Read(S103)
	S112= ALUOut.Out=base+{16{offset[15]},offset}               ALUOut-Out(S108)
	S113= CP0.ASID=>DMMU.PID                                    Premise(F309)
	S114= DMMU.PID=pid                                          Path(S111,S113)
	S115= ALUOut.Out=>DMMU.IEA                                  Premise(F310)
	S116= DMMU.IEA=base+{16{offset[15]},offset}                 Path(S112,S115)
	S117= DMMU.Addr={pid,base+{16{offset[15]},offset}}          DMMU-Search(S114,S116)
	S118= DMMU.Addr=>DAddrReg.In                                Premise(F311)
	S119= DAddrReg.In={pid,base+{16{offset[15]},offset}}        Path(S117,S118)
	S120= CtrlPC=0                                              Premise(F326)
	S121= CtrlPCInc=0                                           Premise(F327)
	S122= PC[Out]=addr+4                                        PC-Hold(S106,S120,S121)
	S123= CtrlDR=0                                              Premise(F340)
	S124= [DR]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DR-Hold(S110,S123)
	S125= CtrlDAddrReg=1                                        Premise(F342)
	S126= [DAddrReg]={pid,base+{16{offset[15]},offset}}         DAddrReg-Write(S119,S125)

DMMU1	S127= CtrlPC=0                                              Premise(F394)
	S128= CtrlPCInc=0                                           Premise(F395)
	S129= PC[Out]=addr+4                                        PC-Hold(S122,S127,S128)
	S130= CtrlDR=0                                              Premise(F408)
	S131= [DR]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DR-Hold(S124,S130)
	S132= CtrlDAddrReg=0                                        Premise(F410)
	S133= [DAddrReg]={pid,base+{16{offset[15]},offset}}         DAddrReg-Hold(S126,S132)

DMMU2	S134= DR.Out={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DR-Out(S131)
	S135= DAddrReg.Out={pid,base+{16{offset[15]},offset}}       DAddrReg-Out(S133)
	S136= DAddrReg.Out=>DMem.WAddr                              Premise(F453)
	S137= DMem.WAddr={pid,base+{16{offset[15]},offset}}         Path(S135,S136)
	S138= DR.Out=>DMem.WData                                    Premise(F454)
	S139= DMem.WData={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}Path(S134,S138)
	S140= CtrlPC=0                                              Premise(F462)
	S141= CtrlPCInc=0                                           Premise(F463)
	S142= PC[Out]=addr+4                                        PC-Hold(S129,S140,S141)
	S143= CtrlDMem=1                                            Premise(F482)
	S144= DMem[{pid,base+{16{offset[15]},offset}}]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DMem-Write(S137,S139,S143)

WB	S145= CtrlPC=0                                              Premise(F530)
	S146= CtrlPCInc=0                                           Premise(F531)
	S147= PC[Out]=addr+4                                        PC-Hold(S142,S145,S146)
	S148= CtrlDMem=0                                            Premise(F550)
	S149= DMem[{pid,base+{16{offset[15]},offset}}]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DMem-Hold(S144,S148)

POST	S147= PC[Out]=addr+4                                        PC-Hold(S142,S145,S146)
	S149= DMem[{pid,base+{16{offset[15]},offset}}]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DMem-Hold(S144,S148)

