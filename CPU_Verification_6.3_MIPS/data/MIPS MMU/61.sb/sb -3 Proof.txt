
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={40,rS,rT,offset}                      Premise(F2)
	S3= GPR[rS]=base                                            Premise(F3)
	S4= GPR[rT]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlCP0=0                                              Premise(F47)
	S15= CP0[ASID]=pid                                          CP0-Hold(S0,S14)
	S16= CtrlPC=0                                               Premise(F51)
	S17= CtrlPCInc=0                                            Premise(F52)
	S18= PC[Out]=addr                                           PC-Hold(S1,S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F53)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S19)
	S21= CtrlIMem=0                                             Premise(F58)
	S22= IMem[{pid,addr}]={40,rS,rT,offset}                     IMem-Hold(S2,S21)
	S23= CtrlGPR=0                                              Premise(F61)
	S24= GPR[rS]=base                                           GPR-Hold(S3,S23)
	S25= GPR[rT]=a                                              GPR-Hold(S4,S23)

IMMU	S26= PC.Out=addr                                            PC-Out(S18)
	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S28= PC.Out=>ICache.IEA                                     Premise(F77)
	S29= ICache.IEA=addr                                        Path(S26,S28)
	S30= IAddrReg.Out=>IMem.RAddr                               Premise(F82)
	S31= IMem.RAddr={pid,addr}                                  Path(S27,S30)
	S32= IMem.Out={40,rS,rT,offset}                             IMem-Read(S31,S22)
	S33= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S31,S22)
	S34= IMem.Out=>IRMux.MemData                                Premise(F83)
	S35= IRMux.MemData={40,rS,rT,offset}                        Path(S32,S34)
	S36= IRMux.Out={40,rS,rT,offset}                            IRMux-Select(S35)
	S37= IRMux.Out=>IR.In                                       Premise(F87)
	S38= IR.In={40,rS,rT,offset}                                Path(S36,S37)
	S39= IMem.MEM8WordOut=>ICache.WData                         Premise(F88)
	S40= ICache.WData=IMemGet8Word({pid,addr})                  Path(S33,S39)
	S41= CtrlCP0=0                                              Premise(F115)
	S42= CP0[ASID]=pid                                          CP0-Hold(S15,S41)
	S43= CtrlPC=0                                               Premise(F119)
	S44= CtrlPCInc=1                                            Premise(F120)
	S45= PC[Out]=addr+4                                         PC-Inc(S18,S43,S44)
	S46= CtrlICache=1                                           Premise(F123)
	S47= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S29,S40,S46)
	S48= CtrlIR=1                                               Premise(F128)
	S49= [IR]={40,rS,rT,offset}                                 IR-Write(S38,S48)
	S50= CtrlGPR=0                                              Premise(F129)
	S51= GPR[rS]=base                                           GPR-Hold(S24,S50)
	S52= GPR[rT]=a                                              GPR-Hold(S25,S50)

ID	S53= IR.Out25_21=rS                                         IR-Out(S49)
	S54= IR.Out15_0=offset                                      IR-Out(S49)
	S55= IR.Out25_21=>GPR.RReg1                                 Premise(F159)
	S56= GPR.RReg1=rS                                           Path(S53,S55)
	S57= GPR.Rdata1=base                                        GPR-Read(S56,S51)
	S58= IR.Out15_0=>IMMEXT.In                                  Premise(F160)
	S59= IMMEXT.In=offset                                       Path(S54,S58)
	S60= IMMEXT.Out={16{offset[15]},offset}                     IMMEXT(S59)
	S61= GPR.Rdata1=>A.In                                       Premise(F161)
	S62= A.In=base                                              Path(S57,S61)
	S63= IMMEXT.Out=>B.In                                       Premise(F162)
	S64= B.In={16{offset[15]},offset}                           Path(S60,S63)
	S65= CtrlCP0=0                                              Premise(F183)
	S66= CP0[ASID]=pid                                          CP0-Hold(S42,S65)
	S67= CtrlPC=0                                               Premise(F187)
	S68= CtrlPCInc=0                                            Premise(F188)
	S69= PC[Out]=addr+4                                         PC-Hold(S45,S67,S68)
	S70= CtrlICache=0                                           Premise(F191)
	S71= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S47,S70)
	S72= CtrlIR=0                                               Premise(F196)
	S73= [IR]={40,rS,rT,offset}                                 IR-Hold(S49,S72)
	S74= CtrlGPR=0                                              Premise(F197)
	S75= GPR[rT]=a                                              GPR-Hold(S52,S74)
	S76= CtrlA=1                                                Premise(F198)
	S77= [A]=base                                               A-Write(S62,S76)
	S78= CtrlB=1                                                Premise(F199)
	S79= [B]={16{offset[15]},offset}                            B-Write(S64,S78)

EX	S80= IR.Out20_16=rT                                         IR-Out(S73)
	S81= A.Out=base                                             A-Out(S77)
	S82= B.Out={16{offset[15]},offset}                          B-Out(S79)
	S83= A.Out=>ALU.A                                           Premise(F231)
	S84= ALU.A=base                                             Path(S81,S83)
	S85= B.Out=>ALU.B                                           Premise(F232)
	S86= ALU.B={16{offset[15]},offset}                          Path(S82,S85)
	S87= ALU.Out=base+{16{offset[15]},offset}                   ALU(S84,S86)
	S88= ALU.Out1_0={base+{16{offset[15]},offset}}[1:0]         ALU(S84,S86)
	S89= ALU.Out=>ALUOut.In                                     Premise(F234)
	S90= ALUOut.In=base+{16{offset[15]},offset}                 Path(S87,S89)
	S91= IR.Out20_16=>GPR.RReg2                                 Premise(F235)
	S92= GPR.RReg2=rT                                           Path(S80,S91)
	S93= GPR.Rdata2=a                                           GPR-Read(S92,S75)
	S94= GPR.Rdata2=>MemDataSel.In                              Premise(F236)
	S95= MemDataSel.In=a                                        Path(S93,S94)
	S96= ALU.Out1_0=>MemDataSel.Addr                            Premise(F237)
	S97= MemDataSel.Addr={base+{16{offset[15]},offset}}[1:0]    Path(S88,S96)
	S98= MemDataSel.Out={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}MemDataSel(S95,S97)
	S99= MemDataSel.Out=>DR.In                                  Premise(F239)
	S100= DR.In={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}Path(S98,S99)
	S101= CtrlCP0=0                                             Premise(F253)
	S102= CP0[ASID]=pid                                         CP0-Hold(S66,S101)
	S103= CtrlPC=0                                              Premise(F257)
	S104= CtrlPCInc=0                                           Premise(F258)
	S105= PC[Out]=addr+4                                        PC-Hold(S69,S103,S104)
	S106= CtrlICache=0                                          Premise(F261)
	S107= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S71,S106)
	S108= CtrlALUOut=1                                          Premise(F270)
	S109= [ALUOut]=base+{16{offset[15]},offset}                 ALUOut-Write(S90,S108)
	S110= CtrlDR=1                                              Premise(F271)
	S111= [DR]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DR-Write(S100,S110)

MEM	S112= CP0.ASID=pid                                          ASID-Read(S102)
	S113= ALUOut.Out=base+{16{offset[15]},offset}               ALUOut-Out(S109)
	S114= CP0.ASID=>DMMU.PID                                    Premise(F308)
	S115= DMMU.PID=pid                                          Path(S112,S114)
	S116= ALUOut.Out=>DMMU.IEA                                  Premise(F309)
	S117= DMMU.IEA=base+{16{offset[15]},offset}                 Path(S113,S116)
	S118= DMMU.Addr={pid,base+{16{offset[15]},offset}}          DMMU-Search(S115,S117)
	S119= DMMU.Addr=>DAddrReg.In                                Premise(F310)
	S120= DAddrReg.In={pid,base+{16{offset[15]},offset}}        Path(S118,S119)
	S121= CtrlPC=0                                              Premise(F325)
	S122= CtrlPCInc=0                                           Premise(F326)
	S123= PC[Out]=addr+4                                        PC-Hold(S105,S121,S122)
	S124= CtrlICache=0                                          Premise(F329)
	S125= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S107,S124)
	S126= CtrlDR=0                                              Premise(F339)
	S127= [DR]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DR-Hold(S111,S126)
	S128= CtrlDAddrReg=1                                        Premise(F341)
	S129= [DAddrReg]={pid,base+{16{offset[15]},offset}}         DAddrReg-Write(S120,S128)

DMMU1	S130= CtrlPC=0                                              Premise(F393)
	S131= CtrlPCInc=0                                           Premise(F394)
	S132= PC[Out]=addr+4                                        PC-Hold(S123,S130,S131)
	S133= CtrlICache=0                                          Premise(F397)
	S134= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S125,S133)
	S135= CtrlDR=0                                              Premise(F407)
	S136= [DR]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DR-Hold(S127,S135)
	S137= CtrlDAddrReg=0                                        Premise(F409)
	S138= [DAddrReg]={pid,base+{16{offset[15]},offset}}         DAddrReg-Hold(S129,S137)

DMMU2	S139= DR.Out={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DR-Out(S136)
	S140= DAddrReg.Out={pid,base+{16{offset[15]},offset}}       DAddrReg-Out(S138)
	S141= DAddrReg.Out=>DMem.WAddr                              Premise(F452)
	S142= DMem.WAddr={pid,base+{16{offset[15]},offset}}         Path(S140,S141)
	S143= DR.Out=>DMem.WData                                    Premise(F453)
	S144= DMem.WData={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}Path(S139,S143)
	S145= CtrlPC=0                                              Premise(F461)
	S146= CtrlPCInc=0                                           Premise(F462)
	S147= PC[Out]=addr+4                                        PC-Hold(S132,S145,S146)
	S148= CtrlICache=0                                          Premise(F465)
	S149= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S134,S148)
	S150= CtrlDMem=1                                            Premise(F481)
	S151= DMem[{pid,base+{16{offset[15]},offset}}]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DMem-Write(S142,S144,S150)

WB	S152= CtrlPC=0                                              Premise(F529)
	S153= CtrlPCInc=0                                           Premise(F530)
	S154= PC[Out]=addr+4                                        PC-Hold(S147,S152,S153)
	S155= CtrlICache=0                                          Premise(F533)
	S156= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S149,S155)
	S157= CtrlDMem=0                                            Premise(F549)
	S158= DMem[{pid,base+{16{offset[15]},offset}}]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DMem-Hold(S151,S157)

POST	S154= PC[Out]=addr+4                                        PC-Hold(S147,S152,S153)
	S156= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S149,S155)
	S158= DMem[{pid,base+{16{offset[15]},offset}}]={a[31-{base+{16{offset[15]},offset}}[1:0]*8:0],{base+{16{offset[15]},offset}}[1:0]*8{0}}DMem-Hold(S151,S157)

