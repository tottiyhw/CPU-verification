
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rs,rt,code,50}                      Premise(F2)
	S3= ICache[addr]={0,rs,rt,code,50}                          Premise(F3)
	S4= GPR[rs]=a                                               Premise(F4)
	S5= GPR[rt]=b                                               Premise(F5)

IF	S6= CP0.ASID=pid                                            ASID-Read(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F10)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={0,rs,rt,code,50}                           ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F11)
	S19= ICacheReg.In={0,rs,rt,code,50}                         Path(S17,S18)
	S20= CtrlCP0=0                                              Premise(F37)
	S21= CP0[ASID]=pid                                          CP0-Hold(S0,S20)
	S22= CtrlPC=0                                               Premise(F41)
	S23= CtrlPCInc=0                                            Premise(F42)
	S24= PC[Out]=addr                                           PC-Hold(S1,S22,S23)
	S25= CtrlIAddrReg=1                                         Premise(F43)
	S26= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S25)
	S27= CtrlICacheReg=1                                        Premise(F46)
	S28= [ICacheReg]={0,rs,rt,code,50}                          ICacheReg-Write(S19,S27)
	S29= CtrlIMem=0                                             Premise(F48)
	S30= IMem[{pid,addr}]={0,rs,rt,code,50}                     IMem-Hold(S2,S29)
	S31= CtrlGPR=0                                              Premise(F51)
	S32= GPR[rs]=a                                              GPR-Hold(S4,S31)
	S33= GPR[rt]=b                                              GPR-Hold(S5,S31)

IMMU	S34= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S26)
	S35= ICacheReg.Out={0,rs,rt,code,50}                        ICacheReg-Out(S28)
	S36= IAddrReg.Out=>IMem.RAddr                               Premise(F65)
	S37= IMem.RAddr={pid,addr}                                  Path(S34,S36)
	S38= IMem.Out={0,rs,rt,code,50}                             IMem-Read(S37,S30)
	S39= IMem.Out=>IRMux.MemData                                Premise(F66)
	S40= IRMux.MemData={0,rs,rt,code,50}                        Path(S38,S39)
	S41= ICacheReg.Out=>IRMux.CacheData                         Premise(F67)
	S42= IRMux.CacheData={0,rs,rt,code,50}                      Path(S35,S41)
	S43= IRMux.Out={0,rs,rt,code,50}                            IRMux-Select(S40,S42)
	S44= IRMux.Out=>IR.In                                       Premise(F70)
	S45= IR.In={0,rs,rt,code,50}                                Path(S43,S44)
	S46= CtrlCP0=0                                              Premise(F87)
	S47= CP0[ASID]=pid                                          CP0-Hold(S21,S46)
	S48= CtrlPC=0                                               Premise(F91)
	S49= CtrlPCInc=1                                            Premise(F92)
	S50= PC[Out]=addr+4                                         PC-Inc(S24,S48,S49)
	S51= CtrlIR=1                                               Premise(F100)
	S52= [IR]={0,rs,rt,code,50}                                 IR-Write(S45,S51)
	S53= CtrlGPR=0                                              Premise(F101)
	S54= GPR[rs]=a                                              GPR-Hold(S32,S53)
	S55= GPR[rt]=b                                              GPR-Hold(S33,S53)

ID	S56= IR.Out25_21=rs                                         IR-Out(S52)
	S57= IR.Out20_16=rt                                         IR-Out(S52)
	S58= IR.Out25_21=>GPR.RReg1                                 Premise(F124)
	S59= GPR.RReg1=rs                                           Path(S56,S58)
	S60= GPR.Rdata1=a                                           GPR-Read(S59,S54)
	S61= IR.Out20_16=>GPR.RReg2                                 Premise(F125)
	S62= GPR.RReg2=rt                                           Path(S57,S61)
	S63= GPR.Rdata2=b                                           GPR-Read(S62,S55)
	S64= GPR.Rdata1=>A.In                                       Premise(F127)
	S65= A.In=a                                                 Path(S60,S64)
	S66= GPR.Rdata2=>B.In                                       Premise(F128)
	S67= B.In=b                                                 Path(S63,S66)
	S68= CtrlCP0=0                                              Premise(F137)
	S69= CP0[ASID]=pid                                          CP0-Hold(S47,S68)
	S70= CtrlPC=0                                               Premise(F141)
	S71= CtrlPCInc=0                                            Premise(F142)
	S72= PC[Out]=addr+4                                         PC-Hold(S50,S70,S71)
	S73= CtrlA=1                                                Premise(F152)
	S74= [A]=a                                                  A-Write(S65,S73)
	S75= CtrlB=1                                                Premise(F153)
	S76= [B]=b                                                  B-Write(S67,S75)

EX	S77= A.Out=a                                                A-Out(S74)
	S78= B.Out=b                                                B-Out(S76)
	S79= A.Out=>CMPU.A                                          Premise(F179)
	S80= CMPU.A=a                                               Path(S77,S79)
	S81= B.Out=>CMPU.B                                          Premise(F180)
	S82= CMPU.B=b                                               Path(S78,S81)
	S83= CMPU.lt=CompareS(a,b)                                  CMPU-CMPS(S80,S82)
	S84= CMPU.lt=>ConditionReg.In                               Premise(F182)
	S85= ConditionReg.In=CompareS(a,b)                          Path(S83,S84)
	S86= CtrlCP0=0                                              Premise(F188)
	S87= CP0[ASID]=pid                                          CP0-Hold(S69,S86)
	S88= CtrlPC=0                                               Premise(F192)
	S89= CtrlPCInc=0                                            Premise(F193)
	S90= PC[Out]=addr+4                                         PC-Hold(S72,S88,S89)
	S91= CtrlConditionReg=1                                     Premise(F205)
	S92= [ConditionReg]=CompareS(a,b)                           ConditionReg-Write(S85,S91)

MEM	S93= CP0.ASID=pid                                           ASID-Read(S87)
	S94= PC.Out=addr+4                                          PC-Out(S90)
	S95= PC.Out=>CP0.EPCIn                                      Premise(F233)
	S96= CP0.EPCIn=addr+4                                       Path(S94,S95)
	S97= CP0.ExCodeIn=5'h0d                                     Premise(F234)
	S98= CP0.ASID=>PIDReg.In                                    Premise(F236)
	S99= PIDReg.In=pid                                          Path(S93,S98)
	S100= CtrlEPCIn=1                                           Premise(F240)
	S101= CP0[EPC]=addr+4                                       CP0-Write-EPC(S96,S100)
	S102= CtrlExCodeIn=1                                        Premise(F241)
	S103= CP0[ExCode]=5'h0d                                     CP0-Write-ExCode(S97,S102)
	S104= CtrlConditionReg=0                                    Premise(F256)
	S105= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S92,S104)
	S106= CtrlPIDReg=1                                          Premise(F257)
	S107= [PIDReg]=pid                                          PIDReg-Write(S99,S106)

DMMU1	S108= CtrlCP0=0                                             Premise(F289)
	S109= CP0[EPC]=addr+4                                       CP0-Hold(S101,S108)
	S110= CP0[ExCode]=5'h0d                                     CP0-Hold(S103,S108)
	S111= CtrlConditionReg=0                                    Premise(F306)
	S112= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S105,S111)
	S113= CtrlPIDReg=0                                          Premise(F307)
	S114= [PIDReg]=pid                                          PIDReg-Hold(S107,S113)

DMMU2	S115= CtrlCP0=0                                             Premise(F339)
	S116= CP0[EPC]=addr+4                                       CP0-Hold(S109,S115)
	S117= CP0[ExCode]=5'h0d                                     CP0-Hold(S110,S115)
	S118= CtrlConditionReg=0                                    Premise(F356)
	S119= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S112,S118)
	S120= CtrlPIDReg=0                                          Premise(F357)
	S121= [PIDReg]=pid                                          PIDReg-Hold(S114,S120)

WB	S122= CtrlCP0=0                                             Premise(F389)
	S123= CP0[EPC]=addr+4                                       CP0-Hold(S116,S122)
	S124= CP0[ExCode]=5'h0d                                     CP0-Hold(S117,S122)
	S125= CtrlConditionReg=0                                    Premise(F406)
	S126= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S119,S125)
	S127= CtrlPIDReg=0                                          Premise(F407)
	S128= [PIDReg]=pid                                          PIDReg-Hold(S121,S127)

POST	S123= CP0[EPC]=addr+4                                       CP0-Hold(S116,S122)
	S124= CP0[ExCode]=5'h0d                                     CP0-Hold(S117,S122)
	S126= [ConditionReg]=CompareS(a,b)                          ConditionReg-Hold(S119,S125)
	S128= [PIDReg]=pid                                          PIDReg-Hold(S121,S127)

