
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rs,rt,code,50}                      Premise(F2)
	S3= ICache[addr]={0,rs,rt,code,50}                          Premise(F3)
	S4= GPR[rs]=a                                               Premise(F4)
	S5= GPR[rt]=b                                               Premise(F5)

IF	S6= CP0.ASID=pid                                            ASID-Read(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= CP0.ASID=>IMMU.PID                                      Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F10)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={0,rs,rt,code,50}                           ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F11)
	S19= ICacheReg.In={0,rs,rt,code,50}                         Path(S17,S18)
	S20= CtrlIAddrReg=1                                         Premise(F43)
	S21= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S20)
	S22= CtrlICacheReg=1                                        Premise(F46)
	S23= [ICacheReg]={0,rs,rt,code,50}                          ICacheReg-Write(S19,S22)
	S24= CtrlIMem=0                                             Premise(F48)
	S25= IMem[{pid,addr}]={0,rs,rt,code,50}                     IMem-Hold(S2,S24)
	S26= CtrlGPR=0                                              Premise(F51)
	S27= GPR[rs]=a                                              GPR-Hold(S4,S26)
	S28= GPR[rt]=b                                              GPR-Hold(S5,S26)

IMMU	S29= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S21)
	S30= ICacheReg.Out={0,rs,rt,code,50}                        ICacheReg-Out(S23)
	S31= IAddrReg.Out=>IMem.RAddr                               Premise(F65)
	S32= IMem.RAddr={pid,addr}                                  Path(S29,S31)
	S33= IMem.Out={0,rs,rt,code,50}                             IMem-Read(S32,S25)
	S34= IMem.Out=>IRMux.MemData                                Premise(F66)
	S35= IRMux.MemData={0,rs,rt,code,50}                        Path(S33,S34)
	S36= ICacheReg.Out=>IRMux.CacheData                         Premise(F67)
	S37= IRMux.CacheData={0,rs,rt,code,50}                      Path(S30,S36)
	S38= IRMux.Out={0,rs,rt,code,50}                            IRMux-Select(S35,S37)
	S39= IRMux.Out=>IR.In                                       Premise(F70)
	S40= IR.In={0,rs,rt,code,50}                                Path(S38,S39)
	S41= CtrlIR=1                                               Premise(F100)
	S42= [IR]={0,rs,rt,code,50}                                 IR-Write(S40,S41)
	S43= CtrlGPR=0                                              Premise(F101)
	S44= GPR[rs]=a                                              GPR-Hold(S27,S43)
	S45= GPR[rt]=b                                              GPR-Hold(S28,S43)

ID	S46= IR.Out25_21=rs                                         IR-Out(S42)
	S47= IR.Out20_16=rt                                         IR-Out(S42)
	S48= IR.Out25_21=>GPR.RReg1                                 Premise(F124)
	S49= GPR.RReg1=rs                                           Path(S46,S48)
	S50= GPR.Rdata1=a                                           GPR-Read(S49,S44)
	S51= IR.Out20_16=>GPR.RReg2                                 Premise(F125)
	S52= GPR.RReg2=rt                                           Path(S47,S51)
	S53= GPR.Rdata2=b                                           GPR-Read(S52,S45)
	S54= GPR.Rdata1=>A.In                                       Premise(F127)
	S55= A.In=a                                                 Path(S50,S54)
	S56= GPR.Rdata2=>B.In                                       Premise(F128)
	S57= B.In=b                                                 Path(S53,S56)
	S58= CtrlA=1                                                Premise(F152)
	S59= [A]=a                                                  A-Write(S55,S58)
	S60= CtrlB=1                                                Premise(F153)
	S61= [B]=b                                                  B-Write(S57,S60)

EX	S62= A.Out=a                                                A-Out(S59)
	S63= B.Out=b                                                B-Out(S61)
	S64= A.Out=>CMPU.A                                          Premise(F179)
	S65= CMPU.A=a                                               Path(S62,S64)
	S66= B.Out=>CMPU.B                                          Premise(F180)
	S67= CMPU.B=b                                               Path(S63,S66)
	S68= CMPU.lt=CompareS(a,b)                                  CMPU-CMPS(S65,S67)
	S69= CMPU.lt=>ConditionReg.In                               Premise(F182)
	S70= ConditionReg.In=CompareS(a,b)                          Path(S68,S69)
	S71= CtrlConditionReg=1                                     Premise(F205)
	S72= [ConditionReg]=CompareS(a,b)                           ConditionReg-Write(S70,S71)

MEM	S73= CtrlConditionReg=0                                     Premise(F256)
	S74= [ConditionReg]=CompareS(a,b)                           ConditionReg-Hold(S72,S73)

DMMU1	S75= CtrlConditionReg=0                                     Premise(F306)
	S76= [ConditionReg]=CompareS(a,b)                           ConditionReg-Hold(S74,S75)

DMMU2	S77= CtrlConditionReg=0                                     Premise(F356)
	S78= [ConditionReg]=CompareS(a,b)                           ConditionReg-Hold(S76,S77)

WB	S79= CtrlConditionReg=0                                     Premise(F406)
	S80= [ConditionReg]=CompareS(a,b)                           ConditionReg-Hold(S78,S79)

POST	S80= [ConditionReg]=CompareS(a,b)                           ConditionReg-Hold(S78,S79)

