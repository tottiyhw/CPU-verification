
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rs,10,imm}                          Premise(F2)
	S3= ICache[addr]={1,rs,10,imm}                              Premise(F3)
	S4= GPR[rs]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={1,rs,10,imm}                               ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={1,rs,10,imm}                             Path(S16,S17)
	S19= CtrlCP0=0                                              Premise(F36)
	S20= CP0[ASID]=pid                                          CP0-Hold(S0,S19)
	S21= CtrlPC=0                                               Premise(F40)
	S22= CtrlPCInc=0                                            Premise(F41)
	S23= PC[Out]=addr                                           PC-Hold(S1,S21,S22)
	S24= CtrlIAddrReg=1                                         Premise(F42)
	S25= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S24)
	S26= CtrlICacheReg=1                                        Premise(F45)
	S27= [ICacheReg]={1,rs,10,imm}                              ICacheReg-Write(S18,S26)
	S28= CtrlIMem=0                                             Premise(F47)
	S29= IMem[{pid,addr}]={1,rs,10,imm}                         IMem-Hold(S2,S28)
	S30= CtrlGPR=0                                              Premise(F50)
	S31= GPR[rs]=a                                              GPR-Hold(S4,S30)

IMMU	S32= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S25)
	S33= ICacheReg.Out={1,rs,10,imm}                            ICacheReg-Out(S27)
	S34= IAddrReg.Out=>IMem.RAddr                               Premise(F64)
	S35= IMem.RAddr={pid,addr}                                  Path(S32,S34)
	S36= IMem.Out={1,rs,10,imm}                                 IMem-Read(S35,S29)
	S37= IMem.Out=>IRMux.MemData                                Premise(F65)
	S38= IRMux.MemData={1,rs,10,imm}                            Path(S36,S37)
	S39= ICacheReg.Out=>IRMux.CacheData                         Premise(F66)
	S40= IRMux.CacheData={1,rs,10,imm}                          Path(S33,S39)
	S41= IRMux.Out={1,rs,10,imm}                                IRMux-Select(S38,S40)
	S42= IRMux.Out=>IR.In                                       Premise(F69)
	S43= IR.In={1,rs,10,imm}                                    Path(S41,S42)
	S44= CtrlCP0=0                                              Premise(F86)
	S45= CP0[ASID]=pid                                          CP0-Hold(S20,S44)
	S46= CtrlPC=0                                               Premise(F90)
	S47= CtrlPCInc=1                                            Premise(F91)
	S48= PC[Out]=addr+4                                         PC-Inc(S23,S46,S47)
	S49= CtrlIR=1                                               Premise(F99)
	S50= [IR]={1,rs,10,imm}                                     IR-Write(S43,S49)
	S51= CtrlGPR=0                                              Premise(F100)
	S52= GPR[rs]=a                                              GPR-Hold(S31,S51)

ID	S53= IR.Out25_21=rs                                         IR-Out(S50)
	S54= IR.Out15_0=imm                                         IR-Out(S50)
	S55= IR.Out25_21=>GPR.RReg1                                 Premise(F123)
	S56= GPR.RReg1=rs                                           Path(S53,S55)
	S57= GPR.Rdata1=a                                           GPR-Read(S56,S52)
	S58= IR.Out15_0=>IMMEXT.In                                  Premise(F125)
	S59= IMMEXT.In=imm                                          Path(S54,S58)
	S60= IMMEXT.Out={16{imm[15]},imm}                           IMMEXT(S59)
	S61= GPR.Rdata1=>A.In                                       Premise(F126)
	S62= A.In=a                                                 Path(S57,S61)
	S63= IMMEXT.Out=>B.In                                       Premise(F127)
	S64= B.In={16{imm[15]},imm}                                 Path(S60,S63)
	S65= CtrlCP0=0                                              Premise(F136)
	S66= CP0[ASID]=pid                                          CP0-Hold(S45,S65)
	S67= CtrlPC=0                                               Premise(F140)
	S68= CtrlPCInc=0                                            Premise(F141)
	S69= PC[Out]=addr+4                                         PC-Hold(S48,S67,S68)
	S70= CtrlA=1                                                Premise(F151)
	S71= [A]=a                                                  A-Write(S62,S70)
	S72= CtrlB=1                                                Premise(F152)
	S73= [B]={16{imm[15]},imm}                                  B-Write(S64,S72)

EX	S74= A.Out=a                                                A-Out(S71)
	S75= B.Out={16{imm[15]},imm}                                B-Out(S73)
	S76= A.Out=>CMPU.A                                          Premise(F178)
	S77= CMPU.A=a                                               Path(S74,S76)
	S78= B.Out=>CMPU.B                                          Premise(F179)
	S79= CMPU.B={16{imm[15]},imm}                               Path(S75,S78)
	S80= CMPU.lt=CompareS(a,{16{imm[15]},imm})                  CMPU-CMPS(S77,S79)
	S81= CMPU.lt=>ConditionReg.In                               Premise(F181)
	S82= ConditionReg.In=CompareS(a,{16{imm[15]},imm})          Path(S80,S81)
	S83= CtrlCP0=0                                              Premise(F187)
	S84= CP0[ASID]=pid                                          CP0-Hold(S66,S83)
	S85= CtrlPC=0                                               Premise(F191)
	S86= CtrlPCInc=0                                            Premise(F192)
	S87= PC[Out]=addr+4                                         PC-Hold(S69,S85,S86)
	S88= CtrlConditionReg=1                                     Premise(F204)
	S89= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Write(S82,S88)

MEM	S90= CP0.ASID=pid                                           ASID-Read(S84)
	S91= PC.Out=addr+4                                          PC-Out(S87)
	S92= PC.Out=>CP0.EPCIn                                      Premise(F232)
	S93= CP0.EPCIn=addr+4                                       Path(S91,S92)
	S94= CP0.ExCodeIn=5'h0d                                     Premise(F233)
	S95= CP0.ASID=>PIDReg.In                                    Premise(F235)
	S96= PIDReg.In=pid                                          Path(S90,S95)
	S97= CtrlEPCIn=1                                            Premise(F239)
	S98= CP0[EPC]=addr+4                                        CP0-Write-EPC(S93,S97)
	S99= CtrlExCodeIn=1                                         Premise(F240)
	S100= CP0[ExCode]=5'h0d                                     CP0-Write-ExCode(S94,S99)
	S101= CtrlConditionReg=0                                    Premise(F255)
	S102= [ConditionReg]=CompareS(a,{16{imm[15]},imm})          ConditionReg-Hold(S89,S101)
	S103= CtrlPIDReg=1                                          Premise(F256)
	S104= [PIDReg]=pid                                          PIDReg-Write(S96,S103)

DMMU1	S105= CtrlCP0=0                                             Premise(F288)
	S106= CP0[EPC]=addr+4                                       CP0-Hold(S98,S105)
	S107= CP0[ExCode]=5'h0d                                     CP0-Hold(S100,S105)
	S108= CtrlConditionReg=0                                    Premise(F305)
	S109= [ConditionReg]=CompareS(a,{16{imm[15]},imm})          ConditionReg-Hold(S102,S108)
	S110= CtrlPIDReg=0                                          Premise(F306)
	S111= [PIDReg]=pid                                          PIDReg-Hold(S104,S110)

DMMU2	S112= CtrlCP0=0                                             Premise(F338)
	S113= CP0[EPC]=addr+4                                       CP0-Hold(S106,S112)
	S114= CP0[ExCode]=5'h0d                                     CP0-Hold(S107,S112)
	S115= CtrlConditionReg=0                                    Premise(F355)
	S116= [ConditionReg]=CompareS(a,{16{imm[15]},imm})          ConditionReg-Hold(S109,S115)
	S117= CtrlPIDReg=0                                          Premise(F356)
	S118= [PIDReg]=pid                                          PIDReg-Hold(S111,S117)

WB	S119= CtrlCP0=0                                             Premise(F388)
	S120= CP0[EPC]=addr+4                                       CP0-Hold(S113,S119)
	S121= CP0[ExCode]=5'h0d                                     CP0-Hold(S114,S119)
	S122= CtrlConditionReg=0                                    Premise(F405)
	S123= [ConditionReg]=CompareS(a,{16{imm[15]},imm})          ConditionReg-Hold(S116,S122)
	S124= CtrlPIDReg=0                                          Premise(F406)
	S125= [PIDReg]=pid                                          PIDReg-Hold(S118,S124)

POST	S120= CP0[EPC]=addr+4                                       CP0-Hold(S113,S119)
	S121= CP0[ExCode]=5'h0d                                     CP0-Hold(S114,S119)
	S123= [ConditionReg]=CompareS(a,{16{imm[15]},imm})          ConditionReg-Hold(S116,S122)
	S125= [PIDReg]=pid                                          PIDReg-Hold(S118,S124)

