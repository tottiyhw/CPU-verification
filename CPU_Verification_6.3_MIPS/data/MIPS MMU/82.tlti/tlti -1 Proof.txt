
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rs,10,imm}                          Premise(F2)
	S3= ICache[addr]={1,rs,10,imm}                              Premise(F3)
	S4= GPR[rs]=a                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= CP0.ASID=>IMMU.PID                                      Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={1,rs,10,imm}                               ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={1,rs,10,imm}                             Path(S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F42)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S19)
	S21= CtrlICacheReg=1                                        Premise(F45)
	S22= [ICacheReg]={1,rs,10,imm}                              ICacheReg-Write(S18,S21)
	S23= CtrlIMem=0                                             Premise(F47)
	S24= IMem[{pid,addr}]={1,rs,10,imm}                         IMem-Hold(S2,S23)
	S25= CtrlGPR=0                                              Premise(F50)
	S26= GPR[rs]=a                                              GPR-Hold(S4,S25)

IMMU	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S28= ICacheReg.Out={1,rs,10,imm}                            ICacheReg-Out(S22)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F64)
	S30= IMem.RAddr={pid,addr}                                  Path(S27,S29)
	S31= IMem.Out={1,rs,10,imm}                                 IMem-Read(S30,S24)
	S32= IMem.Out=>IRMux.MemData                                Premise(F65)
	S33= IRMux.MemData={1,rs,10,imm}                            Path(S31,S32)
	S34= ICacheReg.Out=>IRMux.CacheData                         Premise(F66)
	S35= IRMux.CacheData={1,rs,10,imm}                          Path(S28,S34)
	S36= IRMux.Out={1,rs,10,imm}                                IRMux-Select(S33,S35)
	S37= IRMux.Out=>IR.In                                       Premise(F69)
	S38= IR.In={1,rs,10,imm}                                    Path(S36,S37)
	S39= CtrlIR=1                                               Premise(F99)
	S40= [IR]={1,rs,10,imm}                                     IR-Write(S38,S39)
	S41= CtrlGPR=0                                              Premise(F100)
	S42= GPR[rs]=a                                              GPR-Hold(S26,S41)

ID	S43= IR.Out25_21=rs                                         IR-Out(S40)
	S44= IR.Out15_0=imm                                         IR-Out(S40)
	S45= IR.Out25_21=>GPR.RReg1                                 Premise(F123)
	S46= GPR.RReg1=rs                                           Path(S43,S45)
	S47= GPR.Rdata1=a                                           GPR-Read(S46,S42)
	S48= IR.Out15_0=>IMMEXT.In                                  Premise(F125)
	S49= IMMEXT.In=imm                                          Path(S44,S48)
	S50= IMMEXT.Out={16{imm[15]},imm}                           IMMEXT(S49)
	S51= GPR.Rdata1=>A.In                                       Premise(F126)
	S52= A.In=a                                                 Path(S47,S51)
	S53= IMMEXT.Out=>B.In                                       Premise(F127)
	S54= B.In={16{imm[15]},imm}                                 Path(S50,S53)
	S55= CtrlA=1                                                Premise(F151)
	S56= [A]=a                                                  A-Write(S52,S55)
	S57= CtrlB=1                                                Premise(F152)
	S58= [B]={16{imm[15]},imm}                                  B-Write(S54,S57)

EX	S59= A.Out=a                                                A-Out(S56)
	S60= B.Out={16{imm[15]},imm}                                B-Out(S58)
	S61= A.Out=>CMPU.A                                          Premise(F178)
	S62= CMPU.A=a                                               Path(S59,S61)
	S63= B.Out=>CMPU.B                                          Premise(F179)
	S64= CMPU.B={16{imm[15]},imm}                               Path(S60,S63)
	S65= CMPU.lt=CompareS(a,{16{imm[15]},imm})                  CMPU-CMPS(S62,S64)
	S66= CMPU.lt=>ConditionReg.In                               Premise(F181)
	S67= ConditionReg.In=CompareS(a,{16{imm[15]},imm})          Path(S65,S66)
	S68= CtrlConditionReg=1                                     Premise(F204)
	S69= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Write(S67,S68)

MEM	S70= CtrlConditionReg=0                                     Premise(F255)
	S71= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S69,S70)

DMMU1	S72= CtrlConditionReg=0                                     Premise(F305)
	S73= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S71,S72)

DMMU2	S74= CtrlConditionReg=0                                     Premise(F355)
	S75= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S73,S74)

WB	S76= CtrlConditionReg=0                                     Premise(F405)
	S77= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S75,S76)

POST	S77= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S75,S76)

