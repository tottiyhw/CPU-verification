
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rs,14,imm}                          Premise(F2)
	S3= GPR[rs]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F39)
	S14= CtrlPCInc=0                                            Premise(F40)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F41)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F46)
	S19= IMem[{pid,addr}]={1,rs,14,imm}                         IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F49)
	S21= GPR[rs]=a                                              GPR-Hold(S3,S20)

IMMU	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= PC.Out=>ICache.IEA                                     Premise(F58)
	S25= ICache.IEA=addr                                        Path(S22,S24)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F63)
	S27= IMem.RAddr={pid,addr}                                  Path(S23,S26)
	S28= IMem.Out={1,rs,14,imm}                                 IMem-Read(S27,S19)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S19)
	S30= IMem.Out=>IRMux.MemData                                Premise(F64)
	S31= IRMux.MemData={1,rs,14,imm}                            Path(S28,S30)
	S32= IRMux.Out={1,rs,14,imm}                                IRMux-Select(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F68)
	S34= IR.In={1,rs,14,imm}                                    Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F69)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= CtrlICache=1                                           Premise(F93)
	S38= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S36,S37)
	S39= CtrlIR=1                                               Premise(F98)
	S40= [IR]={1,rs,14,imm}                                     IR-Write(S34,S39)
	S41= CtrlGPR=0                                              Premise(F99)
	S42= GPR[rs]=a                                              GPR-Hold(S21,S41)

ID	S43= IR.Out25_21=rs                                         IR-Out(S40)
	S44= IR.Out15_0=imm                                         IR-Out(S40)
	S45= IR.Out25_21=>GPR.RReg1                                 Premise(F122)
	S46= GPR.RReg1=rs                                           Path(S43,S45)
	S47= GPR.Rdata1=a                                           GPR-Read(S46,S42)
	S48= IR.Out15_0=>IMMEXT.In                                  Premise(F124)
	S49= IMMEXT.In=imm                                          Path(S44,S48)
	S50= IMMEXT.Out={16{imm[15]},imm}                           IMMEXT(S49)
	S51= GPR.Rdata1=>A.In                                       Premise(F125)
	S52= A.In=a                                                 Path(S47,S51)
	S53= IMMEXT.Out=>B.In                                       Premise(F126)
	S54= B.In={16{imm[15]},imm}                                 Path(S50,S53)
	S55= CtrlICache=0                                           Premise(F143)
	S56= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S38,S55)
	S57= CtrlA=1                                                Premise(F150)
	S58= [A]=a                                                  A-Write(S52,S57)
	S59= CtrlB=1                                                Premise(F151)
	S60= [B]={16{imm[15]},imm}                                  B-Write(S54,S59)

EX	S61= A.Out=a                                                A-Out(S58)
	S62= B.Out={16{imm[15]},imm}                                B-Out(S60)
	S63= A.Out=>CMPU.A                                          Premise(F177)
	S64= CMPU.A=a                                               Path(S61,S63)
	S65= B.Out=>CMPU.B                                          Premise(F178)
	S66= CMPU.B={16{imm[15]},imm}                               Path(S62,S65)
	S67= CMPU.zero=CompareS(a,{16{imm[15]},imm})                CMPU-CMPS(S64,S66)
	S68= CMPU.zero=>ConditionReg.In                             Premise(F180)
	S69= ConditionReg.In=CompareS(a,{16{imm[15]},imm})          Path(S67,S68)
	S70= CtrlICache=0                                           Premise(F194)
	S71= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S56,S70)
	S72= CtrlConditionReg=1                                     Premise(F203)
	S73= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Write(S69,S72)

MEM	S74= CtrlICache=0                                           Premise(F245)
	S75= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S71,S74)
	S76= CtrlConditionReg=0                                     Premise(F254)
	S77= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S73,S76)

DMMU1	S78= CtrlICache=0                                           Premise(F295)
	S79= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S75,S78)
	S80= CtrlConditionReg=0                                     Premise(F304)
	S81= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S77,S80)

DMMU2	S82= CtrlICache=0                                           Premise(F345)
	S83= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S79,S82)
	S84= CtrlConditionReg=0                                     Premise(F354)
	S85= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S81,S84)

WB	S86= CtrlICache=0                                           Premise(F395)
	S87= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S83,S86)
	S88= CtrlConditionReg=0                                     Premise(F404)
	S89= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S85,S88)

POST	S87= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S83,S86)
	S89= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S85,S88)

