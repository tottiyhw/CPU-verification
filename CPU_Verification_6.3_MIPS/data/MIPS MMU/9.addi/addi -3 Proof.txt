
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={8,rS,rT,SIMM}                         Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= CP0.ASID=>IMMU.PID                                      Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F38)
	S14= CtrlPCInc=0                                            Premise(F39)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F40)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F45)
	S19= IMem[{pid,addr}]={8,rS,rT,SIMM}                        IMem-Hold(S2,S18)
	S20= CtrlGPR=0                                              Premise(F48)
	S21= GPR[rS]=a                                              GPR-Hold(S3,S20)

IMMU	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= PC.Out=>ICache.IEA                                     Premise(F57)
	S25= ICache.IEA=addr                                        Path(S22,S24)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F62)
	S27= IMem.RAddr={pid,addr}                                  Path(S23,S26)
	S28= IMem.Out={8,rS,rT,SIMM}                                IMem-Read(S27,S19)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S19)
	S30= IMem.Out=>IRMux.MemData                                Premise(F63)
	S31= IRMux.MemData={8,rS,rT,SIMM}                           Path(S28,S30)
	S32= IRMux.Out={8,rS,rT,SIMM}                               IRMux-Select(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F67)
	S34= IR.In={8,rS,rT,SIMM}                                   Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F68)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= CtrlPC=0                                               Premise(F87)
	S38= CtrlPCInc=1                                            Premise(F88)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F91)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S36,S40)
	S42= CtrlIR=1                                               Premise(F96)
	S43= [IR]={8,rS,rT,SIMM}                                    IR-Write(S34,S42)
	S44= CtrlGPR=0                                              Premise(F97)
	S45= GPR[rS]=a                                              GPR-Hold(S21,S44)

ID	S46= IR.Out25_21=rS                                         IR-Out(S43)
	S47= IR.Out15_0=SIMM                                        IR-Out(S43)
	S48= IR.Out25_21=>GPR.RReg1                                 Premise(F120)
	S49= GPR.RReg1=rS                                           Path(S46,S48)
	S50= GPR.Rdata1=a                                           GPR-Read(S49,S45)
	S51= IR.Out15_0=>IMMEXT.In                                  Premise(F121)
	S52= IMMEXT.In=SIMM                                         Path(S47,S51)
	S53= IMMEXT.Out={16{SIMM[15]},SIMM}                         IMMEXT(S52)
	S54= GPR.Rdata1=>A.In                                       Premise(F122)
	S55= A.In=a                                                 Path(S50,S54)
	S56= IMMEXT.Out=>B.In                                       Premise(F123)
	S57= B.In={16{SIMM[15]},SIMM}                               Path(S53,S56)
	S58= CtrlPC=0                                               Premise(F136)
	S59= CtrlPCInc=0                                            Premise(F137)
	S60= PC[Out]=addr+4                                         PC-Hold(S39,S58,S59)
	S61= CtrlICache=0                                           Premise(F140)
	S62= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S61)
	S63= CtrlIR=0                                               Premise(F145)
	S64= [IR]={8,rS,rT,SIMM}                                    IR-Hold(S43,S63)
	S65= CtrlA=1                                                Premise(F147)
	S66= [A]=a                                                  A-Write(S55,S65)
	S67= CtrlB=1                                                Premise(F148)
	S68= [B]={16{SIMM[15]},SIMM}                                B-Write(S57,S67)

EX	S69= A.Out=a                                                A-Out(S66)
	S70= B.Out={16{SIMM[15]},SIMM}                              B-Out(S68)
	S71= A.Out=>ALU.A                                           Premise(F173)
	S72= ALU.A=a                                                Path(S69,S71)
	S73= B.Out=>ALU.B                                           Premise(F174)
	S74= ALU.B={16{SIMM[15]},SIMM}                              Path(S70,S73)
	S75= ALU.Out=a+{16{SIMM[15]},SIMM}                          ALU(S72,S74)
	S76= ALU.Out=>ALUOut.In                                     Premise(F176)
	S77= ALUOut.In=a+{16{SIMM[15]},SIMM}                        Path(S75,S76)
	S78= CtrlPC=0                                               Premise(F186)
	S79= CtrlPCInc=0                                            Premise(F187)
	S80= PC[Out]=addr+4                                         PC-Hold(S60,S78,S79)
	S81= CtrlICache=0                                           Premise(F190)
	S82= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S62,S81)
	S83= CtrlIR=0                                               Premise(F195)
	S84= [IR]={8,rS,rT,SIMM}                                    IR-Hold(S64,S83)
	S85= CtrlALUOut=1                                           Premise(F199)
	S86= [ALUOut]=a+{16{SIMM[15]},SIMM}                         ALUOut-Write(S77,S85)

MEM	S87= CtrlPC=0                                               Premise(F235)
	S88= CtrlPCInc=0                                            Premise(F236)
	S89= PC[Out]=addr+4                                         PC-Hold(S80,S87,S88)
	S90= CtrlICache=0                                           Premise(F239)
	S91= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S82,S90)
	S92= CtrlIR=0                                               Premise(F244)
	S93= [IR]={8,rS,rT,SIMM}                                    IR-Hold(S84,S92)
	S94= CtrlALUOut=0                                           Premise(F248)
	S95= [ALUOut]=a+{16{SIMM[15]},SIMM}                         ALUOut-Hold(S86,S94)

DMMU1	S96= CtrlPC=0                                               Premise(F284)
	S97= CtrlPCInc=0                                            Premise(F285)
	S98= PC[Out]=addr+4                                         PC-Hold(S89,S96,S97)
	S99= CtrlICache=0                                           Premise(F288)
	S100= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S91,S99)
	S101= CtrlIR=0                                              Premise(F293)
	S102= [IR]={8,rS,rT,SIMM}                                   IR-Hold(S93,S101)
	S103= CtrlALUOut=0                                          Premise(F297)
	S104= [ALUOut]=a+{16{SIMM[15]},SIMM}                        ALUOut-Hold(S95,S103)

DMMU2	S105= CtrlPC=0                                              Premise(F333)
	S106= CtrlPCInc=0                                           Premise(F334)
	S107= PC[Out]=addr+4                                        PC-Hold(S98,S105,S106)
	S108= CtrlICache=0                                          Premise(F337)
	S109= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S100,S108)
	S110= CtrlIR=0                                              Premise(F342)
	S111= [IR]={8,rS,rT,SIMM}                                   IR-Hold(S102,S110)
	S112= CtrlALUOut=0                                          Premise(F346)
	S113= [ALUOut]=a+{16{SIMM[15]},SIMM}                        ALUOut-Hold(S104,S112)

WB	S114= IR.Out20_16=rT                                        IR-Out(S111)
	S115= ALUOut.Out=a+{16{SIMM[15]},SIMM}                      ALUOut-Out(S113)
	S116= IR.Out20_16=>GPR.WReg                                 Premise(F374)
	S117= GPR.WReg=rT                                           Path(S114,S116)
	S118= ALUOut.Out=>GPR.WData                                 Premise(F375)
	S119= GPR.WData=a+{16{SIMM[15]},SIMM}                       Path(S115,S118)
	S120= CtrlPC=0                                              Premise(F382)
	S121= CtrlPCInc=0                                           Premise(F383)
	S122= PC[Out]=addr+4                                        PC-Hold(S107,S120,S121)
	S123= CtrlICache=0                                          Premise(F386)
	S124= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S123)
	S125= CtrlGPR=1                                             Premise(F392)
	S126= GPR[rT]=a+{16{SIMM[15]},SIMM}                         GPR-Write(S117,S119,S125)

POST	S122= PC[Out]=addr+4                                        PC-Hold(S107,S120,S121)
	S124= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S123)
	S126= GPR[rT]=a+{16{SIMM[15]},SIMM}                         GPR-Write(S117,S119,S125)

