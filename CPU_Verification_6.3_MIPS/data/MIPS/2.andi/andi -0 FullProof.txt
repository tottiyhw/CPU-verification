
----------------------------------- FullProof -----------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={12,rS,rD,UIMM}                        Premise(F2)
	S0= GPR[rS]=a                                               Premise(F3)

IF	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F4)
	S0= IMem.RAddr=addr                                         Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F5)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out={12,rS,rD,UIMM}                                IMem-Read(S0,S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F6)
	S0= IR.In={12,rS,rD,UIMM}                                   Path(S0,S0)
	S0= IR.Out31_26=>CU.Op                                      Premise(F7)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F8)
	S0= IR.Out15_0=>LIMMEXT.In                                  Premise(F9)
	S0= GPR.Rdata1=>A.In                                        Premise(F10)
	S0= LIMMEXT.Out=>B.In                                       Premise(F11)
	S0= A.Out=>ALU.A                                            Premise(F12)
	S0= B.Out=>ALU.B                                            Premise(F13)
	S0= ALU.Out=>ALUOut.In                                      Premise(F14)
	S0= IR.Out20_16=>GPR.WReg                                   Premise(F15)
	S0= ALUOut.Out=>GPR.WData                                   Premise(F16)
	S0= CtrlPC=0                                                Premise(F17)
	S0= CtrlPCInc=1                                             Premise(F18)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F19)
	S0= IMem[{pid,addr}]={12,rS,rD,UIMM}                        IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F20)
	S0= CtrlCP0=0                                               Premise(F21)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F22)
	S0= CtrlExCodeIn=0                                          Premise(F23)
	S0= CtrlIR=1                                                Premise(F24)
	S0= [IR]={12,rS,rD,UIMM}                                    IR-Write(S0,S0)
	S0= CtrlGPR=0                                               Premise(F25)
	S0= GPR[rS]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F26)
	S0= CtrlB=0                                                 Premise(F27)
	S0= CtrlALUOut=0                                            Premise(F28)

ID	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={12,rS,rD,UIMM}                                  IR-Out(S0)
	S0= IR.Out31_26=12                                          IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=rD                                          IR-Out(S0)
	S0= IR.Out15_0=UIMM                                         IR-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F29)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F30)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F31)
	S0= IR.Out31_26=>CU.Op                                      Premise(F32)
	S0= CU.Op=12                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F33)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out15_0=>LIMMEXT.In                                  Premise(F34)
	S0= LIMMEXT.In=UIMM                                         Path(S0,S0)
	S0= LIMMEXT.Out={16{0},UIMM}                                LIMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F35)
	S0= A.In=a                                                  Path(S0,S0)
	S0= LIMMEXT.Out=>B.In                                       Premise(F36)
	S0= B.In={16{0},UIMM}                                       Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F37)
	S0= B.Out=>ALU.B                                            Premise(F38)
	S0= ALU.Out=>ALUOut.In                                      Premise(F39)
	S0= IR.Out20_16=>GPR.WReg                                   Premise(F40)
	S0= GPR.WReg=rD                                             Path(S0,S0)
	S0= ALUOut.Out=>GPR.WData                                   Premise(F41)
	S0= CtrlPC=0                                                Premise(F42)
	S0= CtrlPCInc=0                                             Premise(F43)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F44)
	S0= IMem[{pid,addr}]={12,rS,rD,UIMM}                        IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F45)
	S0= CtrlCP0=0                                               Premise(F46)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F47)
	S0= CtrlExCodeIn=0                                          Premise(F48)
	S0= CtrlIR=0                                                Premise(F49)
	S0= [IR]={12,rS,rD,UIMM}                                    IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F50)
	S0= GPR[rS]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=1                                                 Premise(F51)
	S0= [A]=a                                                   A-Write(S0,S0)
	S0= CtrlB=1                                                 Premise(F52)
	S0= [B]={16{0},UIMM}                                        B-Write(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F53)

EX	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={12,rS,rD,UIMM}                                  IR-Out(S0)
	S0= IR.Out31_26=12                                          IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=rD                                          IR-Out(S0)
	S0= IR.Out15_0=UIMM                                         IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out={16{0},UIMM}                                      B-Out(S0)
	S0= B.Out1_0={{16{0},UIMM}}[1:0]                            B-Out(S0)
	S0= B.Out4_0={{16{0},UIMM}}[4:0]                            B-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F54)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F55)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F56)
	S0= IR.Out31_26=>CU.Op                                      Premise(F57)
	S0= CU.Op=12                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F58)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out15_0=>LIMMEXT.In                                  Premise(F59)
	S0= LIMMEXT.In=UIMM                                         Path(S0,S0)
	S0= LIMMEXT.Out={16{0},UIMM}                                LIMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F60)
	S0= A.In=a                                                  Path(S0,S0)
	S0= LIMMEXT.Out=>B.In                                       Premise(F61)
	S0= B.In={16{0},UIMM}                                       Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F62)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F63)
	S0= ALU.B={16{0},UIMM}                                      Path(S0,S0)
	S0= ALU.Func=6'b000000                                      Premise(F64)
	S0= ALU.Out=a&{16{0},UIMM}                                  ALU(S0,S0)
	S0= ALU.Out1_0={a&{16{0},UIMM}}[1:0]                        ALU(S0,S0)
	S0= ALU.CMP=Compare0(a&{16{0},UIMM})                        ALU(S0,S0)
	S0= ALU.OV=OverFlow(a&{16{0},UIMM})                         ALU(S0,S0)
	S0= ALU.CA=Carry(a&{16{0},UIMM})                            ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F65)
	S0= ALUOut.In=a&{16{0},UIMM}                                Path(S0,S0)
	S0= IR.Out20_16=>GPR.WReg                                   Premise(F66)
	S0= GPR.WReg=rD                                             Path(S0,S0)
	S0= ALUOut.Out=>GPR.WData                                   Premise(F67)
	S0= CtrlPC=0                                                Premise(F68)
	S0= CtrlPCInc=0                                             Premise(F69)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F70)
	S0= IMem[{pid,addr}]={12,rS,rD,UIMM}                        IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F71)
	S0= CtrlCP0=0                                               Premise(F72)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F73)
	S0= CtrlExCodeIn=0                                          Premise(F74)
	S0= CtrlIR=0                                                Premise(F75)
	S0= [IR]={12,rS,rD,UIMM}                                    IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F76)
	S0= GPR[rS]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F77)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F78)
	S0= [B]={16{0},UIMM}                                        B-Hold(S0,S0)
	S0= CtrlALUOut=1                                            Premise(F79)
	S0= [ALUOut]=a&{16{0},UIMM}                                 ALUOut-Write(S0,S0)

MEM	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={12,rS,rD,UIMM}                                  IR-Out(S0)
	S0= IR.Out31_26=12                                          IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=rD                                          IR-Out(S0)
	S0= IR.Out15_0=UIMM                                         IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out={16{0},UIMM}                                      B-Out(S0)
	S0= B.Out1_0={{16{0},UIMM}}[1:0]                            B-Out(S0)
	S0= B.Out4_0={{16{0},UIMM}}[4:0]                            B-Out(S0)
	S0= ALUOut.Out=a&{16{0},UIMM}                               ALUOut-Out(S0)
	S0= ALUOut.Out1_0={a&{16{0},UIMM}}[1:0]                     ALUOut-Out(S0)
	S0= ALUOut.Out4_0={a&{16{0},UIMM}}[4:0]                     ALUOut-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F80)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F81)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F82)
	S0= IR.Out31_26=>CU.Op                                      Premise(F83)
	S0= CU.Op=12                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F84)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out15_0=>LIMMEXT.In                                  Premise(F85)
	S0= LIMMEXT.In=UIMM                                         Path(S0,S0)
	S0= LIMMEXT.Out={16{0},UIMM}                                LIMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F86)
	S0= A.In=a                                                  Path(S0,S0)
	S0= LIMMEXT.Out=>B.In                                       Premise(F87)
	S0= B.In={16{0},UIMM}                                       Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F88)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F89)
	S0= ALU.B={16{0},UIMM}                                      Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F90)
	S0= IR.Out20_16=>GPR.WReg                                   Premise(F91)
	S0= GPR.WReg=rD                                             Path(S0,S0)
	S0= ALUOut.Out=>GPR.WData                                   Premise(F92)
	S0= GPR.WData=a&{16{0},UIMM}                                Path(S0,S0)
	S0= CtrlPC=0                                                Premise(F93)
	S0= CtrlPCInc=0                                             Premise(F94)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F95)
	S0= IMem[{pid,addr}]={12,rS,rD,UIMM}                        IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F96)
	S0= CtrlCP0=0                                               Premise(F97)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F98)
	S0= CtrlExCodeIn=0                                          Premise(F99)
	S0= CtrlIR=0                                                Premise(F100)
	S0= [IR]={12,rS,rD,UIMM}                                    IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F101)
	S0= GPR[rS]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F102)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F103)
	S0= [B]={16{0},UIMM}                                        B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F104)
	S0= [ALUOut]=a&{16{0},UIMM}                                 ALUOut-Hold(S0,S0)

WB	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={12,rS,rD,UIMM}                                  IR-Out(S0)
	S0= IR.Out31_26=12                                          IR-Out(S0)
	S0= IR.Out25_21=rS                                          IR-Out(S0)
	S0= IR.Out20_16=rD                                          IR-Out(S0)
	S0= IR.Out15_0=UIMM                                         IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out={16{0},UIMM}                                      B-Out(S0)
	S0= B.Out1_0={{16{0},UIMM}}[1:0]                            B-Out(S0)
	S0= B.Out4_0={{16{0},UIMM}}[4:0]                            B-Out(S0)
	S0= ALUOut.Out=a&{16{0},UIMM}                               ALUOut-Out(S0)
	S0= ALUOut.Out1_0={a&{16{0},UIMM}}[1:0]                     ALUOut-Out(S0)
	S0= ALUOut.Out4_0={a&{16{0},UIMM}}[4:0]                     ALUOut-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F105)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F106)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F107)
	S0= IR.Out31_26=>CU.Op                                      Premise(F108)
	S0= CU.Op=12                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F109)
	S0= GPR.RReg1=rS                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out15_0=>LIMMEXT.In                                  Premise(F110)
	S0= LIMMEXT.In=UIMM                                         Path(S0,S0)
	S0= LIMMEXT.Out={16{0},UIMM}                                LIMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F111)
	S0= A.In=a                                                  Path(S0,S0)
	S0= LIMMEXT.Out=>B.In                                       Premise(F112)
	S0= B.In={16{0},UIMM}                                       Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F113)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F114)
	S0= ALU.B={16{0},UIMM}                                      Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F115)
	S0= IR.Out20_16=>GPR.WReg                                   Premise(F116)
	S0= GPR.WReg=rD                                             Path(S0,S0)
	S0= ALUOut.Out=>GPR.WData                                   Premise(F117)
	S0= GPR.WData=a&{16{0},UIMM}                                Path(S0,S0)
	S0= CtrlPC=0                                                Premise(F118)
	S0= CtrlPCInc=0                                             Premise(F119)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F120)
	S0= IMem[{pid,addr}]={12,rS,rD,UIMM}                        IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F121)
	S0= CtrlCP0=0                                               Premise(F122)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F123)
	S0= CtrlExCodeIn=0                                          Premise(F124)
	S0= CtrlIR=0                                                Premise(F125)
	S0= [IR]={12,rS,rD,UIMM}                                    IR-Hold(S0,S0)
	S0= CtrlGPR=1                                               Premise(F126)
	S0= GPR[rD]=a&{16{0},UIMM}                                  GPR-Write(S0,S0,S0)
	S0= CtrlA=0                                                 Premise(F127)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F128)
	S0= [B]={16{0},UIMM}                                        B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F129)
	S0= [ALUOut]=a&{16{0},UIMM}                                 ALUOut-Hold(S0,S0)

POST	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= IMem[{pid,addr}]={12,rS,rD,UIMM}                        IMem-Hold(S0,S0)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= [IR]={12,rS,rD,UIMM}                                    IR-Hold(S0,S0)
	S0= GPR[rD]=a&{16{0},UIMM}                                  GPR-Write(S0,S0,S0)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= [B]={16{0},UIMM}                                        B-Hold(S0,S0)
	S0= [ALUOut]=a&{16{0},UIMM}                                 ALUOut-Hold(S0,S0)

