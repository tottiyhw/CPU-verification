
----------------------------------- FullProof -----------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={17,8,cc,0,1,offset}                   Premise(F2)

IF	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F3)
	S0= IMem.RAddr=addr                                         Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F4)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out={17,8,cc,0,1,offset}                           IMem-Read(S0,S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F5)
	S0= IR.In={17,8,cc,0,1,offset}                              Path(S0,S0)
	S0= IR.Out31_26=>CU.Op                                      Premise(F6)
	S0= IR.Out25_21=>CU.IRFunc2                                 Premise(F7)
	S0= IR.Out15_0=>SEXT.In                                     Premise(F8)
	S0= SEXT.Out=>A.In                                          Premise(F9)
	S0= PC.CIA=>ALU.A                                           Premise(F10)
	S0= SEXT.Out=>ALU.B                                         Premise(F11)
	S0= ALU.Out=>ALUOut.In                                      Premise(F12)
	S0= IR.Out20_18=>CP1.cc                                     Premise(F13)
	S0= IR.Out16=>CP1.tf                                        Premise(F14)
	S0= CP1.fp=>ConditionReg.In                                 Premise(F15)
	S0= ALUOut.Out=>PC.In                                       Premise(F16)
	S0= ConditionReg.Out=>CU.fp                                 Premise(F17)
	S0= CtrlPC=0                                                Premise(F18)
	S0= CtrlPCInc=1                                             Premise(F19)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F20)
	S0= IMem[{pid,addr}]={17,8,cc,0,1,offset}                   IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F21)
	S0= CtrlCP0=0                                               Premise(F22)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F23)
	S0= CtrlExCodeIn=0                                          Premise(F24)
	S0= CtrlIR=1                                                Premise(F25)
	S0= [IR]={17,8,cc,0,1,offset}                               IR-Write(S0,S0)
	S0= CtrlA=0                                                 Premise(F26)
	S0= CtrlALUOut=0                                            Premise(F27)
	S0= CtrlCP1=0                                               Premise(F28)
	S0= CtrlConditionReg=0                                      Premise(F29)

ID	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={17,8,cc,0,1,offset}                             IR-Out(S0)
	S0= IR.Out31_26=17                                          IR-Out(S0)
	S0= IR.Out25_21=8                                           IR-Out(S0)
	S0= IR.Out20_18=cc                                          IR-Out(S0)
	S0= IR.Out17=0                                              IR-Out(S0)
	S0= IR.Out16=1                                              IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F30)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F31)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F32)
	S0= IR.Out31_26=>CU.Op                                      Premise(F33)
	S0= CU.Op=17                                                Path(S0,S0)
	S0= IR.Out25_21=>CU.IRFunc2                                 Premise(F34)
	S0= CU.IRFunc2=8                                            Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= IR.Out15_0=>SEXT.In                                     Premise(F35)
	S0= SEXT.In=offset                                          Path(S0,S0)
	S0= SEXT.Out={14{offset[15]},offset,2{0}}                   SEXT(S0)
	S0= SEXT.Out=>A.In                                          Premise(F36)
	S0= A.In={14{offset[15]},offset,2{0}}                       Path(S0,S0)
	S0= PC.CIA=>ALU.A                                           Premise(F37)
	S0= ALU.A=addr                                              Path(S0,S0)
	S0= SEXT.Out=>ALU.B                                         Premise(F38)
	S0= ALU.B={14{offset[15]},offset,2{0}}                      Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F39)
	S0= IR.Out20_18=>CP1.cc                                     Premise(F40)
	S0= CP1.cc=cc                                               Path(S0,S0)
	S0= IR.Out16=>CP1.tf                                        Premise(F41)
	S0= CP1.tf=1                                                Path(S0,S0)
	S0= CP1.fp=FPConditionCode(cc,1)                            FP-PRODUCT(S0,S0)
	S0= CP1.fp=>ConditionReg.In                                 Premise(F42)
	S0= ConditionReg.In=FPConditionCode(cc,1)                   Path(S0,S0)
	S0= ALUOut.Out=>PC.In                                       Premise(F43)
	S0= ConditionReg.Out=>CU.fp                                 Premise(F44)
	S0= CtrlPC=0                                                Premise(F45)
	S0= CtrlPCInc=0                                             Premise(F46)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F47)
	S0= IMem[{pid,addr}]={17,8,cc,0,1,offset}                   IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F48)
	S0= CtrlCP0=0                                               Premise(F49)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F50)
	S0= CtrlExCodeIn=0                                          Premise(F51)
	S0= CtrlIR=0                                                Premise(F52)
	S0= [IR]={17,8,cc,0,1,offset}                               IR-Hold(S0,S0)
	S0= CtrlA=1                                                 Premise(F53)
	S0= [A]={14{offset[15]},offset,2{0}}                        A-Write(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F54)
	S0= CtrlCP1=0                                               Premise(F55)
	S0= CtrlConditionReg=0                                      Premise(F56)

EX	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={17,8,cc,0,1,offset}                             IR-Out(S0)
	S0= IR.Out31_26=17                                          IR-Out(S0)
	S0= IR.Out25_21=8                                           IR-Out(S0)
	S0= IR.Out20_18=cc                                          IR-Out(S0)
	S0= IR.Out17=0                                              IR-Out(S0)
	S0= IR.Out16=1                                              IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= A.Out={14{offset[15]},offset,2{0}}                      A-Out(S0)
	S0= A.Out1_0={{14{offset[15]},offset,2{0}}}[1:0]            A-Out(S0)
	S0= A.Out4_0={{14{offset[15]},offset,2{0}}}[4:0]            A-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F57)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F58)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F59)
	S0= IR.Out31_26=>CU.Op                                      Premise(F60)
	S0= CU.Op=17                                                Path(S0,S0)
	S0= IR.Out25_21=>CU.IRFunc2                                 Premise(F61)
	S0= CU.IRFunc2=8                                            Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= IR.Out15_0=>SEXT.In                                     Premise(F62)
	S0= SEXT.In=offset                                          Path(S0,S0)
	S0= SEXT.Out={14{offset[15]},offset,2{0}}                   SEXT(S0)
	S0= SEXT.Out=>A.In                                          Premise(F63)
	S0= A.In={14{offset[15]},offset,2{0}}                       Path(S0,S0)
	S0= PC.CIA=>ALU.A                                           Premise(F64)
	S0= ALU.A=addr                                              Path(S0,S0)
	S0= SEXT.Out=>ALU.B                                         Premise(F65)
	S0= ALU.B={14{offset[15]},offset,2{0}}                      Path(S0,S0)
	S0= ALU.Func=6'b010010                                      Premise(F66)
	S0= ALU.Out=addr+{14{offset[15]},offset,2{0}}               ALU(S0,S0)
	S0= ALU.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]     ALU(S0,S0)
	S0= ALU.CMP=Compare0(addr+{14{offset[15]},offset,2{0}})     ALU(S0,S0)
	S0= ALU.OV=OverFlow(addr+{14{offset[15]},offset,2{0}})      ALU(S0,S0)
	S0= ALU.CA=Carry(addr+{14{offset[15]},offset,2{0}})         ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F67)
	S0= ALUOut.In=addr+{14{offset[15]},offset,2{0}}             Path(S0,S0)
	S0= IR.Out20_18=>CP1.cc                                     Premise(F68)
	S0= CP1.cc=cc                                               Path(S0,S0)
	S0= IR.Out16=>CP1.tf                                        Premise(F69)
	S0= CP1.tf=1                                                Path(S0,S0)
	S0= CP1.fp=FPConditionCode(cc,1)                            FP-PRODUCT(S0,S0)
	S0= CP1.fp=>ConditionReg.In                                 Premise(F70)
	S0= ConditionReg.In=FPConditionCode(cc,1)                   Path(S0,S0)
	S0= ALUOut.Out=>PC.In                                       Premise(F71)
	S0= ConditionReg.Out=>CU.fp                                 Premise(F72)
	S0= CtrlPC=0                                                Premise(F73)
	S0= CtrlPCInc=0                                             Premise(F74)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F75)
	S0= IMem[{pid,addr}]={17,8,cc,0,1,offset}                   IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F76)
	S0= CtrlCP0=0                                               Premise(F77)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F78)
	S0= CtrlExCodeIn=0                                          Premise(F79)
	S0= CtrlIR=0                                                Premise(F80)
	S0= [IR]={17,8,cc,0,1,offset}                               IR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F81)
	S0= [A]={14{offset[15]},offset,2{0}}                        A-Hold(S0,S0)
	S0= CtrlALUOut=1                                            Premise(F82)
	S0= [ALUOut]=addr+{14{offset[15]},offset,2{0}}              ALUOut-Write(S0,S0)
	S0= CtrlCP1=0                                               Premise(F83)
	S0= CtrlConditionReg=0                                      Premise(F84)

MEM	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={17,8,cc,0,1,offset}                             IR-Out(S0)
	S0= IR.Out31_26=17                                          IR-Out(S0)
	S0= IR.Out25_21=8                                           IR-Out(S0)
	S0= IR.Out20_18=cc                                          IR-Out(S0)
	S0= IR.Out17=0                                              IR-Out(S0)
	S0= IR.Out16=1                                              IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= A.Out={14{offset[15]},offset,2{0}}                      A-Out(S0)
	S0= A.Out1_0={{14{offset[15]},offset,2{0}}}[1:0]            A-Out(S0)
	S0= A.Out4_0={{14{offset[15]},offset,2{0}}}[4:0]            A-Out(S0)
	S0= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}            ALUOut-Out(S0)
	S0= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]  ALUOut-Out(S0)
	S0= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]  ALUOut-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F85)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F86)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F87)
	S0= IR.Out31_26=>CU.Op                                      Premise(F88)
	S0= CU.Op=17                                                Path(S0,S0)
	S0= IR.Out25_21=>CU.IRFunc2                                 Premise(F89)
	S0= CU.IRFunc2=8                                            Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= IR.Out15_0=>SEXT.In                                     Premise(F90)
	S0= SEXT.In=offset                                          Path(S0,S0)
	S0= SEXT.Out={14{offset[15]},offset,2{0}}                   SEXT(S0)
	S0= SEXT.Out=>A.In                                          Premise(F91)
	S0= A.In={14{offset[15]},offset,2{0}}                       Path(S0,S0)
	S0= PC.CIA=>ALU.A                                           Premise(F92)
	S0= ALU.A=addr                                              Path(S0,S0)
	S0= SEXT.Out=>ALU.B                                         Premise(F93)
	S0= ALU.B={14{offset[15]},offset,2{0}}                      Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F94)
	S0= IR.Out20_18=>CP1.cc                                     Premise(F95)
	S0= CP1.cc=cc                                               Path(S0,S0)
	S0= IR.Out16=>CP1.tf                                        Premise(F96)
	S0= CP1.tf=1                                                Path(S0,S0)
	S0= CP1.fp=FPConditionCode(cc,1)                            FP-PRODUCT(S0,S0)
	S0= CP1.fp=>ConditionReg.In                                 Premise(F97)
	S0= ConditionReg.In=FPConditionCode(cc,1)                   Path(S0,S0)
	S0= ALUOut.Out=>PC.In                                       Premise(F98)
	S0= PC.In=addr+{14{offset[15]},offset,2{0}}                 Path(S0,S0)
	S0= ConditionReg.Out=>CU.fp                                 Premise(F99)
	S0= CtrlPC=0                                                Premise(F100)
	S0= CtrlPCInc=0                                             Premise(F101)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F102)
	S0= IMem[{pid,addr}]={17,8,cc,0,1,offset}                   IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F103)
	S0= CtrlCP0=0                                               Premise(F104)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F105)
	S0= CtrlExCodeIn=0                                          Premise(F106)
	S0= CtrlIR=0                                                Premise(F107)
	S0= [IR]={17,8,cc,0,1,offset}                               IR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F108)
	S0= [A]={14{offset[15]},offset,2{0}}                        A-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F109)
	S0= [ALUOut]=addr+{14{offset[15]},offset,2{0}}              ALUOut-Hold(S0,S0)
	S0= CtrlCP1=0                                               Premise(F110)
	S0= CtrlConditionReg=1                                      Premise(F111)
	S0= [ConditionReg]=FPConditionCode(cc,1)                    ConditionReg-Write(S0,S0)

WB	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={17,8,cc,0,1,offset}                             IR-Out(S0)
	S0= IR.Out31_26=17                                          IR-Out(S0)
	S0= IR.Out25_21=8                                           IR-Out(S0)
	S0= IR.Out20_18=cc                                          IR-Out(S0)
	S0= IR.Out17=0                                              IR-Out(S0)
	S0= IR.Out16=1                                              IR-Out(S0)
	S0= IR.Out15_0=offset                                       IR-Out(S0)
	S0= A.Out={14{offset[15]},offset,2{0}}                      A-Out(S0)
	S0= A.Out1_0={{14{offset[15]},offset,2{0}}}[1:0]            A-Out(S0)
	S0= A.Out4_0={{14{offset[15]},offset,2{0}}}[4:0]            A-Out(S0)
	S0= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}            ALUOut-Out(S0)
	S0= ALUOut.Out1_0={addr+{14{offset[15]},offset,2{0}}}[1:0]  ALUOut-Out(S0)
	S0= ALUOut.Out4_0={addr+{14{offset[15]},offset,2{0}}}[4:0]  ALUOut-Out(S0)
	S0= ConditionReg.Out=FPConditionCode(cc,1)                  ConditionReg-Out(S0)
	S0= ConditionReg.Out1_0={FPConditionCode(cc,1)}[1:0]        ConditionReg-Out(S0)
	S0= ConditionReg.Out4_0={FPConditionCode(cc,1)}[4:0]        ConditionReg-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F112)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F113)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F114)
	S0= IR.Out31_26=>CU.Op                                      Premise(F115)
	S0= CU.Op=17                                                Path(S0,S0)
	S0= IR.Out25_21=>CU.IRFunc2                                 Premise(F116)
	S0= CU.IRFunc2=8                                            Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= IR.Out15_0=>SEXT.In                                     Premise(F117)
	S0= SEXT.In=offset                                          Path(S0,S0)
	S0= SEXT.Out={14{offset[15]},offset,2{0}}                   SEXT(S0)
	S0= SEXT.Out=>A.In                                          Premise(F118)
	S0= A.In={14{offset[15]},offset,2{0}}                       Path(S0,S0)
	S0= PC.CIA=>ALU.A                                           Premise(F119)
	S0= ALU.A=addr                                              Path(S0,S0)
	S0= SEXT.Out=>ALU.B                                         Premise(F120)
	S0= ALU.B={14{offset[15]},offset,2{0}}                      Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F121)
	S0= IR.Out20_18=>CP1.cc                                     Premise(F122)
	S0= CP1.cc=cc                                               Path(S0,S0)
	S0= IR.Out16=>CP1.tf                                        Premise(F123)
	S0= CP1.tf=1                                                Path(S0,S0)
	S0= CP1.fp=FPConditionCode(cc,1)                            FP-PRODUCT(S0,S0)
	S0= CP1.fp=>ConditionReg.In                                 Premise(F124)
	S0= ConditionReg.In=FPConditionCode(cc,1)                   Path(S0,S0)
	S0= ALUOut.Out=>PC.In                                       Premise(F125)
	S0= PC.In=addr+{14{offset[15]},offset,2{0}}                 Path(S0,S0)
	S0= ConditionReg.Out=>CU.fp                                 Premise(F126)
	S0= CU.fp=FPConditionCode(cc,1)                             Path(S0,S0)
	S0= CtrlPC=1                                                Premise(F127)
	S0= CtrlPCInc=0                                             Premise(F128)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+{14{offset[15]},offset,2{0}}               PC-Write(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F129)
	S0= IMem[{pid,addr}]={17,8,cc,0,1,offset}                   IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F130)
	S0= CtrlCP0=0                                               Premise(F131)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F132)
	S0= CtrlExCodeIn=0                                          Premise(F133)
	S0= CtrlIR=0                                                Premise(F134)
	S0= [IR]={17,8,cc,0,1,offset}                               IR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F135)
	S0= [A]={14{offset[15]},offset,2{0}}                        A-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F136)
	S0= [ALUOut]=addr+{14{offset[15]},offset,2{0}}              ALUOut-Hold(S0,S0)
	S0= CtrlCP1=0                                               Premise(F137)
	S0= CtrlConditionReg=0                                      Premise(F138)
	S0= [ConditionReg]=FPConditionCode(cc,1)                    ConditionReg-Hold(S0,S0)

POST	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+{14{offset[15]},offset,2{0}}               PC-Write(S0,S0,S0)
	S0= IMem[{pid,addr}]={17,8,cc,0,1,offset}                   IMem-Hold(S0,S0)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= [IR]={17,8,cc,0,1,offset}                               IR-Hold(S0,S0)
	S0= [A]={14{offset[15]},offset,2{0}}                        A-Hold(S0,S0)
	S0= [ALUOut]=addr+{14{offset[15]},offset,2{0}}              ALUOut-Hold(S0,S0)
	S0= [ConditionReg]=FPConditionCode(cc,1)                    ConditionReg-Hold(S0,S0)

