
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rS,0,offset}                        Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PC.Out=>IMem.RAddr                                      Premise(F4)
	S7= IMem.RAddr=addr                                         Path(S5,S6)
	S8= CP0.ASID=>IMem.ASID                                     Premise(F5)
	S9= IMem.ASID=pid                                           Path(S4,S8)
	S10= IMem.Out={1,rS,0,offset}                               IMem-Read(S9,S7,S2)
	S11= IMem.Out=>IR.In                                        Premise(F6)
	S12= IR.In={1,rS,0,offset}                                  Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F21)
	S14= CtrlPCInc=1                                            Premise(F22)
	S15= PC[CIA]=addr                                           PC-Inc(S1,S13,S14)
	S16= CtrlIR=1                                               Premise(F28)
	S17= [IR]={1,rS,0,offset}                                   IR-Write(S12,S16)
	S18= CtrlGPR=0                                              Premise(F29)
	S19= GPR[rS]=a                                              GPR-Hold(S3,S18)

ID	S20= IR.Out25_21=rS                                         IR-Out(S17)
	S21= IR.Out25_21=>GPR.RReg1                                 Premise(F38)
	S22= GPR.RReg1=rS                                           Path(S20,S21)
	S23= GPR.Rdata1=a                                           GPR-Read(S22,S19)
	S24= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S25= GPR.Rdata1=>A.In                                       Premise(F40)
	S26= A.In=a                                                 Path(S23,S25)
	S27= GPR.Rdata2=>B.In                                       Premise(F41)
	S28= B.In=32'b0                                             Path(S24,S27)
	S29= CtrlPCInc=0                                            Premise(F52)
	S30= PC[CIA]=addr                                           PC-Hold(S15,S29)
	S31= CtrlIR=0                                               Premise(F58)
	S32= [IR]={1,rS,0,offset}                                   IR-Hold(S17,S31)
	S33= CtrlA=1                                                Premise(F60)
	S34= [A]=a                                                  A-Write(S26,S33)
	S35= CtrlB=1                                                Premise(F61)
	S36= [B]=32'b0                                              B-Write(S28,S35)

EX	S37= PC.CIA=addr                                            PC-Out(S30)
	S38= IR.Out15_0=offset                                      IR-Out(S32)
	S39= A.Out=a                                                A-Out(S34)
	S40= B.Out=32'b0                                            B-Out(S36)
	S41= IR.Out15_0=>SEXT.In                                    Premise(F72)
	S42= SEXT.In=offset                                         Path(S38,S41)
	S43= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S42)
	S44= PC.CIA=>ALU.A                                          Premise(F73)
	S45= ALU.A=addr                                             Path(S37,S44)
	S46= SEXT.Out=>ALU.B                                        Premise(F74)
	S47= ALU.B={14{offset[15]},offset,2{0}}                     Path(S43,S46)
	S48= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S45,S47)
	S49= ALU.Out=>ALUOut.In                                     Premise(F76)
	S50= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S48,S49)
	S51= A.Out=>CMPU.A                                          Premise(F77)
	S52= CMPU.A=a                                               Path(S39,S51)
	S53= B.Out=>CMPU.B                                          Premise(F78)
	S54= CMPU.B=32'b0                                           Path(S40,S53)
	S55= CMPU.lt=CompareS(a,32'b0)                              CMPU-CMPS(S52,S54)
	S56= CMPU.lt=>ConditionReg.In                               Premise(F80)
	S57= ConditionReg.In=CompareS(a,32'b0)                      Path(S55,S56)
	S58= CtrlALUOut=1                                           Premise(F94)
	S59= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S50,S58)
	S60= CtrlConditionReg=1                                     Premise(F95)
	S61= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Write(S57,S60)

MEM	S62= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S59)
	S63= ALUOut.Out=>PC.In                                      Premise(F111)
	S64= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S62,S63)
	S65= CtrlPC=1                                               Premise(F113)
	S66= CtrlPCInc=0                                            Premise(F114)
	S67= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S64,S65,S66)
	S68= CtrlConditionReg=0                                     Premise(F125)
	S69= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S61,S68)

WB	S70= CtrlPC=0                                               Premise(F143)
	S71= CtrlPCInc=0                                            Premise(F144)
	S72= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S67,S70,S71)
	S73= CtrlConditionReg=0                                     Premise(F155)
	S74= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S69,S73)

POST	S72= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S67,S70,S71)
	S74= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S69,S73)

