
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rS,16,offset}                       Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PC.Out=>IMem.RAddr                                      Premise(F4)
	S7= IMem.RAddr=addr                                         Path(S5,S6)
	S8= CP0.ASID=>IMem.ASID                                     Premise(F5)
	S9= IMem.ASID=pid                                           Path(S4,S8)
	S10= IMem.Out={1,rS,16,offset}                              IMem-Read(S9,S7,S2)
	S11= IMem.Out=>IR.In                                        Premise(F6)
	S12= IR.In={1,rS,16,offset}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F22)
	S14= CtrlPCInc=1                                            Premise(F23)
	S15= PC[Out]=addr+4                                         PC-Inc(S1,S13,S14)
	S16= PC[CIA]=addr                                           PC-Inc(S1,S13,S14)
	S17= CtrlIR=1                                               Premise(F29)
	S18= [IR]={1,rS,16,offset}                                  IR-Write(S12,S17)
	S19= CtrlGPR=0                                              Premise(F30)
	S20= GPR[rS]=a                                              GPR-Hold(S3,S19)

ID	S21= IR.Out25_21=rS                                         IR-Out(S18)
	S22= IR.Out25_21=>GPR.RReg1                                 Premise(F39)
	S23= GPR.RReg1=rS                                           Path(S21,S22)
	S24= GPR.Rdata1=a                                           GPR-Read(S23,S20)
	S25= GPR.Rdata2=32'b0                                       GPR-ReadGPR0()
	S26= GPR.Rdata1=>A.In                                       Premise(F41)
	S27= A.In=a                                                 Path(S24,S26)
	S28= GPR.Rdata2=>B.In                                       Premise(F42)
	S29= B.In=32'b0                                             Path(S25,S28)
	S30= CtrlPC=0                                               Premise(F53)
	S31= CtrlPCInc=0                                            Premise(F54)
	S32= PC[CIA]=addr                                           PC-Hold(S16,S31)
	S33= PC[Out]=addr+4                                         PC-Hold(S15,S30,S31)
	S34= CtrlIR=0                                               Premise(F60)
	S35= [IR]={1,rS,16,offset}                                  IR-Hold(S18,S34)
	S36= CtrlA=1                                                Premise(F62)
	S37= [A]=a                                                  A-Write(S27,S36)
	S38= CtrlB=1                                                Premise(F63)
	S39= [B]=32'b0                                              B-Write(S29,S38)

EX	S40= PC.CIA=addr                                            PC-Out(S32)
	S41= PC.Out=addr+4                                          PC-Out(S33)
	S42= IR.Out15_0=offset                                      IR-Out(S35)
	S43= A.Out=a                                                A-Out(S37)
	S44= B.Out=32'b0                                            B-Out(S39)
	S45= IR.Out15_0=>SEXT.In                                    Premise(F74)
	S46= SEXT.In=offset                                         Path(S42,S45)
	S47= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S46)
	S48= PC.CIA=>ALU.A                                          Premise(F75)
	S49= ALU.A=addr                                             Path(S40,S48)
	S50= SEXT.Out=>ALU.B                                        Premise(F76)
	S51= ALU.B={14{offset[15]},offset,2{0}}                     Path(S47,S50)
	S52= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S49,S51)
	S53= ALU.Out=>ALUOut.In                                     Premise(F78)
	S54= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S52,S53)
	S55= A.Out=>CMPU.A                                          Premise(F79)
	S56= CMPU.A=a                                               Path(S43,S55)
	S57= B.Out=>CMPU.B                                          Premise(F80)
	S58= CMPU.B=32'b0                                           Path(S44,S57)
	S59= CMPU.lt=CompareS(a,32'b0)                              CMPU-CMPS(S56,S58)
	S60= CMPU.lt=>ConditionReg.In                               Premise(F82)
	S61= ConditionReg.In=CompareS(a,32'b0)                      Path(S59,S60)
	S62= GPR.WReg=5'd31                                         Premise(F83)
	S63= PC.Out=>GPR.WData                                      Premise(F84)
	S64= GPR.WData=addr+4                                       Path(S41,S63)
	S65= CtrlGPR=1                                              Premise(F95)
	S66= GPR[5'd31]=addr+4                                      GPR-Write(S62,S64,S65)
	S67= CtrlALUOut=1                                           Premise(F98)
	S68= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S54,S67)
	S69= CtrlConditionReg=1                                     Premise(F99)
	S70= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Write(S61,S69)

MEM	S71= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S68)
	S72= ALUOut.Out=>PC.In                                      Premise(F116)
	S73= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S71,S72)
	S74= CtrlPC=1                                               Premise(F118)
	S75= CtrlPCInc=0                                            Premise(F119)
	S76= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S73,S74,S75)
	S77= CtrlGPR=0                                              Premise(F126)
	S78= GPR[5'd31]=addr+4                                      GPR-Hold(S66,S77)
	S79= CtrlConditionReg=0                                     Premise(F130)
	S80= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S70,S79)

WB	S81= CtrlPC=0                                               Premise(F149)
	S82= CtrlPCInc=0                                            Premise(F150)
	S83= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S76,S81,S82)
	S84= CtrlGPR=0                                              Premise(F157)
	S85= GPR[5'd31]=addr+4                                      GPR-Hold(S78,S84)
	S86= CtrlConditionReg=0                                     Premise(F161)
	S87= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S80,S86)

POST	S83= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S76,S81,S82)
	S85= GPR[5'd31]=addr+4                                      GPR-Hold(S78,S84)
	S87= [ConditionReg]=CompareS(a,32'b0)                       ConditionReg-Hold(S80,S86)

