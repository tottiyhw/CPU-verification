
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={5,rS,rT,offset}                       Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)
	S4= GPR[rT]=b                                               Premise(F4)

IF	S5= CP0.ASID=pid                                            ASID-Read(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PC.Out=>IMem.RAddr                                      Premise(F5)
	S8= IMem.RAddr=addr                                         Path(S6,S7)
	S9= CP0.ASID=>IMem.ASID                                     Premise(F6)
	S10= IMem.ASID=pid                                          Path(S5,S9)
	S11= IMem.Out={5,rS,rT,offset}                              IMem-Read(S10,S8,S2)
	S12= IMem.Out=>IR.In                                        Premise(F7)
	S13= IR.In={5,rS,rT,offset}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F22)
	S15= CtrlPCInc=1                                            Premise(F23)
	S16= PC[CIA]=addr                                           PC-Inc(S1,S14,S15)
	S17= CtrlIR=1                                               Premise(F29)
	S18= [IR]={5,rS,rT,offset}                                  IR-Write(S13,S17)
	S19= CtrlGPR=0                                              Premise(F30)
	S20= GPR[rS]=a                                              GPR-Hold(S3,S19)
	S21= GPR[rT]=b                                              GPR-Hold(S4,S19)

ID	S22= IR.Out25_21=rS                                         IR-Out(S18)
	S23= IR.Out20_16=rT                                         IR-Out(S18)
	S24= IR.Out25_21=>GPR.RReg1                                 Premise(F39)
	S25= GPR.RReg1=rS                                           Path(S22,S24)
	S26= GPR.Rdata1=a                                           GPR-Read(S25,S20)
	S27= IR.Out20_16=>GPR.RReg2                                 Premise(F40)
	S28= GPR.RReg2=rT                                           Path(S23,S27)
	S29= GPR.Rdata2=b                                           GPR-Read(S28,S21)
	S30= GPR.Rdata1=>A.In                                       Premise(F41)
	S31= A.In=a                                                 Path(S26,S30)
	S32= GPR.Rdata2=>B.In                                       Premise(F42)
	S33= B.In=b                                                 Path(S29,S32)
	S34= CtrlPCInc=0                                            Premise(F53)
	S35= PC[CIA]=addr                                           PC-Hold(S16,S34)
	S36= CtrlIR=0                                               Premise(F59)
	S37= [IR]={5,rS,rT,offset}                                  IR-Hold(S18,S36)
	S38= CtrlA=1                                                Premise(F61)
	S39= [A]=a                                                  A-Write(S31,S38)
	S40= CtrlB=1                                                Premise(F62)
	S41= [B]=b                                                  B-Write(S33,S40)

EX	S42= PC.CIA=addr                                            PC-Out(S35)
	S43= IR.Out15_0=offset                                      IR-Out(S37)
	S44= A.Out=a                                                A-Out(S39)
	S45= B.Out=b                                                B-Out(S41)
	S46= IR.Out15_0=>SEXT.In                                    Premise(F73)
	S47= SEXT.In=offset                                         Path(S43,S46)
	S48= SEXT.Out={14{offset[15]},offset,2{0}}                  SEXT(S47)
	S49= PC.CIA=>ALU.A                                          Premise(F74)
	S50= ALU.A=addr                                             Path(S42,S49)
	S51= SEXT.Out=>ALU.B                                        Premise(F75)
	S52= ALU.B={14{offset[15]},offset,2{0}}                     Path(S48,S51)
	S53= ALU.Out=addr+{14{offset[15]},offset,2{0}}              ALU(S50,S52)
	S54= ALU.Out=>ALUOut.In                                     Premise(F77)
	S55= ALUOut.In=addr+{14{offset[15]},offset,2{0}}            Path(S53,S54)
	S56= A.Out=>CMPU.A                                          Premise(F78)
	S57= CMPU.A=a                                               Path(S44,S56)
	S58= B.Out=>CMPU.B                                          Premise(F79)
	S59= CMPU.B=b                                               Path(S45,S58)
	S60= CMPU.zero=CompareS(a,b)                                CMPU-CMPS(S57,S59)
	S61= CMPU.zero=>ConditionReg.In                             Premise(F81)
	S62= ConditionReg.In=CompareS(a,b)                          Path(S60,S61)
	S63= CtrlALUOut=1                                           Premise(F95)
	S64= [ALUOut]=addr+{14{offset[15]},offset,2{0}}             ALUOut-Write(S55,S63)
	S65= CtrlConditionReg=1                                     Premise(F96)
	S66= [ConditionReg]=CompareS(a,b)                           ConditionReg-Write(S62,S65)

MEM	S67= ALUOut.Out=addr+{14{offset[15]},offset,2{0}}           ALUOut-Out(S64)
	S68= ALUOut.Out=>PC.In                                      Premise(F112)
	S69= PC.In=addr+{14{offset[15]},offset,2{0}}                Path(S67,S68)
	S70= CtrlPC=1                                               Premise(F114)
	S71= CtrlPCInc=0                                            Premise(F115)
	S72= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Write(S69,S70,S71)
	S73= CtrlConditionReg=0                                     Premise(F126)
	S74= [ConditionReg]=CompareS(a,b)                           ConditionReg-Hold(S66,S73)

WB	S75= CtrlPC=0                                               Premise(F144)
	S76= CtrlPCInc=0                                            Premise(F145)
	S77= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S72,S75,S76)
	S78= CtrlConditionReg=0                                     Premise(F156)
	S79= [ConditionReg]=CompareS(a,b)                           ConditionReg-Hold(S74,S78)

POST	S77= PC[Out]=addr+{14{offset[15]},offset,2{0}}              PC-Hold(S72,S75,S76)
	S79= [ConditionReg]=CompareS(a,b)                           ConditionReg-Hold(S74,S78)

