
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={0,rS,rT,rD,0,10}                      Premise(F2)
	S3= GPR[rT]=b                                               Premise(F4)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PC.Out=>IMem.RAddr                                      Premise(F5)
	S7= IMem.RAddr=addr                                         Path(S5,S6)
	S8= CP0.ASID=>IMem.ASID                                     Premise(F6)
	S9= IMem.ASID=pid                                           Path(S4,S8)
	S10= IMem.Out={0,rS,rT,rD,0,10}                             IMem-Read(S9,S7,S2)
	S11= IMem.Out=>IR.In                                        Premise(F7)
	S12= IR.In={0,rS,rT,rD,0,10}                                Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F19)
	S14= CtrlPCInc=1                                            Premise(F20)
	S15= PC[Out]=addr+4                                         PC-Inc(S1,S13,S14)
	S16= CtrlIR=1                                               Premise(F26)
	S17= [IR]={0,rS,rT,rD,0,10}                                 IR-Write(S12,S16)
	S18= CtrlGPR=0                                              Premise(F27)
	S19= GPR[rT]=b                                              GPR-Hold(S3,S18)

ID	S20= IR.Out20_16=rT                                         IR-Out(S17)
	S21= IR.Out20_16=>GPR.RReg2                                 Premise(F36)
	S22= GPR.RReg2=rT                                           Path(S20,S21)
	S23= GPR.Rdata2=b                                           GPR-Read(S22,S19)
	S24= GPR.Rdata2=>B.In                                       Premise(F39)
	S25= B.In=b                                                 Path(S23,S24)
	S26= CtrlPC=0                                               Premise(F45)
	S27= CtrlPCInc=0                                            Premise(F46)
	S28= PC[Out]=addr+4                                         PC-Hold(S15,S26,S27)
	S29= CtrlB=1                                                Premise(F55)
	S30= [B]=b                                                  B-Write(S25,S29)

EX	S31= B.Out=b                                                B-Out(S30)
	S32= CMPU.A=32'b0                                           Premise(F66)
	S33= B.Out=>CMPU.B                                          Premise(F67)
	S34= CMPU.B=b                                               Path(S31,S33)
	S35= CMPU.zero=CompareS(32'b0,b)                            CMPU-CMPS(S32,S34)
	S36= CMPU.zero=>ConditionReg.In                             Premise(F69)
	S37= ConditionReg.In=CompareS(32'b0,b)                      Path(S35,S36)
	S38= CtrlPC=0                                               Premise(F73)
	S39= CtrlPCInc=0                                            Premise(F74)
	S40= PC[Out]=addr+4                                         PC-Hold(S28,S38,S39)
	S41= CtrlConditionReg=1                                     Premise(F84)
	S42= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Write(S37,S41)

MEM	S43= CtrlPC=0                                               Premise(F99)
	S44= CtrlPCInc=0                                            Premise(F100)
	S45= PC[Out]=addr+4                                         PC-Hold(S40,S43,S44)
	S46= CtrlConditionReg=0                                     Premise(F110)
	S47= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S42,S46)

WB	S48= CtrlPC=0                                               Premise(F125)
	S49= CtrlPCInc=0                                            Premise(F126)
	S50= PC[Out]=addr+4                                         PC-Hold(S45,S48,S49)
	S51= CtrlConditionReg=0                                     Premise(F136)
	S52= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S47,S51)

POST	S50= PC[Out]=addr+4                                         PC-Hold(S45,S48,S49)
	S52= [ConditionReg]=CompareS(32'b0,b)                       ConditionReg-Hold(S47,S51)

