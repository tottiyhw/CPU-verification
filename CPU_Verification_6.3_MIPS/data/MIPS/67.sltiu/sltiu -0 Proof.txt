
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={11,rS,rT,imm}                         Premise(F2)
	S3= GPR[rS]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PC.Out=>IMem.RAddr                                      Premise(F4)
	S7= IMem.RAddr=addr                                         Path(S5,S6)
	S8= CP0.ASID=>IMem.ASID                                     Premise(F5)
	S9= IMem.ASID=pid                                           Path(S4,S8)
	S10= IMem.Out={11,rS,rT,imm}                                IMem-Read(S9,S7,S2)
	S11= IMem.Out=>IR.In                                        Premise(F6)
	S12= IR.In={11,rS,rT,imm}                                   Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F17)
	S14= CtrlPCInc=1                                            Premise(F18)
	S15= PC[Out]=addr+4                                         PC-Inc(S1,S13,S14)
	S16= CtrlIR=1                                               Premise(F24)
	S17= [IR]={11,rS,rT,imm}                                    IR-Write(S12,S16)
	S18= CtrlGPR=0                                              Premise(F25)
	S19= GPR[rS]=a                                              GPR-Hold(S3,S18)

ID	S20= IR.Out25_21=rS                                         IR-Out(S17)
	S21= IR.Out15_0=imm                                         IR-Out(S17)
	S22= IR.Out25_21=>GPR.RReg1                                 Premise(F33)
	S23= GPR.RReg1=rS                                           Path(S20,S22)
	S24= GPR.Rdata1=a                                           GPR-Read(S23,S19)
	S25= IR.Out15_0=>LIMMEXT.In                                 Premise(F34)
	S26= LIMMEXT.In=imm                                         Path(S21,S25)
	S27= LIMMEXT.Out={16{0},imm}                                LIMMEXT(S26)
	S28= GPR.Rdata1=>A.In                                       Premise(F35)
	S29= A.In=a                                                 Path(S24,S28)
	S30= LIMMEXT.Out=>B.In                                      Premise(F36)
	S31= B.In={16{0},imm}                                       Path(S27,S30)
	S32= CtrlPC=0                                               Premise(F42)
	S33= CtrlPCInc=0                                            Premise(F43)
	S34= PC[Out]=addr+4                                         PC-Hold(S15,S32,S33)
	S35= CtrlIR=0                                               Premise(F49)
	S36= [IR]={11,rS,rT,imm}                                    IR-Hold(S17,S35)
	S37= CtrlA=1                                                Premise(F51)
	S38= [A]=a                                                  A-Write(S29,S37)
	S39= CtrlB=1                                                Premise(F52)
	S40= [B]={16{0},imm}                                        B-Write(S31,S39)

EX	S41= A.Out=a                                                A-Out(S38)
	S42= B.Out={16{0},imm}                                      B-Out(S40)
	S43= A.Out=>ALU.A                                           Premise(F62)
	S44= ALU.A=a                                                Path(S41,S43)
	S45= B.Out=>ALU.B                                           Premise(F63)
	S46= ALU.B={16{0},imm}                                      Path(S42,S45)
	S47= ALU.Out={31{0},(a<u{16{0},imm})}                       ALU(S44,S46)
	S48= ALU.Out=>ALUOut.In                                     Premise(F65)
	S49= ALUOut.In={31{0},(a<u{16{0},imm})}                     Path(S47,S48)
	S50= CtrlPC=0                                               Premise(F68)
	S51= CtrlPCInc=0                                            Premise(F69)
	S52= PC[Out]=addr+4                                         PC-Hold(S34,S50,S51)
	S53= CtrlIR=0                                               Premise(F75)
	S54= [IR]={11,rS,rT,imm}                                    IR-Hold(S36,S53)
	S55= CtrlALUOut=1                                           Premise(F79)
	S56= [ALUOut]={31{0},(a<u{16{0},imm})}                      ALUOut-Write(S49,S55)

MEM	S57= CtrlPC=0                                               Premise(F93)
	S58= CtrlPCInc=0                                            Premise(F94)
	S59= PC[Out]=addr+4                                         PC-Hold(S52,S57,S58)
	S60= CtrlIR=0                                               Premise(F100)
	S61= [IR]={11,rS,rT,imm}                                    IR-Hold(S54,S60)
	S62= CtrlALUOut=0                                           Premise(F104)
	S63= [ALUOut]={31{0},(a<u{16{0},imm})}                      ALUOut-Hold(S56,S62)

WB	S64= IR.Out20_16=rT                                         IR-Out(S61)
	S65= ALUOut.Out={31{0},(a<u{16{0},imm})}                    ALUOut-Out(S63)
	S66= IR.Out20_16=>GPR.WReg                                  Premise(F116)
	S67= GPR.WReg=rT                                            Path(S64,S66)
	S68= ALUOut.Out=>GPR.WData                                  Premise(F117)
	S69= GPR.WData={31{0},(a<u{16{0},imm})}                     Path(S65,S68)
	S70= CtrlPC=0                                               Premise(F118)
	S71= CtrlPCInc=0                                            Premise(F119)
	S72= PC[Out]=addr+4                                         PC-Hold(S59,S70,S71)
	S73= CtrlGPR=1                                              Premise(F126)
	S74= GPR[rT]={31{0},(a<u{16{0},imm})}                       GPR-Write(S67,S69,S73)

POST	S72= PC[Out]=addr+4                                         PC-Hold(S59,S70,S71)
	S74= GPR[rT]={31{0},(a<u{16{0},imm})}                       GPR-Write(S67,S69,S73)

