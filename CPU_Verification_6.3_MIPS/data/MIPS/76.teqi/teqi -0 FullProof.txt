
----------------------------------- FullProof -----------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={1,rs,12,imm}                          Premise(F2)
	S0= GPR[rs]=a                                               Premise(F3)

IF	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F4)
	S0= IMem.RAddr=addr                                         Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F5)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out={1,rs,12,imm}                                  IMem-Read(S0,S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F6)
	S0= IR.In={1,rs,12,imm}                                     Path(S0,S0)
	S0= IR.Out31_26=>CU.Op                                      Premise(F7)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F8)
	S0= IR.Out20_16=>CU.IRFunc1                                 Premise(F9)
	S0= IR.Out15_0=>IMMEXT.In                                   Premise(F10)
	S0= GPR.Rdata1=>A.In                                        Premise(F11)
	S0= IMMEXT.Out=>B.In                                        Premise(F12)
	S0= A.Out=>CMPU.A                                           Premise(F13)
	S0= B.Out=>CMPU.B                                           Premise(F14)
	S0= CMPU.zero=>ConditionReg.In                              Premise(F15)
	S0= PC.Out=>CP0.EPCIn                                       Premise(F16)
	S0= CP0.EPCIn=addr                                          Path(S0,S0)
	S0= CU.TrapAddr=>PC.In                                      Premise(F17)
	S0= CP0.ASID=>PIDReg.In                                     Premise(F18)
	S0= PIDReg.In=pid                                           Path(S0,S0)
	S0= ConditionReg.Out=>CU.zero                               Premise(F19)
	S0= CtrlPC=0                                                Premise(F20)
	S0= CtrlPCInc=1                                             Premise(F21)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F22)
	S0= IMem[{pid,addr}]={1,rs,12,imm}                          IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F23)
	S0= CtrlCP0=0                                               Premise(F24)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F25)
	S0= CtrlExCodeIn=0                                          Premise(F26)
	S0= CtrlIR=1                                                Premise(F27)
	S0= [IR]={1,rs,12,imm}                                      IR-Write(S0,S0)
	S0= CtrlGPR=0                                               Premise(F28)
	S0= GPR[rs]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F29)
	S0= CtrlB=0                                                 Premise(F30)
	S0= CtrlConditionReg=0                                      Premise(F31)
	S0= CtrlPIDReg=0                                            Premise(F32)

ID	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={1,rs,12,imm}                                    IR-Out(S0)
	S0= IR.Out31_26=1                                           IR-Out(S0)
	S0= IR.Out25_21=rs                                          IR-Out(S0)
	S0= IR.Out20_16=12                                          IR-Out(S0)
	S0= IR.Out15_0=imm                                          IR-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F33)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F34)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F35)
	S0= IR.Out31_26=>CU.Op                                      Premise(F36)
	S0= CU.Op=1                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F37)
	S0= GPR.RReg1=rs                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>CU.IRFunc1                                 Premise(F38)
	S0= CU.IRFunc1=12                                           Path(S0,S0)
	S0= IR.Out15_0=>IMMEXT.In                                   Premise(F39)
	S0= IMMEXT.In=imm                                           Path(S0,S0)
	S0= IMMEXT.Out={16{imm[15]},imm}                            IMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F40)
	S0= A.In=a                                                  Path(S0,S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F41)
	S0= B.In={16{imm[15]},imm}                                  Path(S0,S0)
	S0= A.Out=>CMPU.A                                           Premise(F42)
	S0= B.Out=>CMPU.B                                           Premise(F43)
	S0= CMPU.zero=>ConditionReg.In                              Premise(F44)
	S0= PC.Out=>CP0.EPCIn                                       Premise(F45)
	S0= CP0.EPCIn=addr+4                                        Path(S0,S0)
	S0= CU.TrapAddr=>PC.In                                      Premise(F46)
	S0= CP0.ASID=>PIDReg.In                                     Premise(F47)
	S0= PIDReg.In=pid                                           Path(S0,S0)
	S0= ConditionReg.Out=>CU.zero                               Premise(F48)
	S0= CtrlPC=0                                                Premise(F49)
	S0= CtrlPCInc=0                                             Premise(F50)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F51)
	S0= IMem[{pid,addr}]={1,rs,12,imm}                          IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F52)
	S0= CtrlCP0=0                                               Premise(F53)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F54)
	S0= CtrlExCodeIn=0                                          Premise(F55)
	S0= CtrlIR=0                                                Premise(F56)
	S0= [IR]={1,rs,12,imm}                                      IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F57)
	S0= GPR[rs]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=1                                                 Premise(F58)
	S0= [A]=a                                                   A-Write(S0,S0)
	S0= CtrlB=1                                                 Premise(F59)
	S0= [B]={16{imm[15]},imm}                                   B-Write(S0,S0)
	S0= CtrlConditionReg=0                                      Premise(F60)
	S0= CtrlPIDReg=0                                            Premise(F61)

EX	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={1,rs,12,imm}                                    IR-Out(S0)
	S0= IR.Out31_26=1                                           IR-Out(S0)
	S0= IR.Out25_21=rs                                          IR-Out(S0)
	S0= IR.Out20_16=12                                          IR-Out(S0)
	S0= IR.Out15_0=imm                                          IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out={16{imm[15]},imm}                                 B-Out(S0)
	S0= B.Out1_0={{16{imm[15]},imm}}[1:0]                       B-Out(S0)
	S0= B.Out4_0={{16{imm[15]},imm}}[4:0]                       B-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F62)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F63)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F64)
	S0= IR.Out31_26=>CU.Op                                      Premise(F65)
	S0= CU.Op=1                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F66)
	S0= GPR.RReg1=rs                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>CU.IRFunc1                                 Premise(F67)
	S0= CU.IRFunc1=12                                           Path(S0,S0)
	S0= IR.Out15_0=>IMMEXT.In                                   Premise(F68)
	S0= IMMEXT.In=imm                                           Path(S0,S0)
	S0= IMMEXT.Out={16{imm[15]},imm}                            IMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F69)
	S0= A.In=a                                                  Path(S0,S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F70)
	S0= B.In={16{imm[15]},imm}                                  Path(S0,S0)
	S0= A.Out=>CMPU.A                                           Premise(F71)
	S0= CMPU.A=a                                                Path(S0,S0)
	S0= B.Out=>CMPU.B                                           Premise(F72)
	S0= CMPU.B={16{imm[15]},imm}                                Path(S0,S0)
	S0= CMPU.Func=6'b000011                                     Premise(F73)
	S0= CMPU.Out=CompareS(a,{16{imm[15]},imm})                  CMPU-CMPS(S0,S0)
	S0= CMPU.zero=CompareS(a,{16{imm[15]},imm})                 CMPU-CMPS(S0,S0)
	S0= CMPU.gt=CompareS(a,{16{imm[15]},imm})                   CMPU-CMPS(S0,S0)
	S0= CMPU.lt=CompareS(a,{16{imm[15]},imm})                   CMPU-CMPS(S0,S0)
	S0= CMPU.zero=>ConditionReg.In                              Premise(F74)
	S0= ConditionReg.In=CompareS(a,{16{imm[15]},imm})           Path(S0,S0)
	S0= PC.Out=>CP0.EPCIn                                       Premise(F75)
	S0= CP0.EPCIn=addr+4                                        Path(S0,S0)
	S0= CU.TrapAddr=>PC.In                                      Premise(F76)
	S0= CP0.ASID=>PIDReg.In                                     Premise(F77)
	S0= PIDReg.In=pid                                           Path(S0,S0)
	S0= ConditionReg.Out=>CU.zero                               Premise(F78)
	S0= CtrlPC=0                                                Premise(F79)
	S0= CtrlPCInc=0                                             Premise(F80)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F81)
	S0= IMem[{pid,addr}]={1,rs,12,imm}                          IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F82)
	S0= CtrlCP0=0                                               Premise(F83)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F84)
	S0= CtrlExCodeIn=0                                          Premise(F85)
	S0= CtrlIR=0                                                Premise(F86)
	S0= [IR]={1,rs,12,imm}                                      IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F87)
	S0= GPR[rs]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F88)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F89)
	S0= [B]={16{imm[15]},imm}                                   B-Hold(S0,S0)
	S0= CtrlConditionReg=1                                      Premise(F90)
	S0= [ConditionReg]=CompareS(a,{16{imm[15]},imm})            ConditionReg-Write(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F91)

MEM	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={1,rs,12,imm}                                    IR-Out(S0)
	S0= IR.Out31_26=1                                           IR-Out(S0)
	S0= IR.Out25_21=rs                                          IR-Out(S0)
	S0= IR.Out20_16=12                                          IR-Out(S0)
	S0= IR.Out15_0=imm                                          IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out={16{imm[15]},imm}                                 B-Out(S0)
	S0= B.Out1_0={{16{imm[15]},imm}}[1:0]                       B-Out(S0)
	S0= B.Out4_0={{16{imm[15]},imm}}[4:0]                       B-Out(S0)
	S0= ConditionReg.Out=CompareS(a,{16{imm[15]},imm})          ConditionReg-Out(S0)
	S0= ConditionReg.Out1_0={CompareS(a,{16{imm[15]},imm})}[1:0]ConditionReg-Out(S0)
	S0= ConditionReg.Out4_0={CompareS(a,{16{imm[15]},imm})}[4:0]ConditionReg-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F92)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F93)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F94)
	S0= IR.Out31_26=>CU.Op                                      Premise(F95)
	S0= CU.Op=1                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F96)
	S0= GPR.RReg1=rs                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>CU.IRFunc1                                 Premise(F97)
	S0= CU.IRFunc1=12                                           Path(S0,S0)
	S0= IR.Out15_0=>IMMEXT.In                                   Premise(F98)
	S0= IMMEXT.In=imm                                           Path(S0,S0)
	S0= IMMEXT.Out={16{imm[15]},imm}                            IMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F99)
	S0= A.In=a                                                  Path(S0,S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F100)
	S0= B.In={16{imm[15]},imm}                                  Path(S0,S0)
	S0= A.Out=>CMPU.A                                           Premise(F101)
	S0= CMPU.A=a                                                Path(S0,S0)
	S0= B.Out=>CMPU.B                                           Premise(F102)
	S0= CMPU.B={16{imm[15]},imm}                                Path(S0,S0)
	S0= CMPU.zero=>ConditionReg.In                              Premise(F103)
	S0= PC.Out=>CP0.EPCIn                                       Premise(F104)
	S0= CP0.EPCIn=addr+4                                        Path(S0,S0)
	S0= CP0.ExCodeIn=5'h0d                                      Premise(F105)
	S0= CU.TrapAddr=>PC.In                                      Premise(F106)
	S0= CP0.ASID=>PIDReg.In                                     Premise(F107)
	S0= PIDReg.In=pid                                           Path(S0,S0)
	S0= ConditionReg.Out=>CU.zero                               Premise(F108)
	S0= CU.zero=CompareS(a,{16{imm[15]},imm})                   Path(S0,S0)
	S0= CtrlPC=1                                                Premise(F109)
	S0= CtrlPCInc=0                                             Premise(F110)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F111)
	S0= IMem[{pid,addr}]={1,rs,12,imm}                          IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F112)
	S0= CtrlCP0=0                                               Premise(F113)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=1                                             Premise(F114)
	S0= CP0[EPC]=addr+4                                         CP0-Write-EPC(S0,S0)
	S0= CtrlExCodeIn=1                                          Premise(F115)
	S0= CP0[ExCode]=5'h0d                                       CP0-Write-ExCode(S0,S0)
	S0= CtrlIR=0                                                Premise(F116)
	S0= [IR]={1,rs,12,imm}                                      IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F117)
	S0= GPR[rs]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F118)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F119)
	S0= [B]={16{imm[15]},imm}                                   B-Hold(S0,S0)
	S0= CtrlConditionReg=0                                      Premise(F120)
	S0= [ConditionReg]=CompareS(a,{16{imm[15]},imm})            ConditionReg-Hold(S0,S0)
	S0= CtrlPIDReg=1                                            Premise(F121)
	S0= [PIDReg]=pid                                            PIDReg-Write(S0,S0)

WB	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={1,rs,12,imm}                                    IR-Out(S0)
	S0= IR.Out31_26=1                                           IR-Out(S0)
	S0= IR.Out25_21=rs                                          IR-Out(S0)
	S0= IR.Out20_16=12                                          IR-Out(S0)
	S0= IR.Out15_0=imm                                          IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out={16{imm[15]},imm}                                 B-Out(S0)
	S0= B.Out1_0={{16{imm[15]},imm}}[1:0]                       B-Out(S0)
	S0= B.Out4_0={{16{imm[15]},imm}}[4:0]                       B-Out(S0)
	S0= ConditionReg.Out=CompareS(a,{16{imm[15]},imm})          ConditionReg-Out(S0)
	S0= ConditionReg.Out1_0={CompareS(a,{16{imm[15]},imm})}[1:0]ConditionReg-Out(S0)
	S0= ConditionReg.Out4_0={CompareS(a,{16{imm[15]},imm})}[4:0]ConditionReg-Out(S0)
	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F122)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F123)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F124)
	S0= IR.Out31_26=>CU.Op                                      Premise(F125)
	S0= CU.Op=1                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F126)
	S0= GPR.RReg1=rs                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>CU.IRFunc1                                 Premise(F127)
	S0= CU.IRFunc1=12                                           Path(S0,S0)
	S0= IR.Out15_0=>IMMEXT.In                                   Premise(F128)
	S0= IMMEXT.In=imm                                           Path(S0,S0)
	S0= IMMEXT.Out={16{imm[15]},imm}                            IMMEXT(S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F129)
	S0= A.In=a                                                  Path(S0,S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F130)
	S0= B.In={16{imm[15]},imm}                                  Path(S0,S0)
	S0= A.Out=>CMPU.A                                           Premise(F131)
	S0= CMPU.A=a                                                Path(S0,S0)
	S0= B.Out=>CMPU.B                                           Premise(F132)
	S0= CMPU.B={16{imm[15]},imm}                                Path(S0,S0)
	S0= CMPU.zero=>ConditionReg.In                              Premise(F133)
	S0= PC.Out=>CP0.EPCIn                                       Premise(F134)
	S0= CU.TrapAddr=>PC.In                                      Premise(F135)
	S0= CP0.ASID=>PIDReg.In                                     Premise(F136)
	S0= PIDReg.In=pid                                           Path(S0,S0)
	S0= ConditionReg.Out=>CU.zero                               Premise(F137)
	S0= CU.zero=CompareS(a,{16{imm[15]},imm})                   Path(S0,S0)
	S0= CtrlPC=0                                                Premise(F138)
	S0= CtrlPCInc=0                                             Premise(F139)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F140)
	S0= IMem[{pid,addr}]={1,rs,12,imm}                          IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F141)
	S0= CtrlCP0=0                                               Premise(F142)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CP0[EPC]=addr+4                                         CP0-Hold(S0,S0)
	S0= CP0[ExCode]=5'h0d                                       CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F143)
	S0= CtrlExCodeIn=0                                          Premise(F144)
	S0= CtrlIR=0                                                Premise(F145)
	S0= [IR]={1,rs,12,imm}                                      IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F146)
	S0= GPR[rs]=a                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F147)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F148)
	S0= [B]={16{imm[15]},imm}                                   B-Hold(S0,S0)
	S0= CtrlConditionReg=0                                      Premise(F149)
	S0= [ConditionReg]=CompareS(a,{16{imm[15]},imm})            ConditionReg-Hold(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F150)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)

POST	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= IMem[{pid,addr}]={1,rs,12,imm}                          IMem-Hold(S0,S0)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CP0[EPC]=addr+4                                         CP0-Hold(S0,S0)
	S0= CP0[ExCode]=5'h0d                                       CP0-Hold(S0,S0)
	S0= [IR]={1,rs,12,imm}                                      IR-Hold(S0,S0)
	S0= GPR[rs]=a                                               GPR-Hold(S0,S0)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= [B]={16{imm[15]},imm}                                   B-Hold(S0,S0)
	S0= [ConditionReg]=CompareS(a,{16{imm[15]},imm})            ConditionReg-Hold(S0,S0)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)

