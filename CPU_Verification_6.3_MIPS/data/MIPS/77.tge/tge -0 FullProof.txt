
----------------------------------- FullProof -----------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={0,rs,rt,code,48}                      Premise(F2)
	S0= GPR[rs]=a                                               Premise(F3)
	S0= GPR[rt]=b                                               Premise(F4)

IF	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F5)
	S0= IMem.RAddr=addr                                         Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F6)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out={0,rs,rt,code,48}                              IMem-Read(S0,S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F7)
	S0= IR.In={0,rs,rt,code,48}                                 Path(S0,S0)
	S0= IR.Out31_26=>CU.Op                                      Premise(F8)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F9)
	S0= IR.Out20_16=>GPR.RReg2                                  Premise(F10)
	S0= IR.Out5_0=>CU.IRFunc                                    Premise(F11)
	S0= GPR.Rdata1=>A.In                                        Premise(F12)
	S0= GPR.Rdata2=>B.In                                        Premise(F13)
	S0= A.Out=>CMPU.A                                           Premise(F14)
	S0= B.Out=>CMPU.B                                           Premise(F15)
	S0= CMPU.lt=>ConditionReg.In                                Premise(F16)
	S0= PC.Out=>CP0.EPCIn                                       Premise(F17)
	S0= CP0.EPCIn=addr                                          Path(S0,S0)
	S0= CU.TrapAddr=>PC.In                                      Premise(F18)
	S0= CP0.ASID=>PIDReg.In                                     Premise(F19)
	S0= PIDReg.In=pid                                           Path(S0,S0)
	S0= ConditionReg.Out=>CU.lt                                 Premise(F20)
	S0= CtrlPC=0                                                Premise(F21)
	S0= CtrlPCInc=1                                             Premise(F22)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F23)
	S0= IMem[{pid,addr}]={0,rs,rt,code,48}                      IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F24)
	S0= CtrlCP0=0                                               Premise(F25)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F26)
	S0= CtrlExCodeIn=0                                          Premise(F27)
	S0= CtrlIR=1                                                Premise(F28)
	S0= [IR]={0,rs,rt,code,48}                                  IR-Write(S0,S0)
	S0= CtrlGPR=0                                               Premise(F29)
	S0= GPR[rs]=a                                               GPR-Hold(S0,S0)
	S0= GPR[rt]=b                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F30)
	S0= CtrlB=0                                                 Premise(F31)
	S0= CtrlConditionReg=0                                      Premise(F32)
	S0= CtrlPIDReg=0                                            Premise(F33)

ID	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={0,rs,rt,code,48}                                IR-Out(S0)
	S0= IR.Out31_26=0                                           IR-Out(S0)
	S0= IR.Out25_21=rs                                          IR-Out(S0)
	S0= IR.Out20_16=rt                                          IR-Out(S0)
	S0= IR.Out15_6=code                                         IR-Out(S0)
	S0= IR.Out5_0=48                                            IR-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F34)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F35)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F36)
	S0= IR.Out31_26=>CU.Op                                      Premise(F37)
	S0= CU.Op=0                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F38)
	S0= GPR.RReg1=rs                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>GPR.RReg2                                  Premise(F39)
	S0= GPR.RReg2=rt                                            Path(S0,S0)
	S0= GPR.Rdata2=b                                            GPR-Read(S0,S0)
	S0= IR.Out5_0=>CU.IRFunc                                    Premise(F40)
	S0= CU.IRFunc=48                                            Path(S0,S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F41)
	S0= A.In=a                                                  Path(S0,S0)
	S0= GPR.Rdata2=>B.In                                        Premise(F42)
	S0= B.In=b                                                  Path(S0,S0)
	S0= A.Out=>CMPU.A                                           Premise(F43)
	S0= B.Out=>CMPU.B                                           Premise(F44)
	S0= CMPU.lt=>ConditionReg.In                                Premise(F45)
	S0= PC.Out=>CP0.EPCIn                                       Premise(F46)
	S0= CP0.EPCIn=addr+4                                        Path(S0,S0)
	S0= CU.TrapAddr=>PC.In                                      Premise(F47)
	S0= CP0.ASID=>PIDReg.In                                     Premise(F48)
	S0= PIDReg.In=pid                                           Path(S0,S0)
	S0= ConditionReg.Out=>CU.lt                                 Premise(F49)
	S0= CtrlPC=0                                                Premise(F50)
	S0= CtrlPCInc=0                                             Premise(F51)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F52)
	S0= IMem[{pid,addr}]={0,rs,rt,code,48}                      IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F53)
	S0= CtrlCP0=0                                               Premise(F54)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F55)
	S0= CtrlExCodeIn=0                                          Premise(F56)
	S0= CtrlIR=0                                                Premise(F57)
	S0= [IR]={0,rs,rt,code,48}                                  IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F58)
	S0= GPR[rs]=a                                               GPR-Hold(S0,S0)
	S0= GPR[rt]=b                                               GPR-Hold(S0,S0)
	S0= CtrlA=1                                                 Premise(F59)
	S0= [A]=a                                                   A-Write(S0,S0)
	S0= CtrlB=1                                                 Premise(F60)
	S0= [B]=b                                                   B-Write(S0,S0)
	S0= CtrlConditionReg=0                                      Premise(F61)
	S0= CtrlPIDReg=0                                            Premise(F62)

EX	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={0,rs,rt,code,48}                                IR-Out(S0)
	S0= IR.Out31_26=0                                           IR-Out(S0)
	S0= IR.Out25_21=rs                                          IR-Out(S0)
	S0= IR.Out20_16=rt                                          IR-Out(S0)
	S0= IR.Out15_6=code                                         IR-Out(S0)
	S0= IR.Out5_0=48                                            IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out=b                                                 B-Out(S0)
	S0= B.Out1_0={b}[1:0]                                       B-Out(S0)
	S0= B.Out4_0={b}[4:0]                                       B-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F63)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F64)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F65)
	S0= IR.Out31_26=>CU.Op                                      Premise(F66)
	S0= CU.Op=0                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F67)
	S0= GPR.RReg1=rs                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>GPR.RReg2                                  Premise(F68)
	S0= GPR.RReg2=rt                                            Path(S0,S0)
	S0= GPR.Rdata2=b                                            GPR-Read(S0,S0)
	S0= IR.Out5_0=>CU.IRFunc                                    Premise(F69)
	S0= CU.IRFunc=48                                            Path(S0,S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F70)
	S0= A.In=a                                                  Path(S0,S0)
	S0= GPR.Rdata2=>B.In                                        Premise(F71)
	S0= B.In=b                                                  Path(S0,S0)
	S0= A.Out=>CMPU.A                                           Premise(F72)
	S0= CMPU.A=a                                                Path(S0,S0)
	S0= B.Out=>CMPU.B                                           Premise(F73)
	S0= CMPU.B=b                                                Path(S0,S0)
	S0= CMPU.Func=6'b000011                                     Premise(F74)
	S0= CMPU.Out=CompareS(a,b)                                  CMPU-CMPS(S0,S0)
	S0= CMPU.zero=CompareS(a,b)                                 CMPU-CMPS(S0,S0)
	S0= CMPU.gt=CompareS(a,b)                                   CMPU-CMPS(S0,S0)
	S0= CMPU.lt=CompareS(a,b)                                   CMPU-CMPS(S0,S0)
	S0= CMPU.lt=>ConditionReg.In                                Premise(F75)
	S0= ConditionReg.In=CompareS(a,b)                           Path(S0,S0)
	S0= PC.Out=>CP0.EPCIn                                       Premise(F76)
	S0= CP0.EPCIn=addr+4                                        Path(S0,S0)
	S0= CU.TrapAddr=>PC.In                                      Premise(F77)
	S0= CP0.ASID=>PIDReg.In                                     Premise(F78)
	S0= PIDReg.In=pid                                           Path(S0,S0)
	S0= ConditionReg.Out=>CU.lt                                 Premise(F79)
	S0= CtrlPC=0                                                Premise(F80)
	S0= CtrlPCInc=0                                             Premise(F81)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F82)
	S0= IMem[{pid,addr}]={0,rs,rt,code,48}                      IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F83)
	S0= CtrlCP0=0                                               Premise(F84)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F85)
	S0= CtrlExCodeIn=0                                          Premise(F86)
	S0= CtrlIR=0                                                Premise(F87)
	S0= [IR]={0,rs,rt,code,48}                                  IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F88)
	S0= GPR[rs]=a                                               GPR-Hold(S0,S0)
	S0= GPR[rt]=b                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F89)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F90)
	S0= [B]=b                                                   B-Hold(S0,S0)
	S0= CtrlConditionReg=1                                      Premise(F91)
	S0= [ConditionReg]=CompareS(a,b)                            ConditionReg-Write(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F92)

MEM	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={0,rs,rt,code,48}                                IR-Out(S0)
	S0= IR.Out31_26=0                                           IR-Out(S0)
	S0= IR.Out25_21=rs                                          IR-Out(S0)
	S0= IR.Out20_16=rt                                          IR-Out(S0)
	S0= IR.Out15_6=code                                         IR-Out(S0)
	S0= IR.Out5_0=48                                            IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out=b                                                 B-Out(S0)
	S0= B.Out1_0={b}[1:0]                                       B-Out(S0)
	S0= B.Out4_0={b}[4:0]                                       B-Out(S0)
	S0= ConditionReg.Out=CompareS(a,b)                          ConditionReg-Out(S0)
	S0= ConditionReg.Out1_0={CompareS(a,b)}[1:0]                ConditionReg-Out(S0)
	S0= ConditionReg.Out4_0={CompareS(a,b)}[4:0]                ConditionReg-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F93)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F94)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F95)
	S0= IR.Out31_26=>CU.Op                                      Premise(F96)
	S0= CU.Op=0                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F97)
	S0= GPR.RReg1=rs                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>GPR.RReg2                                  Premise(F98)
	S0= GPR.RReg2=rt                                            Path(S0,S0)
	S0= GPR.Rdata2=b                                            GPR-Read(S0,S0)
	S0= IR.Out5_0=>CU.IRFunc                                    Premise(F99)
	S0= CU.IRFunc=48                                            Path(S0,S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F100)
	S0= A.In=a                                                  Path(S0,S0)
	S0= GPR.Rdata2=>B.In                                        Premise(F101)
	S0= B.In=b                                                  Path(S0,S0)
	S0= A.Out=>CMPU.A                                           Premise(F102)
	S0= CMPU.A=a                                                Path(S0,S0)
	S0= B.Out=>CMPU.B                                           Premise(F103)
	S0= CMPU.B=b                                                Path(S0,S0)
	S0= CMPU.lt=>ConditionReg.In                                Premise(F104)
	S0= PC.Out=>CP0.EPCIn                                       Premise(F105)
	S0= CP0.EPCIn=addr+4                                        Path(S0,S0)
	S0= CP0.ExCodeIn=5'h0d                                      Premise(F106)
	S0= CU.TrapAddr=>PC.In                                      Premise(F107)
	S0= CP0.ASID=>PIDReg.In                                     Premise(F108)
	S0= PIDReg.In=pid                                           Path(S0,S0)
	S0= ConditionReg.Out=>CU.lt                                 Premise(F109)
	S0= CU.lt=CompareS(a,b)                                     Path(S0,S0)
	S0= CtrlPC=0                                                Premise(F110)
	S0= CtrlPCInc=0                                             Premise(F111)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F112)
	S0= IMem[{pid,addr}]={0,rs,rt,code,48}                      IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F113)
	S0= CtrlCP0=0                                               Premise(F114)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F115)
	S0= CtrlExCodeIn=0                                          Premise(F116)
	S0= CtrlIR=0                                                Premise(F117)
	S0= [IR]={0,rs,rt,code,48}                                  IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F118)
	S0= GPR[rs]=a                                               GPR-Hold(S0,S0)
	S0= GPR[rt]=b                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F119)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F120)
	S0= [B]=b                                                   B-Hold(S0,S0)
	S0= CtrlConditionReg=0                                      Premise(F121)
	S0= [ConditionReg]=CompareS(a,b)                            ConditionReg-Hold(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F122)

WB	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= CP0.ASID=pid                                            ASID-Read(S0)
	S0= IR.Out={0,rs,rt,code,48}                                IR-Out(S0)
	S0= IR.Out31_26=0                                           IR-Out(S0)
	S0= IR.Out25_21=rs                                          IR-Out(S0)
	S0= IR.Out20_16=rt                                          IR-Out(S0)
	S0= IR.Out15_6=code                                         IR-Out(S0)
	S0= IR.Out5_0=48                                            IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out=b                                                 B-Out(S0)
	S0= B.Out1_0={b}[1:0]                                       B-Out(S0)
	S0= B.Out4_0={b}[4:0]                                       B-Out(S0)
	S0= ConditionReg.Out=CompareS(a,b)                          ConditionReg-Out(S0)
	S0= ConditionReg.Out1_0={CompareS(a,b)}[1:0]                ConditionReg-Out(S0)
	S0= ConditionReg.Out4_0={CompareS(a,b)}[4:0]                ConditionReg-Out(S0)
	S0= PC.Out=>IMem.RAddr                                      Premise(F123)
	S0= IMem.RAddr=addr+4                                       Path(S0,S0)
	S0= CP0.ASID=>IMem.ASID                                     Premise(F124)
	S0= IMem.ASID=pid                                           Path(S0,S0)
	S0= IMem.Out=>IR.In                                         Premise(F125)
	S0= IR.Out31_26=>CU.Op                                      Premise(F126)
	S0= CU.Op=0                                                 Path(S0,S0)
	S0= IR.Out25_21=>GPR.RReg1                                  Premise(F127)
	S0= GPR.RReg1=rs                                            Path(S0,S0)
	S0= GPR.Rdata1=a                                            GPR-Read(S0,S0)
	S0= IR.Out20_16=>GPR.RReg2                                  Premise(F128)
	S0= GPR.RReg2=rt                                            Path(S0,S0)
	S0= GPR.Rdata2=b                                            GPR-Read(S0,S0)
	S0= IR.Out5_0=>CU.IRFunc                                    Premise(F129)
	S0= CU.IRFunc=48                                            Path(S0,S0)
	S0= GPR.Rdata1=>A.In                                        Premise(F130)
	S0= A.In=a                                                  Path(S0,S0)
	S0= GPR.Rdata2=>B.In                                        Premise(F131)
	S0= B.In=b                                                  Path(S0,S0)
	S0= A.Out=>CMPU.A                                           Premise(F132)
	S0= CMPU.A=a                                                Path(S0,S0)
	S0= B.Out=>CMPU.B                                           Premise(F133)
	S0= CMPU.B=b                                                Path(S0,S0)
	S0= CMPU.lt=>ConditionReg.In                                Premise(F134)
	S0= PC.Out=>CP0.EPCIn                                       Premise(F135)
	S0= CP0.EPCIn=addr+4                                        Path(S0,S0)
	S0= CU.TrapAddr=>PC.In                                      Premise(F136)
	S0= CP0.ASID=>PIDReg.In                                     Premise(F137)
	S0= PIDReg.In=pid                                           Path(S0,S0)
	S0= ConditionReg.Out=>CU.lt                                 Premise(F138)
	S0= CU.lt=CompareS(a,b)                                     Path(S0,S0)
	S0= CtrlPC=0                                                Premise(F139)
	S0= CtrlPCInc=0                                             Premise(F140)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIMem=0                                              Premise(F141)
	S0= IMem[{pid,addr}]={0,rs,rt,code,48}                      IMem-Hold(S0,S0)
	S0= CtrlASIDIn=0                                            Premise(F142)
	S0= CtrlCP0=0                                               Premise(F143)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= CtrlEPCIn=0                                             Premise(F144)
	S0= CtrlExCodeIn=0                                          Premise(F145)
	S0= CtrlIR=0                                                Premise(F146)
	S0= [IR]={0,rs,rt,code,48}                                  IR-Hold(S0,S0)
	S0= CtrlGPR=0                                               Premise(F147)
	S0= GPR[rs]=a                                               GPR-Hold(S0,S0)
	S0= GPR[rt]=b                                               GPR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F148)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F149)
	S0= [B]=b                                                   B-Hold(S0,S0)
	S0= CtrlConditionReg=0                                      Premise(F150)
	S0= [ConditionReg]=CompareS(a,b)                            ConditionReg-Hold(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F151)

POST	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= IMem[{pid,addr}]={0,rs,rt,code,48}                      IMem-Hold(S0,S0)
	S0= CP0[ASID]=pid                                           CP0-Hold(S0,S0)
	S0= [IR]={0,rs,rt,code,48}                                  IR-Hold(S0,S0)
	S0= GPR[rs]=a                                               GPR-Hold(S0,S0)
	S0= GPR[rt]=b                                               GPR-Hold(S0,S0)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= [B]=b                                                   B-Hold(S0,S0)
	S0= [ConditionReg]=CompareS(a,b)                            ConditionReg-Hold(S0,S0)

