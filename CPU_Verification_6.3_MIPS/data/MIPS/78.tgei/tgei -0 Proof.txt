
------------------------------------- Proof -------------------------------------

PRE	S0= CP0[ASID]=pid                                           Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={1,rs,8,imm}                           Premise(F2)
	S3= GPR[rs]=a                                               Premise(F3)

IF	S4= CP0.ASID=pid                                            ASID-Read(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PC.Out=>IMem.RAddr                                      Premise(F4)
	S7= IMem.RAddr=addr                                         Path(S5,S6)
	S8= CP0.ASID=>IMem.ASID                                     Premise(F5)
	S9= IMem.ASID=pid                                           Path(S4,S8)
	S10= IMem.Out={1,rs,8,imm}                                  IMem-Read(S9,S7,S2)
	S11= IMem.Out=>IR.In                                        Premise(F6)
	S12= IR.In={1,rs,8,imm}                                     Path(S10,S11)
	S13= CtrlIR=1                                               Premise(F27)
	S14= [IR]={1,rs,8,imm}                                      IR-Write(S12,S13)
	S15= CtrlGPR=0                                              Premise(F28)
	S16= GPR[rs]=a                                              GPR-Hold(S3,S15)

ID	S17= IR.Out25_21=rs                                         IR-Out(S14)
	S18= IR.Out15_0=imm                                         IR-Out(S14)
	S19= IR.Out25_21=>GPR.RReg1                                 Premise(F37)
	S20= GPR.RReg1=rs                                           Path(S17,S19)
	S21= GPR.Rdata1=a                                           GPR-Read(S20,S16)
	S22= IR.Out15_0=>IMMEXT.In                                  Premise(F39)
	S23= IMMEXT.In=imm                                          Path(S18,S22)
	S24= IMMEXT.Out={16{imm[15]},imm}                           IMMEXT(S23)
	S25= GPR.Rdata1=>A.In                                       Premise(F40)
	S26= A.In=a                                                 Path(S21,S25)
	S27= IMMEXT.Out=>B.In                                       Premise(F41)
	S28= B.In={16{imm[15]},imm}                                 Path(S24,S27)
	S29= CtrlA=1                                                Premise(F58)
	S30= [A]=a                                                  A-Write(S26,S29)
	S31= CtrlB=1                                                Premise(F59)
	S32= [B]={16{imm[15]},imm}                                  B-Write(S28,S31)

EX	S33= A.Out=a                                                A-Out(S30)
	S34= B.Out={16{imm[15]},imm}                                B-Out(S32)
	S35= A.Out=>CMPU.A                                          Premise(F71)
	S36= CMPU.A=a                                               Path(S33,S35)
	S37= B.Out=>CMPU.B                                          Premise(F72)
	S38= CMPU.B={16{imm[15]},imm}                               Path(S34,S37)
	S39= CMPU.lt=CompareS(a,{16{imm[15]},imm})                  CMPU-CMPS(S36,S38)
	S40= CMPU.lt=>ConditionReg.In                               Premise(F74)
	S41= ConditionReg.In=CompareS(a,{16{imm[15]},imm})          Path(S39,S40)
	S42= CtrlConditionReg=1                                     Premise(F90)
	S43= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Write(S41,S42)

MEM	S44= CtrlConditionReg=0                                     Premise(F120)
	S45= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S43,S44)

WB	S46= CtrlConditionReg=0                                     Premise(F149)
	S47= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S45,S46)

POST	S47= [ConditionReg]=CompareS(a,{16{imm[15]},imm})           ConditionReg-Hold(S45,S46)

