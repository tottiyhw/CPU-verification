
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,rB,1585}                     Premise(F2)
	S3= GPRegs[rS]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F43)
	S16= CtrlPCInc=0                                            Premise(F44)
	S17= PC[Out]=addr                                           PC-Hold(S1,S15,S16)
	S18= CtrlIAddrReg=1                                         Premise(F45)
	S19= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S18)
	S20= CtrlIMem=0                                             Premise(F50)
	S21= IMem[{pid,addr}]={31,rS,rA,rB,1585}                    IMem-Hold(S2,S20)
	S22= CtrlGPRegs=0                                           Premise(F53)
	S23= GPRegs[rS]=a                                           GPRegs-Hold(S3,S22)
	S24= GPRegs[rB]=b                                           GPRegs-Hold(S4,S22)
	S25= CtrlXERSO=0                                            Premise(F57)
	S26= XER[SO]=so                                             XER-SO-Hold(S5,S25)

IMMU	S27= PC.Out=addr                                            PC-Out(S17)
	S28= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S19)
	S29= PC.Out=>ICache.IEA                                     Premise(F70)
	S30= ICache.IEA=addr                                        Path(S27,S29)
	S31= IAddrReg.Out=>IMem.RAddr                               Premise(F75)
	S32= IMem.RAddr={pid,addr}                                  Path(S28,S31)
	S33= IMem.Out={31,rS,rA,rB,1585}                            IMem-Read(S32,S21)
	S34= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S32,S21)
	S35= IMem.Out=>IRMux.MemData                                Premise(F76)
	S36= IRMux.MemData={31,rS,rA,rB,1585}                       Path(S33,S35)
	S37= IRMux.Out={31,rS,rA,rB,1585}                           IRMux-Select(S36)
	S38= IRMux.Out=>IR.In                                       Premise(F80)
	S39= IR.In={31,rS,rA,rB,1585}                               Path(S37,S38)
	S40= IMem.MEM8WordOut=>ICache.WData                         Premise(F81)
	S41= ICache.WData=IMemGet8Word({pid,addr})                  Path(S34,S40)
	S42= CtrlPC=0                                               Premise(F103)
	S43= CtrlPCInc=1                                            Premise(F104)
	S44= PC[Out]=addr+4                                         PC-Inc(S17,S42,S43)
	S45= CtrlICache=1                                           Premise(F107)
	S46= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S30,S41,S45)
	S47= CtrlIR=1                                               Premise(F112)
	S48= [IR]={31,rS,rA,rB,1585}                                IR-Write(S39,S47)
	S49= CtrlGPRegs=0                                           Premise(F113)
	S50= GPRegs[rS]=a                                           GPRegs-Hold(S23,S49)
	S51= GPRegs[rB]=b                                           GPRegs-Hold(S24,S49)
	S52= CtrlXERSO=0                                            Premise(F117)
	S53= XER[SO]=so                                             XER-SO-Hold(S26,S52)

ID	S54= IR.Out6_10=rS                                          IR-Out(S48)
	S55= IR.Out16_20=rB                                         IR-Out(S48)
	S56= IR.Out6_10=>GPRegs.RReg1                               Premise(F144)
	S57= GPRegs.RReg1=rS                                        Path(S54,S56)
	S58= GPRegs.Rdata1=a                                        GPRegs-Read(S57,S50)
	S59= IR.Out16_20=>GPRegs.RReg2                              Premise(F145)
	S60= GPRegs.RReg2=rB                                        Path(S55,S59)
	S61= GPRegs.Rdata2=b                                        GPRegs-Read(S60,S51)
	S62= GPRegs.Rdata1=>A.In                                    Premise(F147)
	S63= A.In=a                                                 Path(S58,S62)
	S64= GPRegs.Rdata2=>B.In                                    Premise(F148)
	S65= B.In=b                                                 Path(S61,S64)
	S66= CtrlPC=0                                               Premise(F163)
	S67= CtrlPCInc=0                                            Premise(F164)
	S68= PC[Out]=addr+4                                         PC-Hold(S44,S66,S67)
	S69= CtrlICache=0                                           Premise(F167)
	S70= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S46,S69)
	S71= CtrlIR=0                                               Premise(F172)
	S72= [IR]={31,rS,rA,rB,1585}                                IR-Hold(S48,S71)
	S73= CtrlA=1                                                Premise(F174)
	S74= [A]=a                                                  A-Write(S63,S73)
	S75= CtrlB=1                                                Premise(F175)
	S76= [B]=b                                                  B-Write(S65,S75)
	S77= CtrlXERSO=0                                            Premise(F177)
	S78= XER[SO]=so                                             XER-SO-Hold(S53,S77)

EX	S79= A.Out=a                                                A-Out(S74)
	S80= B.Out26_31=b[26:31]                                    B-Out(S76)
	S81= XER.SOOut=so                                           XER-SO-Out(S78)
	S82= A.Out=>SU.Data                                         Premise(F209)
	S83= SU.Data=a                                              Path(S79,S82)
	S84= B.Out26_31=>SU.Shamt                                   Premise(F210)
	S85= SU.Shamt=b[26:31]                                      Path(S80,S84)
	S86= SU.Out=a>>b[26:31]                                     SU(S83,S85)
	S87= SU.CMP=Compare0(a>>b[26:31])                           SU(S83,S85)
	S88= SU.CA=Carry(a>>b[26:31])                               SU(S83,S85)
	S89= SU.Out=>ALUOut.In                                      Premise(F212)
	S90= ALUOut.In=a>>b[26:31]                                  Path(S86,S89)
	S91= SU.CMP=>DataCmb.A                                      Premise(F213)
	S92= DataCmb.A=Compare0(a>>b[26:31])                        Path(S87,S91)
	S93= XER.SOOut=>DataCmb.B                                   Premise(F214)
	S94= DataCmb.B=so                                           Path(S81,S93)
	S95= DataCmb.Out={Compare0(a>>b[26:31]),so}                 DataCmb(S92,S94)
	S96= DataCmb.Out=>DR4bit.In                                 Premise(F215)
	S97= DR4bit.In={Compare0(a>>b[26:31]),so}                   Path(S95,S96)
	S98= SU.CA=>CAReg.In                                        Premise(F216)
	S99= CAReg.In=Carry(a>>b[26:31])                            Path(S88,S98)
	S100= CtrlPC=0                                              Premise(F223)
	S101= CtrlPCInc=0                                           Premise(F224)
	S102= PC[Out]=addr+4                                        PC-Hold(S68,S100,S101)
	S103= CtrlICache=0                                          Premise(F227)
	S104= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S70,S103)
	S105= CtrlIR=0                                              Premise(F232)
	S106= [IR]={31,rS,rA,rB,1585}                               IR-Hold(S72,S105)
	S107= CtrlALUOut=1                                          Premise(F236)
	S108= [ALUOut]=a>>b[26:31]                                  ALUOut-Write(S90,S107)
	S109= CtrlDR4bit=1                                          Premise(F240)
	S110= [DR4bit]={Compare0(a>>b[26:31]),so}                   DR4bit-Write(S97,S109)
	S111= CtrlCAReg=1                                           Premise(F241)
	S112= [CAReg]=Carry(a>>b[26:31])                            CAReg-Write(S99,S111)

MEM	S113= CtrlPC=0                                              Premise(F283)
	S114= CtrlPCInc=0                                           Premise(F284)
	S115= PC[Out]=addr+4                                        PC-Hold(S102,S113,S114)
	S116= CtrlICache=0                                          Premise(F287)
	S117= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S104,S116)
	S118= CtrlIR=0                                              Premise(F292)
	S119= [IR]={31,rS,rA,rB,1585}                               IR-Hold(S106,S118)
	S120= CtrlALUOut=0                                          Premise(F296)
	S121= [ALUOut]=a>>b[26:31]                                  ALUOut-Hold(S108,S120)
	S122= CtrlDR4bit=0                                          Premise(F300)
	S123= [DR4bit]={Compare0(a>>b[26:31]),so}                   DR4bit-Hold(S110,S122)
	S124= CtrlCAReg=0                                           Premise(F301)
	S125= [CAReg]=Carry(a>>b[26:31])                            CAReg-Hold(S112,S124)

DMMU1	S126= CtrlPC=0                                              Premise(F343)
	S127= CtrlPCInc=0                                           Premise(F344)
	S128= PC[Out]=addr+4                                        PC-Hold(S115,S126,S127)
	S129= CtrlICache=0                                          Premise(F347)
	S130= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S117,S129)
	S131= CtrlIR=0                                              Premise(F352)
	S132= [IR]={31,rS,rA,rB,1585}                               IR-Hold(S119,S131)
	S133= CtrlALUOut=0                                          Premise(F356)
	S134= [ALUOut]=a>>b[26:31]                                  ALUOut-Hold(S121,S133)
	S135= CtrlDR4bit=0                                          Premise(F360)
	S136= [DR4bit]={Compare0(a>>b[26:31]),so}                   DR4bit-Hold(S123,S135)
	S137= CtrlCAReg=0                                           Premise(F361)
	S138= [CAReg]=Carry(a>>b[26:31])                            CAReg-Hold(S125,S137)

DMMU2	S139= CtrlPC=0                                              Premise(F403)
	S140= CtrlPCInc=0                                           Premise(F404)
	S141= PC[Out]=addr+4                                        PC-Hold(S128,S139,S140)
	S142= CtrlICache=0                                          Premise(F407)
	S143= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S130,S142)
	S144= CtrlIR=0                                              Premise(F412)
	S145= [IR]={31,rS,rA,rB,1585}                               IR-Hold(S132,S144)
	S146= CtrlALUOut=0                                          Premise(F416)
	S147= [ALUOut]=a>>b[26:31]                                  ALUOut-Hold(S134,S146)
	S148= CtrlDR4bit=0                                          Premise(F420)
	S149= [DR4bit]={Compare0(a>>b[26:31]),so}                   DR4bit-Hold(S136,S148)
	S150= CtrlCAReg=0                                           Premise(F421)
	S151= [CAReg]=Carry(a>>b[26:31])                            CAReg-Hold(S138,S150)

WB	S152= IR.Out11_15=rA                                        IR-Out(S145)
	S153= ALUOut.Out=a>>b[26:31]                                ALUOut-Out(S147)
	S154= DR4bit.Out={Compare0(a>>b[26:31]),so}                 DR4bit-Out(S149)
	S155= CAReg.Out=Carry(a>>b[26:31])                          CAReg-Out(S151)
	S156= IR.Out11_15=>GPRegs.WReg                              Premise(F457)
	S157= GPRegs.WReg=rA                                        Path(S152,S156)
	S158= ALUOut.Out=>GPRegs.WData                              Premise(F458)
	S159= GPRegs.WData=a>>b[26:31]                              Path(S153,S158)
	S160= CAReg.Out=>XER.CAIn                                   Premise(F459)
	S161= XER.CAIn=Carry(a>>b[26:31])                           Path(S155,S160)
	S162= DR4bit.Out=>CRRegs.CR0In                              Premise(F460)
	S163= CRRegs.CR0In={Compare0(a>>b[26:31]),so}               Path(S154,S162)
	S164= CtrlPC=0                                              Premise(F463)
	S165= CtrlPCInc=0                                           Premise(F464)
	S166= PC[Out]=addr+4                                        PC-Hold(S141,S164,S165)
	S167= CtrlICache=0                                          Premise(F467)
	S168= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S143,S167)
	S169= CtrlGPRegs=1                                          Premise(F473)
	S170= GPRegs[rA]=a>>b[26:31]                                GPRegs-Write(S157,S159,S169)
	S171= CtrlXERCA=1                                           Premise(F479)
	S172= XER[CA]=Carry(a>>b[26:31])                            XER-CA-Write(S161,S171)
	S173= CtrlCRRegsCR0=1                                       Premise(F483)
	S174= CRRegs[CR0]={Compare0(a>>b[26:31]),so}                CRRegs-CR0-Write(S163,S173)

POST	S166= PC[Out]=addr+4                                        PC-Hold(S141,S164,S165)
	S168= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S143,S167)
	S170= GPRegs[rA]=a>>b[26:31]                                GPRegs-Write(S157,S159,S169)
	S172= XER[CA]=Carry(a>>b[26:31])                            XER-CA-Write(S161,S171)
	S174= CRRegs[CR0]={Compare0(a>>b[26:31]),so}                CRRegs-CR0-Write(S163,S173)

