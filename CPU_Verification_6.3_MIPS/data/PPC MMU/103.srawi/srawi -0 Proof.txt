
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,SH,1648}                     Premise(F2)
	S3= ICache[addr]={31,rS,rA,SH,1648}                         Premise(F3)
	S4= GPRegs[rS]=a                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={31,rS,rA,SH,1648}                          ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={31,rS,rA,SH,1648}                        Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F37)
	S20= CtrlPCInc=0                                            Premise(F38)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F39)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F42)
	S25= [ICacheReg]={31,rS,rA,SH,1648}                         ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F44)
	S27= IMem[{pid,addr}]={31,rS,rA,SH,1648}                    IMem-Hold(S2,S26)
	S28= CtrlGPRegs=0                                           Premise(F47)
	S29= GPRegs[rS]=a                                           GPRegs-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={31,rS,rA,SH,1648}                       ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F64)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={31,rS,rA,SH,1648}                            IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F65)
	S36= IRMux.MemData={31,rS,rA,SH,1648}                       Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F66)
	S38= IRMux.CacheData={31,rS,rA,SH,1648}                     Path(S31,S37)
	S39= IRMux.Out={31,rS,rA,SH,1648}                           IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F69)
	S41= IR.In={31,rS,rA,SH,1648}                               Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F87)
	S43= CtrlPCInc=1                                            Premise(F88)
	S44= PC[Out]=addr+4                                         PC-Inc(S21,S42,S43)
	S45= CtrlIR=1                                               Premise(F96)
	S46= [IR]={31,rS,rA,SH,1648}                                IR-Write(S41,S45)
	S47= CtrlGPRegs=0                                           Premise(F97)
	S48= GPRegs[rS]=a                                           GPRegs-Hold(S29,S47)

ID	S49= IR.Out6_10=rS                                          IR-Out(S46)
	S50= IR.Out16_20=SH                                         IR-Out(S46)
	S51= IR.Out6_10=>GPRegs.RReg1                               Premise(F123)
	S52= GPRegs.RReg1=rS                                        Path(S49,S51)
	S53= GPRegs.Rdata1=a                                        GPRegs-Read(S52,S48)
	S54= GPRegs.Rdata1=>A.In                                    Premise(F125)
	S55= A.In=a                                                 Path(S53,S54)
	S56= IR.Out16_20=>ShamtReg.In                               Premise(F126)
	S57= ShamtReg.In=SH                                         Path(S50,S56)
	S58= CtrlPC=0                                               Premise(F137)
	S59= CtrlPCInc=0                                            Premise(F138)
	S60= PC[Out]=addr+4                                         PC-Hold(S44,S58,S59)
	S61= CtrlIR=0                                               Premise(F146)
	S62= [IR]={31,rS,rA,SH,1648}                                IR-Hold(S46,S61)
	S63= CtrlA=1                                                Premise(F148)
	S64= [A]=a                                                  A-Write(S55,S63)
	S65= CtrlShamtReg=1                                         Premise(F149)
	S66= [ShamtReg]=SH                                          ShamtReg-Write(S57,S65)

EX	S67= A.Out=a                                                A-Out(S64)
	S68= ShamtReg.Out=SH                                        ShamtReg-Out(S66)
	S69= A.Out=>SU.Data                                         Premise(F177)
	S70= SU.Data=a                                              Path(S67,S69)
	S71= ShamtReg.Out=>SU.Shamt                                 Premise(F178)
	S72= SU.Shamt=SH                                            Path(S68,S71)
	S73= SU.Out=a>>SH                                           SU(S70,S72)
	S74= SU.CA=Carry(a>>SH)                                     SU(S70,S72)
	S75= SU.Out=>ALUOut.In                                      Premise(F180)
	S76= ALUOut.In=a>>SH                                        Path(S73,S75)
	S77= SU.CA=>CAReg.In                                        Premise(F181)
	S78= CAReg.In=Carry(a>>SH)                                  Path(S74,S77)
	S79= CtrlPC=0                                               Premise(F187)
	S80= CtrlPCInc=0                                            Premise(F188)
	S81= PC[Out]=addr+4                                         PC-Hold(S60,S79,S80)
	S82= CtrlIR=0                                               Premise(F196)
	S83= [IR]={31,rS,rA,SH,1648}                                IR-Hold(S62,S82)
	S84= CtrlALUOut=1                                           Premise(F200)
	S85= [ALUOut]=a>>SH                                         ALUOut-Write(S76,S84)
	S86= CtrlCAReg=1                                            Premise(F201)
	S87= [CAReg]=Carry(a>>SH)                                   CAReg-Write(S78,S86)

MEM	S88= CtrlPC=0                                               Premise(F237)
	S89= CtrlPCInc=0                                            Premise(F238)
	S90= PC[Out]=addr+4                                         PC-Hold(S81,S88,S89)
	S91= CtrlIR=0                                               Premise(F246)
	S92= [IR]={31,rS,rA,SH,1648}                                IR-Hold(S83,S91)
	S93= CtrlALUOut=0                                           Premise(F250)
	S94= [ALUOut]=a>>SH                                         ALUOut-Hold(S85,S93)
	S95= CtrlCAReg=0                                            Premise(F251)
	S96= [CAReg]=Carry(a>>SH)                                   CAReg-Hold(S87,S95)

DMMU1	S97= CtrlPC=0                                               Premise(F287)
	S98= CtrlPCInc=0                                            Premise(F288)
	S99= PC[Out]=addr+4                                         PC-Hold(S90,S97,S98)
	S100= CtrlIR=0                                              Premise(F296)
	S101= [IR]={31,rS,rA,SH,1648}                               IR-Hold(S92,S100)
	S102= CtrlALUOut=0                                          Premise(F300)
	S103= [ALUOut]=a>>SH                                        ALUOut-Hold(S94,S102)
	S104= CtrlCAReg=0                                           Premise(F301)
	S105= [CAReg]=Carry(a>>SH)                                  CAReg-Hold(S96,S104)

DMMU2	S106= CtrlPC=0                                              Premise(F337)
	S107= CtrlPCInc=0                                           Premise(F338)
	S108= PC[Out]=addr+4                                        PC-Hold(S99,S106,S107)
	S109= CtrlIR=0                                              Premise(F346)
	S110= [IR]={31,rS,rA,SH,1648}                               IR-Hold(S101,S109)
	S111= CtrlALUOut=0                                          Premise(F350)
	S112= [ALUOut]=a>>SH                                        ALUOut-Hold(S103,S111)
	S113= CtrlCAReg=0                                           Premise(F351)
	S114= [CAReg]=Carry(a>>SH)                                  CAReg-Hold(S105,S113)

WB	S115= IR.Out11_15=rA                                        IR-Out(S110)
	S116= ALUOut.Out=a>>SH                                      ALUOut-Out(S112)
	S117= CAReg.Out=Carry(a>>SH)                                CAReg-Out(S114)
	S118= IR.Out11_15=>GPRegs.WReg                              Premise(F382)
	S119= GPRegs.WReg=rA                                        Path(S115,S118)
	S120= ALUOut.Out=>GPRegs.WData                              Premise(F383)
	S121= GPRegs.WData=a>>SH                                    Path(S116,S120)
	S122= CAReg.Out=>XER.CAIn                                   Premise(F384)
	S123= XER.CAIn=Carry(a>>SH)                                 Path(S117,S122)
	S124= CtrlPC=0                                              Premise(F387)
	S125= CtrlPCInc=0                                           Premise(F388)
	S126= PC[Out]=addr+4                                        PC-Hold(S108,S124,S125)
	S127= CtrlGPRegs=1                                          Premise(F397)
	S128= GPRegs[rA]=a>>SH                                      GPRegs-Write(S119,S121,S127)
	S129= CtrlXERCA=1                                           Premise(F404)
	S130= XER[CA]=Carry(a>>SH)                                  XER-CA-Write(S123,S129)

POST	S126= PC[Out]=addr+4                                        PC-Hold(S108,S124,S125)
	S128= GPRegs[rA]=a>>SH                                      GPRegs-Write(S119,S121,S127)
	S130= XER[CA]=Carry(a>>SH)                                  XER-CA-Write(S123,S129)

