
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,SH,1649}                     Premise(F2)
	S3= ICache[addr]={31,rS,rA,SH,1649}                         Premise(F3)
	S4= GPRegs[rS]=a                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F10)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={31,rS,rA,SH,1649}                          ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F11)
	S19= ICacheReg.In={31,rS,rA,SH,1649}                        Path(S17,S18)
	S20= CtrlPC=0                                               Premise(F42)
	S21= CtrlPCInc=0                                            Premise(F43)
	S22= PC[Out]=addr                                           PC-Hold(S1,S20,S21)
	S23= CtrlIAddrReg=1                                         Premise(F44)
	S24= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S23)
	S25= CtrlICacheReg=1                                        Premise(F47)
	S26= [ICacheReg]={31,rS,rA,SH,1649}                         ICacheReg-Write(S19,S25)
	S27= CtrlIMem=0                                             Premise(F49)
	S28= IMem[{pid,addr}]={31,rS,rA,SH,1649}                    IMem-Hold(S2,S27)
	S29= CtrlGPRegs=0                                           Premise(F52)
	S30= GPRegs[rS]=a                                           GPRegs-Hold(S4,S29)
	S31= CtrlXERSO=0                                            Premise(F56)
	S32= XER[SO]=so                                             XER-SO-Hold(S5,S31)

IMMU	S33= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S24)
	S34= ICacheReg.Out={31,rS,rA,SH,1649}                       ICacheReg-Out(S26)
	S35= IAddrReg.Out=>IMem.RAddr                               Premise(F74)
	S36= IMem.RAddr={pid,addr}                                  Path(S33,S35)
	S37= IMem.Out={31,rS,rA,SH,1649}                            IMem-Read(S36,S28)
	S38= IMem.Out=>IRMux.MemData                                Premise(F75)
	S39= IRMux.MemData={31,rS,rA,SH,1649}                       Path(S37,S38)
	S40= ICacheReg.Out=>IRMux.CacheData                         Premise(F76)
	S41= IRMux.CacheData={31,rS,rA,SH,1649}                     Path(S34,S40)
	S42= IRMux.Out={31,rS,rA,SH,1649}                           IRMux-Select(S39,S41)
	S43= IRMux.Out=>IR.In                                       Premise(F79)
	S44= IR.In={31,rS,rA,SH,1649}                               Path(S42,S43)
	S45= CtrlPC=0                                               Premise(F101)
	S46= CtrlPCInc=1                                            Premise(F102)
	S47= PC[Out]=addr+4                                         PC-Inc(S22,S45,S46)
	S48= CtrlIR=1                                               Premise(F110)
	S49= [IR]={31,rS,rA,SH,1649}                                IR-Write(S44,S48)
	S50= CtrlGPRegs=0                                           Premise(F111)
	S51= GPRegs[rS]=a                                           GPRegs-Hold(S30,S50)
	S52= CtrlXERSO=0                                            Premise(F115)
	S53= XER[SO]=so                                             XER-SO-Hold(S32,S52)

ID	S54= IR.Out6_10=rS                                          IR-Out(S49)
	S55= IR.Out16_20=SH                                         IR-Out(S49)
	S56= IR.Out6_10=>GPRegs.RReg1                               Premise(F142)
	S57= GPRegs.RReg1=rS                                        Path(S54,S56)
	S58= GPRegs.Rdata1=a                                        GPRegs-Read(S57,S51)
	S59= GPRegs.Rdata1=>A.In                                    Premise(F144)
	S60= A.In=a                                                 Path(S58,S59)
	S61= IR.Out16_20=>ShamtReg.In                               Premise(F145)
	S62= ShamtReg.In=SH                                         Path(S55,S61)
	S63= CtrlPC=0                                               Premise(F160)
	S64= CtrlPCInc=0                                            Premise(F161)
	S65= PC[Out]=addr+4                                         PC-Hold(S47,S63,S64)
	S66= CtrlIR=0                                               Premise(F169)
	S67= [IR]={31,rS,rA,SH,1649}                                IR-Hold(S49,S66)
	S68= CtrlA=1                                                Premise(F171)
	S69= [A]=a                                                  A-Write(S60,S68)
	S70= CtrlShamtReg=1                                         Premise(F172)
	S71= [ShamtReg]=SH                                          ShamtReg-Write(S62,S70)
	S72= CtrlXERSO=0                                            Premise(F174)
	S73= XER[SO]=so                                             XER-SO-Hold(S53,S72)

EX	S74= A.Out=a                                                A-Out(S69)
	S75= ShamtReg.Out=SH                                        ShamtReg-Out(S71)
	S76= XER.SOOut=so                                           XER-SO-Out(S73)
	S77= A.Out=>SU.Data                                         Premise(F205)
	S78= SU.Data=a                                              Path(S74,S77)
	S79= ShamtReg.Out=>SU.Shamt                                 Premise(F206)
	S80= SU.Shamt=SH                                            Path(S75,S79)
	S81= SU.Out=a>>SH                                           SU(S78,S80)
	S82= SU.CMP=Compare0(a>>SH)                                 SU(S78,S80)
	S83= SU.CA=Carry(a>>SH)                                     SU(S78,S80)
	S84= SU.Out=>ALUOut.In                                      Premise(F208)
	S85= ALUOut.In=a>>SH                                        Path(S81,S84)
	S86= SU.CMP=>DataCmb.A                                      Premise(F209)
	S87= DataCmb.A=Compare0(a>>SH)                              Path(S82,S86)
	S88= XER.SOOut=>DataCmb.B                                   Premise(F210)
	S89= DataCmb.B=so                                           Path(S76,S88)
	S90= DataCmb.Out={Compare0(a>>SH),so}                       DataCmb(S87,S89)
	S91= DataCmb.Out=>DR4bit.In                                 Premise(F211)
	S92= DR4bit.In={Compare0(a>>SH),so}                         Path(S90,S91)
	S93= SU.CA=>CAReg.In                                        Premise(F212)
	S94= CAReg.In=Carry(a>>SH)                                  Path(S83,S93)
	S95= CtrlPC=0                                               Premise(F219)
	S96= CtrlPCInc=0                                            Premise(F220)
	S97= PC[Out]=addr+4                                         PC-Hold(S65,S95,S96)
	S98= CtrlIR=0                                               Premise(F228)
	S99= [IR]={31,rS,rA,SH,1649}                                IR-Hold(S67,S98)
	S100= CtrlALUOut=1                                          Premise(F232)
	S101= [ALUOut]=a>>SH                                        ALUOut-Write(S85,S100)
	S102= CtrlDR4bit=1                                          Premise(F236)
	S103= [DR4bit]={Compare0(a>>SH),so}                         DR4bit-Write(S92,S102)
	S104= CtrlCAReg=1                                           Premise(F237)
	S105= [CAReg]=Carry(a>>SH)                                  CAReg-Write(S94,S104)

MEM	S106= CtrlPC=0                                              Premise(F278)
	S107= CtrlPCInc=0                                           Premise(F279)
	S108= PC[Out]=addr+4                                        PC-Hold(S97,S106,S107)
	S109= CtrlIR=0                                              Premise(F287)
	S110= [IR]={31,rS,rA,SH,1649}                               IR-Hold(S99,S109)
	S111= CtrlALUOut=0                                          Premise(F291)
	S112= [ALUOut]=a>>SH                                        ALUOut-Hold(S101,S111)
	S113= CtrlDR4bit=0                                          Premise(F295)
	S114= [DR4bit]={Compare0(a>>SH),so}                         DR4bit-Hold(S103,S113)
	S115= CtrlCAReg=0                                           Premise(F296)
	S116= [CAReg]=Carry(a>>SH)                                  CAReg-Hold(S105,S115)

DMMU1	S117= CtrlPC=0                                              Premise(F337)
	S118= CtrlPCInc=0                                           Premise(F338)
	S119= PC[Out]=addr+4                                        PC-Hold(S108,S117,S118)
	S120= CtrlIR=0                                              Premise(F346)
	S121= [IR]={31,rS,rA,SH,1649}                               IR-Hold(S110,S120)
	S122= CtrlALUOut=0                                          Premise(F350)
	S123= [ALUOut]=a>>SH                                        ALUOut-Hold(S112,S122)
	S124= CtrlDR4bit=0                                          Premise(F354)
	S125= [DR4bit]={Compare0(a>>SH),so}                         DR4bit-Hold(S114,S124)
	S126= CtrlCAReg=0                                           Premise(F355)
	S127= [CAReg]=Carry(a>>SH)                                  CAReg-Hold(S116,S126)

DMMU2	S128= CtrlPC=0                                              Premise(F396)
	S129= CtrlPCInc=0                                           Premise(F397)
	S130= PC[Out]=addr+4                                        PC-Hold(S119,S128,S129)
	S131= CtrlIR=0                                              Premise(F405)
	S132= [IR]={31,rS,rA,SH,1649}                               IR-Hold(S121,S131)
	S133= CtrlALUOut=0                                          Premise(F409)
	S134= [ALUOut]=a>>SH                                        ALUOut-Hold(S123,S133)
	S135= CtrlDR4bit=0                                          Premise(F413)
	S136= [DR4bit]={Compare0(a>>SH),so}                         DR4bit-Hold(S125,S135)
	S137= CtrlCAReg=0                                           Premise(F414)
	S138= [CAReg]=Carry(a>>SH)                                  CAReg-Hold(S127,S137)

WB	S139= IR.Out11_15=rA                                        IR-Out(S132)
	S140= ALUOut.Out=a>>SH                                      ALUOut-Out(S134)
	S141= DR4bit.Out={Compare0(a>>SH),so}                       DR4bit-Out(S136)
	S142= CAReg.Out=Carry(a>>SH)                                CAReg-Out(S138)
	S143= IR.Out11_15=>GPRegs.WReg                              Premise(F449)
	S144= GPRegs.WReg=rA                                        Path(S139,S143)
	S145= ALUOut.Out=>GPRegs.WData                              Premise(F450)
	S146= GPRegs.WData=a>>SH                                    Path(S140,S145)
	S147= CAReg.Out=>XER.CAIn                                   Premise(F451)
	S148= XER.CAIn=Carry(a>>SH)                                 Path(S142,S147)
	S149= DR4bit.Out=>CRRegs.CR0In                              Premise(F452)
	S150= CRRegs.CR0In={Compare0(a>>SH),so}                     Path(S141,S149)
	S151= CtrlPC=0                                              Premise(F455)
	S152= CtrlPCInc=0                                           Premise(F456)
	S153= PC[Out]=addr+4                                        PC-Hold(S130,S151,S152)
	S154= CtrlGPRegs=1                                          Premise(F465)
	S155= GPRegs[rA]=a>>SH                                      GPRegs-Write(S144,S146,S154)
	S156= CtrlXERCA=1                                           Premise(F471)
	S157= XER[CA]=Carry(a>>SH)                                  XER-CA-Write(S148,S156)
	S158= CtrlCRRegsCR0=1                                       Premise(F475)
	S159= CRRegs[CR0]={Compare0(a>>SH),so}                      CRRegs-CR0-Write(S150,S158)

POST	S153= PC[Out]=addr+4                                        PC-Hold(S130,S151,S152)
	S155= GPRegs[rA]=a>>SH                                      GPRegs-Write(S144,S146,S154)
	S157= XER[CA]=Carry(a>>SH)                                  XER-CA-Write(S148,S156)
	S159= CRRegs[CR0]={Compare0(a>>SH),so}                      CRRegs-CR0-Write(S150,S158)

