
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,SH,1649}                     Premise(F2)
	S3= GPRegs[rS]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F41)
	S15= CtrlPCInc=0                                            Premise(F42)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F43)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F48)
	S20= IMem[{pid,addr}]={31,rS,rA,SH,1649}                    IMem-Hold(S2,S19)
	S21= CtrlGPRegs=0                                           Premise(F51)
	S22= GPRegs[rS]=a                                           GPRegs-Hold(S3,S21)
	S23= CtrlXERSO=0                                            Premise(F55)
	S24= XER[SO]=so                                             XER-SO-Hold(S4,S23)

IMMU	S25= PC.Out=addr                                            PC-Out(S16)
	S26= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S27= PC.Out=>ICache.IEA                                     Premise(F68)
	S28= ICache.IEA=addr                                        Path(S25,S27)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F73)
	S30= IMem.RAddr={pid,addr}                                  Path(S26,S29)
	S31= IMem.Out={31,rS,rA,SH,1649}                            IMem-Read(S30,S20)
	S32= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S30,S20)
	S33= IMem.Out=>IRMux.MemData                                Premise(F74)
	S34= IRMux.MemData={31,rS,rA,SH,1649}                       Path(S31,S33)
	S35= IRMux.Out={31,rS,rA,SH,1649}                           IRMux-Select(S34)
	S36= IRMux.Out=>IR.In                                       Premise(F78)
	S37= IR.In={31,rS,rA,SH,1649}                               Path(S35,S36)
	S38= IMem.MEM8WordOut=>ICache.WData                         Premise(F79)
	S39= ICache.WData=IMemGet8Word({pid,addr})                  Path(S32,S38)
	S40= CtrlPC=0                                               Premise(F100)
	S41= CtrlPCInc=1                                            Premise(F101)
	S42= PC[Out]=addr+4                                         PC-Inc(S16,S40,S41)
	S43= CtrlICache=1                                           Premise(F104)
	S44= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S28,S39,S43)
	S45= CtrlIR=1                                               Premise(F109)
	S46= [IR]={31,rS,rA,SH,1649}                                IR-Write(S37,S45)
	S47= CtrlGPRegs=0                                           Premise(F110)
	S48= GPRegs[rS]=a                                           GPRegs-Hold(S22,S47)
	S49= CtrlXERSO=0                                            Premise(F114)
	S50= XER[SO]=so                                             XER-SO-Hold(S24,S49)

ID	S51= IR.Out6_10=rS                                          IR-Out(S46)
	S52= IR.Out16_20=SH                                         IR-Out(S46)
	S53= IR.Out6_10=>GPRegs.RReg1                               Premise(F141)
	S54= GPRegs.RReg1=rS                                        Path(S51,S53)
	S55= GPRegs.Rdata1=a                                        GPRegs-Read(S54,S48)
	S56= GPRegs.Rdata1=>A.In                                    Premise(F143)
	S57= A.In=a                                                 Path(S55,S56)
	S58= IR.Out16_20=>ShamtReg.In                               Premise(F144)
	S59= ShamtReg.In=SH                                         Path(S52,S58)
	S60= CtrlPC=0                                               Premise(F159)
	S61= CtrlPCInc=0                                            Premise(F160)
	S62= PC[Out]=addr+4                                         PC-Hold(S42,S60,S61)
	S63= CtrlICache=0                                           Premise(F163)
	S64= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S44,S63)
	S65= CtrlIR=0                                               Premise(F168)
	S66= [IR]={31,rS,rA,SH,1649}                                IR-Hold(S46,S65)
	S67= CtrlA=1                                                Premise(F170)
	S68= [A]=a                                                  A-Write(S57,S67)
	S69= CtrlShamtReg=1                                         Premise(F171)
	S70= [ShamtReg]=SH                                          ShamtReg-Write(S59,S69)
	S71= CtrlXERSO=0                                            Premise(F173)
	S72= XER[SO]=so                                             XER-SO-Hold(S50,S71)

EX	S73= A.Out=a                                                A-Out(S68)
	S74= ShamtReg.Out=SH                                        ShamtReg-Out(S70)
	S75= XER.SOOut=so                                           XER-SO-Out(S72)
	S76= A.Out=>SU.Data                                         Premise(F204)
	S77= SU.Data=a                                              Path(S73,S76)
	S78= ShamtReg.Out=>SU.Shamt                                 Premise(F205)
	S79= SU.Shamt=SH                                            Path(S74,S78)
	S80= SU.Out=a>>SH                                           SU(S77,S79)
	S81= SU.CMP=Compare0(a>>SH)                                 SU(S77,S79)
	S82= SU.CA=Carry(a>>SH)                                     SU(S77,S79)
	S83= SU.Out=>ALUOut.In                                      Premise(F207)
	S84= ALUOut.In=a>>SH                                        Path(S80,S83)
	S85= SU.CMP=>DataCmb.A                                      Premise(F208)
	S86= DataCmb.A=Compare0(a>>SH)                              Path(S81,S85)
	S87= XER.SOOut=>DataCmb.B                                   Premise(F209)
	S88= DataCmb.B=so                                           Path(S75,S87)
	S89= DataCmb.Out={Compare0(a>>SH),so}                       DataCmb(S86,S88)
	S90= DataCmb.Out=>DR4bit.In                                 Premise(F210)
	S91= DR4bit.In={Compare0(a>>SH),so}                         Path(S89,S90)
	S92= SU.CA=>CAReg.In                                        Premise(F211)
	S93= CAReg.In=Carry(a>>SH)                                  Path(S82,S92)
	S94= CtrlPC=0                                               Premise(F218)
	S95= CtrlPCInc=0                                            Premise(F219)
	S96= PC[Out]=addr+4                                         PC-Hold(S62,S94,S95)
	S97= CtrlICache=0                                           Premise(F222)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S64,S97)
	S99= CtrlIR=0                                               Premise(F227)
	S100= [IR]={31,rS,rA,SH,1649}                               IR-Hold(S66,S99)
	S101= CtrlALUOut=1                                          Premise(F231)
	S102= [ALUOut]=a>>SH                                        ALUOut-Write(S84,S101)
	S103= CtrlDR4bit=1                                          Premise(F235)
	S104= [DR4bit]={Compare0(a>>SH),so}                         DR4bit-Write(S91,S103)
	S105= CtrlCAReg=1                                           Premise(F236)
	S106= [CAReg]=Carry(a>>SH)                                  CAReg-Write(S93,S105)

MEM	S107= CtrlPC=0                                              Premise(F277)
	S108= CtrlPCInc=0                                           Premise(F278)
	S109= PC[Out]=addr+4                                        PC-Hold(S96,S107,S108)
	S110= CtrlICache=0                                          Premise(F281)
	S111= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S110)
	S112= CtrlIR=0                                              Premise(F286)
	S113= [IR]={31,rS,rA,SH,1649}                               IR-Hold(S100,S112)
	S114= CtrlALUOut=0                                          Premise(F290)
	S115= [ALUOut]=a>>SH                                        ALUOut-Hold(S102,S114)
	S116= CtrlDR4bit=0                                          Premise(F294)
	S117= [DR4bit]={Compare0(a>>SH),so}                         DR4bit-Hold(S104,S116)
	S118= CtrlCAReg=0                                           Premise(F295)
	S119= [CAReg]=Carry(a>>SH)                                  CAReg-Hold(S106,S118)

DMMU1	S120= CtrlPC=0                                              Premise(F336)
	S121= CtrlPCInc=0                                           Premise(F337)
	S122= PC[Out]=addr+4                                        PC-Hold(S109,S120,S121)
	S123= CtrlICache=0                                          Premise(F340)
	S124= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S111,S123)
	S125= CtrlIR=0                                              Premise(F345)
	S126= [IR]={31,rS,rA,SH,1649}                               IR-Hold(S113,S125)
	S127= CtrlALUOut=0                                          Premise(F349)
	S128= [ALUOut]=a>>SH                                        ALUOut-Hold(S115,S127)
	S129= CtrlDR4bit=0                                          Premise(F353)
	S130= [DR4bit]={Compare0(a>>SH),so}                         DR4bit-Hold(S117,S129)
	S131= CtrlCAReg=0                                           Premise(F354)
	S132= [CAReg]=Carry(a>>SH)                                  CAReg-Hold(S119,S131)

DMMU2	S133= CtrlPC=0                                              Premise(F395)
	S134= CtrlPCInc=0                                           Premise(F396)
	S135= PC[Out]=addr+4                                        PC-Hold(S122,S133,S134)
	S136= CtrlICache=0                                          Premise(F399)
	S137= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S124,S136)
	S138= CtrlIR=0                                              Premise(F404)
	S139= [IR]={31,rS,rA,SH,1649}                               IR-Hold(S126,S138)
	S140= CtrlALUOut=0                                          Premise(F408)
	S141= [ALUOut]=a>>SH                                        ALUOut-Hold(S128,S140)
	S142= CtrlDR4bit=0                                          Premise(F412)
	S143= [DR4bit]={Compare0(a>>SH),so}                         DR4bit-Hold(S130,S142)
	S144= CtrlCAReg=0                                           Premise(F413)
	S145= [CAReg]=Carry(a>>SH)                                  CAReg-Hold(S132,S144)

WB	S146= IR.Out11_15=rA                                        IR-Out(S139)
	S147= ALUOut.Out=a>>SH                                      ALUOut-Out(S141)
	S148= DR4bit.Out={Compare0(a>>SH),so}                       DR4bit-Out(S143)
	S149= CAReg.Out=Carry(a>>SH)                                CAReg-Out(S145)
	S150= IR.Out11_15=>GPRegs.WReg                              Premise(F448)
	S151= GPRegs.WReg=rA                                        Path(S146,S150)
	S152= ALUOut.Out=>GPRegs.WData                              Premise(F449)
	S153= GPRegs.WData=a>>SH                                    Path(S147,S152)
	S154= CAReg.Out=>XER.CAIn                                   Premise(F450)
	S155= XER.CAIn=Carry(a>>SH)                                 Path(S149,S154)
	S156= DR4bit.Out=>CRRegs.CR0In                              Premise(F451)
	S157= CRRegs.CR0In={Compare0(a>>SH),so}                     Path(S148,S156)
	S158= CtrlPC=0                                              Premise(F454)
	S159= CtrlPCInc=0                                           Premise(F455)
	S160= PC[Out]=addr+4                                        PC-Hold(S135,S158,S159)
	S161= CtrlICache=0                                          Premise(F458)
	S162= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S137,S161)
	S163= CtrlGPRegs=1                                          Premise(F464)
	S164= GPRegs[rA]=a>>SH                                      GPRegs-Write(S151,S153,S163)
	S165= CtrlXERCA=1                                           Premise(F470)
	S166= XER[CA]=Carry(a>>SH)                                  XER-CA-Write(S155,S165)
	S167= CtrlCRRegsCR0=1                                       Premise(F474)
	S168= CRRegs[CR0]={Compare0(a>>SH),so}                      CRRegs-CR0-Write(S157,S167)

POST	S160= PC[Out]=addr+4                                        PC-Hold(S135,S158,S159)
	S162= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S137,S161)
	S164= GPRegs[rA]=a>>SH                                      GPRegs-Write(S151,S153,S163)
	S166= XER[CA]=Carry(a>>SH)                                  XER-CA-Write(S155,S165)
	S168= CRRegs[CR0]={Compare0(a>>SH),so}                      CRRegs-CR0-Write(S157,S167)

