
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={34,rT,rA,d}                           Premise(F2)

IF	S3= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F8)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F57)
	S13= CtrlPCInc=0                                            Premise(F58)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F59)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F64)
	S18= IMem[{pid,addr}]={34,rT,rA,d}                          IMem-Hold(S2,S17)

IMMU	S19= PC.Out=addr                                            PC-Out(S14)
	S20= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S21= PC.Out=>ICache.IEA                                     Premise(F84)
	S22= ICache.IEA=addr                                        Path(S19,S21)
	S23= IAddrReg.Out=>IMem.RAddr                               Premise(F89)
	S24= IMem.RAddr={pid,addr}                                  Path(S20,S23)
	S25= IMem.Out={34,rT,rA,d}                                  IMem-Read(S24,S18)
	S26= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S24,S18)
	S27= IMem.Out=>IRMux.MemData                                Premise(F90)
	S28= IRMux.MemData={34,rT,rA,d}                             Path(S25,S27)
	S29= IRMux.Out={34,rT,rA,d}                                 IRMux-Select(S28)
	S30= IRMux.Out=>IR.In                                       Premise(F94)
	S31= IR.In={34,rT,rA,d}                                     Path(S29,S30)
	S32= IMem.MEM8WordOut=>ICache.WData                         Premise(F95)
	S33= ICache.WData=IMemGet8Word({pid,addr})                  Path(S26,S32)
	S34= CtrlPC=0                                               Premise(F130)
	S35= CtrlPCInc=1                                            Premise(F131)
	S36= PC[Out]=addr+4                                         PC-Inc(S14,S34,S35)
	S37= CtrlICache=1                                           Premise(F134)
	S38= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S22,S33,S37)
	S39= CtrlIR=1                                               Premise(F139)
	S40= [IR]={34,rT,rA,d}                                      IR-Write(S31,S39)

ID	S41= CtrlPC=0                                               Premise(F203)
	S42= CtrlPCInc=0                                            Premise(F204)
	S43= PC[Out]=addr+4                                         PC-Hold(S36,S41,S42)
	S44= CtrlICache=0                                           Premise(F207)
	S45= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S38,S44)
	S46= CtrlIR=0                                               Premise(F212)
	S47= [IR]={34,rT,rA,d}                                      IR-Hold(S40,S46)

EX	S48= CtrlPC=0                                               Premise(F276)
	S49= CtrlPCInc=0                                            Premise(F277)
	S50= PC[Out]=addr+4                                         PC-Hold(S43,S48,S49)
	S51= CtrlICache=0                                           Premise(F280)
	S52= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S45,S51)
	S53= CtrlIR=0                                               Premise(F285)
	S54= [IR]={34,rT,rA,d}                                      IR-Hold(S47,S53)

MEM	S55= CtrlPC=0                                               Premise(F349)
	S56= CtrlPCInc=0                                            Premise(F350)
	S57= PC[Out]=addr+4                                         PC-Hold(S50,S55,S56)
	S58= CtrlICache=0                                           Premise(F353)
	S59= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S52,S58)
	S60= CtrlIR=0                                               Premise(F358)
	S61= [IR]={34,rT,rA,d}                                      IR-Hold(S54,S60)

DMMU1	S62= CtrlPC=0                                               Premise(F422)
	S63= CtrlPCInc=0                                            Premise(F423)
	S64= PC[Out]=addr+4                                         PC-Hold(S57,S62,S63)
	S65= CtrlICache=0                                           Premise(F426)
	S66= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S59,S65)
	S67= CtrlIR=0                                               Premise(F431)
	S68= [IR]={34,rT,rA,d}                                      IR-Hold(S61,S67)

DMMU2	S69= CtrlPC=0                                               Premise(F495)
	S70= CtrlPCInc=0                                            Premise(F496)
	S71= PC[Out]=addr+4                                         PC-Hold(S64,S69,S70)
	S72= CtrlICache=0                                           Premise(F499)
	S73= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S66,S72)
	S74= CtrlIR=0                                               Premise(F504)
	S75= [IR]={34,rT,rA,d}                                      IR-Hold(S68,S74)

WB	S76= IR.Out6_10=rT                                          IR-Out(S75)
	S77= MemDataSel.Out={24'b0,B4}                              MemDataSel()
	S78= MemDataSel.Out=>GPRegs.WData                           Premise(F564)
	S79= GPRegs.WData={24'b0,B4}                                Path(S77,S78)
	S80= IR.Out6_10=>GPRegs.WReg                                Premise(F565)
	S81= GPRegs.WReg=rT                                         Path(S76,S80)
	S82= CtrlPC=0                                               Premise(F568)
	S83= CtrlPCInc=0                                            Premise(F569)
	S84= PC[Out]=addr+4                                         PC-Hold(S71,S82,S83)
	S85= CtrlICache=0                                           Premise(F572)
	S86= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S73,S85)
	S87= CtrlGPRegs=1                                           Premise(F578)
	S88= GPRegs[rT]={24'b0,B4}                                  GPRegs-Write(S81,S79,S87)

POST	S84= PC[Out]=addr+4                                         PC-Hold(S71,S82,S83)
	S86= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S73,S85)
	S88= GPRegs[rT]={24'b0,B4}                                  GPRegs-Write(S81,S79,S87)

