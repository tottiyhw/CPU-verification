
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={35,rT,rA,d}                           Premise(F2)
	S3= ICache[addr]={35,rT,rA,d}                               Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F8)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F9)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F10)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F12)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={35,rT,rA,d}                                ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F13)
	S18= ICacheReg.In={35,rT,rA,d}                              Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F58)
	S20= CtrlPCInc=0                                            Premise(F59)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F60)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F63)
	S25= [ICacheReg]={35,rT,rA,d}                               ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F65)
	S27= IMem[{pid,addr}]={35,rT,rA,d}                          IMem-Hold(S2,S26)
	S28= CtrlGPRegs=0                                           Premise(F68)
	S29= GPRegs[rA]=a                                           GPRegs-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={35,rT,rA,d}                             ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F90)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={35,rT,rA,d}                                  IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F91)
	S36= IRMux.MemData={35,rT,rA,d}                             Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F92)
	S38= IRMux.CacheData={35,rT,rA,d}                           Path(S31,S37)
	S39= IRMux.Out={35,rT,rA,d}                                 IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F95)
	S41= IR.In={35,rT,rA,d}                                     Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F131)
	S43= CtrlPCInc=1                                            Premise(F132)
	S44= PC[Out]=addr+4                                         PC-Inc(S21,S42,S43)
	S45= CtrlIR=1                                               Premise(F140)
	S46= [IR]={35,rT,rA,d}                                      IR-Write(S41,S45)
	S47= CtrlGPRegs=0                                           Premise(F141)
	S48= GPRegs[rA]=a                                           GPRegs-Hold(S29,S47)

ID	S49= IR.Out11_15=rA                                         IR-Out(S46)
	S50= IR.Out16_31=d                                          IR-Out(S46)
	S51= IR.Out11_15=>GPRegs.RReg1                              Premise(F172)
	S52= GPRegs.RReg1=rA                                        Path(S49,S51)
	S53= GPRegs.Rdata1=a                                        GPRegs-Read(S52,S48)
	S54= GPRegs.Rdata1=>A.In                                    Premise(F173)
	S55= A.In=a                                                 Path(S53,S54)
	S56= IR.Out16_31=>IMMEXT.In                                 Premise(F174)
	S57= IMMEXT.In=d                                            Path(S50,S56)
	S58= IMMEXT.Out={16{d[0]},d}                                IMMEXT(S57)
	S59= IMMEXT.Out=>B.In                                       Premise(F175)
	S60= B.In={16{d[0]},d}                                      Path(S58,S59)
	S61= CtrlPC=0                                               Premise(F204)
	S62= CtrlPCInc=0                                            Premise(F205)
	S63= PC[Out]=addr+4                                         PC-Hold(S44,S61,S62)
	S64= CtrlIR=0                                               Premise(F213)
	S65= [IR]={35,rT,rA,d}                                      IR-Hold(S46,S64)
	S66= CtrlA=1                                                Premise(F215)
	S67= [A]=a                                                  A-Write(S55,S66)
	S68= CtrlB=1                                                Premise(F216)
	S69= [B]={16{d[0]},d}                                       B-Write(S60,S68)

EX	S70= A.Out=a                                                A-Out(S67)
	S71= B.Out={16{d[0]},d}                                     B-Out(S69)
	S72= A.Out=>ALU.A                                           Premise(F249)
	S73= ALU.A=a                                                Path(S70,S72)
	S74= B.Out=>ALU.B                                           Premise(F250)
	S75= ALU.B={16{d[0]},d}                                     Path(S71,S74)
	S76= ALU.Out=a+{16{d[0]},d}                                 ALU(S73,S75)
	S77= ALU.Out=>ALUOut.In                                     Premise(F252)
	S78= ALUOut.In=a+{16{d[0]},d}                               Path(S76,S77)
	S79= CtrlPC=0                                               Premise(F277)
	S80= CtrlPCInc=0                                            Premise(F278)
	S81= PC[Out]=addr+4                                         PC-Hold(S63,S79,S80)
	S82= CtrlIR=0                                               Premise(F286)
	S83= [IR]={35,rT,rA,d}                                      IR-Hold(S65,S82)
	S84= CtrlALUOut=1                                           Premise(F290)
	S85= [ALUOut]=a+{16{d[0]},d}                                ALUOut-Write(S78,S84)

MEM	S86= CtrlPC=0                                               Premise(F350)
	S87= CtrlPCInc=0                                            Premise(F351)
	S88= PC[Out]=addr+4                                         PC-Hold(S81,S86,S87)
	S89= CtrlIR=0                                               Premise(F359)
	S90= [IR]={35,rT,rA,d}                                      IR-Hold(S83,S89)
	S91= CtrlALUOut=0                                           Premise(F363)
	S92= [ALUOut]=a+{16{d[0]},d}                                ALUOut-Hold(S85,S91)

DMMU1	S93= CtrlPC=0                                               Premise(F423)
	S94= CtrlPCInc=0                                            Premise(F424)
	S95= PC[Out]=addr+4                                         PC-Hold(S88,S93,S94)
	S96= CtrlIR=0                                               Premise(F432)
	S97= [IR]={35,rT,rA,d}                                      IR-Hold(S90,S96)
	S98= CtrlALUOut=0                                           Premise(F436)
	S99= [ALUOut]=a+{16{d[0]},d}                                ALUOut-Hold(S92,S98)

DMMU2	S100= CtrlPC=0                                              Premise(F496)
	S101= CtrlPCInc=0                                           Premise(F497)
	S102= PC[Out]=addr+4                                        PC-Hold(S95,S100,S101)
	S103= CtrlIR=0                                              Premise(F505)
	S104= [IR]={35,rT,rA,d}                                     IR-Hold(S97,S103)
	S105= CtrlALUOut=0                                          Premise(F509)
	S106= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S99,S105)

WB	S107= IR.Out6_10=rT                                         IR-Out(S104)
	S108= IR.Out11_15=rA                                        IR-Out(S104)
	S109= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S106)
	S110= MemDataSel.Out={24'b0,B4}                             MemDataSel()
	S111= MemDataSel.Out=>GPRegs.WData                          Premise(F563)
	S112= GPRegs.WData={24'b0,B4}                               Path(S110,S111)
	S113= IR.Out6_10=>GPRegs.WReg                               Premise(F564)
	S114= GPRegs.WReg=rT                                        Path(S107,S113)
	S115= ALUOut.Out=>GPRegs.WBData                             Premise(F565)
	S116= GPRegs.WBData=a+{16{d[0]},d}                          Path(S109,S115)
	S117= IR.Out11_15=>GPRegs.WBReg                             Premise(F566)
	S118= GPRegs.WBReg=rA                                       Path(S108,S117)
	S119= CtrlPC=0                                              Premise(F569)
	S120= CtrlPCInc=0                                           Premise(F570)
	S121= PC[Out]=addr+4                                        PC-Hold(S102,S119,S120)
	S122= CtrlGPRegs=1                                          Premise(F579)
	S123= GPRegs[rT]={24'b0,B4}                                 GPRegs-Write(S114,S112,S122)
	S124= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S118,S116,S122)

POST	S121= PC[Out]=addr+4                                        PC-Hold(S102,S119,S120)
	S123= GPRegs[rT]={24'b0,B4}                                 GPRegs-Write(S114,S112,S122)
	S124= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S118,S116,S122)

