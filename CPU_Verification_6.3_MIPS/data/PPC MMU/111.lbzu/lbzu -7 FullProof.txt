
----------------------------------- FullProof -----------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={35,rT,rA,d}                           Premise(F2)
	S0= GPRegs[rA]=a                                            Premise(F3)
	S0= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}                Premise(F4)
	S0= DCache[DCacheRLineEA(a+{16{d[0]},d})]=data              Premise(F5)

IF	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F7)
	S0= IMMU.IEA=addr                                           Path(S0,S0)
	S0= IMMU.Addr={pid,addr}                                    IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr)                              IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F8)
	S0= IAddrReg.In={pid,addr}                                  Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F9)
	S0= IMMUHitReg.In=IMMUHit(pid,addr)                         Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F10)
	S0= ICache.IEA=addr                                         Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr)                              ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F11)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F12)
	S0= ICacheHitReg.In=ICacheHit(addr)                         Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F13)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F14)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F15)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F16)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F17)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F18)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F19)
	S0= IRMux.Out=>IR.In                                        Premise(F20)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F21)
	S0= PC.Out=>ICache.IEA                                      Premise(F22)
	S0= IR.Out0_5=>CU.Op                                        Premise(F23)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F24)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F25)
	S0= IR.Out16_31=>IMMEXT.In                                  Premise(F26)
	S0= IMMEXT.Out=>B.In                                        Premise(F27)
	S0= A.Out=>ALU.A                                            Premise(F28)
	S0= B.Out=>ALU.B                                            Premise(F29)
	S0= CU.Func=>ALU.Func                                       Premise(F30)
	S0= ALU.Out=>ALUOut.In                                      Premise(F31)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F32)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F33)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F34)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F35)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F36)
	S0= DCache.Out=>DCacheReg.In                                Premise(F37)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F38)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F39)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F40)
	S0= DCacheReg.Out=>DR.In                                    Premise(F41)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F42)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F43)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F44)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F45)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F46)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F47)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F48)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F49)
	S0= DMem.Out=>DR.In                                         Premise(F50)
	S0= DR.Out=>MemDataSel.Data                                 Premise(F51)
	S0= ALUOut.Out30_31=>MemDataSel.Addr                        Premise(F52)
	S0= CU.MemDataSelFunc=>MemDataSel.Func                      Premise(F53)
	S0= MemDataSel.Out=>GPRegs.WData                            Premise(F54)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F55)
	S0= ALUOut.Out=>GPRegs.WBData                               Premise(F56)
	S0= IR.Out11_15=>GPRegs.WBReg                               Premise(F57)
	S0= CtrlPIDReg=0                                            Premise(F58)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F59)
	S0= CtrlPC=0                                                Premise(F60)
	S0= CtrlPCInc=0                                             Premise(F61)
	S0= PC[Out]=addr                                            PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=1                                          Premise(F62)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Write(S0,S0)
	S0= CtrlIMMUHitReg=1                                        Premise(F63)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Write(S0,S0)
	S0= CtrlICache=0                                            Premise(F64)
	S0= CtrlICacheReg=1                                         Premise(F65)
	S0= CtrlICacheHitReg=1                                      Premise(F66)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Write(S0,S0)
	S0= CtrlIMem=0                                              Premise(F67)
	S0= IMem[{pid,addr}]={35,rT,rA,d}                           IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F68)
	S0= CtrlIR=0                                                Premise(F69)
	S0= CtrlGPRegs=0                                            Premise(F70)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F71)
	S0= CtrlB=0                                                 Premise(F72)
	S0= CtrlALUOut=0                                            Premise(F73)
	S0= CtrlDMMU=0                                              Premise(F74)
	S0= CtrlDAddrReg=0                                          Premise(F75)
	S0= CtrlDMMUHitReg=0                                        Premise(F76)
	S0= CtrlDCache=0                                            Premise(F77)
	S0= DCache[DCacheRLineEA(a+{16{d[0]},d})]=data              DCache-Hold(S0,S0)
	S0= CtrlDCacheReg=0                                         Premise(F78)
	S0= CtrlDCacheHitReg=0                                      Premise(F79)
	S0= CtrlDR=0                                                Premise(F80)
	S0= CtrlDMem=0                                              Premise(F81)
	S0= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}                DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F82)

IMMU	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F83)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F84)
	S0= IMMU.IEA=addr                                           Path(S0,S0)
	S0= IMMU.Addr={pid,addr}                                    IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr)                              IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F85)
	S0= IAddrReg.In={pid,addr}                                  Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F86)
	S0= IMMUHitReg.In=IMMUHit(pid,addr)                         Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F87)
	S0= ICache.IEA=addr                                         Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr)                              ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F88)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F89)
	S0= ICacheHitReg.In=ICacheHit(addr)                         Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F90)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F91)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F92)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={35,rT,rA,d}                                   IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F93)
	S0= IRMux.MemData={35,rT,rA,d}                              Path(S0,S0)
	S0= IRMux.Out={35,rT,rA,d}                                  IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F94)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F95)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F96)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F97)
	S0= IR.In={35,rT,rA,d}                                      Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F98)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F99)
	S0= IR.Out0_5=>CU.Op                                        Premise(F100)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F101)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F102)
	S0= IR.Out16_31=>IMMEXT.In                                  Premise(F103)
	S0= IMMEXT.Out=>B.In                                        Premise(F104)
	S0= A.Out=>ALU.A                                            Premise(F105)
	S0= B.Out=>ALU.B                                            Premise(F106)
	S0= CU.Func=>ALU.Func                                       Premise(F107)
	S0= ALU.Out=>ALUOut.In                                      Premise(F108)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F109)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F110)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F111)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F112)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F113)
	S0= DCache.Out=>DCacheReg.In                                Premise(F114)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F115)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F116)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F117)
	S0= DCacheReg.Out=>DR.In                                    Premise(F118)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F119)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F120)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F121)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F122)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F123)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F124)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F125)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F126)
	S0= DMem.Out=>DR.In                                         Premise(F127)
	S0= DR.Out=>MemDataSel.Data                                 Premise(F128)
	S0= ALUOut.Out30_31=>MemDataSel.Addr                        Premise(F129)
	S0= CU.MemDataSelFunc=>MemDataSel.Func                      Premise(F130)
	S0= MemDataSel.Out=>GPRegs.WData                            Premise(F131)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F132)
	S0= ALUOut.Out=>GPRegs.WBData                               Premise(F133)
	S0= IR.Out11_15=>GPRegs.WBReg                               Premise(F134)
	S0= CtrlPIDReg=0                                            Premise(F135)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F136)
	S0= CtrlPC=0                                                Premise(F137)
	S0= CtrlPCInc=1                                             Premise(F138)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F139)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F140)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=1                                            Premise(F141)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Write(S0,S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F142)
	S0= CtrlICacheHitReg=0                                      Premise(F143)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F144)
	S0= IMem[{pid,addr}]={35,rT,rA,d}                           IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F145)
	S0= CtrlIR=1                                                Premise(F146)
	S0= [IR]={35,rT,rA,d}                                       IR-Write(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F147)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F148)
	S0= CtrlB=0                                                 Premise(F149)
	S0= CtrlALUOut=0                                            Premise(F150)
	S0= CtrlDMMU=0                                              Premise(F151)
	S0= CtrlDAddrReg=0                                          Premise(F152)
	S0= CtrlDMMUHitReg=0                                        Premise(F153)
	S0= CtrlDCache=0                                            Premise(F154)
	S0= DCache[DCacheRLineEA(a+{16{d[0]},d})]=data              DCache-Hold(S0,S0)
	S0= CtrlDCacheReg=0                                         Premise(F155)
	S0= CtrlDCacheHitReg=0                                      Premise(F156)
	S0= CtrlDR=0                                                Premise(F157)
	S0= CtrlDMem=0                                              Premise(F158)
	S0= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}                DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F159)

ID	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=35                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_31=d                                           IR-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F160)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F161)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F162)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F163)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F164)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F165)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F166)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F167)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F168)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F169)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={35,rT,rA,d}                                   IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F170)
	S0= IRMux.MemData={35,rT,rA,d}                              Path(S0,S0)
	S0= IRMux.Out={35,rT,rA,d}                                  IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F171)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F172)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F173)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F174)
	S0= IR.In={35,rT,rA,d}                                      Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F175)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F176)
	S0= IR.Out0_5=>CU.Op                                        Premise(F177)
	S0= CU.Op=35                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= CU.MemDataSelFunc=mds_lbz                               CU(S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F178)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.Rdata1=a                                         GPRegs-Read(S0,S0)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F179)
	S0= A.In=a                                                  Path(S0,S0)
	S0= IR.Out16_31=>IMMEXT.In                                  Premise(F180)
	S0= IMMEXT.In=d                                             Path(S0,S0)
	S0= IMMEXT.Out={16{d[0]},d}                                 IMMEXT(S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F181)
	S0= B.In={16{d[0]},d}                                       Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F182)
	S0= B.Out=>ALU.B                                            Premise(F183)
	S0= CU.Func=>ALU.Func                                       Premise(F184)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F185)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F186)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F187)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F188)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F189)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F190)
	S0= DCache.Out=>DCacheReg.In                                Premise(F191)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F192)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F193)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F194)
	S0= DCacheReg.Out=>DR.In                                    Premise(F195)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F196)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F197)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F198)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F199)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F200)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F201)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F202)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F203)
	S0= DMem.Out=>DR.In                                         Premise(F204)
	S0= DR.Out=>MemDataSel.Data                                 Premise(F205)
	S0= ALUOut.Out30_31=>MemDataSel.Addr                        Premise(F206)
	S0= CU.MemDataSelFunc=>MemDataSel.Func                      Premise(F207)
	S0= MemDataSel.Func=mds_lbz                                 Path(S0,S0)
	S0= MemDataSel.Out=>GPRegs.WData                            Premise(F208)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F209)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WBData                               Premise(F210)
	S0= IR.Out11_15=>GPRegs.WBReg                               Premise(F211)
	S0= GPRegs.WBReg=rA                                         Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F212)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F213)
	S0= CtrlPC=0                                                Premise(F214)
	S0= CtrlPCInc=0                                             Premise(F215)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F216)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F217)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F218)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F219)
	S0= CtrlICacheHitReg=0                                      Premise(F220)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F221)
	S0= IMem[{pid,addr}]={35,rT,rA,d}                           IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F222)
	S0= CtrlIR=0                                                Premise(F223)
	S0= [IR]={35,rT,rA,d}                                       IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F224)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=1                                                 Premise(F225)
	S0= [A]=a                                                   A-Write(S0,S0)
	S0= CtrlB=1                                                 Premise(F226)
	S0= [B]={16{d[0]},d}                                        B-Write(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F227)
	S0= CtrlDMMU=0                                              Premise(F228)
	S0= CtrlDAddrReg=0                                          Premise(F229)
	S0= CtrlDMMUHitReg=0                                        Premise(F230)
	S0= CtrlDCache=0                                            Premise(F231)
	S0= DCache[DCacheRLineEA(a+{16{d[0]},d})]=data              DCache-Hold(S0,S0)
	S0= CtrlDCacheReg=0                                         Premise(F232)
	S0= CtrlDCacheHitReg=0                                      Premise(F233)
	S0= CtrlDR=0                                                Premise(F234)
	S0= CtrlDMem=0                                              Premise(F235)
	S0= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}                DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F236)

EX	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=35                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_31=d                                           IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out26_31=a[26:31]                                     A-Out(S0)
	S0= A.Out30_31=a[30:31]                                     A-Out(S0)
	S0= B.Out={16{d[0]},d}                                      B-Out(S0)
	S0= B.Out26_31={16{d[0]},d}[26:31]                          B-Out(S0)
	S0= B.Out30_31={16{d[0]},d}[30:31]                          B-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F237)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F238)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F239)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F240)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F241)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F242)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F243)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F244)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F245)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F246)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={35,rT,rA,d}                                   IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F247)
	S0= IRMux.MemData={35,rT,rA,d}                              Path(S0,S0)
	S0= IRMux.Out={35,rT,rA,d}                                  IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F248)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F249)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F250)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F251)
	S0= IR.In={35,rT,rA,d}                                      Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F252)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F253)
	S0= IR.Out0_5=>CU.Op                                        Premise(F254)
	S0= CU.Op=35                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= CU.MemDataSelFunc=mds_lbz                               CU(S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F255)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.Rdata1=a                                         GPRegs-Read(S0,S0)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F256)
	S0= A.In=a                                                  Path(S0,S0)
	S0= IR.Out16_31=>IMMEXT.In                                  Premise(F257)
	S0= IMMEXT.In=d                                             Path(S0,S0)
	S0= IMMEXT.Out={16{d[0]},d}                                 IMMEXT(S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F258)
	S0= B.In={16{d[0]},d}                                       Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F259)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F260)
	S0= ALU.B={16{d[0]},d}                                      Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F261)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=a+{16{d[0]},d}                                  ALU(S0,S0)
	S0= ALU.CMP=Compare0(a+{16{d[0]},d})                        ALU(S0,S0)
	S0= ALU.OV=OverFlow(a+{16{d[0]},d})                         ALU(S0,S0)
	S0= ALU.CA=Carry(a+{16{d[0]},d})                            ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F262)
	S0= ALUOut.In=a+{16{d[0]},d}                                Path(S0,S0)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F263)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F264)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F265)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F266)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F267)
	S0= DCache.Out=>DCacheReg.In                                Premise(F268)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F269)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F270)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F271)
	S0= DCacheReg.Out=>DR.In                                    Premise(F272)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F273)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F274)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F275)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F276)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F277)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F278)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F279)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F280)
	S0= DMem.Out=>DR.In                                         Premise(F281)
	S0= DR.Out=>MemDataSel.Data                                 Premise(F282)
	S0= ALUOut.Out30_31=>MemDataSel.Addr                        Premise(F283)
	S0= CU.MemDataSelFunc=>MemDataSel.Func                      Premise(F284)
	S0= MemDataSel.Func=mds_lbz                                 Path(S0,S0)
	S0= MemDataSel.Out=>GPRegs.WData                            Premise(F285)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F286)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WBData                               Premise(F287)
	S0= IR.Out11_15=>GPRegs.WBReg                               Premise(F288)
	S0= GPRegs.WBReg=rA                                         Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F289)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F290)
	S0= CtrlPC=0                                                Premise(F291)
	S0= CtrlPCInc=0                                             Premise(F292)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F293)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F294)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F295)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F296)
	S0= CtrlICacheHitReg=0                                      Premise(F297)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F298)
	S0= IMem[{pid,addr}]={35,rT,rA,d}                           IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F299)
	S0= CtrlIR=0                                                Premise(F300)
	S0= [IR]={35,rT,rA,d}                                       IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F301)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F302)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F303)
	S0= [B]={16{d[0]},d}                                        B-Hold(S0,S0)
	S0= CtrlALUOut=1                                            Premise(F304)
	S0= [ALUOut]=a+{16{d[0]},d}                                 ALUOut-Write(S0,S0)
	S0= CtrlDMMU=0                                              Premise(F305)
	S0= CtrlDAddrReg=0                                          Premise(F306)
	S0= CtrlDMMUHitReg=0                                        Premise(F307)
	S0= CtrlDCache=0                                            Premise(F308)
	S0= DCache[DCacheRLineEA(a+{16{d[0]},d})]=data              DCache-Hold(S0,S0)
	S0= CtrlDCacheReg=0                                         Premise(F309)
	S0= CtrlDCacheHitReg=0                                      Premise(F310)
	S0= CtrlDR=0                                                Premise(F311)
	S0= CtrlDMem=0                                              Premise(F312)
	S0= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}                DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F313)

MEM	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=35                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_31=d                                           IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out26_31=a[26:31]                                     A-Out(S0)
	S0= A.Out30_31=a[30:31]                                     A-Out(S0)
	S0= B.Out={16{d[0]},d}                                      B-Out(S0)
	S0= B.Out26_31={16{d[0]},d}[26:31]                          B-Out(S0)
	S0= B.Out30_31={16{d[0]},d}[30:31]                          B-Out(S0)
	S0= ALUOut.Out=a+{16{d[0]},d}                               ALUOut-Out(S0)
	S0= ALUOut.Out26_31=a+{16{d[0]},d}[26:31]                   ALUOut-Out(S0)
	S0= ALUOut.Out30_31=a+{16{d[0]},d}[30:31]                   ALUOut-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F314)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F315)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F316)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F317)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F318)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F319)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F320)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F321)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F322)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F323)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={35,rT,rA,d}                                   IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F324)
	S0= IRMux.MemData={35,rT,rA,d}                              Path(S0,S0)
	S0= IRMux.Out={35,rT,rA,d}                                  IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F325)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F326)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F327)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F328)
	S0= IR.In={35,rT,rA,d}                                      Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F329)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F330)
	S0= IR.Out0_5=>CU.Op                                        Premise(F331)
	S0= CU.Op=35                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= CU.MemDataSelFunc=mds_lbz                               CU(S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F332)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.Rdata1=a                                         GPRegs-Read(S0,S0)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F333)
	S0= A.In=a                                                  Path(S0,S0)
	S0= IR.Out16_31=>IMMEXT.In                                  Premise(F334)
	S0= IMMEXT.In=d                                             Path(S0,S0)
	S0= IMMEXT.Out={16{d[0]},d}                                 IMMEXT(S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F335)
	S0= B.In={16{d[0]},d}                                       Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F336)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F337)
	S0= ALU.B={16{d[0]},d}                                      Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F338)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=a+{16{d[0]},d}                                  ALU(S0,S0)
	S0= ALU.CMP=Compare0(a+{16{d[0]},d})                        ALU(S0,S0)
	S0= ALU.OV=OverFlow(a+{16{d[0]},d})                         ALU(S0,S0)
	S0= ALU.CA=Carry(a+{16{d[0]},d})                            ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F339)
	S0= ALUOut.In=a+{16{d[0]},d}                                Path(S0,S0)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F340)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F341)
	S0= DMMU.IEA=a+{16{d[0]},d}                                 Path(S0,S0)
	S0= DMMU.Addr={pid,a+{16{d[0]},d}}                          DMMU-Search(S0,S0)
	S0= DMMU.Hit=DMMUHit(pid,a+{16{d[0]},d})                    DMMU-Search(S0,S0)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F342)
	S0= DAddrReg.In={pid,a+{16{d[0]},d}}                        Path(S0,S0)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F343)
	S0= DMMUHitReg.In=DMMUHit(pid,a+{16{d[0]},d})               Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F344)
	S0= DCache.IEA=a+{16{d[0]},d}                               Path(S0,S0)
	S0= DCache.Hit=DCacheHit(a+{16{d[0]},d})                    DCache-Search(S0)
	S0= DCache.Out=>DCacheReg.In                                Premise(F345)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F346)
	S0= DCacheHitReg.In=DCacheHit(a+{16{d[0]},d})               Path(S0,S0)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F347)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F348)
	S0= DCacheReg.Out=>DR.In                                    Premise(F349)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F350)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F351)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F352)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F353)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F354)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F355)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F356)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F357)
	S0= DMem.Out=>DR.In                                         Premise(F358)
	S0= DR.Out=>MemDataSel.Data                                 Premise(F359)
	S0= ALUOut.Out30_31=>MemDataSel.Addr                        Premise(F360)
	S0= MemDataSel.Addr=a+{16{d[0]},d}[30:31]                   Path(S0,S0)
	S0= CU.MemDataSelFunc=>MemDataSel.Func                      Premise(F361)
	S0= MemDataSel.Func=mds_lbz                                 Path(S0,S0)
	S0= MemDataSel.Out=>GPRegs.WData                            Premise(F362)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F363)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WBData                               Premise(F364)
	S0= GPRegs.WBData=a+{16{d[0]},d}                            Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.WBReg                               Premise(F365)
	S0= GPRegs.WBReg=rA                                         Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F366)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F367)
	S0= CtrlPC=0                                                Premise(F368)
	S0= CtrlPCInc=0                                             Premise(F369)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F370)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F371)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F372)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F373)
	S0= CtrlICacheHitReg=0                                      Premise(F374)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F375)
	S0= IMem[{pid,addr}]={35,rT,rA,d}                           IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F376)
	S0= CtrlIR=0                                                Premise(F377)
	S0= [IR]={35,rT,rA,d}                                       IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F378)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F379)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F380)
	S0= [B]={16{d[0]},d}                                        B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F381)
	S0= [ALUOut]=a+{16{d[0]},d}                                 ALUOut-Hold(S0,S0)
	S0= CtrlDMMU=0                                              Premise(F382)
	S0= CtrlDAddrReg=1                                          Premise(F383)
	S0= [DAddrReg]={pid,a+{16{d[0]},d}}                         DAddrReg-Write(S0,S0)
	S0= CtrlDMMUHitReg=1                                        Premise(F384)
	S0= [DMMUHitReg]=DMMUHit(pid,a+{16{d[0]},d})                DMMUHitReg-Write(S0,S0)
	S0= CtrlDCache=0                                            Premise(F385)
	S0= DCache[DCacheRLineEA(a+{16{d[0]},d})]=data              DCache-Hold(S0,S0)
	S0= CtrlDCacheReg=1                                         Premise(F386)
	S0= CtrlDCacheHitReg=1                                      Premise(F387)
	S0= [DCacheHitReg]=DCacheHit(a+{16{d[0]},d})                DCacheHitReg-Write(S0,S0)
	S0= CtrlDR=0                                                Premise(F388)
	S0= CtrlDMem=0                                              Premise(F389)
	S0= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}                DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F390)

DMMU1	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=35                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_31=d                                           IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out26_31=a[26:31]                                     A-Out(S0)
	S0= A.Out30_31=a[30:31]                                     A-Out(S0)
	S0= B.Out={16{d[0]},d}                                      B-Out(S0)
	S0= B.Out26_31={16{d[0]},d}[26:31]                          B-Out(S0)
	S0= B.Out30_31={16{d[0]},d}[30:31]                          B-Out(S0)
	S0= ALUOut.Out=a+{16{d[0]},d}                               ALUOut-Out(S0)
	S0= ALUOut.Out26_31=a+{16{d[0]},d}[26:31]                   ALUOut-Out(S0)
	S0= ALUOut.Out30_31=a+{16{d[0]},d}[30:31]                   ALUOut-Out(S0)
	S0= DAddrReg.Out={pid,a+{16{d[0]},d}}                       DAddrReg-Out(S0)
	S0= DAddrReg.Out26_31={pid,a+{16{d[0]},d}}[26:31]           DAddrReg-Out(S0)
	S0= DAddrReg.Out30_31={pid,a+{16{d[0]},d}}[30:31]           DAddrReg-Out(S0)
	S0= DMMUHitReg.Out=DMMUHit(pid,a+{16{d[0]},d})              DMMUHitReg-Out(S0)
	S0= DMMUHitReg.Out26_31=DMMUHit(pid,a+{16{d[0]},d})[26:31]  DMMUHitReg-Out(S0)
	S0= DMMUHitReg.Out30_31=DMMUHit(pid,a+{16{d[0]},d})[30:31]  DMMUHitReg-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= DCacheHitReg.Out=DCacheHit(a+{16{d[0]},d})              DCacheHitReg-Out(S0)
	S0= DCacheHitReg.Out26_31=DCacheHit(a+{16{d[0]},d})[26:31]  DCacheHitReg-Out(S0)
	S0= DCacheHitReg.Out30_31=DCacheHit(a+{16{d[0]},d})[30:31]  DCacheHitReg-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F391)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F392)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F393)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F394)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F395)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F396)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F397)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F398)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F399)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F400)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={35,rT,rA,d}                                   IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F401)
	S0= IRMux.MemData={35,rT,rA,d}                              Path(S0,S0)
	S0= IRMux.Out={35,rT,rA,d}                                  IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F402)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F403)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F404)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F405)
	S0= IR.In={35,rT,rA,d}                                      Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F406)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F407)
	S0= IR.Out0_5=>CU.Op                                        Premise(F408)
	S0= CU.Op=35                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= CU.MemDataSelFunc=mds_lbz                               CU(S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F409)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.Rdata1=a                                         GPRegs-Read(S0,S0)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F410)
	S0= A.In=a                                                  Path(S0,S0)
	S0= IR.Out16_31=>IMMEXT.In                                  Premise(F411)
	S0= IMMEXT.In=d                                             Path(S0,S0)
	S0= IMMEXT.Out={16{d[0]},d}                                 IMMEXT(S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F412)
	S0= B.In={16{d[0]},d}                                       Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F413)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F414)
	S0= ALU.B={16{d[0]},d}                                      Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F415)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=a+{16{d[0]},d}                                  ALU(S0,S0)
	S0= ALU.CMP=Compare0(a+{16{d[0]},d})                        ALU(S0,S0)
	S0= ALU.OV=OverFlow(a+{16{d[0]},d})                         ALU(S0,S0)
	S0= ALU.CA=Carry(a+{16{d[0]},d})                            ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F416)
	S0= ALUOut.In=a+{16{d[0]},d}                                Path(S0,S0)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F417)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F418)
	S0= DMMU.IEA=a+{16{d[0]},d}                                 Path(S0,S0)
	S0= DMMU.Addr={pid,a+{16{d[0]},d}}                          DMMU-Search(S0,S0)
	S0= DMMU.Hit=DMMUHit(pid,a+{16{d[0]},d})                    DMMU-Search(S0,S0)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F419)
	S0= DAddrReg.In={pid,a+{16{d[0]},d}}                        Path(S0,S0)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F420)
	S0= DMMUHitReg.In=DMMUHit(pid,a+{16{d[0]},d})               Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F421)
	S0= DCache.IEA=a+{16{d[0]},d}                               Path(S0,S0)
	S0= DCache.Hit=DCacheHit(a+{16{d[0]},d})                    DCache-Search(S0)
	S0= DCache.Out=>DCacheReg.In                                Premise(F422)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F423)
	S0= DCacheHitReg.In=DCacheHit(a+{16{d[0]},d})               Path(S0,S0)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F424)
	S0= CU.DMemHit=DMMUHit(pid,a+{16{d[0]},d})                  Path(S0,S0)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F425)
	S0= CU.DCacheHit=DCacheHit(a+{16{d[0]},d})                  Path(S0,S0)
	S0= DCacheReg.Out=>DR.In                                    Premise(F426)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F427)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F428)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F429)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F430)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F431)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F432)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F433)
	S0= DMem.RAddr={pid,a+{16{d[0]},d}}                         Path(S0,S0)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F434)
	S0= DMem.Out=>DR.In                                         Premise(F435)
	S0= DR.Out=>MemDataSel.Data                                 Premise(F436)
	S0= ALUOut.Out30_31=>MemDataSel.Addr                        Premise(F437)
	S0= MemDataSel.Addr=a+{16{d[0]},d}[30:31]                   Path(S0,S0)
	S0= CU.MemDataSelFunc=>MemDataSel.Func                      Premise(F438)
	S0= MemDataSel.Func=mds_lbz                                 Path(S0,S0)
	S0= MemDataSel.Out=>GPRegs.WData                            Premise(F439)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F440)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WBData                               Premise(F441)
	S0= GPRegs.WBData=a+{16{d[0]},d}                            Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.WBReg                               Premise(F442)
	S0= GPRegs.WBReg=rA                                         Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F443)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F444)
	S0= CtrlPC=0                                                Premise(F445)
	S0= CtrlPCInc=0                                             Premise(F446)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F447)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F448)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F449)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F450)
	S0= CtrlICacheHitReg=0                                      Premise(F451)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F452)
	S0= IMem[{pid,addr}]={35,rT,rA,d}                           IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F453)
	S0= CtrlIR=0                                                Premise(F454)
	S0= [IR]={35,rT,rA,d}                                       IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F455)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F456)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F457)
	S0= [B]={16{d[0]},d}                                        B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F458)
	S0= [ALUOut]=a+{16{d[0]},d}                                 ALUOut-Hold(S0,S0)
	S0= CtrlDMMU=0                                              Premise(F459)
	S0= CtrlDAddrReg=0                                          Premise(F460)
	S0= [DAddrReg]={pid,a+{16{d[0]},d}}                         DAddrReg-Hold(S0,S0)
	S0= CtrlDMMUHitReg=0                                        Premise(F461)
	S0= [DMMUHitReg]=DMMUHit(pid,a+{16{d[0]},d})                DMMUHitReg-Hold(S0,S0)
	S0= CtrlDCache=0                                            Premise(F462)
	S0= DCache[DCacheRLineEA(a+{16{d[0]},d})]=data              DCache-Hold(S0,S0)
	S0= CtrlDCacheReg=0                                         Premise(F463)
	S0= CtrlDCacheHitReg=0                                      Premise(F464)
	S0= [DCacheHitReg]=DCacheHit(a+{16{d[0]},d})                DCacheHitReg-Hold(S0,S0)
	S0= CtrlDR=0                                                Premise(F465)
	S0= CtrlDMem=0                                              Premise(F466)
	S0= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}                DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F467)
	S0= DMem.Out={B1,B2,B3,B4}                                  DMem-Read(S0,S0,S0,S0)
	S0= DR.In={B1,B2,B3,B4}                                     Path(S0,S0)
	S0= DMem.MEM8WordOut=DMemGet8Word({pid,a+{16{d[0]},d}})     DMem-Read(S0,S0,S0,S0)
	S0= DCache.WData=DMemGet8Word({pid,a+{16{d[0]},d}})         Path(S0,S0)

DMMU2	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=35                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_31=d                                           IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out26_31=a[26:31]                                     A-Out(S0)
	S0= A.Out30_31=a[30:31]                                     A-Out(S0)
	S0= B.Out={16{d[0]},d}                                      B-Out(S0)
	S0= B.Out26_31={16{d[0]},d}[26:31]                          B-Out(S0)
	S0= B.Out30_31={16{d[0]},d}[30:31]                          B-Out(S0)
	S0= ALUOut.Out=a+{16{d[0]},d}                               ALUOut-Out(S0)
	S0= ALUOut.Out26_31=a+{16{d[0]},d}[26:31]                   ALUOut-Out(S0)
	S0= ALUOut.Out30_31=a+{16{d[0]},d}[30:31]                   ALUOut-Out(S0)
	S0= DAddrReg.Out={pid,a+{16{d[0]},d}}                       DAddrReg-Out(S0)
	S0= DAddrReg.Out26_31={pid,a+{16{d[0]},d}}[26:31]           DAddrReg-Out(S0)
	S0= DAddrReg.Out30_31={pid,a+{16{d[0]},d}}[30:31]           DAddrReg-Out(S0)
	S0= DMMUHitReg.Out=DMMUHit(pid,a+{16{d[0]},d})              DMMUHitReg-Out(S0)
	S0= DMMUHitReg.Out26_31=DMMUHit(pid,a+{16{d[0]},d})[26:31]  DMMUHitReg-Out(S0)
	S0= DMMUHitReg.Out30_31=DMMUHit(pid,a+{16{d[0]},d})[30:31]  DMMUHitReg-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= DCacheHitReg.Out=DCacheHit(a+{16{d[0]},d})              DCacheHitReg-Out(S0)
	S0= DCacheHitReg.Out26_31=DCacheHit(a+{16{d[0]},d})[26:31]  DCacheHitReg-Out(S0)
	S0= DCacheHitReg.Out30_31=DCacheHit(a+{16{d[0]},d})[30:31]  DCacheHitReg-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F468)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F469)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F470)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F471)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F472)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F473)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F474)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F475)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F476)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F477)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={35,rT,rA,d}                                   IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F478)
	S0= IRMux.MemData={35,rT,rA,d}                              Path(S0,S0)
	S0= IRMux.Out={35,rT,rA,d}                                  IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F479)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F480)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F481)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F482)
	S0= IR.In={35,rT,rA,d}                                      Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F483)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F484)
	S0= IR.Out0_5=>CU.Op                                        Premise(F485)
	S0= CU.Op=35                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= CU.MemDataSelFunc=mds_lbz                               CU(S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F486)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.Rdata1=a                                         GPRegs-Read(S0,S0)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F487)
	S0= A.In=a                                                  Path(S0,S0)
	S0= IR.Out16_31=>IMMEXT.In                                  Premise(F488)
	S0= IMMEXT.In=d                                             Path(S0,S0)
	S0= IMMEXT.Out={16{d[0]},d}                                 IMMEXT(S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F489)
	S0= B.In={16{d[0]},d}                                       Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F490)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F491)
	S0= ALU.B={16{d[0]},d}                                      Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F492)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=a+{16{d[0]},d}                                  ALU(S0,S0)
	S0= ALU.CMP=Compare0(a+{16{d[0]},d})                        ALU(S0,S0)
	S0= ALU.OV=OverFlow(a+{16{d[0]},d})                         ALU(S0,S0)
	S0= ALU.CA=Carry(a+{16{d[0]},d})                            ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F493)
	S0= ALUOut.In=a+{16{d[0]},d}                                Path(S0,S0)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F494)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F495)
	S0= DMMU.IEA=a+{16{d[0]},d}                                 Path(S0,S0)
	S0= DMMU.Addr={pid,a+{16{d[0]},d}}                          DMMU-Search(S0,S0)
	S0= DMMU.Hit=DMMUHit(pid,a+{16{d[0]},d})                    DMMU-Search(S0,S0)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F496)
	S0= DAddrReg.In={pid,a+{16{d[0]},d}}                        Path(S0,S0)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F497)
	S0= DMMUHitReg.In=DMMUHit(pid,a+{16{d[0]},d})               Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F498)
	S0= DCache.IEA=a+{16{d[0]},d}                               Path(S0,S0)
	S0= DCache.Hit=DCacheHit(a+{16{d[0]},d})                    DCache-Search(S0)
	S0= DCache.Out=>DCacheReg.In                                Premise(F499)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F500)
	S0= DCacheHitReg.In=DCacheHit(a+{16{d[0]},d})               Path(S0,S0)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F501)
	S0= CU.DMemHit=DMMUHit(pid,a+{16{d[0]},d})                  Path(S0,S0)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F502)
	S0= CU.DCacheHit=DCacheHit(a+{16{d[0]},d})                  Path(S0,S0)
	S0= DCacheReg.Out=>DR.In                                    Premise(F503)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F504)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F505)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F506)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F507)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F508)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F509)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F510)
	S0= DMem.RAddr={pid,a+{16{d[0]},d}}                         Path(S0,S0)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F511)
	S0= DMem.Out=>DR.In                                         Premise(F512)
	S0= DR.Out=>MemDataSel.Data                                 Premise(F513)
	S0= ALUOut.Out30_31=>MemDataSel.Addr                        Premise(F514)
	S0= MemDataSel.Addr=a+{16{d[0]},d}[30:31]                   Path(S0,S0)
	S0= CU.MemDataSelFunc=>MemDataSel.Func                      Premise(F515)
	S0= MemDataSel.Func=mds_lbz                                 Path(S0,S0)
	S0= MemDataSel.Out=>GPRegs.WData                            Premise(F516)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F517)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WBData                               Premise(F518)
	S0= GPRegs.WBData=a+{16{d[0]},d}                            Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.WBReg                               Premise(F519)
	S0= GPRegs.WBReg=rA                                         Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F520)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F521)
	S0= CtrlPC=0                                                Premise(F522)
	S0= CtrlPCInc=0                                             Premise(F523)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F524)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F525)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F526)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F527)
	S0= CtrlICacheHitReg=0                                      Premise(F528)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F529)
	S0= IMem[{pid,addr}]={35,rT,rA,d}                           IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F530)
	S0= CtrlIR=0                                                Premise(F531)
	S0= [IR]={35,rT,rA,d}                                       IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F532)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F533)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F534)
	S0= [B]={16{d[0]},d}                                        B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F535)
	S0= [ALUOut]=a+{16{d[0]},d}                                 ALUOut-Hold(S0,S0)
	S0= CtrlDMMU=0                                              Premise(F536)
	S0= CtrlDAddrReg=0                                          Premise(F537)
	S0= [DAddrReg]={pid,a+{16{d[0]},d}}                         DAddrReg-Hold(S0,S0)
	S0= CtrlDMMUHitReg=0                                        Premise(F538)
	S0= [DMMUHitReg]=DMMUHit(pid,a+{16{d[0]},d})                DMMUHitReg-Hold(S0,S0)
	S0= CtrlDCache=1                                            Premise(F539)
	S0= CtrlDCacheReg=0                                         Premise(F540)
	S0= CtrlDCacheHitReg=0                                      Premise(F541)
	S0= [DCacheHitReg]=DCacheHit(a+{16{d[0]},d})                DCacheHitReg-Hold(S0,S0)
	S0= CtrlDR=1                                                Premise(F542)
	S0= CtrlDMem=0                                              Premise(F543)
	S0= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}                DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F544)
	S0= DMem.Out={B1,B2,B3,B4}                                  DMem-Read(S0,S0,S0,S0)
	S0= DR.In={B1,B2,B3,B4}                                     Path(S0,S0)
	S0= [DR]={B1,B2,B3,B4}                                      DR-Write(S0,S0)
	S0= DMem.MEM8WordOut=DMemGet8Word({pid,a+{16{d[0]},d}})     DMem-Read(S0,S0,S0,S0)
	S0= DCache.WData=DMemGet8Word({pid,a+{16{d[0]},d}})         Path(S0,S0)
	S0= DCache[line_a+{16{d[0]},d}]=DMemGet8Word({pid,a+{16{d[0]},d}})DCache-Write8Word(S0,S0,S0)

WB	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=35                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_31=d                                           IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out26_31=a[26:31]                                     A-Out(S0)
	S0= A.Out30_31=a[30:31]                                     A-Out(S0)
	S0= B.Out={16{d[0]},d}                                      B-Out(S0)
	S0= B.Out26_31={16{d[0]},d}[26:31]                          B-Out(S0)
	S0= B.Out30_31={16{d[0]},d}[30:31]                          B-Out(S0)
	S0= ALUOut.Out=a+{16{d[0]},d}                               ALUOut-Out(S0)
	S0= ALUOut.Out26_31=a+{16{d[0]},d}[26:31]                   ALUOut-Out(S0)
	S0= ALUOut.Out30_31=a+{16{d[0]},d}[30:31]                   ALUOut-Out(S0)
	S0= DAddrReg.Out={pid,a+{16{d[0]},d}}                       DAddrReg-Out(S0)
	S0= DAddrReg.Out26_31={pid,a+{16{d[0]},d}}[26:31]           DAddrReg-Out(S0)
	S0= DAddrReg.Out30_31={pid,a+{16{d[0]},d}}[30:31]           DAddrReg-Out(S0)
	S0= DMMUHitReg.Out=DMMUHit(pid,a+{16{d[0]},d})              DMMUHitReg-Out(S0)
	S0= DMMUHitReg.Out26_31=DMMUHit(pid,a+{16{d[0]},d})[26:31]  DMMUHitReg-Out(S0)
	S0= DMMUHitReg.Out30_31=DMMUHit(pid,a+{16{d[0]},d})[30:31]  DMMUHitReg-Out(S0)
	S0= DCacheHitReg.Out=DCacheHit(a+{16{d[0]},d})              DCacheHitReg-Out(S0)
	S0= DCacheHitReg.Out26_31=DCacheHit(a+{16{d[0]},d})[26:31]  DCacheHitReg-Out(S0)
	S0= DCacheHitReg.Out30_31=DCacheHit(a+{16{d[0]},d})[30:31]  DCacheHitReg-Out(S0)
	S0= DR.Out={B1,B2,B3,B4}                                    DR-Out(S0)
	S0= DR.Out26_31={B1,B2,B3,B4}[26:31]                        DR-Out(S0)
	S0= DR.Out30_31={B1,B2,B3,B4}[30:31]                        DR-Out(S0)
	S0= DCache.RLineEA=DCacheRLineEA()                          DCache-WriteBack()
	S0= DCache.RLineData=DCacheRLineData()                      DCache-WriteBack()
	S0= DCache.RLineDirty=DCacheRLineDirty()                    DCache-WriteBack()
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F545)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F546)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F547)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F548)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F549)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F550)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F551)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F552)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F553)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F554)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={35,rT,rA,d}                                   IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F555)
	S0= IRMux.MemData={35,rT,rA,d}                              Path(S0,S0)
	S0= IRMux.Out={35,rT,rA,d}                                  IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F556)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F557)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F558)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F559)
	S0= IR.In={35,rT,rA,d}                                      Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F560)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F561)
	S0= IR.Out0_5=>CU.Op                                        Premise(F562)
	S0= CU.Op=35                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= CU.MemDataSelFunc=mds_lbz                               CU(S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F563)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.Rdata1=a                                         GPRegs-Read(S0,S0)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F564)
	S0= A.In=a                                                  Path(S0,S0)
	S0= IR.Out16_31=>IMMEXT.In                                  Premise(F565)
	S0= IMMEXT.In=d                                             Path(S0,S0)
	S0= IMMEXT.Out={16{d[0]},d}                                 IMMEXT(S0)
	S0= IMMEXT.Out=>B.In                                        Premise(F566)
	S0= B.In={16{d[0]},d}                                       Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F567)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F568)
	S0= ALU.B={16{d[0]},d}                                      Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F569)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=a+{16{d[0]},d}                                  ALU(S0,S0)
	S0= ALU.CMP=Compare0(a+{16{d[0]},d})                        ALU(S0,S0)
	S0= ALU.OV=OverFlow(a+{16{d[0]},d})                         ALU(S0,S0)
	S0= ALU.CA=Carry(a+{16{d[0]},d})                            ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F570)
	S0= ALUOut.In=a+{16{d[0]},d}                                Path(S0,S0)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F571)
	S0= DMMU.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMMU.IEA                                    Premise(F572)
	S0= DMMU.IEA=a+{16{d[0]},d}                                 Path(S0,S0)
	S0= DMMU.Addr={pid,a+{16{d[0]},d}}                          DMMU-Search(S0,S0)
	S0= DMMU.Hit=DMMUHit(pid,a+{16{d[0]},d})                    DMMU-Search(S0,S0)
	S0= DMMU.Addr=>DAddrReg.In                                  Premise(F573)
	S0= DAddrReg.In={pid,a+{16{d[0]},d}}                        Path(S0,S0)
	S0= DMMU.Hit=>DMMUHitReg.In                                 Premise(F574)
	S0= DMMUHitReg.In=DMMUHit(pid,a+{16{d[0]},d})               Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F575)
	S0= DCache.IEA=a+{16{d[0]},d}                               Path(S0,S0)
	S0= DCache.Hit=DCacheHit(a+{16{d[0]},d})                    DCache-Search(S0)
	S0= DCache.Out=>DCacheReg.In                                Premise(F576)
	S0= DCache.Hit=>DCacheHitReg.In                             Premise(F577)
	S0= DCacheHitReg.In=DCacheHit(a+{16{d[0]},d})               Path(S0,S0)
	S0= DMMUHitReg.Out=>CU.DMemHit                              Premise(F578)
	S0= CU.DMemHit=DMMUHit(pid,a+{16{d[0]},d})                  Path(S0,S0)
	S0= DCacheHitReg.Out=>CU.DCacheHit                          Premise(F579)
	S0= CU.DCacheHit=DCacheHit(a+{16{d[0]},d})                  Path(S0,S0)
	S0= DCacheReg.Out=>DR.In                                    Premise(F580)
	S0= DCache.RLineDirty=>CU.DCacheWriteBack                   Premise(F581)
	S0= CU.DCacheWriteBack=DCacheRLineDirty()                   Path(S0,S0)
	S0= PIDReg.Out=>DMMU.PID                                    Premise(F582)
	S0= DCache.RLineEA=>DMMU.IEAR                               Premise(F583)
	S0= DMMU.IEAR=DCacheRLineEA()                               Path(S0,S0)
	S0= DMMU.AddrR={pid,DCacheRLineEA()}                        DMMU-RSearch(S0,S0)
	S0= DMMU.AddrR=>DMem.MEM8WordWAddr                          Premise(F584)
	S0= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}                Path(S0,S0)
	S0= DCache.RLineData=>DMem.MEM8WordWData                    Premise(F585)
	S0= DMem.MEM8WordWData=DCacheRLineData()                    Path(S0,S0)
	S0= ALUOut.Out=>DCache.IEA                                  Premise(F586)
	S0= DAddrReg.Out=>DMem.RAddr                                Premise(F587)
	S0= DMem.RAddr={pid,a+{16{d[0]},d}}                         Path(S0,S0)
	S0= DMem.MEM8WordOut=>DCache.WData                          Premise(F588)
	S0= DMem.Out=>DR.In                                         Premise(F589)
	S0= DR.Out=>MemDataSel.Data                                 Premise(F590)
	S0= MemDataSel.Data={B1,B2,B3,B4}                           Path(S0,S0)
	S0= ALUOut.Out30_31=>MemDataSel.Addr                        Premise(F591)
	S0= MemDataSel.Addr=a+{16{d[0]},d}[30:31]                   Path(S0,S0)
	S0= CU.MemDataSelFunc=>MemDataSel.Func                      Premise(F592)
	S0= MemDataSel.Func=mds_lbz                                 Path(S0,S0)
	S0= MemDataSel.Out={24'b0,B4}                               MemDataSel()
	S0= MemDataSel.Out=>GPRegs.WData                            Premise(F593)
	S0= GPRegs.WData={24'b0,B4}                                 Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F594)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WBData                               Premise(F595)
	S0= GPRegs.WBData=a+{16{d[0]},d}                            Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.WBReg                               Premise(F596)
	S0= GPRegs.WBReg=rA                                         Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F597)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F598)
	S0= CtrlPC=0                                                Premise(F599)
	S0= CtrlPCInc=0                                             Premise(F600)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F601)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F602)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F603)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F604)
	S0= CtrlICacheHitReg=0                                      Premise(F605)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F606)
	S0= IMem[{pid,addr}]={35,rT,rA,d}                           IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F607)
	S0= CtrlIR=0                                                Premise(F608)
	S0= [IR]={35,rT,rA,d}                                       IR-Hold(S0,S0)
	S0= CtrlGPRegs=1                                            Premise(F609)
	S0= GPRegs[rT]={24'b0,B4}                                   GPRegs-Write(S0,S0,S0)
	S0= GPRegs[rA]=a+{16{d[0]},d}                               GPRegs-Write(S0,S0,S0)
	S0= CtrlA=0                                                 Premise(F610)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F611)
	S0= [B]={16{d[0]},d}                                        B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F612)
	S0= [ALUOut]=a+{16{d[0]},d}                                 ALUOut-Hold(S0,S0)
	S0= CtrlDMMU=0                                              Premise(F613)
	S0= CtrlDAddrReg=0                                          Premise(F614)
	S0= [DAddrReg]={pid,a+{16{d[0]},d}}                         DAddrReg-Hold(S0,S0)
	S0= CtrlDMMUHitReg=0                                        Premise(F615)
	S0= [DMMUHitReg]=DMMUHit(pid,a+{16{d[0]},d})                DMMUHitReg-Hold(S0,S0)
	S0= CtrlDCache=0                                            Premise(F616)
	S0= DCache[line_a+{16{d[0]},d}]=DMemGet8Word({pid,a+{16{d[0]},d}})DCache-Hold(S0,S0)
	S0= CtrlDCacheReg=0                                         Premise(F617)
	S0= CtrlDCacheHitReg=0                                      Premise(F618)
	S0= [DCacheHitReg]=DCacheHit(a+{16{d[0]},d})                DCacheHitReg-Hold(S0,S0)
	S0= CtrlDR=0                                                Premise(F619)
	S0= [DR]={B1,B2,B3,B4}                                      DR-Hold(S0,S0)
	S0= CtrlDMem=0                                              Premise(F620)
	S0= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}                DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F621)
	S0= DMem.Out={B1,B2,B3,B4}                                  DMem-Read(S0,S0,S0,S0)
	S0= DR.In={B1,B2,B3,B4}                                     Path(S0,S0)
	S0= DMem.MEM8WordOut=DMemGet8Word({pid,a+{16{d[0]},d}})     DMem-Read(S0,S0,S0,S0)
	S0= DCache.WData=DMemGet8Word({pid,a+{16{d[0]},d}})         Path(S0,S0)

POST	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= IMem[{pid,addr}]={35,rT,rA,d}                           IMem-Hold(S0,S0)
	S0= [IR]={35,rT,rA,d}                                       IR-Hold(S0,S0)
	S0= GPRegs[rT]={24'b0,B4}                                   GPRegs-Write(S0,S0,S0)
	S0= GPRegs[rA]=a+{16{d[0]},d}                               GPRegs-Write(S0,S0,S0)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= [B]={16{d[0]},d}                                        B-Hold(S0,S0)
	S0= [ALUOut]=a+{16{d[0]},d}                                 ALUOut-Hold(S0,S0)
	S0= [DAddrReg]={pid,a+{16{d[0]},d}}                         DAddrReg-Hold(S0,S0)
	S0= [DMMUHitReg]=DMMUHit(pid,a+{16{d[0]},d})                DMMUHitReg-Hold(S0,S0)
	S0= DCache[line_a+{16{d[0]},d}]=DMemGet8Word({pid,a+{16{d[0]},d}})DCache-Hold(S0,S0)
	S0= [DCacheHitReg]=DCacheHit(a+{16{d[0]},d})                DCacheHitReg-Hold(S0,S0)
	S0= [DR]={B1,B2,B3,B4}                                      DR-Hold(S0,S0)
	S0= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}                DMem-Hold(S0,S0)

