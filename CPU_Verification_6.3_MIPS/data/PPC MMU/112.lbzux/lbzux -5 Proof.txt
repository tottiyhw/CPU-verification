
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,238}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F8)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F9)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F10)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F59)
	S15= CtrlPCInc=0                                            Premise(F60)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F61)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F66)
	S20= IMem[{pid,addr}]={31,rT,rA,rB,238}                     IMem-Hold(S2,S19)
	S21= CtrlGPRegs=0                                           Premise(F69)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= GPRegs[rB]=b                                           GPRegs-Hold(S4,S21)

IMMU	S24= PC.Out=addr                                            PC-Out(S16)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S26= PC.Out=>ICache.IEA                                     Premise(F86)
	S27= ICache.IEA=addr                                        Path(S24,S26)
	S28= IAddrReg.Out=>IMem.RAddr                               Premise(F91)
	S29= IMem.RAddr={pid,addr}                                  Path(S25,S28)
	S30= IMem.Out={31,rT,rA,rB,238}                             IMem-Read(S29,S20)
	S31= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S29,S20)
	S32= IMem.Out=>IRMux.MemData                                Premise(F92)
	S33= IRMux.MemData={31,rT,rA,rB,238}                        Path(S30,S32)
	S34= IRMux.Out={31,rT,rA,rB,238}                            IRMux-Select(S33)
	S35= IRMux.Out=>IR.In                                       Premise(F96)
	S36= IR.In={31,rT,rA,rB,238}                                Path(S34,S35)
	S37= IMem.MEM8WordOut=>ICache.WData                         Premise(F97)
	S38= ICache.WData=IMemGet8Word({pid,addr})                  Path(S31,S37)
	S39= CtrlPC=0                                               Premise(F133)
	S40= CtrlPCInc=1                                            Premise(F134)
	S41= PC[Out]=addr+4                                         PC-Inc(S16,S39,S40)
	S42= CtrlICache=1                                           Premise(F137)
	S43= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S27,S38,S42)
	S44= CtrlIR=1                                               Premise(F142)
	S45= [IR]={31,rT,rA,rB,238}                                 IR-Write(S36,S44)
	S46= CtrlGPRegs=0                                           Premise(F143)
	S47= GPRegs[rA]=a                                           GPRegs-Hold(S22,S46)
	S48= GPRegs[rB]=b                                           GPRegs-Hold(S23,S46)

ID	S49= IR.Out11_15=rA                                         IR-Out(S45)
	S50= IR.Out16_20=rB                                         IR-Out(S45)
	S51= IR.Out11_15=>GPRegs.RReg1                              Premise(F175)
	S52= GPRegs.RReg1=rA                                        Path(S49,S51)
	S53= GPRegs.Rdata1=a                                        GPRegs-Read(S52,S47)
	S54= GPRegs.Rdata1=>A.In                                    Premise(F176)
	S55= A.In=a                                                 Path(S53,S54)
	S56= IR.Out16_20=>GPRegs.RReg2                              Premise(F177)
	S57= GPRegs.RReg2=rB                                        Path(S50,S56)
	S58= GPRegs.Rdata2=b                                        GPRegs-Read(S57,S48)
	S59= GPRegs.Rdata2=>B.In                                    Premise(F178)
	S60= B.In=b                                                 Path(S58,S59)
	S61= CtrlPC=0                                               Premise(F207)
	S62= CtrlPCInc=0                                            Premise(F208)
	S63= PC[Out]=addr+4                                         PC-Hold(S41,S61,S62)
	S64= CtrlICache=0                                           Premise(F211)
	S65= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S43,S64)
	S66= CtrlIR=0                                               Premise(F216)
	S67= [IR]={31,rT,rA,rB,238}                                 IR-Hold(S45,S66)
	S68= CtrlA=1                                                Premise(F218)
	S69= [A]=a                                                  A-Write(S55,S68)
	S70= CtrlB=1                                                Premise(F219)
	S71= [B]=b                                                  B-Write(S60,S70)

EX	S72= A.Out=a                                                A-Out(S69)
	S73= B.Out=b                                                B-Out(S71)
	S74= A.Out=>ALU.A                                           Premise(F253)
	S75= ALU.A=a                                                Path(S72,S74)
	S76= B.Out=>ALU.B                                           Premise(F254)
	S77= ALU.B=b                                                Path(S73,S76)
	S78= ALU.Out=a+b                                            ALU(S75,S77)
	S79= ALU.Out=>ALUOut.In                                     Premise(F256)
	S80= ALUOut.In=a+b                                          Path(S78,S79)
	S81= CtrlPC=0                                               Premise(F281)
	S82= CtrlPCInc=0                                            Premise(F282)
	S83= PC[Out]=addr+4                                         PC-Hold(S63,S81,S82)
	S84= CtrlICache=0                                           Premise(F285)
	S85= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S65,S84)
	S86= CtrlIR=0                                               Premise(F290)
	S87= [IR]={31,rT,rA,rB,238}                                 IR-Hold(S67,S86)
	S88= CtrlALUOut=1                                           Premise(F294)
	S89= [ALUOut]=a+b                                           ALUOut-Write(S80,S88)

MEM	S90= CtrlPC=0                                               Premise(F355)
	S91= CtrlPCInc=0                                            Premise(F356)
	S92= PC[Out]=addr+4                                         PC-Hold(S83,S90,S91)
	S93= CtrlICache=0                                           Premise(F359)
	S94= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S85,S93)
	S95= CtrlIR=0                                               Premise(F364)
	S96= [IR]={31,rT,rA,rB,238}                                 IR-Hold(S87,S95)
	S97= CtrlALUOut=0                                           Premise(F368)
	S98= [ALUOut]=a+b                                           ALUOut-Hold(S89,S97)

DMMU1	S99= CtrlPC=0                                               Premise(F429)
	S100= CtrlPCInc=0                                           Premise(F430)
	S101= PC[Out]=addr+4                                        PC-Hold(S92,S99,S100)
	S102= CtrlICache=0                                          Premise(F433)
	S103= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S94,S102)
	S104= CtrlIR=0                                              Premise(F438)
	S105= [IR]={31,rT,rA,rB,238}                                IR-Hold(S96,S104)
	S106= CtrlALUOut=0                                          Premise(F442)
	S107= [ALUOut]=a+b                                          ALUOut-Hold(S98,S106)

DMMU2	S108= CtrlPC=0                                              Premise(F503)
	S109= CtrlPCInc=0                                           Premise(F504)
	S110= PC[Out]=addr+4                                        PC-Hold(S101,S108,S109)
	S111= CtrlICache=0                                          Premise(F507)
	S112= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S103,S111)
	S113= CtrlIR=0                                              Premise(F512)
	S114= [IR]={31,rT,rA,rB,238}                                IR-Hold(S105,S113)
	S115= CtrlALUOut=0                                          Premise(F516)
	S116= [ALUOut]=a+b                                          ALUOut-Hold(S107,S115)

WB	S117= IR.Out6_10=rT                                         IR-Out(S114)
	S118= IR.Out11_15=rA                                        IR-Out(S114)
	S119= ALUOut.Out=a+b                                        ALUOut-Out(S116)
	S120= MemDataSel.Out={24'b0,B4}                             MemDataSel()
	S121= MemDataSel.Out=>GPRegs.WData                          Premise(F571)
	S122= GPRegs.WData={24'b0,B4}                               Path(S120,S121)
	S123= IR.Out6_10=>GPRegs.WReg                               Premise(F572)
	S124= GPRegs.WReg=rT                                        Path(S117,S123)
	S125= ALUOut.Out=>GPRegs.WBData                             Premise(F573)
	S126= GPRegs.WBData=a+b                                     Path(S119,S125)
	S127= IR.Out11_15=>GPRegs.WBReg                             Premise(F574)
	S128= GPRegs.WBReg=rA                                       Path(S118,S127)
	S129= CtrlPC=0                                              Premise(F577)
	S130= CtrlPCInc=0                                           Premise(F578)
	S131= PC[Out]=addr+4                                        PC-Hold(S110,S129,S130)
	S132= CtrlICache=0                                          Premise(F581)
	S133= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S112,S132)
	S134= CtrlGPRegs=1                                          Premise(F587)
	S135= GPRegs[rT]={24'b0,B4}                                 GPRegs-Write(S124,S122,S134)
	S136= GPRegs[rA]=a+b                                        GPRegs-Write(S128,S126,S134)

POST	S131= PC[Out]=addr+4                                        PC-Hold(S110,S129,S130)
	S133= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S112,S132)
	S135= GPRegs[rT]={24'b0,B4}                                 GPRegs-Write(S124,S122,S134)
	S136= GPRegs[rA]=a+b                                        GPRegs-Write(S128,S126,S134)

