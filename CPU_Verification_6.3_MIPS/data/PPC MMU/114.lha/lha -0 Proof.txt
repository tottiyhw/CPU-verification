
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={42,rT,rA,d}                           Premise(F2)
	S3= ICache[addr]={42,rT,rA,d}                               Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMMU.PID                                    Premise(F8)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F9)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F10)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= PC.Out=>ICache.IEA                                     Premise(F12)
	S14= ICache.IEA=addr                                        Path(S5,S13)
	S15= ICache.Out={42,rT,rA,d}                                ICache-Search(S14,S3)
	S16= ICache.Out=>ICacheReg.In                               Premise(F13)
	S17= ICacheReg.In={42,rT,rA,d}                              Path(S15,S16)
	S18= CtrlPC=0                                               Premise(F58)
	S19= CtrlPCInc=0                                            Premise(F59)
	S20= PC[Out]=addr                                           PC-Hold(S1,S18,S19)
	S21= CtrlIAddrReg=1                                         Premise(F60)
	S22= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S21)
	S23= CtrlICacheReg=1                                        Premise(F63)
	S24= [ICacheReg]={42,rT,rA,d}                               ICacheReg-Write(S17,S23)
	S25= CtrlIMem=0                                             Premise(F65)
	S26= IMem[{pid,addr}]={42,rT,rA,d}                          IMem-Hold(S2,S25)

IMMU	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S22)
	S28= ICacheReg.Out={42,rT,rA,d}                             ICacheReg-Out(S24)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F90)
	S30= IMem.RAddr={pid,addr}                                  Path(S27,S29)
	S31= IMem.Out={42,rT,rA,d}                                  IMem-Read(S30,S26)
	S32= IMem.Out=>IRMux.MemData                                Premise(F91)
	S33= IRMux.MemData={42,rT,rA,d}                             Path(S31,S32)
	S34= ICacheReg.Out=>IRMux.CacheData                         Premise(F92)
	S35= IRMux.CacheData={42,rT,rA,d}                           Path(S28,S34)
	S36= IRMux.Out={42,rT,rA,d}                                 IRMux-Select(S33,S35)
	S37= IRMux.Out=>IR.In                                       Premise(F95)
	S38= IR.In={42,rT,rA,d}                                     Path(S36,S37)
	S39= CtrlPC=0                                               Premise(F131)
	S40= CtrlPCInc=1                                            Premise(F132)
	S41= PC[Out]=addr+4                                         PC-Inc(S20,S39,S40)
	S42= CtrlIR=1                                               Premise(F140)
	S43= [IR]={42,rT,rA,d}                                      IR-Write(S38,S42)

ID	S44= CtrlPC=0                                               Premise(F204)
	S45= CtrlPCInc=0                                            Premise(F205)
	S46= PC[Out]=addr+4                                         PC-Hold(S41,S44,S45)
	S47= CtrlIR=0                                               Premise(F213)
	S48= [IR]={42,rT,rA,d}                                      IR-Hold(S43,S47)

EX	S49= CtrlPC=0                                               Premise(F277)
	S50= CtrlPCInc=0                                            Premise(F278)
	S51= PC[Out]=addr+4                                         PC-Hold(S46,S49,S50)
	S52= CtrlIR=0                                               Premise(F286)
	S53= [IR]={42,rT,rA,d}                                      IR-Hold(S48,S52)

MEM	S54= CtrlPC=0                                               Premise(F350)
	S55= CtrlPCInc=0                                            Premise(F351)
	S56= PC[Out]=addr+4                                         PC-Hold(S51,S54,S55)
	S57= CtrlIR=0                                               Premise(F359)
	S58= [IR]={42,rT,rA,d}                                      IR-Hold(S53,S57)

DMMU1	S59= CtrlPC=0                                               Premise(F423)
	S60= CtrlPCInc=0                                            Premise(F424)
	S61= PC[Out]=addr+4                                         PC-Hold(S56,S59,S60)
	S62= CtrlIR=0                                               Premise(F432)
	S63= [IR]={42,rT,rA,d}                                      IR-Hold(S58,S62)

DMMU2	S64= CtrlPC=0                                               Premise(F496)
	S65= CtrlPCInc=0                                            Premise(F497)
	S66= PC[Out]=addr+4                                         PC-Hold(S61,S64,S65)
	S67= CtrlIR=0                                               Premise(F505)
	S68= [IR]={42,rT,rA,d}                                      IR-Hold(S63,S67)

WB	S69= IR.Out6_10=rT                                          IR-Out(S68)
	S70= MemDataSel.Out={16{B3[0]},B3,B4}                       MemDataSel()
	S71= MemDataSel.Out=>GPRegs.WData                           Premise(F565)
	S72= GPRegs.WData={16{B3[0]},B3,B4}                         Path(S70,S71)
	S73= IR.Out6_10=>GPRegs.WReg                                Premise(F566)
	S74= GPRegs.WReg=rT                                         Path(S69,S73)
	S75= CtrlPC=0                                               Premise(F569)
	S76= CtrlPCInc=0                                            Premise(F570)
	S77= PC[Out]=addr+4                                         PC-Hold(S66,S75,S76)
	S78= CtrlGPRegs=1                                           Premise(F579)
	S79= GPRegs[rT]={16{B3[0]},B3,B4}                           GPRegs-Write(S74,S72,S78)

POST	S77= PC[Out]=addr+4                                         PC-Hold(S66,S75,S76)
	S79= GPRegs[rT]={16{B3[0]},B3,B4}                           GPRegs-Write(S74,S72,S78)

