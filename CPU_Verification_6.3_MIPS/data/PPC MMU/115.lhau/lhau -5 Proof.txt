
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={43,rT,rA,d}                           Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F8)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F57)
	S14= CtrlPCInc=0                                            Premise(F58)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F59)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F64)
	S19= IMem[{pid,addr}]={43,rT,rA,d}                          IMem-Hold(S2,S18)
	S20= CtrlGPRegs=0                                           Premise(F67)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)

IMMU	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= PC.Out=>ICache.IEA                                     Premise(F84)
	S25= ICache.IEA=addr                                        Path(S22,S24)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F89)
	S27= IMem.RAddr={pid,addr}                                  Path(S23,S26)
	S28= IMem.Out={43,rT,rA,d}                                  IMem-Read(S27,S19)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S19)
	S30= IMem.Out=>IRMux.MemData                                Premise(F90)
	S31= IRMux.MemData={43,rT,rA,d}                             Path(S28,S30)
	S32= IRMux.Out={43,rT,rA,d}                                 IRMux-Select(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F94)
	S34= IR.In={43,rT,rA,d}                                     Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F95)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= CtrlPC=0                                               Premise(F130)
	S38= CtrlPCInc=1                                            Premise(F131)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F134)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S36,S40)
	S42= CtrlIR=1                                               Premise(F139)
	S43= [IR]={43,rT,rA,d}                                      IR-Write(S34,S42)
	S44= CtrlGPRegs=0                                           Premise(F140)
	S45= GPRegs[rA]=a                                           GPRegs-Hold(S21,S44)

ID	S46= IR.Out11_15=rA                                         IR-Out(S43)
	S47= IR.Out16_31=d                                          IR-Out(S43)
	S48= IR.Out11_15=>GPRegs.RReg1                              Premise(F171)
	S49= GPRegs.RReg1=rA                                        Path(S46,S48)
	S50= GPRegs.Rdata1=a                                        GPRegs-Read(S49,S45)
	S51= GPRegs.Rdata1=>A.In                                    Premise(F172)
	S52= A.In=a                                                 Path(S50,S51)
	S53= IR.Out16_31=>IMMEXT.In                                 Premise(F173)
	S54= IMMEXT.In=d                                            Path(S47,S53)
	S55= IMMEXT.Out={16{d[0]},d}                                IMMEXT(S54)
	S56= IMMEXT.Out=>B.In                                       Premise(F174)
	S57= B.In={16{d[0]},d}                                      Path(S55,S56)
	S58= CtrlPC=0                                               Premise(F203)
	S59= CtrlPCInc=0                                            Premise(F204)
	S60= PC[Out]=addr+4                                         PC-Hold(S39,S58,S59)
	S61= CtrlICache=0                                           Premise(F207)
	S62= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S61)
	S63= CtrlIR=0                                               Premise(F212)
	S64= [IR]={43,rT,rA,d}                                      IR-Hold(S43,S63)
	S65= CtrlA=1                                                Premise(F214)
	S66= [A]=a                                                  A-Write(S52,S65)
	S67= CtrlB=1                                                Premise(F215)
	S68= [B]={16{d[0]},d}                                       B-Write(S57,S67)

EX	S69= A.Out=a                                                A-Out(S66)
	S70= B.Out={16{d[0]},d}                                     B-Out(S68)
	S71= A.Out=>ALU.A                                           Premise(F248)
	S72= ALU.A=a                                                Path(S69,S71)
	S73= B.Out=>ALU.B                                           Premise(F249)
	S74= ALU.B={16{d[0]},d}                                     Path(S70,S73)
	S75= ALU.Out=a+{16{d[0]},d}                                 ALU(S72,S74)
	S76= ALU.Out=>ALUOut.In                                     Premise(F251)
	S77= ALUOut.In=a+{16{d[0]},d}                               Path(S75,S76)
	S78= CtrlPC=0                                               Premise(F276)
	S79= CtrlPCInc=0                                            Premise(F277)
	S80= PC[Out]=addr+4                                         PC-Hold(S60,S78,S79)
	S81= CtrlICache=0                                           Premise(F280)
	S82= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S62,S81)
	S83= CtrlIR=0                                               Premise(F285)
	S84= [IR]={43,rT,rA,d}                                      IR-Hold(S64,S83)
	S85= CtrlALUOut=1                                           Premise(F289)
	S86= [ALUOut]=a+{16{d[0]},d}                                ALUOut-Write(S77,S85)

MEM	S87= CtrlPC=0                                               Premise(F349)
	S88= CtrlPCInc=0                                            Premise(F350)
	S89= PC[Out]=addr+4                                         PC-Hold(S80,S87,S88)
	S90= CtrlICache=0                                           Premise(F353)
	S91= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S82,S90)
	S92= CtrlIR=0                                               Premise(F358)
	S93= [IR]={43,rT,rA,d}                                      IR-Hold(S84,S92)
	S94= CtrlALUOut=0                                           Premise(F362)
	S95= [ALUOut]=a+{16{d[0]},d}                                ALUOut-Hold(S86,S94)

DMMU1	S96= CtrlPC=0                                               Premise(F422)
	S97= CtrlPCInc=0                                            Premise(F423)
	S98= PC[Out]=addr+4                                         PC-Hold(S89,S96,S97)
	S99= CtrlICache=0                                           Premise(F426)
	S100= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S91,S99)
	S101= CtrlIR=0                                              Premise(F431)
	S102= [IR]={43,rT,rA,d}                                     IR-Hold(S93,S101)
	S103= CtrlALUOut=0                                          Premise(F435)
	S104= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S95,S103)

DMMU2	S105= CtrlPC=0                                              Premise(F495)
	S106= CtrlPCInc=0                                           Premise(F496)
	S107= PC[Out]=addr+4                                        PC-Hold(S98,S105,S106)
	S108= CtrlICache=0                                          Premise(F499)
	S109= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S100,S108)
	S110= CtrlIR=0                                              Premise(F504)
	S111= [IR]={43,rT,rA,d}                                     IR-Hold(S102,S110)
	S112= CtrlALUOut=0                                          Premise(F508)
	S113= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S104,S112)

WB	S114= IR.Out6_10=rT                                         IR-Out(S111)
	S115= IR.Out11_15=rA                                        IR-Out(S111)
	S116= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S113)
	S117= MemDataSel.Out={16{B3[0]},B3,B4}                      MemDataSel()
	S118= MemDataSel.Out=>GPRegs.WData                          Premise(F562)
	S119= GPRegs.WData={16{B3[0]},B3,B4}                        Path(S117,S118)
	S120= IR.Out6_10=>GPRegs.WReg                               Premise(F563)
	S121= GPRegs.WReg=rT                                        Path(S114,S120)
	S122= ALUOut.Out=>GPRegs.WBData                             Premise(F564)
	S123= GPRegs.WBData=a+{16{d[0]},d}                          Path(S116,S122)
	S124= IR.Out11_15=>GPRegs.WBReg                             Premise(F565)
	S125= GPRegs.WBReg=rA                                       Path(S115,S124)
	S126= CtrlPC=0                                              Premise(F568)
	S127= CtrlPCInc=0                                           Premise(F569)
	S128= PC[Out]=addr+4                                        PC-Hold(S107,S126,S127)
	S129= CtrlICache=0                                          Premise(F572)
	S130= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S129)
	S131= CtrlGPRegs=1                                          Premise(F578)
	S132= GPRegs[rT]={16{B3[0]},B3,B4}                          GPRegs-Write(S121,S119,S131)
	S133= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S125,S123,S131)

POST	S128= PC[Out]=addr+4                                        PC-Hold(S107,S126,S127)
	S130= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S129)
	S132= GPRegs[rT]={16{B3[0]},B3,B4}                          GPRegs-Write(S121,S119,S131)
	S133= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S125,S123,S131)

