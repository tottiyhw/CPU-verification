
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={40,rT,rA,d}                           Premise(F2)
	S3= ICache[addr]={40,rT,rA,d}                               Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= DMem[{pid,AddrSel(rA,a)+{16{d[0]},d}}]={B1,B2,B3,B4}    Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F8)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F11)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={40,rT,rA,d}                                ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F12)
	S19= ICacheReg.In={40,rT,rA,d}                              Path(S17,S18)
	S20= CtrlPIDReg=0                                           Premise(F59)
	S21= [PIDReg]=pid                                           PIDReg-Hold(S0,S20)
	S22= CtrlPC=0                                               Premise(F61)
	S23= CtrlPCInc=0                                            Premise(F62)
	S24= PC[Out]=addr                                           PC-Hold(S1,S22,S23)
	S25= CtrlIAddrReg=1                                         Premise(F63)
	S26= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S25)
	S27= CtrlICacheReg=1                                        Premise(F66)
	S28= [ICacheReg]={40,rT,rA,d}                               ICacheReg-Write(S19,S27)
	S29= CtrlIMem=0                                             Premise(F68)
	S30= IMem[{pid,addr}]={40,rT,rA,d}                          IMem-Hold(S2,S29)
	S31= CtrlGPRegs=0                                           Premise(F71)
	S32= GPRegs[rA]=a                                           GPRegs-Hold(S4,S31)
	S33= CtrlDMem=0                                             Premise(F82)
	S34= DMem[{pid,AddrSel(rA,a)+{16{d[0]},d}}]={B1,B2,B3,B4}   DMem-Hold(S5,S33)

IMMU	S35= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S26)
	S36= ICacheReg.Out={40,rT,rA,d}                             ICacheReg-Out(S28)
	S37= IAddrReg.Out=>IMem.RAddr                               Premise(F93)
	S38= IMem.RAddr={pid,addr}                                  Path(S35,S37)
	S39= IMem.Out={40,rT,rA,d}                                  IMem-Read(S38,S30)
	S40= IMem.Out=>IRMux.MemData                                Premise(F94)
	S41= IRMux.MemData={40,rT,rA,d}                             Path(S39,S40)
	S42= ICacheReg.Out=>IRMux.CacheData                         Premise(F95)
	S43= IRMux.CacheData={40,rT,rA,d}                           Path(S36,S42)
	S44= IRMux.Out={40,rT,rA,d}                                 IRMux-Select(S41,S43)
	S45= IRMux.Out=>IR.In                                       Premise(F98)
	S46= IR.In={40,rT,rA,d}                                     Path(S44,S45)
	S47= CtrlPIDReg=0                                           Premise(F136)
	S48= [PIDReg]=pid                                           PIDReg-Hold(S21,S47)
	S49= CtrlPC=0                                               Premise(F138)
	S50= CtrlPCInc=1                                            Premise(F139)
	S51= PC[Out]=addr+4                                         PC-Inc(S24,S49,S50)
	S52= CtrlIR=1                                               Premise(F147)
	S53= [IR]={40,rT,rA,d}                                      IR-Write(S46,S52)
	S54= CtrlGPRegs=0                                           Premise(F148)
	S55= GPRegs[rA]=a                                           GPRegs-Hold(S32,S54)
	S56= CtrlDMem=0                                             Premise(F159)
	S57= DMem[{pid,AddrSel(rA,a)+{16{d[0]},d}}]={B1,B2,B3,B4}   DMem-Hold(S34,S56)

ID	S58= IR.Out11_15=rA                                         IR-Out(S53)
	S59= IR.Out16_31=d                                          IR-Out(S53)
	S60= IR.Out11_15=>GPRegs.RReg1                              Premise(F179)
	S61= GPRegs.RReg1=rA                                        Path(S58,S60)
	S62= GPRegs.Rdata1=a                                        GPRegs-Read(S61,S55)
	S63= IR.Out11_15=>AddrSelMux.Sel                            Premise(F180)
	S64= AddrSelMux.Sel=rA                                      Path(S58,S63)
	S65= GPRegs.Rdata1=>AddrSelMux.Data                         Premise(F181)
	S66= AddrSelMux.Data=a                                      Path(S62,S65)
	S67= AddrSelMux.Out=AddrSel(rA,a)                           AddrSelMux(S64,S66)
	S68= AddrSelMux.Out=>A.In                                   Premise(F182)
	S69= A.In=AddrSel(rA,a)                                     Path(S67,S68)
	S70= IR.Out16_31=>IMMEXT.In                                 Premise(F183)
	S71= IMMEXT.In=d                                            Path(S59,S70)
	S72= IMMEXT.Out={16{d[0]},d}                                IMMEXT(S71)
	S73= IMMEXT.Out=>B.In                                       Premise(F184)
	S74= B.In={16{d[0]},d}                                      Path(S72,S73)
	S75= CtrlPIDReg=0                                           Premise(F213)
	S76= [PIDReg]=pid                                           PIDReg-Hold(S48,S75)
	S77= CtrlPC=0                                               Premise(F215)
	S78= CtrlPCInc=0                                            Premise(F216)
	S79= PC[Out]=addr+4                                         PC-Hold(S51,S77,S78)
	S80= CtrlIR=0                                               Premise(F224)
	S81= [IR]={40,rT,rA,d}                                      IR-Hold(S53,S80)
	S82= CtrlA=1                                                Premise(F226)
	S83= [A]=AddrSel(rA,a)                                      A-Write(S69,S82)
	S84= CtrlB=1                                                Premise(F227)
	S85= [B]={16{d[0]},d}                                       B-Write(S74,S84)
	S86= CtrlDMem=0                                             Premise(F236)
	S87= DMem[{pid,AddrSel(rA,a)+{16{d[0]},d}}]={B1,B2,B3,B4}   DMem-Hold(S57,S86)

EX	S88= A.Out=AddrSel(rA,a)                                    A-Out(S83)
	S89= B.Out={16{d[0]},d}                                     B-Out(S85)
	S90= A.Out=>ALU.A                                           Premise(F262)
	S91= ALU.A=AddrSel(rA,a)                                    Path(S88,S90)
	S92= B.Out=>ALU.B                                           Premise(F263)
	S93= ALU.B={16{d[0]},d}                                     Path(S89,S92)
	S94= ALU.Out=AddrSel(rA,a)+{16{d[0]},d}                     ALU(S91,S93)
	S95= ALU.Out=>ALUOut.In                                     Premise(F265)
	S96= ALUOut.In=AddrSel(rA,a)+{16{d[0]},d}                   Path(S94,S95)
	S97= CtrlPIDReg=0                                           Premise(F290)
	S98= [PIDReg]=pid                                           PIDReg-Hold(S76,S97)
	S99= CtrlPC=0                                               Premise(F292)
	S100= CtrlPCInc=0                                           Premise(F293)
	S101= PC[Out]=addr+4                                        PC-Hold(S79,S99,S100)
	S102= CtrlIR=0                                              Premise(F301)
	S103= [IR]={40,rT,rA,d}                                     IR-Hold(S81,S102)
	S104= CtrlALUOut=1                                          Premise(F305)
	S105= [ALUOut]=AddrSel(rA,a)+{16{d[0]},d}                   ALUOut-Write(S96,S104)
	S106= CtrlDMem=0                                            Premise(F313)
	S107= DMem[{pid,AddrSel(rA,a)+{16{d[0]},d}}]={B1,B2,B3,B4}  DMem-Hold(S87,S106)

MEM	S108= PIDReg.Out=pid                                        PIDReg-Out(S98)
	S109= ALUOut.Out=AddrSel(rA,a)+{16{d[0]},d}                 ALUOut-Out(S105)
	S110= PIDReg.Out=>DMMU.PID                                  Premise(F343)
	S111= DMMU.PID=pid                                          Path(S108,S110)
	S112= ALUOut.Out=>DMMU.IEA                                  Premise(F344)
	S113= DMMU.IEA=AddrSel(rA,a)+{16{d[0]},d}                   Path(S109,S112)
	S114= DMMU.Addr={pid,AddrSel(rA,a)+{16{d[0]},d}}            DMMU-Search(S111,S113)
	S115= DMMU.Addr=>DAddrReg.In                                Premise(F345)
	S116= DAddrReg.In={pid,AddrSel(rA,a)+{16{d[0]},d}}          Path(S114,S115)
	S117= CtrlPIDReg=0                                          Premise(F367)
	S118= [PIDReg]=pid                                          PIDReg-Hold(S98,S117)
	S119= CtrlPC=0                                              Premise(F369)
	S120= CtrlPCInc=0                                           Premise(F370)
	S121= PC[Out]=addr+4                                        PC-Hold(S101,S119,S120)
	S122= CtrlIR=0                                              Premise(F378)
	S123= [IR]={40,rT,rA,d}                                     IR-Hold(S103,S122)
	S124= CtrlALUOut=0                                          Premise(F382)
	S125= [ALUOut]=AddrSel(rA,a)+{16{d[0]},d}                   ALUOut-Hold(S105,S124)
	S126= CtrlDAddrReg=1                                        Premise(F384)
	S127= [DAddrReg]={pid,AddrSel(rA,a)+{16{d[0]},d}}           DAddrReg-Write(S116,S126)
	S128= CtrlDMem=0                                            Premise(F390)
	S129= DMem[{pid,AddrSel(rA,a)+{16{d[0]},d}}]={B1,B2,B3,B4}  DMem-Hold(S107,S128)

DMMU1	S130= PIDReg.Out=pid                                        PIDReg-Out(S118)
	S131= DCache.RLineEA=DCacheRLineEA()                        DCache-WriteBack()
	S132= DCache.RLineData=DCacheRLineData()                    DCache-WriteBack()
	S133= PIDReg.Out=>DMMU.PID                                  Premise(F420)
	S134= DMMU.PID=pid                                          Path(S130,S133)
	S135= DCache.RLineEA=>DMMU.IEAR                             Premise(F432)
	S136= DMMU.IEAR=DCacheRLineEA()                             Path(S131,S135)
	S137= DMMU.AddrR={pid,DCacheRLineEA()}                      DMMU-RSearch(S134,S136)
	S138= DMMU.AddrR=>DMem.MEM8WordWAddr                        Premise(F433)
	S139= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}              Path(S137,S138)
	S140= DCache.RLineData=>DMem.MEM8WordWData                  Premise(F434)
	S141= DMem.MEM8WordWData=DCacheRLineData()                  Path(S132,S140)
	S142= CtrlPC=0                                              Premise(F446)
	S143= CtrlPCInc=0                                           Premise(F447)
	S144= PC[Out]=addr+4                                        PC-Hold(S121,S142,S143)
	S145= CtrlIR=0                                              Premise(F455)
	S146= [IR]={40,rT,rA,d}                                     IR-Hold(S123,S145)
	S147= CtrlALUOut=0                                          Premise(F459)
	S148= [ALUOut]=AddrSel(rA,a)+{16{d[0]},d}                   ALUOut-Hold(S125,S147)
	S149= CtrlDAddrReg=0                                        Premise(F461)
	S150= [DAddrReg]={pid,AddrSel(rA,a)+{16{d[0]},d}}           DAddrReg-Hold(S127,S149)
	S151= CtrlDMem=0                                            Premise(F467)
	S152= DMem[{pid,AddrSel(rA,a)+{16{d[0]},d}}]={B1,B2,B3,B4}  DMem-Hold(S129,S151)
	S153= CtrlDMem8Word=1                                       Premise(F468)
	S154= DMem[line_{pid,DCacheRLineEA()}]=DCacheRLineData()    DMem-Write8Word(S139,S141,S153)

DMMU2	S155= ALUOut.Out=AddrSel(rA,a)+{16{d[0]},d}                 ALUOut-Out(S148)
	S156= DAddrReg.Out={pid,AddrSel(rA,a)+{16{d[0]},d}}         DAddrReg-Out(S150)
	S157= ALUOut.Out=>DCache.IEA                                Premise(F501)
	S158= DCache.IEA=AddrSel(rA,a)+{16{d[0]},d}                 Path(S155,S157)
	S159= DAddrReg.Out=>DMem.RAddr                              Premise(F513)
	S160= DMem.RAddr={pid,AddrSel(rA,a)+{16{d[0]},d}}           Path(S156,S159)
	S161= DMem.MEM8WordOut=>DCache.WData                        Premise(F514)
	S162= CtrlPC=0                                              Premise(F523)
	S163= CtrlPCInc=0                                           Premise(F524)
	S164= PC[Out]=addr+4                                        PC-Hold(S144,S162,S163)
	S165= CtrlIR=0                                              Premise(F532)
	S166= [IR]={40,rT,rA,d}                                     IR-Hold(S146,S165)
	S167= CtrlDCache=1                                          Premise(F540)
	S168= CtrlDMem=0                                            Premise(F544)
	S169= CtrlDMem8Word=0                                       Premise(F545)
	S170= DMem[line_{pid,DCacheRLineEA()}]=DCacheRLineData()    DMem-Hold8Word(S154,S169)
	S171= DMem.MEM8WordOut=DMemGet8Word({pid,AddrSel(rA,a)+{16{d[0]},d}})DMem-Read(S160,S152,S168,S169)
	S172= DCache.WData=DMemGet8Word({pid,AddrSel(rA,a)+{16{d[0]},d}})Path(S171,S161)
	S173= DCache[line_AddrSel(rA,a)+{16{d[0]},d}]=DMemGet8Word({pid,AddrSel(rA,a)+{16{d[0]},d}})DCache-Write8Word(S158,S172,S167)

WB	S174= IR.Out6_10=rT                                         IR-Out(S166)
	S175= MemDataSel.Out={16'b0,B3,B4}                          MemDataSel()
	S176= MemDataSel.Out=>GPRegs.WData                          Premise(F596)
	S177= GPRegs.WData={16'b0,B3,B4}                            Path(S175,S176)
	S178= IR.Out6_10=>GPRegs.WReg                               Premise(F597)
	S179= GPRegs.WReg=rT                                        Path(S174,S178)
	S180= CtrlPC=0                                              Premise(F600)
	S181= CtrlPCInc=0                                           Premise(F601)
	S182= PC[Out]=addr+4                                        PC-Hold(S164,S180,S181)
	S183= CtrlGPRegs=1                                          Premise(F610)
	S184= GPRegs[rT]={16'b0,B3,B4}                              GPRegs-Write(S179,S177,S183)
	S185= CtrlDCache=0                                          Premise(F617)
	S186= DCache[line_AddrSel(rA,a)+{16{d[0]},d}]=DMemGet8Word({pid,AddrSel(rA,a)+{16{d[0]},d}})DCache-Hold(S173,S185)
	S187= CtrlDMem8Word=0                                       Premise(F622)
	S188= DMem[line_{pid,DCacheRLineEA()}]=DCacheRLineData()    DMem-Hold8Word(S170,S187)

POST	S182= PC[Out]=addr+4                                        PC-Hold(S164,S180,S181)
	S184= GPRegs[rT]={16'b0,B3,B4}                              GPRegs-Write(S179,S177,S183)
	S186= DCache[line_AddrSel(rA,a)+{16{d[0]},d}]=DMemGet8Word({pid,AddrSel(rA,a)+{16{d[0]},d}})DCache-Hold(S173,S185)
	S188= DMem[line_{pid,DCacheRLineEA()}]=DCacheRLineData()    DMem-Hold8Word(S170,S187)

