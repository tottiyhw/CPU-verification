
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,622}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= DMem[{pid,a+b}]={B1,B2,B3,B4}                           Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F8)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= CtrlPIDReg=0                                           Premise(F60)
	S16= [PIDReg]=pid                                           PIDReg-Hold(S0,S15)
	S17= CtrlPC=0                                               Premise(F62)
	S18= CtrlPCInc=0                                            Premise(F63)
	S19= PC[Out]=addr                                           PC-Hold(S1,S17,S18)
	S20= CtrlIAddrReg=1                                         Premise(F64)
	S21= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S20)
	S22= CtrlIMem=0                                             Premise(F69)
	S23= IMem[{pid,addr}]={31,rT,rA,rB,622}                     IMem-Hold(S2,S22)
	S24= CtrlGPRegs=0                                           Premise(F72)
	S25= GPRegs[rA]=a                                           GPRegs-Hold(S3,S24)
	S26= GPRegs[rB]=b                                           GPRegs-Hold(S4,S24)
	S27= CtrlDMem=0                                             Premise(F83)
	S28= DMem[{pid,a+b}]={B1,B2,B3,B4}                          DMem-Hold(S5,S27)

IMMU	S29= PC.Out=addr                                            PC-Out(S19)
	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S21)
	S31= PC.Out=>ICache.IEA                                     Premise(F89)
	S32= ICache.IEA=addr                                        Path(S29,S31)
	S33= IAddrReg.Out=>IMem.RAddr                               Premise(F94)
	S34= IMem.RAddr={pid,addr}                                  Path(S30,S33)
	S35= IMem.Out={31,rT,rA,rB,622}                             IMem-Read(S34,S23)
	S36= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S34,S23)
	S37= IMem.Out=>IRMux.MemData                                Premise(F95)
	S38= IRMux.MemData={31,rT,rA,rB,622}                        Path(S35,S37)
	S39= IRMux.Out={31,rT,rA,rB,622}                            IRMux-Select(S38)
	S40= IRMux.Out=>IR.In                                       Premise(F99)
	S41= IR.In={31,rT,rA,rB,622}                                Path(S39,S40)
	S42= IMem.MEM8WordOut=>ICache.WData                         Premise(F100)
	S43= ICache.WData=IMemGet8Word({pid,addr})                  Path(S36,S42)
	S44= CtrlPIDReg=0                                           Premise(F138)
	S45= [PIDReg]=pid                                           PIDReg-Hold(S16,S44)
	S46= CtrlPC=0                                               Premise(F140)
	S47= CtrlPCInc=1                                            Premise(F141)
	S48= PC[Out]=addr+4                                         PC-Inc(S19,S46,S47)
	S49= CtrlICache=1                                           Premise(F144)
	S50= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S32,S43,S49)
	S51= CtrlIR=1                                               Premise(F149)
	S52= [IR]={31,rT,rA,rB,622}                                 IR-Write(S41,S51)
	S53= CtrlGPRegs=0                                           Premise(F150)
	S54= GPRegs[rA]=a                                           GPRegs-Hold(S25,S53)
	S55= GPRegs[rB]=b                                           GPRegs-Hold(S26,S53)
	S56= CtrlDMem=0                                             Premise(F161)
	S57= DMem[{pid,a+b}]={B1,B2,B3,B4}                          DMem-Hold(S28,S56)

ID	S58= IR.Out11_15=rA                                         IR-Out(S52)
	S59= IR.Out16_20=rB                                         IR-Out(S52)
	S60= IR.Out11_15=>GPRegs.RReg1                              Premise(F182)
	S61= GPRegs.RReg1=rA                                        Path(S58,S60)
	S62= GPRegs.Rdata1=a                                        GPRegs-Read(S61,S54)
	S63= GPRegs.Rdata1=>A.In                                    Premise(F183)
	S64= A.In=a                                                 Path(S62,S63)
	S65= IR.Out16_20=>GPRegs.RReg2                              Premise(F184)
	S66= GPRegs.RReg2=rB                                        Path(S59,S65)
	S67= GPRegs.Rdata2=b                                        GPRegs-Read(S66,S55)
	S68= GPRegs.Rdata2=>B.In                                    Premise(F185)
	S69= B.In=b                                                 Path(S67,S68)
	S70= CtrlPIDReg=0                                           Premise(F216)
	S71= [PIDReg]=pid                                           PIDReg-Hold(S45,S70)
	S72= CtrlPC=0                                               Premise(F218)
	S73= CtrlPCInc=0                                            Premise(F219)
	S74= PC[Out]=addr+4                                         PC-Hold(S48,S72,S73)
	S75= CtrlICache=0                                           Premise(F222)
	S76= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S50,S75)
	S77= CtrlIR=0                                               Premise(F227)
	S78= [IR]={31,rT,rA,rB,622}                                 IR-Hold(S52,S77)
	S79= CtrlA=1                                                Premise(F229)
	S80= [A]=a                                                  A-Write(S64,S79)
	S81= CtrlB=1                                                Premise(F230)
	S82= [B]=b                                                  B-Write(S69,S81)
	S83= CtrlDMem=0                                             Premise(F239)
	S84= DMem[{pid,a+b}]={B1,B2,B3,B4}                          DMem-Hold(S57,S83)

EX	S85= A.Out=a                                                A-Out(S80)
	S86= B.Out=b                                                B-Out(S82)
	S87= A.Out=>ALU.A                                           Premise(F264)
	S88= ALU.A=a                                                Path(S85,S87)
	S89= B.Out=>ALU.B                                           Premise(F265)
	S90= ALU.B=b                                                Path(S86,S89)
	S91= ALU.Out=a+b                                            ALU(S88,S90)
	S92= ALU.Out=>ALUOut.In                                     Premise(F267)
	S93= ALUOut.In=a+b                                          Path(S91,S92)
	S94= CtrlPIDReg=0                                           Premise(F294)
	S95= [PIDReg]=pid                                           PIDReg-Hold(S71,S94)
	S96= CtrlPC=0                                               Premise(F296)
	S97= CtrlPCInc=0                                            Premise(F297)
	S98= PC[Out]=addr+4                                         PC-Hold(S74,S96,S97)
	S99= CtrlICache=0                                           Premise(F300)
	S100= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S76,S99)
	S101= CtrlIR=0                                              Premise(F305)
	S102= [IR]={31,rT,rA,rB,622}                                IR-Hold(S78,S101)
	S103= CtrlALUOut=1                                          Premise(F309)
	S104= [ALUOut]=a+b                                          ALUOut-Write(S93,S103)
	S105= CtrlDMem=0                                            Premise(F317)
	S106= DMem[{pid,a+b}]={B1,B2,B3,B4}                         DMem-Hold(S84,S105)

MEM	S107= PIDReg.Out=pid                                        PIDReg-Out(S95)
	S108= ALUOut.Out=a+b                                        ALUOut-Out(S104)
	S109= PIDReg.Out=>DMMU.PID                                  Premise(F346)
	S110= DMMU.PID=pid                                          Path(S107,S109)
	S111= ALUOut.Out=>DMMU.IEA                                  Premise(F347)
	S112= DMMU.IEA=a+b                                          Path(S108,S111)
	S113= DMMU.Addr={pid,a+b}                                   DMMU-Search(S110,S112)
	S114= DMMU.Addr=>DAddrReg.In                                Premise(F348)
	S115= DAddrReg.In={pid,a+b}                                 Path(S113,S114)
	S116= CtrlPC=0                                              Premise(F374)
	S117= CtrlPCInc=0                                           Premise(F375)
	S118= PC[Out]=addr+4                                        PC-Hold(S98,S116,S117)
	S119= CtrlICache=0                                          Premise(F378)
	S120= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S100,S119)
	S121= CtrlIR=0                                              Premise(F383)
	S122= [IR]={31,rT,rA,rB,622}                                IR-Hold(S102,S121)
	S123= CtrlALUOut=0                                          Premise(F387)
	S124= [ALUOut]=a+b                                          ALUOut-Hold(S104,S123)
	S125= CtrlDAddrReg=1                                        Premise(F389)
	S126= [DAddrReg]={pid,a+b}                                  DAddrReg-Write(S115,S125)
	S127= CtrlDMem=0                                            Premise(F395)
	S128= DMem[{pid,a+b}]={B1,B2,B3,B4}                         DMem-Hold(S106,S127)

DMMU1	S129= CtrlPC=0                                              Premise(F452)
	S130= CtrlPCInc=0                                           Premise(F453)
	S131= PC[Out]=addr+4                                        PC-Hold(S118,S129,S130)
	S132= CtrlICache=0                                          Premise(F456)
	S133= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S120,S132)
	S134= CtrlIR=0                                              Premise(F461)
	S135= [IR]={31,rT,rA,rB,622}                                IR-Hold(S122,S134)
	S136= CtrlALUOut=0                                          Premise(F465)
	S137= [ALUOut]=a+b                                          ALUOut-Hold(S124,S136)
	S138= CtrlDAddrReg=0                                        Premise(F467)
	S139= [DAddrReg]={pid,a+b}                                  DAddrReg-Hold(S126,S138)
	S140= CtrlDMem=0                                            Premise(F473)
	S141= DMem[{pid,a+b}]={B1,B2,B3,B4}                         DMem-Hold(S128,S140)

DMMU2	S142= ALUOut.Out=a+b                                        ALUOut-Out(S137)
	S143= DAddrReg.Out={pid,a+b}                                DAddrReg-Out(S139)
	S144= ALUOut.Out=>DCache.IEA                                Premise(F506)
	S145= DCache.IEA=a+b                                        Path(S142,S144)
	S146= DAddrReg.Out=>DMem.RAddr                              Premise(F518)
	S147= DMem.RAddr={pid,a+b}                                  Path(S143,S146)
	S148= DMem.MEM8WordOut=>DCache.WData                        Premise(F519)
	S149= CtrlPC=0                                              Premise(F530)
	S150= CtrlPCInc=0                                           Premise(F531)
	S151= PC[Out]=addr+4                                        PC-Hold(S131,S149,S150)
	S152= CtrlICache=0                                          Premise(F534)
	S153= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S133,S152)
	S154= CtrlIR=0                                              Premise(F539)
	S155= [IR]={31,rT,rA,rB,622}                                IR-Hold(S135,S154)
	S156= CtrlALUOut=0                                          Premise(F543)
	S157= [ALUOut]=a+b                                          ALUOut-Hold(S137,S156)
	S158= CtrlDCache=1                                          Premise(F547)
	S159= CtrlDMem=0                                            Premise(F551)
	S160= CtrlDMem8Word=0                                       Premise(F552)
	S161= DMem.MEM8WordOut=DMemGet8Word({pid,a+b})              DMem-Read(S147,S141,S159,S160)
	S162= DCache.WData=DMemGet8Word({pid,a+b})                  Path(S161,S148)
	S163= DCache[line_a+b]=DMemGet8Word({pid,a+b})              DCache-Write8Word(S145,S162,S158)

WB	S164= IR.Out6_10=rT                                         IR-Out(S155)
	S165= IR.Out11_15=rA                                        IR-Out(S155)
	S166= ALUOut.Out=a+b                                        ALUOut-Out(S157)
	S167= MemDataSel.Out={16'b0,B3,B4}                          MemDataSel()
	S168= MemDataSel.Out=>GPRegs.WData                          Premise(F602)
	S169= GPRegs.WData={16'b0,B3,B4}                            Path(S167,S168)
	S170= IR.Out6_10=>GPRegs.WReg                               Premise(F603)
	S171= GPRegs.WReg=rT                                        Path(S164,S170)
	S172= ALUOut.Out=>GPRegs.WBData                             Premise(F604)
	S173= GPRegs.WBData=a+b                                     Path(S166,S172)
	S174= IR.Out11_15=>GPRegs.WBReg                             Premise(F605)
	S175= GPRegs.WBReg=rA                                       Path(S165,S174)
	S176= CtrlPC=0                                              Premise(F608)
	S177= CtrlPCInc=0                                           Premise(F609)
	S178= PC[Out]=addr+4                                        PC-Hold(S151,S176,S177)
	S179= CtrlICache=0                                          Premise(F612)
	S180= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S153,S179)
	S181= CtrlGPRegs=1                                          Premise(F618)
	S182= GPRegs[rT]={16'b0,B3,B4}                              GPRegs-Write(S171,S169,S181)
	S183= GPRegs[rA]=a+b                                        GPRegs-Write(S175,S173,S181)
	S184= CtrlDCache=0                                          Premise(F625)
	S185= DCache[line_a+b]=DMemGet8Word({pid,a+b})              DCache-Hold(S163,S184)

POST	S178= PC[Out]=addr+4                                        PC-Hold(S151,S176,S177)
	S180= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S153,S179)
	S182= GPRegs[rT]={16'b0,B3,B4}                              GPRegs-Write(S171,S169,S181)
	S183= GPRegs[rA]=a+b                                        GPRegs-Write(S175,S173,S181)
	S185= DCache[line_a+b]=DMemGet8Word({pid,a+b})              DCache-Hold(S163,S184)

