
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={33,rT,rA,d}                           Premise(F2)
	S3= ICache[addr]={33,rT,rA,d}                               Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}                Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F8)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F11)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={33,rT,rA,d}                                ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F12)
	S19= ICacheReg.In={33,rT,rA,d}                              Path(S17,S18)
	S20= CtrlPIDReg=0                                           Premise(F59)
	S21= [PIDReg]=pid                                           PIDReg-Hold(S0,S20)
	S22= CtrlPC=0                                               Premise(F61)
	S23= CtrlPCInc=0                                            Premise(F62)
	S24= PC[Out]=addr                                           PC-Hold(S1,S22,S23)
	S25= CtrlIAddrReg=1                                         Premise(F63)
	S26= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S25)
	S27= CtrlICacheReg=1                                        Premise(F66)
	S28= [ICacheReg]={33,rT,rA,d}                               ICacheReg-Write(S19,S27)
	S29= CtrlIMem=0                                             Premise(F68)
	S30= IMem[{pid,addr}]={33,rT,rA,d}                          IMem-Hold(S2,S29)
	S31= CtrlGPRegs=0                                           Premise(F71)
	S32= GPRegs[rA]=a                                           GPRegs-Hold(S4,S31)
	S33= CtrlDMem=0                                             Premise(F82)
	S34= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}               DMem-Hold(S5,S33)

IMMU	S35= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S26)
	S36= ICacheReg.Out={33,rT,rA,d}                             ICacheReg-Out(S28)
	S37= IAddrReg.Out=>IMem.RAddr                               Premise(F93)
	S38= IMem.RAddr={pid,addr}                                  Path(S35,S37)
	S39= IMem.Out={33,rT,rA,d}                                  IMem-Read(S38,S30)
	S40= IMem.Out=>IRMux.MemData                                Premise(F94)
	S41= IRMux.MemData={33,rT,rA,d}                             Path(S39,S40)
	S42= ICacheReg.Out=>IRMux.CacheData                         Premise(F95)
	S43= IRMux.CacheData={33,rT,rA,d}                           Path(S36,S42)
	S44= IRMux.Out={33,rT,rA,d}                                 IRMux-Select(S41,S43)
	S45= IRMux.Out=>IR.In                                       Premise(F98)
	S46= IR.In={33,rT,rA,d}                                     Path(S44,S45)
	S47= CtrlPIDReg=0                                           Premise(F136)
	S48= [PIDReg]=pid                                           PIDReg-Hold(S21,S47)
	S49= CtrlPC=0                                               Premise(F138)
	S50= CtrlPCInc=1                                            Premise(F139)
	S51= PC[Out]=addr+4                                         PC-Inc(S24,S49,S50)
	S52= CtrlIR=1                                               Premise(F147)
	S53= [IR]={33,rT,rA,d}                                      IR-Write(S46,S52)
	S54= CtrlGPRegs=0                                           Premise(F148)
	S55= GPRegs[rA]=a                                           GPRegs-Hold(S32,S54)
	S56= CtrlDMem=0                                             Premise(F159)
	S57= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}               DMem-Hold(S34,S56)

ID	S58= IR.Out11_15=rA                                         IR-Out(S53)
	S59= IR.Out16_31=d                                          IR-Out(S53)
	S60= IR.Out11_15=>GPRegs.RReg1                              Premise(F179)
	S61= GPRegs.RReg1=rA                                        Path(S58,S60)
	S62= GPRegs.Rdata1=a                                        GPRegs-Read(S61,S55)
	S63= GPRegs.Rdata1=>A.In                                    Premise(F180)
	S64= A.In=a                                                 Path(S62,S63)
	S65= IR.Out16_31=>IMMEXT.In                                 Premise(F181)
	S66= IMMEXT.In=d                                            Path(S59,S65)
	S67= IMMEXT.Out={16{d[0]},d}                                IMMEXT(S66)
	S68= IMMEXT.Out=>B.In                                       Premise(F182)
	S69= B.In={16{d[0]},d}                                      Path(S67,S68)
	S70= CtrlPIDReg=0                                           Premise(F213)
	S71= [PIDReg]=pid                                           PIDReg-Hold(S48,S70)
	S72= CtrlPC=0                                               Premise(F215)
	S73= CtrlPCInc=0                                            Premise(F216)
	S74= PC[Out]=addr+4                                         PC-Hold(S51,S72,S73)
	S75= CtrlIR=0                                               Premise(F224)
	S76= [IR]={33,rT,rA,d}                                      IR-Hold(S53,S75)
	S77= CtrlA=1                                                Premise(F226)
	S78= [A]=a                                                  A-Write(S64,S77)
	S79= CtrlB=1                                                Premise(F227)
	S80= [B]={16{d[0]},d}                                       B-Write(S69,S79)
	S81= CtrlDMem=0                                             Premise(F236)
	S82= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}               DMem-Hold(S57,S81)

EX	S83= A.Out=a                                                A-Out(S78)
	S84= B.Out={16{d[0]},d}                                     B-Out(S80)
	S85= A.Out=>ALU.A                                           Premise(F260)
	S86= ALU.A=a                                                Path(S83,S85)
	S87= B.Out=>ALU.B                                           Premise(F261)
	S88= ALU.B={16{d[0]},d}                                     Path(S84,S87)
	S89= ALU.Out=a+{16{d[0]},d}                                 ALU(S86,S88)
	S90= ALU.Out=>ALUOut.In                                     Premise(F263)
	S91= ALUOut.In=a+{16{d[0]},d}                               Path(S89,S90)
	S92= CtrlPIDReg=0                                           Premise(F290)
	S93= [PIDReg]=pid                                           PIDReg-Hold(S71,S92)
	S94= CtrlPC=0                                               Premise(F292)
	S95= CtrlPCInc=0                                            Premise(F293)
	S96= PC[Out]=addr+4                                         PC-Hold(S74,S94,S95)
	S97= CtrlIR=0                                               Premise(F301)
	S98= [IR]={33,rT,rA,d}                                      IR-Hold(S76,S97)
	S99= CtrlALUOut=1                                           Premise(F305)
	S100= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Write(S91,S99)
	S101= CtrlDMem=0                                            Premise(F313)
	S102= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}              DMem-Hold(S82,S101)

MEM	S103= PIDReg.Out=pid                                        PIDReg-Out(S93)
	S104= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S100)
	S105= PIDReg.Out=>DMMU.PID                                  Premise(F341)
	S106= DMMU.PID=pid                                          Path(S103,S105)
	S107= ALUOut.Out=>DMMU.IEA                                  Premise(F342)
	S108= DMMU.IEA=a+{16{d[0]},d}                               Path(S104,S107)
	S109= DMMU.Addr={pid,a+{16{d[0]},d}}                        DMMU-Search(S106,S108)
	S110= DMMU.Addr=>DAddrReg.In                                Premise(F343)
	S111= DAddrReg.In={pid,a+{16{d[0]},d}}                      Path(S109,S110)
	S112= CtrlPIDReg=0                                          Premise(F367)
	S113= [PIDReg]=pid                                          PIDReg-Hold(S93,S112)
	S114= CtrlPC=0                                              Premise(F369)
	S115= CtrlPCInc=0                                           Premise(F370)
	S116= PC[Out]=addr+4                                        PC-Hold(S96,S114,S115)
	S117= CtrlIR=0                                              Premise(F378)
	S118= [IR]={33,rT,rA,d}                                     IR-Hold(S98,S117)
	S119= CtrlALUOut=0                                          Premise(F382)
	S120= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S100,S119)
	S121= CtrlDAddrReg=1                                        Premise(F384)
	S122= [DAddrReg]={pid,a+{16{d[0]},d}}                       DAddrReg-Write(S111,S121)
	S123= CtrlDMem=0                                            Premise(F390)
	S124= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}              DMem-Hold(S102,S123)

DMMU1	S125= PIDReg.Out=pid                                        PIDReg-Out(S113)
	S126= DCache.RLineEA=DCacheRLineEA()                        DCache-WriteBack()
	S127= DCache.RLineData=DCacheRLineData()                    DCache-WriteBack()
	S128= PIDReg.Out=>DMMU.PID                                  Premise(F418)
	S129= DMMU.PID=pid                                          Path(S125,S128)
	S130= DCache.RLineEA=>DMMU.IEAR                             Premise(F430)
	S131= DMMU.IEAR=DCacheRLineEA()                             Path(S126,S130)
	S132= DMMU.AddrR={pid,DCacheRLineEA()}                      DMMU-RSearch(S129,S131)
	S133= DMMU.AddrR=>DMem.MEM8WordWAddr                        Premise(F431)
	S134= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}              Path(S132,S133)
	S135= DCache.RLineData=>DMem.MEM8WordWData                  Premise(F432)
	S136= DMem.MEM8WordWData=DCacheRLineData()                  Path(S127,S135)
	S137= CtrlPC=0                                              Premise(F446)
	S138= CtrlPCInc=0                                           Premise(F447)
	S139= PC[Out]=addr+4                                        PC-Hold(S116,S137,S138)
	S140= CtrlIR=0                                              Premise(F455)
	S141= [IR]={33,rT,rA,d}                                     IR-Hold(S118,S140)
	S142= CtrlALUOut=0                                          Premise(F459)
	S143= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S120,S142)
	S144= CtrlDAddrReg=0                                        Premise(F461)
	S145= [DAddrReg]={pid,a+{16{d[0]},d}}                       DAddrReg-Hold(S122,S144)
	S146= CtrlDMem=0                                            Premise(F467)
	S147= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}              DMem-Hold(S124,S146)
	S148= CtrlDMem8Word=1                                       Premise(F468)
	S149= DMem[line_{pid,DCacheRLineEA()}]=DCacheRLineData()    DMem-Write8Word(S134,S136,S148)

DMMU2	S150= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S143)
	S151= DAddrReg.Out={pid,a+{16{d[0]},d}}                     DAddrReg-Out(S145)
	S152= ALUOut.Out=>DCache.IEA                                Premise(F499)
	S153= DCache.IEA=a+{16{d[0]},d}                             Path(S150,S152)
	S154= DAddrReg.Out=>DMem.RAddr                              Premise(F511)
	S155= DMem.RAddr={pid,a+{16{d[0]},d}}                       Path(S151,S154)
	S156= DMem.MEM8WordOut=>DCache.WData                        Premise(F512)
	S157= CtrlPC=0                                              Premise(F523)
	S158= CtrlPCInc=0                                           Premise(F524)
	S159= PC[Out]=addr+4                                        PC-Hold(S139,S157,S158)
	S160= CtrlIR=0                                              Premise(F532)
	S161= [IR]={33,rT,rA,d}                                     IR-Hold(S141,S160)
	S162= CtrlALUOut=0                                          Premise(F536)
	S163= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S143,S162)
	S164= CtrlDCache=1                                          Premise(F540)
	S165= CtrlDMem=0                                            Premise(F544)
	S166= CtrlDMem8Word=0                                       Premise(F545)
	S167= DMem[line_{pid,DCacheRLineEA()}]=DCacheRLineData()    DMem-Hold8Word(S149,S166)
	S168= DMem.MEM8WordOut=DMemGet8Word({pid,a+{16{d[0]},d}})   DMem-Read(S155,S147,S165,S166)
	S169= DCache.WData=DMemGet8Word({pid,a+{16{d[0]},d}})       Path(S168,S156)
	S170= DCache[line_a+{16{d[0]},d}]=DMemGet8Word({pid,a+{16{d[0]},d}})DCache-Write8Word(S153,S169,S164)

WB	S171= IR.Out6_10=rT                                         IR-Out(S161)
	S172= IR.Out11_15=rA                                        IR-Out(S161)
	S173= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S163)
	S174= MemDataSel.Out={B1,B2,B3,B4}                          MemDataSel()
	S175= MemDataSel.Out=>GPRegs.WData                          Premise(F594)
	S176= GPRegs.WData={B1,B2,B3,B4}                            Path(S174,S175)
	S177= IR.Out6_10=>GPRegs.WReg                               Premise(F595)
	S178= GPRegs.WReg=rT                                        Path(S171,S177)
	S179= ALUOut.Out=>GPRegs.WBData                             Premise(F596)
	S180= GPRegs.WBData=a+{16{d[0]},d}                          Path(S173,S179)
	S181= IR.Out11_15=>GPRegs.WBReg                             Premise(F597)
	S182= GPRegs.WBReg=rA                                       Path(S172,S181)
	S183= CtrlPC=0                                              Premise(F600)
	S184= CtrlPCInc=0                                           Premise(F601)
	S185= PC[Out]=addr+4                                        PC-Hold(S159,S183,S184)
	S186= CtrlGPRegs=1                                          Premise(F610)
	S187= GPRegs[rT]={B1,B2,B3,B4}                              GPRegs-Write(S178,S176,S186)
	S188= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S182,S180,S186)
	S189= CtrlDCache=0                                          Premise(F617)
	S190= DCache[line_a+{16{d[0]},d}]=DMemGet8Word({pid,a+{16{d[0]},d}})DCache-Hold(S170,S189)
	S191= CtrlDMem8Word=0                                       Premise(F622)
	S192= DMem[line_{pid,DCacheRLineEA()}]=DCacheRLineData()    DMem-Hold8Word(S167,S191)

POST	S185= PC[Out]=addr+4                                        PC-Hold(S159,S183,S184)
	S187= GPRegs[rT]={B1,B2,B3,B4}                              GPRegs-Write(S178,S176,S186)
	S188= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S182,S180,S186)
	S190= DCache[line_a+{16{d[0]},d}]=DMemGet8Word({pid,a+{16{d[0]},d}})DCache-Hold(S170,S189)
	S192= DMem[line_{pid,DCacheRLineEA()}]=DCacheRLineData()    DMem-Hold8Word(S167,S191)

