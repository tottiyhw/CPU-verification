
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={33,rT,rA,d}                           Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}                Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F7)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPIDReg=0                                           Premise(F58)
	S15= [PIDReg]=pid                                           PIDReg-Hold(S0,S14)
	S16= CtrlPC=0                                               Premise(F60)
	S17= CtrlPCInc=0                                            Premise(F61)
	S18= PC[Out]=addr                                           PC-Hold(S1,S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F62)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S19)
	S21= CtrlIMem=0                                             Premise(F67)
	S22= IMem[{pid,addr}]={33,rT,rA,d}                          IMem-Hold(S2,S21)
	S23= CtrlGPRegs=0                                           Premise(F70)
	S24= GPRegs[rA]=a                                           GPRegs-Hold(S3,S23)
	S25= CtrlDMem=0                                             Premise(F81)
	S26= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}               DMem-Hold(S4,S25)

IMMU	S27= PC.Out=addr                                            PC-Out(S18)
	S28= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S29= PC.Out=>ICache.IEA                                     Premise(F87)
	S30= ICache.IEA=addr                                        Path(S27,S29)
	S31= IAddrReg.Out=>IMem.RAddr                               Premise(F92)
	S32= IMem.RAddr={pid,addr}                                  Path(S28,S31)
	S33= IMem.Out={33,rT,rA,d}                                  IMem-Read(S32,S22)
	S34= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S32,S22)
	S35= IMem.Out=>IRMux.MemData                                Premise(F93)
	S36= IRMux.MemData={33,rT,rA,d}                             Path(S33,S35)
	S37= IRMux.Out={33,rT,rA,d}                                 IRMux-Select(S36)
	S38= IRMux.Out=>IR.In                                       Premise(F97)
	S39= IR.In={33,rT,rA,d}                                     Path(S37,S38)
	S40= IMem.MEM8WordOut=>ICache.WData                         Premise(F98)
	S41= ICache.WData=IMemGet8Word({pid,addr})                  Path(S34,S40)
	S42= CtrlPIDReg=0                                           Premise(F135)
	S43= [PIDReg]=pid                                           PIDReg-Hold(S15,S42)
	S44= CtrlPC=0                                               Premise(F137)
	S45= CtrlPCInc=1                                            Premise(F138)
	S46= PC[Out]=addr+4                                         PC-Inc(S18,S44,S45)
	S47= CtrlICache=1                                           Premise(F141)
	S48= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S30,S41,S47)
	S49= CtrlIR=1                                               Premise(F146)
	S50= [IR]={33,rT,rA,d}                                      IR-Write(S39,S49)
	S51= CtrlGPRegs=0                                           Premise(F147)
	S52= GPRegs[rA]=a                                           GPRegs-Hold(S24,S51)
	S53= CtrlDMem=0                                             Premise(F158)
	S54= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}               DMem-Hold(S26,S53)

ID	S55= IR.Out11_15=rA                                         IR-Out(S50)
	S56= IR.Out16_31=d                                          IR-Out(S50)
	S57= IR.Out11_15=>GPRegs.RReg1                              Premise(F178)
	S58= GPRegs.RReg1=rA                                        Path(S55,S57)
	S59= GPRegs.Rdata1=a                                        GPRegs-Read(S58,S52)
	S60= GPRegs.Rdata1=>A.In                                    Premise(F179)
	S61= A.In=a                                                 Path(S59,S60)
	S62= IR.Out16_31=>IMMEXT.In                                 Premise(F180)
	S63= IMMEXT.In=d                                            Path(S56,S62)
	S64= IMMEXT.Out={16{d[0]},d}                                IMMEXT(S63)
	S65= IMMEXT.Out=>B.In                                       Premise(F181)
	S66= B.In={16{d[0]},d}                                      Path(S64,S65)
	S67= CtrlPIDReg=0                                           Premise(F212)
	S68= [PIDReg]=pid                                           PIDReg-Hold(S43,S67)
	S69= CtrlPC=0                                               Premise(F214)
	S70= CtrlPCInc=0                                            Premise(F215)
	S71= PC[Out]=addr+4                                         PC-Hold(S46,S69,S70)
	S72= CtrlICache=0                                           Premise(F218)
	S73= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S48,S72)
	S74= CtrlIR=0                                               Premise(F223)
	S75= [IR]={33,rT,rA,d}                                      IR-Hold(S50,S74)
	S76= CtrlA=1                                                Premise(F225)
	S77= [A]=a                                                  A-Write(S61,S76)
	S78= CtrlB=1                                                Premise(F226)
	S79= [B]={16{d[0]},d}                                       B-Write(S66,S78)
	S80= CtrlDMem=0                                             Premise(F235)
	S81= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}               DMem-Hold(S54,S80)

EX	S82= A.Out=a                                                A-Out(S77)
	S83= B.Out={16{d[0]},d}                                     B-Out(S79)
	S84= A.Out=>ALU.A                                           Premise(F259)
	S85= ALU.A=a                                                Path(S82,S84)
	S86= B.Out=>ALU.B                                           Premise(F260)
	S87= ALU.B={16{d[0]},d}                                     Path(S83,S86)
	S88= ALU.Out=a+{16{d[0]},d}                                 ALU(S85,S87)
	S89= ALU.Out=>ALUOut.In                                     Premise(F262)
	S90= ALUOut.In=a+{16{d[0]},d}                               Path(S88,S89)
	S91= CtrlPIDReg=0                                           Premise(F289)
	S92= [PIDReg]=pid                                           PIDReg-Hold(S68,S91)
	S93= CtrlPC=0                                               Premise(F291)
	S94= CtrlPCInc=0                                            Premise(F292)
	S95= PC[Out]=addr+4                                         PC-Hold(S71,S93,S94)
	S96= CtrlICache=0                                           Premise(F295)
	S97= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S73,S96)
	S98= CtrlIR=0                                               Premise(F300)
	S99= [IR]={33,rT,rA,d}                                      IR-Hold(S75,S98)
	S100= CtrlALUOut=1                                          Premise(F304)
	S101= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Write(S90,S100)
	S102= CtrlDMem=0                                            Premise(F312)
	S103= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}              DMem-Hold(S81,S102)

MEM	S104= PIDReg.Out=pid                                        PIDReg-Out(S92)
	S105= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S101)
	S106= PIDReg.Out=>DMMU.PID                                  Premise(F340)
	S107= DMMU.PID=pid                                          Path(S104,S106)
	S108= ALUOut.Out=>DMMU.IEA                                  Premise(F341)
	S109= DMMU.IEA=a+{16{d[0]},d}                               Path(S105,S108)
	S110= DMMU.Addr={pid,a+{16{d[0]},d}}                        DMMU-Search(S107,S109)
	S111= DMMU.Addr=>DAddrReg.In                                Premise(F342)
	S112= DAddrReg.In={pid,a+{16{d[0]},d}}                      Path(S110,S111)
	S113= CtrlPC=0                                              Premise(F368)
	S114= CtrlPCInc=0                                           Premise(F369)
	S115= PC[Out]=addr+4                                        PC-Hold(S95,S113,S114)
	S116= CtrlICache=0                                          Premise(F372)
	S117= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S97,S116)
	S118= CtrlIR=0                                              Premise(F377)
	S119= [IR]={33,rT,rA,d}                                     IR-Hold(S99,S118)
	S120= CtrlALUOut=0                                          Premise(F381)
	S121= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S101,S120)
	S122= CtrlDAddrReg=1                                        Premise(F383)
	S123= [DAddrReg]={pid,a+{16{d[0]},d}}                       DAddrReg-Write(S112,S122)
	S124= CtrlDMem=0                                            Premise(F389)
	S125= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}              DMem-Hold(S103,S124)

DMMU1	S126= CtrlPC=0                                              Premise(F445)
	S127= CtrlPCInc=0                                           Premise(F446)
	S128= PC[Out]=addr+4                                        PC-Hold(S115,S126,S127)
	S129= CtrlICache=0                                          Premise(F449)
	S130= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S117,S129)
	S131= CtrlIR=0                                              Premise(F454)
	S132= [IR]={33,rT,rA,d}                                     IR-Hold(S119,S131)
	S133= CtrlALUOut=0                                          Premise(F458)
	S134= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S121,S133)
	S135= CtrlDAddrReg=0                                        Premise(F460)
	S136= [DAddrReg]={pid,a+{16{d[0]},d}}                       DAddrReg-Hold(S123,S135)
	S137= CtrlDMem=0                                            Premise(F466)
	S138= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}              DMem-Hold(S125,S137)

DMMU2	S139= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S134)
	S140= DAddrReg.Out={pid,a+{16{d[0]},d}}                     DAddrReg-Out(S136)
	S141= ALUOut.Out=>DCache.IEA                                Premise(F498)
	S142= DCache.IEA=a+{16{d[0]},d}                             Path(S139,S141)
	S143= DAddrReg.Out=>DMem.RAddr                              Premise(F510)
	S144= DMem.RAddr={pid,a+{16{d[0]},d}}                       Path(S140,S143)
	S145= DMem.MEM8WordOut=>DCache.WData                        Premise(F511)
	S146= CtrlPC=0                                              Premise(F522)
	S147= CtrlPCInc=0                                           Premise(F523)
	S148= PC[Out]=addr+4                                        PC-Hold(S128,S146,S147)
	S149= CtrlICache=0                                          Premise(F526)
	S150= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S130,S149)
	S151= CtrlIR=0                                              Premise(F531)
	S152= [IR]={33,rT,rA,d}                                     IR-Hold(S132,S151)
	S153= CtrlALUOut=0                                          Premise(F535)
	S154= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S134,S153)
	S155= CtrlDCache=1                                          Premise(F539)
	S156= CtrlDMem=0                                            Premise(F543)
	S157= CtrlDMem8Word=0                                       Premise(F544)
	S158= DMem.MEM8WordOut=DMemGet8Word({pid,a+{16{d[0]},d}})   DMem-Read(S144,S138,S156,S157)
	S159= DCache.WData=DMemGet8Word({pid,a+{16{d[0]},d}})       Path(S158,S145)
	S160= DCache[line_a+{16{d[0]},d}]=DMemGet8Word({pid,a+{16{d[0]},d}})DCache-Write8Word(S142,S159,S155)

WB	S161= IR.Out6_10=rT                                         IR-Out(S152)
	S162= IR.Out11_15=rA                                        IR-Out(S152)
	S163= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S154)
	S164= MemDataSel.Out={B1,B2,B3,B4}                          MemDataSel()
	S165= MemDataSel.Out=>GPRegs.WData                          Premise(F593)
	S166= GPRegs.WData={B1,B2,B3,B4}                            Path(S164,S165)
	S167= IR.Out6_10=>GPRegs.WReg                               Premise(F594)
	S168= GPRegs.WReg=rT                                        Path(S161,S167)
	S169= ALUOut.Out=>GPRegs.WBData                             Premise(F595)
	S170= GPRegs.WBData=a+{16{d[0]},d}                          Path(S163,S169)
	S171= IR.Out11_15=>GPRegs.WBReg                             Premise(F596)
	S172= GPRegs.WBReg=rA                                       Path(S162,S171)
	S173= CtrlPC=0                                              Premise(F599)
	S174= CtrlPCInc=0                                           Premise(F600)
	S175= PC[Out]=addr+4                                        PC-Hold(S148,S173,S174)
	S176= CtrlICache=0                                          Premise(F603)
	S177= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S150,S176)
	S178= CtrlGPRegs=1                                          Premise(F609)
	S179= GPRegs[rT]={B1,B2,B3,B4}                              GPRegs-Write(S168,S166,S178)
	S180= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S172,S170,S178)
	S181= CtrlDCache=0                                          Premise(F616)
	S182= DCache[line_a+{16{d[0]},d}]=DMemGet8Word({pid,a+{16{d[0]},d}})DCache-Hold(S160,S181)

POST	S175= PC[Out]=addr+4                                        PC-Hold(S148,S173,S174)
	S177= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S150,S176)
	S179= GPRegs[rT]={B1,B2,B3,B4}                              GPRegs-Write(S168,S166,S178)
	S180= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S172,S170,S178)
	S182= DCache[line_a+{16{d[0]},d}]=DMemGet8Word({pid,a+{16{d[0]},d}})DCache-Hold(S160,S181)

