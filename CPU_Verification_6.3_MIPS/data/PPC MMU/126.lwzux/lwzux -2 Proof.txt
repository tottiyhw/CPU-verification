
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,110}                      Premise(F2)
	S3= ICache[addr]={31,rT,rA,rB,110}                          Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)
	S6= DMem[{pid,a+b}]={B1,B2,B3,B4}                           Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F8)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F9)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F10)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= PC.Out=>ICache.IEA                                     Premise(F12)
	S17= ICache.IEA=addr                                        Path(S8,S16)
	S18= ICache.Out={31,rT,rA,rB,110}                           ICache-Search(S17,S3)
	S19= ICache.Out=>ICacheReg.In                               Premise(F13)
	S20= ICacheReg.In={31,rT,rA,rB,110}                         Path(S18,S19)
	S21= CtrlPIDReg=0                                           Premise(F61)
	S22= [PIDReg]=pid                                           PIDReg-Hold(S0,S21)
	S23= CtrlPC=0                                               Premise(F63)
	S24= CtrlPCInc=0                                            Premise(F64)
	S25= PC[Out]=addr                                           PC-Hold(S1,S23,S24)
	S26= CtrlIAddrReg=1                                         Premise(F65)
	S27= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S26)
	S28= CtrlICacheReg=1                                        Premise(F68)
	S29= [ICacheReg]={31,rT,rA,rB,110}                          ICacheReg-Write(S20,S28)
	S30= CtrlIMem=0                                             Premise(F70)
	S31= IMem[{pid,addr}]={31,rT,rA,rB,110}                     IMem-Hold(S2,S30)
	S32= CtrlGPRegs=0                                           Premise(F73)
	S33= GPRegs[rA]=a                                           GPRegs-Hold(S4,S32)
	S34= GPRegs[rB]=b                                           GPRegs-Hold(S5,S32)
	S35= CtrlDMem=0                                             Premise(F84)
	S36= DMem[{pid,a+b}]={B1,B2,B3,B4}                          DMem-Hold(S6,S35)

IMMU	S37= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S27)
	S38= ICacheReg.Out={31,rT,rA,rB,110}                        ICacheReg-Out(S29)
	S39= IAddrReg.Out=>IMem.RAddr                               Premise(F95)
	S40= IMem.RAddr={pid,addr}                                  Path(S37,S39)
	S41= IMem.Out={31,rT,rA,rB,110}                             IMem-Read(S40,S31)
	S42= IMem.Out=>IRMux.MemData                                Premise(F96)
	S43= IRMux.MemData={31,rT,rA,rB,110}                        Path(S41,S42)
	S44= ICacheReg.Out=>IRMux.CacheData                         Premise(F97)
	S45= IRMux.CacheData={31,rT,rA,rB,110}                      Path(S38,S44)
	S46= IRMux.Out={31,rT,rA,rB,110}                            IRMux-Select(S43,S45)
	S47= IRMux.Out=>IR.In                                       Premise(F100)
	S48= IR.In={31,rT,rA,rB,110}                                Path(S46,S47)
	S49= CtrlPIDReg=0                                           Premise(F139)
	S50= [PIDReg]=pid                                           PIDReg-Hold(S22,S49)
	S51= CtrlPC=0                                               Premise(F141)
	S52= CtrlPCInc=1                                            Premise(F142)
	S53= PC[Out]=addr+4                                         PC-Inc(S25,S51,S52)
	S54= CtrlIR=1                                               Premise(F150)
	S55= [IR]={31,rT,rA,rB,110}                                 IR-Write(S48,S54)
	S56= CtrlGPRegs=0                                           Premise(F151)
	S57= GPRegs[rA]=a                                           GPRegs-Hold(S33,S56)
	S58= GPRegs[rB]=b                                           GPRegs-Hold(S34,S56)
	S59= CtrlDMem=0                                             Premise(F162)
	S60= DMem[{pid,a+b}]={B1,B2,B3,B4}                          DMem-Hold(S36,S59)

ID	S61= IR.Out11_15=rA                                         IR-Out(S55)
	S62= IR.Out16_20=rB                                         IR-Out(S55)
	S63= IR.Out11_15=>GPRegs.RReg1                              Premise(F183)
	S64= GPRegs.RReg1=rA                                        Path(S61,S63)
	S65= GPRegs.Rdata1=a                                        GPRegs-Read(S64,S57)
	S66= GPRegs.Rdata1=>A.In                                    Premise(F184)
	S67= A.In=a                                                 Path(S65,S66)
	S68= IR.Out16_20=>GPRegs.RReg2                              Premise(F185)
	S69= GPRegs.RReg2=rB                                        Path(S62,S68)
	S70= GPRegs.Rdata2=b                                        GPRegs-Read(S69,S58)
	S71= GPRegs.Rdata2=>B.In                                    Premise(F186)
	S72= B.In=b                                                 Path(S70,S71)
	S73= CtrlPIDReg=0                                           Premise(F217)
	S74= [PIDReg]=pid                                           PIDReg-Hold(S50,S73)
	S75= CtrlPC=0                                               Premise(F219)
	S76= CtrlPCInc=0                                            Premise(F220)
	S77= PC[Out]=addr+4                                         PC-Hold(S53,S75,S76)
	S78= CtrlIR=0                                               Premise(F228)
	S79= [IR]={31,rT,rA,rB,110}                                 IR-Hold(S55,S78)
	S80= CtrlA=1                                                Premise(F230)
	S81= [A]=a                                                  A-Write(S67,S80)
	S82= CtrlB=1                                                Premise(F231)
	S83= [B]=b                                                  B-Write(S72,S82)
	S84= CtrlDMem=0                                             Premise(F240)
	S85= DMem[{pid,a+b}]={B1,B2,B3,B4}                          DMem-Hold(S60,S84)

EX	S86= A.Out=a                                                A-Out(S81)
	S87= B.Out=b                                                B-Out(S83)
	S88= A.Out=>ALU.A                                           Premise(F265)
	S89= ALU.A=a                                                Path(S86,S88)
	S90= B.Out=>ALU.B                                           Premise(F266)
	S91= ALU.B=b                                                Path(S87,S90)
	S92= ALU.Out=a+b                                            ALU(S89,S91)
	S93= ALU.Out=>ALUOut.In                                     Premise(F268)
	S94= ALUOut.In=a+b                                          Path(S92,S93)
	S95= CtrlPIDReg=0                                           Premise(F295)
	S96= [PIDReg]=pid                                           PIDReg-Hold(S74,S95)
	S97= CtrlPC=0                                               Premise(F297)
	S98= CtrlPCInc=0                                            Premise(F298)
	S99= PC[Out]=addr+4                                         PC-Hold(S77,S97,S98)
	S100= CtrlIR=0                                              Premise(F306)
	S101= [IR]={31,rT,rA,rB,110}                                IR-Hold(S79,S100)
	S102= CtrlALUOut=1                                          Premise(F310)
	S103= [ALUOut]=a+b                                          ALUOut-Write(S94,S102)
	S104= CtrlDMem=0                                            Premise(F318)
	S105= DMem[{pid,a+b}]={B1,B2,B3,B4}                         DMem-Hold(S85,S104)

MEM	S106= PIDReg.Out=pid                                        PIDReg-Out(S96)
	S107= ALUOut.Out=a+b                                        ALUOut-Out(S103)
	S108= PIDReg.Out=>DMMU.PID                                  Premise(F347)
	S109= DMMU.PID=pid                                          Path(S106,S108)
	S110= ALUOut.Out=>DMMU.IEA                                  Premise(F348)
	S111= DMMU.IEA=a+b                                          Path(S107,S110)
	S112= DMMU.Addr={pid,a+b}                                   DMMU-Search(S109,S111)
	S113= DMMU.Addr=>DAddrReg.In                                Premise(F349)
	S114= DAddrReg.In={pid,a+b}                                 Path(S112,S113)
	S115= CtrlPIDReg=0                                          Premise(F373)
	S116= [PIDReg]=pid                                          PIDReg-Hold(S96,S115)
	S117= CtrlPC=0                                              Premise(F375)
	S118= CtrlPCInc=0                                           Premise(F376)
	S119= PC[Out]=addr+4                                        PC-Hold(S99,S117,S118)
	S120= CtrlIR=0                                              Premise(F384)
	S121= [IR]={31,rT,rA,rB,110}                                IR-Hold(S101,S120)
	S122= CtrlALUOut=0                                          Premise(F388)
	S123= [ALUOut]=a+b                                          ALUOut-Hold(S103,S122)
	S124= CtrlDAddrReg=1                                        Premise(F390)
	S125= [DAddrReg]={pid,a+b}                                  DAddrReg-Write(S114,S124)
	S126= CtrlDMem=0                                            Premise(F396)
	S127= DMem[{pid,a+b}]={B1,B2,B3,B4}                         DMem-Hold(S105,S126)

DMMU1	S128= PIDReg.Out=pid                                        PIDReg-Out(S116)
	S129= DCache.RLineEA=DCacheRLineEA()                        DCache-WriteBack()
	S130= DCache.RLineData=DCacheRLineData()                    DCache-WriteBack()
	S131= PIDReg.Out=>DMMU.PID                                  Premise(F425)
	S132= DMMU.PID=pid                                          Path(S128,S131)
	S133= DCache.RLineEA=>DMMU.IEAR                             Premise(F437)
	S134= DMMU.IEAR=DCacheRLineEA()                             Path(S129,S133)
	S135= DMMU.AddrR={pid,DCacheRLineEA()}                      DMMU-RSearch(S132,S134)
	S136= DMMU.AddrR=>DMem.MEM8WordWAddr                        Premise(F438)
	S137= DMem.MEM8WordWAddr={pid,DCacheRLineEA()}              Path(S135,S136)
	S138= DCache.RLineData=>DMem.MEM8WordWData                  Premise(F439)
	S139= DMem.MEM8WordWData=DCacheRLineData()                  Path(S130,S138)
	S140= CtrlPC=0                                              Premise(F453)
	S141= CtrlPCInc=0                                           Premise(F454)
	S142= PC[Out]=addr+4                                        PC-Hold(S119,S140,S141)
	S143= CtrlIR=0                                              Premise(F462)
	S144= [IR]={31,rT,rA,rB,110}                                IR-Hold(S121,S143)
	S145= CtrlALUOut=0                                          Premise(F466)
	S146= [ALUOut]=a+b                                          ALUOut-Hold(S123,S145)
	S147= CtrlDAddrReg=0                                        Premise(F468)
	S148= [DAddrReg]={pid,a+b}                                  DAddrReg-Hold(S125,S147)
	S149= CtrlDMem=0                                            Premise(F474)
	S150= DMem[{pid,a+b}]={B1,B2,B3,B4}                         DMem-Hold(S127,S149)
	S151= CtrlDMem8Word=1                                       Premise(F475)
	S152= DMem[line_{pid,DCacheRLineEA()}]=DCacheRLineData()    DMem-Write8Word(S137,S139,S151)

DMMU2	S153= ALUOut.Out=a+b                                        ALUOut-Out(S146)
	S154= DAddrReg.Out={pid,a+b}                                DAddrReg-Out(S148)
	S155= ALUOut.Out=>DCache.IEA                                Premise(F507)
	S156= DCache.IEA=a+b                                        Path(S153,S155)
	S157= DAddrReg.Out=>DMem.RAddr                              Premise(F519)
	S158= DMem.RAddr={pid,a+b}                                  Path(S154,S157)
	S159= DMem.MEM8WordOut=>DCache.WData                        Premise(F520)
	S160= CtrlPC=0                                              Premise(F531)
	S161= CtrlPCInc=0                                           Premise(F532)
	S162= PC[Out]=addr+4                                        PC-Hold(S142,S160,S161)
	S163= CtrlIR=0                                              Premise(F540)
	S164= [IR]={31,rT,rA,rB,110}                                IR-Hold(S144,S163)
	S165= CtrlALUOut=0                                          Premise(F544)
	S166= [ALUOut]=a+b                                          ALUOut-Hold(S146,S165)
	S167= CtrlDCache=1                                          Premise(F548)
	S168= CtrlDMem=0                                            Premise(F552)
	S169= CtrlDMem8Word=0                                       Premise(F553)
	S170= DMem[line_{pid,DCacheRLineEA()}]=DCacheRLineData()    DMem-Hold8Word(S152,S169)
	S171= DMem.MEM8WordOut=DMemGet8Word({pid,a+b})              DMem-Read(S158,S150,S168,S169)
	S172= DCache.WData=DMemGet8Word({pid,a+b})                  Path(S171,S159)
	S173= DCache[line_a+b]=DMemGet8Word({pid,a+b})              DCache-Write8Word(S156,S172,S167)

WB	S174= IR.Out6_10=rT                                         IR-Out(S164)
	S175= IR.Out11_15=rA                                        IR-Out(S164)
	S176= ALUOut.Out=a+b                                        ALUOut-Out(S166)
	S177= MemDataSel.Out={B1,B2,B3,B4}                          MemDataSel()
	S178= MemDataSel.Out=>GPRegs.WData                          Premise(F603)
	S179= GPRegs.WData={B1,B2,B3,B4}                            Path(S177,S178)
	S180= IR.Out6_10=>GPRegs.WReg                               Premise(F604)
	S181= GPRegs.WReg=rT                                        Path(S174,S180)
	S182= ALUOut.Out=>GPRegs.WBData                             Premise(F605)
	S183= GPRegs.WBData=a+b                                     Path(S176,S182)
	S184= IR.Out11_15=>GPRegs.WBReg                             Premise(F606)
	S185= GPRegs.WBReg=rA                                       Path(S175,S184)
	S186= CtrlPC=0                                              Premise(F609)
	S187= CtrlPCInc=0                                           Premise(F610)
	S188= PC[Out]=addr+4                                        PC-Hold(S162,S186,S187)
	S189= CtrlGPRegs=1                                          Premise(F619)
	S190= GPRegs[rT]={B1,B2,B3,B4}                              GPRegs-Write(S181,S179,S189)
	S191= GPRegs[rA]=a+b                                        GPRegs-Write(S185,S183,S189)
	S192= CtrlDCache=0                                          Premise(F626)
	S193= DCache[line_a+b]=DMemGet8Word({pid,a+b})              DCache-Hold(S173,S192)
	S194= CtrlDMem8Word=0                                       Premise(F631)
	S195= DMem[line_{pid,DCacheRLineEA()}]=DCacheRLineData()    DMem-Hold8Word(S170,S194)

POST	S188= PC[Out]=addr+4                                        PC-Hold(S162,S186,S187)
	S190= GPRegs[rT]={B1,B2,B3,B4}                              GPRegs-Write(S181,S179,S189)
	S191= GPRegs[rA]=a+b                                        GPRegs-Write(S185,S183,S189)
	S193= DCache[line_a+b]=DMemGet8Word({pid,a+b})              DCache-Hold(S173,S192)
	S195= DMem[line_{pid,DCacheRLineEA()}]=DCacheRLineData()    DMem-Hold8Word(S170,S194)

