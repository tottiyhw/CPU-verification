
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={38,rS,rA,d}                           Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F6)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPIDReg=0                                           Premise(F49)
	S14= [PIDReg]=pid                                           PIDReg-Hold(S0,S13)
	S15= CtrlPC=0                                               Premise(F51)
	S16= CtrlPCInc=0                                            Premise(F52)
	S17= PC[Out]=addr                                           PC-Hold(S1,S15,S16)
	S18= CtrlIAddrReg=1                                         Premise(F53)
	S19= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S18)
	S20= CtrlIMem=0                                             Premise(F58)
	S21= IMem[{pid,addr}]={38,rS,rA,d}                          IMem-Hold(S2,S20)
	S22= CtrlGPRegs=0                                           Premise(F61)
	S23= GPRegs[rA]=a                                           GPRegs-Hold(S3,S22)

IMMU	S24= PC.Out=addr                                            PC-Out(S17)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S19)
	S26= PC.Out=>ICache.IEA                                     Premise(F77)
	S27= ICache.IEA=addr                                        Path(S24,S26)
	S28= IAddrReg.Out=>IMem.RAddr                               Premise(F82)
	S29= IMem.RAddr={pid,addr}                                  Path(S25,S28)
	S30= IMem.Out={38,rS,rA,d}                                  IMem-Read(S29,S21)
	S31= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S29,S21)
	S32= IMem.Out=>IRMux.MemData                                Premise(F83)
	S33= IRMux.MemData={38,rS,rA,d}                             Path(S30,S32)
	S34= IRMux.Out={38,rS,rA,d}                                 IRMux-Select(S33)
	S35= IRMux.Out=>IR.In                                       Premise(F87)
	S36= IR.In={38,rS,rA,d}                                     Path(S34,S35)
	S37= IMem.MEM8WordOut=>ICache.WData                         Premise(F88)
	S38= ICache.WData=IMemGet8Word({pid,addr})                  Path(S31,S37)
	S39= CtrlPIDReg=0                                           Premise(F117)
	S40= [PIDReg]=pid                                           PIDReg-Hold(S14,S39)
	S41= CtrlPC=0                                               Premise(F119)
	S42= CtrlPCInc=1                                            Premise(F120)
	S43= PC[Out]=addr+4                                         PC-Inc(S17,S41,S42)
	S44= CtrlICache=1                                           Premise(F123)
	S45= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S27,S38,S44)
	S46= CtrlIR=1                                               Premise(F128)
	S47= [IR]={38,rS,rA,d}                                      IR-Write(S36,S46)
	S48= CtrlGPRegs=0                                           Premise(F129)
	S49= GPRegs[rA]=a                                           GPRegs-Hold(S23,S48)

ID	S50= IR.Out11_15=rA                                         IR-Out(S47)
	S51= IR.Out16_31=d                                          IR-Out(S47)
	S52= IR.Out11_15=>GPRegs.RReg2                              Premise(F159)
	S53= GPRegs.RReg2=rA                                        Path(S50,S52)
	S54= GPRegs.Rdata2=a                                        GPRegs-Read(S53,S49)
	S55= IR.Out11_15=>AddrSelMux.Sel                            Premise(F160)
	S56= AddrSelMux.Sel=rA                                      Path(S50,S55)
	S57= GPRegs.Rdata2=>AddrSelMux.Data                         Premise(F161)
	S58= AddrSelMux.Data=a                                      Path(S54,S57)
	S59= AddrSelMux.Out=AddrSel(rA,a)                           AddrSelMux(S56,S58)
	S60= AddrSelMux.Out=>A.In                                   Premise(F162)
	S61= A.In=AddrSel(rA,a)                                     Path(S59,S60)
	S62= IR.Out16_31=>IMMEXT.In                                 Premise(F163)
	S63= IMMEXT.In=d                                            Path(S51,S62)
	S64= IMMEXT.Out={16{d[0]},d}                                IMMEXT(S63)
	S65= IMMEXT.Out=>B.In                                       Premise(F164)
	S66= B.In={16{d[0]},d}                                      Path(S64,S65)
	S67= MemDataSel.Out={24'b0,B4}                              MemDataSel()
	S68= MemDataSel.Out=>DR.In                                  Premise(F168)
	S69= DR.In={24'b0,B4}                                       Path(S67,S68)
	S70= CtrlPIDReg=0                                           Premise(F185)
	S71= [PIDReg]=pid                                           PIDReg-Hold(S40,S70)
	S72= CtrlPC=0                                               Premise(F187)
	S73= CtrlPCInc=0                                            Premise(F188)
	S74= PC[Out]=addr+4                                         PC-Hold(S43,S72,S73)
	S75= CtrlICache=0                                           Premise(F191)
	S76= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S45,S75)
	S77= CtrlA=1                                                Premise(F198)
	S78= [A]=AddrSel(rA,a)                                      A-Write(S61,S77)
	S79= CtrlB=1                                                Premise(F199)
	S80= [B]={16{d[0]},d}                                       B-Write(S66,S79)
	S81= CtrlDR=1                                               Premise(F200)
	S82= [DR]={24'b0,B4}                                        DR-Write(S69,S81)

EX	S83= A.Out=AddrSel(rA,a)                                    A-Out(S78)
	S84= B.Out={16{d[0]},d}                                     B-Out(S80)
	S85= A.Out=>ALU.A                                           Premise(F237)
	S86= ALU.A=AddrSel(rA,a)                                    Path(S83,S85)
	S87= B.Out=>ALU.B                                           Premise(F238)
	S88= ALU.B={16{d[0]},d}                                     Path(S84,S87)
	S89= ALU.Out=AddrSel(rA,a)+{16{d[0]},d}                     ALU(S86,S88)
	S90= ALU.Out=>ALUOut.In                                     Premise(F240)
	S91= ALUOut.In=AddrSel(rA,a)+{16{d[0]},d}                   Path(S89,S90)
	S92= CtrlPIDReg=0                                           Premise(F253)
	S93= [PIDReg]=pid                                           PIDReg-Hold(S71,S92)
	S94= CtrlPC=0                                               Premise(F255)
	S95= CtrlPCInc=0                                            Premise(F256)
	S96= PC[Out]=addr+4                                         PC-Hold(S74,S94,S95)
	S97= CtrlICache=0                                           Premise(F259)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S76,S97)
	S99= CtrlDR=0                                               Premise(F268)
	S100= [DR]={24'b0,B4}                                       DR-Hold(S82,S99)
	S101= CtrlALUOut=1                                          Premise(F269)
	S102= [ALUOut]=AddrSel(rA,a)+{16{d[0]},d}                   ALUOut-Write(S91,S101)

MEM	S103= PIDReg.Out=pid                                        PIDReg-Out(S93)
	S104= ALUOut.Out=AddrSel(rA,a)+{16{d[0]},d}                 ALUOut-Out(S102)
	S105= PIDReg.Out=>DMMU.PID                                  Premise(F309)
	S106= DMMU.PID=pid                                          Path(S103,S105)
	S107= ALUOut.Out=>DMMU.IEA                                  Premise(F310)
	S108= DMMU.IEA=AddrSel(rA,a)+{16{d[0]},d}                   Path(S104,S107)
	S109= DMMU.Addr={pid,AddrSel(rA,a)+{16{d[0]},d}}            DMMU-Search(S106,S108)
	S110= DMMU.Addr=>DAddrReg.In                                Premise(F311)
	S111= DAddrReg.In={pid,AddrSel(rA,a)+{16{d[0]},d}}          Path(S109,S110)
	S112= CtrlPC=0                                              Premise(F323)
	S113= CtrlPCInc=0                                           Premise(F324)
	S114= PC[Out]=addr+4                                        PC-Hold(S96,S112,S113)
	S115= CtrlICache=0                                          Premise(F327)
	S116= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S115)
	S117= CtrlDR=0                                              Premise(F336)
	S118= [DR]={24'b0,B4}                                       DR-Hold(S100,S117)
	S119= CtrlDAddrReg=1                                        Premise(F339)
	S120= [DAddrReg]={pid,AddrSel(rA,a)+{16{d[0]},d}}           DAddrReg-Write(S111,S119)

DMMU1	S121= CtrlPC=0                                              Premise(F391)
	S122= CtrlPCInc=0                                           Premise(F392)
	S123= PC[Out]=addr+4                                        PC-Hold(S114,S121,S122)
	S124= CtrlICache=0                                          Premise(F395)
	S125= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S116,S124)
	S126= CtrlDR=0                                              Premise(F404)
	S127= [DR]={24'b0,B4}                                       DR-Hold(S118,S126)
	S128= CtrlDAddrReg=0                                        Premise(F407)
	S129= [DAddrReg]={pid,AddrSel(rA,a)+{16{d[0]},d}}           DAddrReg-Hold(S120,S128)

DMMU2	S130= DR.Out={24'b0,B4}                                     DR-Out(S127)
	S131= DAddrReg.Out={pid,AddrSel(rA,a)+{16{d[0]},d}}         DAddrReg-Out(S129)
	S132= DAddrReg.Out=>DMem.WAddr                              Premise(F453)
	S133= DMem.WAddr={pid,AddrSel(rA,a)+{16{d[0]},d}}           Path(S131,S132)
	S134= DR.Out=>DMem.WData                                    Premise(F454)
	S135= DMem.WData={24'b0,B4}                                 Path(S130,S134)
	S136= CtrlPC=0                                              Premise(F459)
	S137= CtrlPCInc=0                                           Premise(F460)
	S138= PC[Out]=addr+4                                        PC-Hold(S123,S136,S137)
	S139= CtrlICache=0                                          Premise(F463)
	S140= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S125,S139)
	S141= CtrlDMem=1                                            Premise(F479)
	S142= DMem[{pid,AddrSel(rA,a)+{16{d[0]},d}}]={24'b0,B4}     DMem-Write(S133,S135,S141)

WB	S143= CtrlPC=0                                              Premise(F527)
	S144= CtrlPCInc=0                                           Premise(F528)
	S145= PC[Out]=addr+4                                        PC-Hold(S138,S143,S144)
	S146= CtrlICache=0                                          Premise(F531)
	S147= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S140,S146)
	S148= CtrlDMem=0                                            Premise(F547)
	S149= DMem[{pid,AddrSel(rA,a)+{16{d[0]},d}}]={24'b0,B4}     DMem-Hold(S142,S148)

POST	S145= PC[Out]=addr+4                                        PC-Hold(S138,S143,S144)
	S147= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S140,S146)
	S149= DMem[{pid,AddrSel(rA,a)+{16{d[0]},d}}]={24'b0,B4}     DMem-Hold(S142,S148)

