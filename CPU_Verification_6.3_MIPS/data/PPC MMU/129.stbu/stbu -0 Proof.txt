
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={39,rS,rA,d}                           Premise(F2)
	S3= ICache[addr]={39,rS,rA,d}                               Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F7)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F10)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={39,rS,rA,d}                                ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F11)
	S18= ICacheReg.In={39,rS,rA,d}                              Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F52)
	S20= CtrlPCInc=0                                            Premise(F53)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F54)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F57)
	S25= [ICacheReg]={39,rS,rA,d}                               ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F59)
	S27= IMem[{pid,addr}]={39,rS,rA,d}                          IMem-Hold(S2,S26)
	S28= CtrlGPRegs=0                                           Premise(F62)
	S29= GPRegs[rA]=a                                           GPRegs-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={39,rS,rA,d}                             ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F83)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={39,rS,rA,d}                                  IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F84)
	S36= IRMux.MemData={39,rS,rA,d}                             Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F85)
	S38= IRMux.CacheData={39,rS,rA,d}                           Path(S31,S37)
	S39= IRMux.Out={39,rS,rA,d}                                 IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F88)
	S41= IR.In={39,rS,rA,d}                                     Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F120)
	S43= CtrlPCInc=1                                            Premise(F121)
	S44= PC[Out]=addr+4                                         PC-Inc(S21,S42,S43)
	S45= CtrlIR=1                                               Premise(F129)
	S46= [IR]={39,rS,rA,d}                                      IR-Write(S41,S45)
	S47= CtrlGPRegs=0                                           Premise(F130)
	S48= GPRegs[rA]=a                                           GPRegs-Hold(S29,S47)

ID	S49= IR.Out11_15=rA                                         IR-Out(S46)
	S50= IR.Out16_31=d                                          IR-Out(S46)
	S51= IR.Out11_15=>GPRegs.RReg2                              Premise(F160)
	S52= GPRegs.RReg2=rA                                        Path(S49,S51)
	S53= GPRegs.Rdata2=a                                        GPRegs-Read(S52,S48)
	S54= GPRegs.Rdata2=>A.In                                    Premise(F161)
	S55= A.In=a                                                 Path(S53,S54)
	S56= IR.Out16_31=>IMMEXT.In                                 Premise(F162)
	S57= IMMEXT.In=d                                            Path(S50,S56)
	S58= IMMEXT.Out={16{d[0]},d}                                IMMEXT(S57)
	S59= IMMEXT.Out=>B.In                                       Premise(F163)
	S60= B.In={16{d[0]},d}                                      Path(S58,S59)
	S61= MemDataSel.Out={24'b0,B4}                              MemDataSel()
	S62= MemDataSel.Out=>DR.In                                  Premise(F167)
	S63= DR.In={24'b0,B4}                                       Path(S61,S62)
	S64= CtrlPC=0                                               Premise(F188)
	S65= CtrlPCInc=0                                            Premise(F189)
	S66= PC[Out]=addr+4                                         PC-Hold(S44,S64,S65)
	S67= CtrlIR=0                                               Premise(F197)
	S68= [IR]={39,rS,rA,d}                                      IR-Hold(S46,S67)
	S69= CtrlA=1                                                Premise(F199)
	S70= [A]=a                                                  A-Write(S55,S69)
	S71= CtrlB=1                                                Premise(F200)
	S72= [B]={16{d[0]},d}                                       B-Write(S60,S71)
	S73= CtrlDR=1                                               Premise(F201)
	S74= [DR]={24'b0,B4}                                        DR-Write(S63,S73)

EX	S75= A.Out=a                                                A-Out(S70)
	S76= B.Out={16{d[0]},d}                                     B-Out(S72)
	S77= A.Out=>ALU.A                                           Premise(F236)
	S78= ALU.A=a                                                Path(S75,S77)
	S79= B.Out=>ALU.B                                           Premise(F237)
	S80= ALU.B={16{d[0]},d}                                     Path(S76,S79)
	S81= ALU.Out=a+{16{d[0]},d}                                 ALU(S78,S80)
	S82= ALU.Out=>ALUOut.In                                     Premise(F239)
	S83= ALUOut.In=a+{16{d[0]},d}                               Path(S81,S82)
	S84= CtrlPC=0                                               Premise(F256)
	S85= CtrlPCInc=0                                            Premise(F257)
	S86= PC[Out]=addr+4                                         PC-Hold(S66,S84,S85)
	S87= CtrlIR=0                                               Premise(F265)
	S88= [IR]={39,rS,rA,d}                                      IR-Hold(S68,S87)
	S89= CtrlDR=0                                               Premise(F269)
	S90= [DR]={24'b0,B4}                                        DR-Hold(S74,S89)
	S91= CtrlALUOut=1                                           Premise(F270)
	S92= [ALUOut]=a+{16{d[0]},d}                                ALUOut-Write(S83,S91)

MEM	S93= CtrlPC=0                                               Premise(F324)
	S94= CtrlPCInc=0                                            Premise(F325)
	S95= PC[Out]=addr+4                                         PC-Hold(S86,S93,S94)
	S96= CtrlIR=0                                               Premise(F333)
	S97= [IR]={39,rS,rA,d}                                      IR-Hold(S88,S96)
	S98= CtrlDR=0                                               Premise(F337)
	S99= [DR]={24'b0,B4}                                        DR-Hold(S90,S98)
	S100= CtrlALUOut=0                                          Premise(F338)
	S101= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S92,S100)

DMMU1	S102= CtrlPC=0                                              Premise(F392)
	S103= CtrlPCInc=0                                           Premise(F393)
	S104= PC[Out]=addr+4                                        PC-Hold(S95,S102,S103)
	S105= CtrlIR=0                                              Premise(F401)
	S106= [IR]={39,rS,rA,d}                                     IR-Hold(S97,S105)
	S107= CtrlDR=0                                              Premise(F405)
	S108= [DR]={24'b0,B4}                                       DR-Hold(S99,S107)
	S109= CtrlALUOut=0                                          Premise(F406)
	S110= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S101,S109)

DMMU2	S111= DR.Out={24'b0,B4}                                     DR-Out(S108)
	S112= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S110)
	S113= ALUOut.Out=>DCache.IEA                                Premise(F448)
	S114= DCache.IEA=a+{16{d[0]},d}                             Path(S112,S113)
	S115= DR.Out=>DCache.In                                     Premise(F455)
	S116= DCache.In={24'b0,B4}                                  Path(S111,S115)
	S117= CtrlPC=0                                              Premise(F460)
	S118= CtrlPCInc=0                                           Premise(F461)
	S119= PC[Out]=addr+4                                        PC-Hold(S104,S117,S118)
	S120= CtrlIR=0                                              Premise(F469)
	S121= [IR]={39,rS,rA,d}                                     IR-Hold(S106,S120)
	S122= CtrlALUOut=0                                          Premise(F474)
	S123= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S110,S122)
	S124= CtrlDCache=1                                          Premise(F478)
	S125= DCache[a+{16{d[0]},d}]={24'b0,B4}                     DCache-Write(S114,S116,S124)

WB	S126= IR.Out11_15=rA                                        IR-Out(S121)
	S127= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S123)
	S128= ALUOut.Out=>GPRegs.WData                              Premise(F524)
	S129= GPRegs.WData=a+{16{d[0]},d}                           Path(S127,S128)
	S130= IR.Out11_15=>GPRegs.WReg                              Premise(F525)
	S131= GPRegs.WReg=rA                                        Path(S126,S130)
	S132= CtrlPC=0                                              Premise(F528)
	S133= CtrlPCInc=0                                           Premise(F529)
	S134= PC[Out]=addr+4                                        PC-Hold(S119,S132,S133)
	S135= CtrlGPRegs=1                                          Premise(F538)
	S136= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S131,S129,S135)
	S137= CtrlDCache=0                                          Premise(F546)
	S138= DCache[a+{16{d[0]},d}]={24'b0,B4}                     DCache-Hold(S125,S137)

POST	S134= PC[Out]=addr+4                                        PC-Hold(S119,S132,S133)
	S136= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S131,S129,S135)
	S138= DCache[a+{16{d[0]},d}]={24'b0,B4}                     DCache-Hold(S125,S137)

