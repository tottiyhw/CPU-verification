
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={39,rS,rA,d}                           Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F6)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPIDReg=0                                           Premise(F49)
	S14= [PIDReg]=pid                                           PIDReg-Hold(S0,S13)
	S15= CtrlPC=0                                               Premise(F51)
	S16= CtrlPCInc=0                                            Premise(F52)
	S17= PC[Out]=addr                                           PC-Hold(S1,S15,S16)
	S18= CtrlIAddrReg=1                                         Premise(F53)
	S19= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S18)
	S20= CtrlIMem=0                                             Premise(F58)
	S21= IMem[{pid,addr}]={39,rS,rA,d}                          IMem-Hold(S2,S20)
	S22= CtrlGPRegs=0                                           Premise(F61)
	S23= GPRegs[rA]=a                                           GPRegs-Hold(S3,S22)

IMMU	S24= PC.Out=addr                                            PC-Out(S17)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S19)
	S26= PC.Out=>ICache.IEA                                     Premise(F77)
	S27= ICache.IEA=addr                                        Path(S24,S26)
	S28= IAddrReg.Out=>IMem.RAddr                               Premise(F82)
	S29= IMem.RAddr={pid,addr}                                  Path(S25,S28)
	S30= IMem.Out={39,rS,rA,d}                                  IMem-Read(S29,S21)
	S31= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S29,S21)
	S32= IMem.Out=>IRMux.MemData                                Premise(F83)
	S33= IRMux.MemData={39,rS,rA,d}                             Path(S30,S32)
	S34= IRMux.Out={39,rS,rA,d}                                 IRMux-Select(S33)
	S35= IRMux.Out=>IR.In                                       Premise(F87)
	S36= IR.In={39,rS,rA,d}                                     Path(S34,S35)
	S37= IMem.MEM8WordOut=>ICache.WData                         Premise(F88)
	S38= ICache.WData=IMemGet8Word({pid,addr})                  Path(S31,S37)
	S39= CtrlPIDReg=0                                           Premise(F117)
	S40= [PIDReg]=pid                                           PIDReg-Hold(S14,S39)
	S41= CtrlPC=0                                               Premise(F119)
	S42= CtrlPCInc=1                                            Premise(F120)
	S43= PC[Out]=addr+4                                         PC-Inc(S17,S41,S42)
	S44= CtrlICache=1                                           Premise(F123)
	S45= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S27,S38,S44)
	S46= CtrlIR=1                                               Premise(F128)
	S47= [IR]={39,rS,rA,d}                                      IR-Write(S36,S46)
	S48= CtrlGPRegs=0                                           Premise(F129)
	S49= GPRegs[rA]=a                                           GPRegs-Hold(S23,S48)

ID	S50= IR.Out11_15=rA                                         IR-Out(S47)
	S51= IR.Out16_31=d                                          IR-Out(S47)
	S52= IR.Out11_15=>GPRegs.RReg2                              Premise(F159)
	S53= GPRegs.RReg2=rA                                        Path(S50,S52)
	S54= GPRegs.Rdata2=a                                        GPRegs-Read(S53,S49)
	S55= GPRegs.Rdata2=>A.In                                    Premise(F160)
	S56= A.In=a                                                 Path(S54,S55)
	S57= IR.Out16_31=>IMMEXT.In                                 Premise(F161)
	S58= IMMEXT.In=d                                            Path(S51,S57)
	S59= IMMEXT.Out={16{d[0]},d}                                IMMEXT(S58)
	S60= IMMEXT.Out=>B.In                                       Premise(F162)
	S61= B.In={16{d[0]},d}                                      Path(S59,S60)
	S62= MemDataSel.Out={24'b0,B4}                              MemDataSel()
	S63= MemDataSel.Out=>DR.In                                  Premise(F166)
	S64= DR.In={24'b0,B4}                                       Path(S62,S63)
	S65= CtrlPIDReg=0                                           Premise(F185)
	S66= [PIDReg]=pid                                           PIDReg-Hold(S40,S65)
	S67= CtrlPC=0                                               Premise(F187)
	S68= CtrlPCInc=0                                            Premise(F188)
	S69= PC[Out]=addr+4                                         PC-Hold(S43,S67,S68)
	S70= CtrlICache=0                                           Premise(F191)
	S71= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S45,S70)
	S72= CtrlIR=0                                               Premise(F196)
	S73= [IR]={39,rS,rA,d}                                      IR-Hold(S47,S72)
	S74= CtrlA=1                                                Premise(F198)
	S75= [A]=a                                                  A-Write(S56,S74)
	S76= CtrlB=1                                                Premise(F199)
	S77= [B]={16{d[0]},d}                                       B-Write(S61,S76)
	S78= CtrlDR=1                                               Premise(F200)
	S79= [DR]={24'b0,B4}                                        DR-Write(S64,S78)

EX	S80= A.Out=a                                                A-Out(S75)
	S81= B.Out={16{d[0]},d}                                     B-Out(S77)
	S82= A.Out=>ALU.A                                           Premise(F235)
	S83= ALU.A=a                                                Path(S80,S82)
	S84= B.Out=>ALU.B                                           Premise(F236)
	S85= ALU.B={16{d[0]},d}                                     Path(S81,S84)
	S86= ALU.Out=a+{16{d[0]},d}                                 ALU(S83,S85)
	S87= ALU.Out=>ALUOut.In                                     Premise(F238)
	S88= ALUOut.In=a+{16{d[0]},d}                               Path(S86,S87)
	S89= CtrlPIDReg=0                                           Premise(F253)
	S90= [PIDReg]=pid                                           PIDReg-Hold(S66,S89)
	S91= CtrlPC=0                                               Premise(F255)
	S92= CtrlPCInc=0                                            Premise(F256)
	S93= PC[Out]=addr+4                                         PC-Hold(S69,S91,S92)
	S94= CtrlICache=0                                           Premise(F259)
	S95= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S71,S94)
	S96= CtrlIR=0                                               Premise(F264)
	S97= [IR]={39,rS,rA,d}                                      IR-Hold(S73,S96)
	S98= CtrlDR=0                                               Premise(F268)
	S99= [DR]={24'b0,B4}                                        DR-Hold(S79,S98)
	S100= CtrlALUOut=1                                          Premise(F269)
	S101= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Write(S88,S100)

MEM	S102= PIDReg.Out=pid                                        PIDReg-Out(S90)
	S103= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S101)
	S104= PIDReg.Out=>DMMU.PID                                  Premise(F307)
	S105= DMMU.PID=pid                                          Path(S102,S104)
	S106= ALUOut.Out=>DMMU.IEA                                  Premise(F308)
	S107= DMMU.IEA=a+{16{d[0]},d}                               Path(S103,S106)
	S108= DMMU.Addr={pid,a+{16{d[0]},d}}                        DMMU-Search(S105,S107)
	S109= DMMU.Addr=>DAddrReg.In                                Premise(F309)
	S110= DAddrReg.In={pid,a+{16{d[0]},d}}                      Path(S108,S109)
	S111= CtrlPC=0                                              Premise(F323)
	S112= CtrlPCInc=0                                           Premise(F324)
	S113= PC[Out]=addr+4                                        PC-Hold(S93,S111,S112)
	S114= CtrlICache=0                                          Premise(F327)
	S115= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S95,S114)
	S116= CtrlIR=0                                              Premise(F332)
	S117= [IR]={39,rS,rA,d}                                     IR-Hold(S97,S116)
	S118= CtrlDR=0                                              Premise(F336)
	S119= [DR]={24'b0,B4}                                       DR-Hold(S99,S118)
	S120= CtrlALUOut=0                                          Premise(F337)
	S121= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S101,S120)
	S122= CtrlDAddrReg=1                                        Premise(F339)
	S123= [DAddrReg]={pid,a+{16{d[0]},d}}                       DAddrReg-Write(S110,S122)

DMMU1	S124= CtrlPC=0                                              Premise(F391)
	S125= CtrlPCInc=0                                           Premise(F392)
	S126= PC[Out]=addr+4                                        PC-Hold(S113,S124,S125)
	S127= CtrlICache=0                                          Premise(F395)
	S128= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S115,S127)
	S129= CtrlIR=0                                              Premise(F400)
	S130= [IR]={39,rS,rA,d}                                     IR-Hold(S117,S129)
	S131= CtrlDR=0                                              Premise(F404)
	S132= [DR]={24'b0,B4}                                       DR-Hold(S119,S131)
	S133= CtrlALUOut=0                                          Premise(F405)
	S134= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S121,S133)
	S135= CtrlDAddrReg=0                                        Premise(F407)
	S136= [DAddrReg]={pid,a+{16{d[0]},d}}                       DAddrReg-Hold(S123,S135)

DMMU2	S137= DR.Out={24'b0,B4}                                     DR-Out(S132)
	S138= DAddrReg.Out={pid,a+{16{d[0]},d}}                     DAddrReg-Out(S136)
	S139= DAddrReg.Out=>DMem.WAddr                              Premise(F451)
	S140= DMem.WAddr={pid,a+{16{d[0]},d}}                       Path(S138,S139)
	S141= DR.Out=>DMem.WData                                    Premise(F452)
	S142= DMem.WData={24'b0,B4}                                 Path(S137,S141)
	S143= CtrlPC=0                                              Premise(F459)
	S144= CtrlPCInc=0                                           Premise(F460)
	S145= PC[Out]=addr+4                                        PC-Hold(S126,S143,S144)
	S146= CtrlICache=0                                          Premise(F463)
	S147= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S128,S146)
	S148= CtrlIR=0                                              Premise(F468)
	S149= [IR]={39,rS,rA,d}                                     IR-Hold(S130,S148)
	S150= CtrlALUOut=0                                          Premise(F473)
	S151= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S134,S150)
	S152= CtrlDMem=1                                            Premise(F479)
	S153= DMem[{pid,a+{16{d[0]},d}}]={24'b0,B4}                 DMem-Write(S140,S142,S152)

WB	S154= IR.Out11_15=rA                                        IR-Out(S149)
	S155= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S151)
	S156= ALUOut.Out=>GPRegs.WData                              Premise(F523)
	S157= GPRegs.WData=a+{16{d[0]},d}                           Path(S155,S156)
	S158= IR.Out11_15=>GPRegs.WReg                              Premise(F524)
	S159= GPRegs.WReg=rA                                        Path(S154,S158)
	S160= CtrlPC=0                                              Premise(F527)
	S161= CtrlPCInc=0                                           Premise(F528)
	S162= PC[Out]=addr+4                                        PC-Hold(S145,S160,S161)
	S163= CtrlICache=0                                          Premise(F531)
	S164= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S147,S163)
	S165= CtrlGPRegs=1                                          Premise(F537)
	S166= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S159,S157,S165)
	S167= CtrlDMem=0                                            Premise(F547)
	S168= DMem[{pid,a+{16{d[0]},d}}]={24'b0,B4}                 DMem-Hold(S153,S167)

POST	S162= PC[Out]=addr+4                                        PC-Hold(S145,S160,S161)
	S164= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S147,S163)
	S166= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S159,S157,S165)
	S168= DMem[{pid,a+{16{d[0]},d}}]={24'b0,B4}                 DMem-Hold(S153,S167)

