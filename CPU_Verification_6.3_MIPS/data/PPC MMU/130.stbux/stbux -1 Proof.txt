
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,rB,494}                      Premise(F2)
	S3= ICache[addr]={31,rS,rA,rB,494}                          Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F8)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F11)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={31,rS,rA,rB,494}                           ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F12)
	S19= ICacheReg.In={31,rS,rA,rB,494}                         Path(S17,S18)
	S20= CtrlPIDReg=0                                           Premise(F52)
	S21= [PIDReg]=pid                                           PIDReg-Hold(S0,S20)
	S22= CtrlPC=0                                               Premise(F54)
	S23= CtrlPCInc=0                                            Premise(F55)
	S24= PC[Out]=addr                                           PC-Hold(S1,S22,S23)
	S25= CtrlIAddrReg=1                                         Premise(F56)
	S26= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S25)
	S27= CtrlICacheReg=1                                        Premise(F59)
	S28= [ICacheReg]={31,rS,rA,rB,494}                          ICacheReg-Write(S19,S27)
	S29= CtrlIMem=0                                             Premise(F61)
	S30= IMem[{pid,addr}]={31,rS,rA,rB,494}                     IMem-Hold(S2,S29)
	S31= CtrlGPRegs=0                                           Premise(F64)
	S32= GPRegs[rA]=a                                           GPRegs-Hold(S4,S31)
	S33= GPRegs[rB]=b                                           GPRegs-Hold(S5,S31)

IMMU	S34= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S26)
	S35= ICacheReg.Out={31,rS,rA,rB,494}                        ICacheReg-Out(S28)
	S36= IAddrReg.Out=>IMem.RAddr                               Premise(F85)
	S37= IMem.RAddr={pid,addr}                                  Path(S34,S36)
	S38= IMem.Out={31,rS,rA,rB,494}                             IMem-Read(S37,S30)
	S39= IMem.Out=>IRMux.MemData                                Premise(F86)
	S40= IRMux.MemData={31,rS,rA,rB,494}                        Path(S38,S39)
	S41= ICacheReg.Out=>IRMux.CacheData                         Premise(F87)
	S42= IRMux.CacheData={31,rS,rA,rB,494}                      Path(S35,S41)
	S43= IRMux.Out={31,rS,rA,rB,494}                            IRMux-Select(S40,S42)
	S44= IRMux.Out=>IR.In                                       Premise(F90)
	S45= IR.In={31,rS,rA,rB,494}                                Path(S43,S44)
	S46= CtrlPIDReg=0                                           Premise(F121)
	S47= [PIDReg]=pid                                           PIDReg-Hold(S21,S46)
	S48= CtrlPC=0                                               Premise(F123)
	S49= CtrlPCInc=1                                            Premise(F124)
	S50= PC[Out]=addr+4                                         PC-Inc(S24,S48,S49)
	S51= CtrlIR=1                                               Premise(F132)
	S52= [IR]={31,rS,rA,rB,494}                                 IR-Write(S45,S51)
	S53= CtrlGPRegs=0                                           Premise(F133)
	S54= GPRegs[rA]=a                                           GPRegs-Hold(S32,S53)
	S55= GPRegs[rB]=b                                           GPRegs-Hold(S33,S53)

ID	S56= IR.Out11_15=rA                                         IR-Out(S52)
	S57= IR.Out16_20=rB                                         IR-Out(S52)
	S58= IR.Out11_15=>GPRegs.RReg1                              Premise(F163)
	S59= GPRegs.RReg1=rA                                        Path(S56,S58)
	S60= GPRegs.Rdata1=a                                        GPRegs-Read(S59,S54)
	S61= IR.Out16_20=>GPRegs.RReg2                              Premise(F164)
	S62= GPRegs.RReg2=rB                                        Path(S57,S61)
	S63= GPRegs.Rdata2=b                                        GPRegs-Read(S62,S55)
	S64= GPRegs.Rdata1=>A.In                                    Premise(F166)
	S65= A.In=a                                                 Path(S60,S64)
	S66= GPRegs.Rdata2=>B.In                                    Premise(F167)
	S67= B.In=b                                                 Path(S63,S66)
	S68= CtrlPIDReg=0                                           Premise(F190)
	S69= [PIDReg]=pid                                           PIDReg-Hold(S47,S68)
	S70= CtrlPC=0                                               Premise(F192)
	S71= CtrlPCInc=0                                            Premise(F193)
	S72= PC[Out]=addr+4                                         PC-Hold(S50,S70,S71)
	S73= CtrlIR=0                                               Premise(F201)
	S74= [IR]={31,rS,rA,rB,494}                                 IR-Hold(S52,S73)
	S75= CtrlA=1                                                Premise(F203)
	S76= [A]=a                                                  A-Write(S65,S75)
	S77= CtrlB=1                                                Premise(F204)
	S78= [B]=b                                                  B-Write(S67,S77)

EX	S79= A.Out=a                                                A-Out(S76)
	S80= B.Out=b                                                B-Out(S78)
	S81= A.Out=>ALU.A                                           Premise(F237)
	S82= ALU.A=a                                                Path(S79,S81)
	S83= B.Out=>ALU.B                                           Premise(F238)
	S84= ALU.B=b                                                Path(S80,S83)
	S85= ALU.Out=a+b                                            ALU(S82,S84)
	S86= ALU.Out=>ALUOut.In                                     Premise(F240)
	S87= ALUOut.In=a+b                                          Path(S85,S86)
	S88= MemDataSel.Out={24'b0,B4}                              MemDataSel()
	S89= MemDataSel.Out=>DR.In                                  Premise(F244)
	S90= DR.In={24'b0,B4}                                       Path(S88,S89)
	S91= CtrlPIDReg=0                                           Premise(F259)
	S92= [PIDReg]=pid                                           PIDReg-Hold(S69,S91)
	S93= CtrlPC=0                                               Premise(F261)
	S94= CtrlPCInc=0                                            Premise(F262)
	S95= PC[Out]=addr+4                                         PC-Hold(S72,S93,S94)
	S96= CtrlIR=0                                               Premise(F270)
	S97= [IR]={31,rS,rA,rB,494}                                 IR-Hold(S74,S96)
	S98= CtrlDR=1                                               Premise(F274)
	S99= [DR]={24'b0,B4}                                        DR-Write(S90,S98)
	S100= CtrlALUOut=1                                          Premise(F275)
	S101= [ALUOut]=a+b                                          ALUOut-Write(S87,S100)

MEM	S102= PIDReg.Out=pid                                        PIDReg-Out(S92)
	S103= ALUOut.Out=a+b                                        ALUOut-Out(S101)
	S104= PIDReg.Out=>DMMU.PID                                  Premise(F314)
	S105= DMMU.PID=pid                                          Path(S102,S104)
	S106= ALUOut.Out=>DMMU.IEA                                  Premise(F315)
	S107= DMMU.IEA=a+b                                          Path(S103,S106)
	S108= DMMU.Addr={pid,a+b}                                   DMMU-Search(S105,S107)
	S109= DMMU.Addr=>DAddrReg.In                                Premise(F316)
	S110= DAddrReg.In={pid,a+b}                                 Path(S108,S109)
	S111= CtrlPC=0                                              Premise(F330)
	S112= CtrlPCInc=0                                           Premise(F331)
	S113= PC[Out]=addr+4                                        PC-Hold(S95,S111,S112)
	S114= CtrlIR=0                                              Premise(F339)
	S115= [IR]={31,rS,rA,rB,494}                                IR-Hold(S97,S114)
	S116= CtrlDR=0                                              Premise(F343)
	S117= [DR]={24'b0,B4}                                       DR-Hold(S99,S116)
	S118= CtrlALUOut=0                                          Premise(F344)
	S119= [ALUOut]=a+b                                          ALUOut-Hold(S101,S118)
	S120= CtrlDAddrReg=1                                        Premise(F346)
	S121= [DAddrReg]={pid,a+b}                                  DAddrReg-Write(S110,S120)

DMMU1	S122= CtrlPC=0                                              Premise(F399)
	S123= CtrlPCInc=0                                           Premise(F400)
	S124= PC[Out]=addr+4                                        PC-Hold(S113,S122,S123)
	S125= CtrlIR=0                                              Premise(F408)
	S126= [IR]={31,rS,rA,rB,494}                                IR-Hold(S115,S125)
	S127= CtrlDR=0                                              Premise(F412)
	S128= [DR]={24'b0,B4}                                       DR-Hold(S117,S127)
	S129= CtrlALUOut=0                                          Premise(F413)
	S130= [ALUOut]=a+b                                          ALUOut-Hold(S119,S129)
	S131= CtrlDAddrReg=0                                        Premise(F415)
	S132= [DAddrReg]={pid,a+b}                                  DAddrReg-Hold(S121,S131)

DMMU2	S133= DR.Out={24'b0,B4}                                     DR-Out(S128)
	S134= DAddrReg.Out={pid,a+b}                                DAddrReg-Out(S132)
	S135= DAddrReg.Out=>DMem.WAddr                              Premise(F460)
	S136= DMem.WAddr={pid,a+b}                                  Path(S134,S135)
	S137= DR.Out=>DMem.WData                                    Premise(F461)
	S138= DMem.WData={24'b0,B4}                                 Path(S133,S137)
	S139= CtrlPC=0                                              Premise(F468)
	S140= CtrlPCInc=0                                           Premise(F469)
	S141= PC[Out]=addr+4                                        PC-Hold(S124,S139,S140)
	S142= CtrlIR=0                                              Premise(F477)
	S143= [IR]={31,rS,rA,rB,494}                                IR-Hold(S126,S142)
	S144= CtrlALUOut=0                                          Premise(F482)
	S145= [ALUOut]=a+b                                          ALUOut-Hold(S130,S144)
	S146= CtrlDMem=1                                            Premise(F488)
	S147= DMem[{pid,a+b}]={24'b0,B4}                            DMem-Write(S136,S138,S146)

WB	S148= IR.Out11_15=rA                                        IR-Out(S143)
	S149= ALUOut.Out=a+b                                        ALUOut-Out(S145)
	S150= ALUOut.Out=>GPRegs.WData                              Premise(F533)
	S151= GPRegs.WData=a+b                                      Path(S149,S150)
	S152= IR.Out11_15=>GPRegs.WReg                              Premise(F534)
	S153= GPRegs.WReg=rA                                        Path(S148,S152)
	S154= CtrlPC=0                                              Premise(F537)
	S155= CtrlPCInc=0                                           Premise(F538)
	S156= PC[Out]=addr+4                                        PC-Hold(S141,S154,S155)
	S157= CtrlGPRegs=1                                          Premise(F547)
	S158= GPRegs[rA]=a+b                                        GPRegs-Write(S153,S151,S157)
	S159= CtrlDMem=0                                            Premise(F557)
	S160= DMem[{pid,a+b}]={24'b0,B4}                            DMem-Hold(S147,S159)

POST	S156= PC[Out]=addr+4                                        PC-Hold(S141,S154,S155)
	S158= GPRegs[rA]=a+b                                        GPRegs-Write(S153,S151,S157)
	S160= DMem[{pid,a+b}]={24'b0,B4}                            DMem-Hold(S147,S159)

