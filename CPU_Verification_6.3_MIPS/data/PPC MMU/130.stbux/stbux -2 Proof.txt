
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,rB,494}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F7)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F53)
	S15= CtrlPCInc=0                                            Premise(F54)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F55)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F60)
	S20= IMem[{pid,addr}]={31,rS,rA,rB,494}                     IMem-Hold(S2,S19)
	S21= CtrlGPRegs=0                                           Premise(F63)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= GPRegs[rB]=b                                           GPRegs-Hold(S4,S21)

IMMU	S24= PC.Out=addr                                            PC-Out(S16)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S26= PC.Out=>ICache.IEA                                     Premise(F79)
	S27= ICache.IEA=addr                                        Path(S24,S26)
	S28= IAddrReg.Out=>IMem.RAddr                               Premise(F84)
	S29= IMem.RAddr={pid,addr}                                  Path(S25,S28)
	S30= IMem.Out={31,rS,rA,rB,494}                             IMem-Read(S29,S20)
	S31= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S29,S20)
	S32= IMem.Out=>IRMux.MemData                                Premise(F85)
	S33= IRMux.MemData={31,rS,rA,rB,494}                        Path(S30,S32)
	S34= IRMux.Out={31,rS,rA,rB,494}                            IRMux-Select(S33)
	S35= IRMux.Out=>IR.In                                       Premise(F89)
	S36= IR.In={31,rS,rA,rB,494}                                Path(S34,S35)
	S37= IMem.MEM8WordOut=>ICache.WData                         Premise(F90)
	S38= ICache.WData=IMemGet8Word({pid,addr})                  Path(S31,S37)
	S39= CtrlPC=0                                               Premise(F122)
	S40= CtrlPCInc=1                                            Premise(F123)
	S41= PC[Out]=addr+4                                         PC-Inc(S16,S39,S40)
	S42= CtrlICache=1                                           Premise(F126)
	S43= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S27,S38,S42)
	S44= CtrlIR=1                                               Premise(F131)
	S45= [IR]={31,rS,rA,rB,494}                                 IR-Write(S36,S44)
	S46= CtrlGPRegs=0                                           Premise(F132)
	S47= GPRegs[rA]=a                                           GPRegs-Hold(S22,S46)
	S48= GPRegs[rB]=b                                           GPRegs-Hold(S23,S46)

ID	S49= IR.Out11_15=rA                                         IR-Out(S45)
	S50= IR.Out16_20=rB                                         IR-Out(S45)
	S51= IR.Out11_15=>GPRegs.RReg1                              Premise(F162)
	S52= GPRegs.RReg1=rA                                        Path(S49,S51)
	S53= GPRegs.Rdata1=a                                        GPRegs-Read(S52,S47)
	S54= IR.Out16_20=>GPRegs.RReg2                              Premise(F163)
	S55= GPRegs.RReg2=rB                                        Path(S50,S54)
	S56= GPRegs.Rdata2=b                                        GPRegs-Read(S55,S48)
	S57= GPRegs.Rdata1=>A.In                                    Premise(F165)
	S58= A.In=a                                                 Path(S53,S57)
	S59= GPRegs.Rdata2=>B.In                                    Premise(F166)
	S60= B.In=b                                                 Path(S56,S59)
	S61= CtrlPC=0                                               Premise(F191)
	S62= CtrlPCInc=0                                            Premise(F192)
	S63= PC[Out]=addr+4                                         PC-Hold(S41,S61,S62)
	S64= CtrlICache=0                                           Premise(F195)
	S65= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S43,S64)
	S66= CtrlIR=0                                               Premise(F200)
	S67= [IR]={31,rS,rA,rB,494}                                 IR-Hold(S45,S66)
	S68= CtrlA=1                                                Premise(F202)
	S69= [A]=a                                                  A-Write(S58,S68)
	S70= CtrlB=1                                                Premise(F203)
	S71= [B]=b                                                  B-Write(S60,S70)

EX	S72= A.Out=a                                                A-Out(S69)
	S73= B.Out=b                                                B-Out(S71)
	S74= A.Out=>ALU.A                                           Premise(F236)
	S75= ALU.A=a                                                Path(S72,S74)
	S76= B.Out=>ALU.B                                           Premise(F237)
	S77= ALU.B=b                                                Path(S73,S76)
	S78= ALU.Out=a+b                                            ALU(S75,S77)
	S79= ALU.Out=>ALUOut.In                                     Premise(F239)
	S80= ALUOut.In=a+b                                          Path(S78,S79)
	S81= MemDataSel.Out={24'b0,B4}                              MemDataSel()
	S82= MemDataSel.Out=>DR.In                                  Premise(F243)
	S83= DR.In={24'b0,B4}                                       Path(S81,S82)
	S84= CtrlPC=0                                               Premise(F260)
	S85= CtrlPCInc=0                                            Premise(F261)
	S86= PC[Out]=addr+4                                         PC-Hold(S63,S84,S85)
	S87= CtrlICache=0                                           Premise(F264)
	S88= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S65,S87)
	S89= CtrlIR=0                                               Premise(F269)
	S90= [IR]={31,rS,rA,rB,494}                                 IR-Hold(S67,S89)
	S91= CtrlDR=1                                               Premise(F273)
	S92= [DR]={24'b0,B4}                                        DR-Write(S83,S91)
	S93= CtrlALUOut=1                                           Premise(F274)
	S94= [ALUOut]=a+b                                           ALUOut-Write(S80,S93)

MEM	S95= CtrlPC=0                                               Premise(F329)
	S96= CtrlPCInc=0                                            Premise(F330)
	S97= PC[Out]=addr+4                                         PC-Hold(S86,S95,S96)
	S98= CtrlICache=0                                           Premise(F333)
	S99= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S88,S98)
	S100= CtrlIR=0                                              Premise(F338)
	S101= [IR]={31,rS,rA,rB,494}                                IR-Hold(S90,S100)
	S102= CtrlDR=0                                              Premise(F342)
	S103= [DR]={24'b0,B4}                                       DR-Hold(S92,S102)
	S104= CtrlALUOut=0                                          Premise(F343)
	S105= [ALUOut]=a+b                                          ALUOut-Hold(S94,S104)

DMMU1	S106= CtrlPC=0                                              Premise(F398)
	S107= CtrlPCInc=0                                           Premise(F399)
	S108= PC[Out]=addr+4                                        PC-Hold(S97,S106,S107)
	S109= CtrlICache=0                                          Premise(F402)
	S110= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S99,S109)
	S111= CtrlIR=0                                              Premise(F407)
	S112= [IR]={31,rS,rA,rB,494}                                IR-Hold(S101,S111)
	S113= CtrlDR=0                                              Premise(F411)
	S114= [DR]={24'b0,B4}                                       DR-Hold(S103,S113)
	S115= CtrlALUOut=0                                          Premise(F412)
	S116= [ALUOut]=a+b                                          ALUOut-Hold(S105,S115)

DMMU2	S117= DR.Out={24'b0,B4}                                     DR-Out(S114)
	S118= ALUOut.Out=a+b                                        ALUOut-Out(S116)
	S119= ALUOut.Out=>DCache.IEA                                Premise(F455)
	S120= DCache.IEA=a+b                                        Path(S118,S119)
	S121= DR.Out=>DCache.In                                     Premise(F462)
	S122= DCache.In={24'b0,B4}                                  Path(S117,S121)
	S123= CtrlPC=0                                              Premise(F467)
	S124= CtrlPCInc=0                                           Premise(F468)
	S125= PC[Out]=addr+4                                        PC-Hold(S108,S123,S124)
	S126= CtrlICache=0                                          Premise(F471)
	S127= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S110,S126)
	S128= CtrlIR=0                                              Premise(F476)
	S129= [IR]={31,rS,rA,rB,494}                                IR-Hold(S112,S128)
	S130= CtrlALUOut=0                                          Premise(F481)
	S131= [ALUOut]=a+b                                          ALUOut-Hold(S116,S130)
	S132= CtrlDCache=1                                          Premise(F485)
	S133= DCache[a+b]={24'b0,B4}                                DCache-Write(S120,S122,S132)

WB	S134= IR.Out11_15=rA                                        IR-Out(S129)
	S135= ALUOut.Out=a+b                                        ALUOut-Out(S131)
	S136= ALUOut.Out=>GPRegs.WData                              Premise(F532)
	S137= GPRegs.WData=a+b                                      Path(S135,S136)
	S138= IR.Out11_15=>GPRegs.WReg                              Premise(F533)
	S139= GPRegs.WReg=rA                                        Path(S134,S138)
	S140= CtrlPC=0                                              Premise(F536)
	S141= CtrlPCInc=0                                           Premise(F537)
	S142= PC[Out]=addr+4                                        PC-Hold(S125,S140,S141)
	S143= CtrlICache=0                                          Premise(F540)
	S144= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S127,S143)
	S145= CtrlGPRegs=1                                          Premise(F546)
	S146= GPRegs[rA]=a+b                                        GPRegs-Write(S139,S137,S145)
	S147= CtrlDCache=0                                          Premise(F554)
	S148= DCache[a+b]={24'b0,B4}                                DCache-Hold(S133,S147)

POST	S142= PC[Out]=addr+4                                        PC-Hold(S125,S140,S141)
	S144= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S127,S143)
	S146= GPRegs[rA]=a+b                                        GPRegs-Write(S139,S137,S145)
	S148= DCache[a+b]={24'b0,B4}                                DCache-Hold(S133,S147)

