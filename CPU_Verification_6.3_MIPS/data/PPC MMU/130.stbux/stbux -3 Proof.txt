
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,rB,494}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F7)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPIDReg=0                                           Premise(F51)
	S15= [PIDReg]=pid                                           PIDReg-Hold(S0,S14)
	S16= CtrlPC=0                                               Premise(F53)
	S17= CtrlPCInc=0                                            Premise(F54)
	S18= PC[Out]=addr                                           PC-Hold(S1,S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F55)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S19)
	S21= CtrlIMem=0                                             Premise(F60)
	S22= IMem[{pid,addr}]={31,rS,rA,rB,494}                     IMem-Hold(S2,S21)
	S23= CtrlGPRegs=0                                           Premise(F63)
	S24= GPRegs[rA]=a                                           GPRegs-Hold(S3,S23)
	S25= GPRegs[rB]=b                                           GPRegs-Hold(S4,S23)

IMMU	S26= PC.Out=addr                                            PC-Out(S18)
	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S28= PC.Out=>ICache.IEA                                     Premise(F79)
	S29= ICache.IEA=addr                                        Path(S26,S28)
	S30= IAddrReg.Out=>IMem.RAddr                               Premise(F84)
	S31= IMem.RAddr={pid,addr}                                  Path(S27,S30)
	S32= IMem.Out={31,rS,rA,rB,494}                             IMem-Read(S31,S22)
	S33= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S31,S22)
	S34= IMem.Out=>IRMux.MemData                                Premise(F85)
	S35= IRMux.MemData={31,rS,rA,rB,494}                        Path(S32,S34)
	S36= IRMux.Out={31,rS,rA,rB,494}                            IRMux-Select(S35)
	S37= IRMux.Out=>IR.In                                       Premise(F89)
	S38= IR.In={31,rS,rA,rB,494}                                Path(S36,S37)
	S39= IMem.MEM8WordOut=>ICache.WData                         Premise(F90)
	S40= ICache.WData=IMemGet8Word({pid,addr})                  Path(S33,S39)
	S41= CtrlPIDReg=0                                           Premise(F120)
	S42= [PIDReg]=pid                                           PIDReg-Hold(S15,S41)
	S43= CtrlPC=0                                               Premise(F122)
	S44= CtrlPCInc=1                                            Premise(F123)
	S45= PC[Out]=addr+4                                         PC-Inc(S18,S43,S44)
	S46= CtrlICache=1                                           Premise(F126)
	S47= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S29,S40,S46)
	S48= CtrlIR=1                                               Premise(F131)
	S49= [IR]={31,rS,rA,rB,494}                                 IR-Write(S38,S48)
	S50= CtrlGPRegs=0                                           Premise(F132)
	S51= GPRegs[rA]=a                                           GPRegs-Hold(S24,S50)
	S52= GPRegs[rB]=b                                           GPRegs-Hold(S25,S50)

ID	S53= IR.Out11_15=rA                                         IR-Out(S49)
	S54= IR.Out16_20=rB                                         IR-Out(S49)
	S55= IR.Out11_15=>GPRegs.RReg1                              Premise(F162)
	S56= GPRegs.RReg1=rA                                        Path(S53,S55)
	S57= GPRegs.Rdata1=a                                        GPRegs-Read(S56,S51)
	S58= IR.Out16_20=>GPRegs.RReg2                              Premise(F163)
	S59= GPRegs.RReg2=rB                                        Path(S54,S58)
	S60= GPRegs.Rdata2=b                                        GPRegs-Read(S59,S52)
	S61= GPRegs.Rdata1=>A.In                                    Premise(F165)
	S62= A.In=a                                                 Path(S57,S61)
	S63= GPRegs.Rdata2=>B.In                                    Premise(F166)
	S64= B.In=b                                                 Path(S60,S63)
	S65= CtrlPIDReg=0                                           Premise(F189)
	S66= [PIDReg]=pid                                           PIDReg-Hold(S42,S65)
	S67= CtrlPC=0                                               Premise(F191)
	S68= CtrlPCInc=0                                            Premise(F192)
	S69= PC[Out]=addr+4                                         PC-Hold(S45,S67,S68)
	S70= CtrlICache=0                                           Premise(F195)
	S71= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S47,S70)
	S72= CtrlIR=0                                               Premise(F200)
	S73= [IR]={31,rS,rA,rB,494}                                 IR-Hold(S49,S72)
	S74= CtrlA=1                                                Premise(F202)
	S75= [A]=a                                                  A-Write(S62,S74)
	S76= CtrlB=1                                                Premise(F203)
	S77= [B]=b                                                  B-Write(S64,S76)

EX	S78= A.Out=a                                                A-Out(S75)
	S79= B.Out=b                                                B-Out(S77)
	S80= A.Out=>ALU.A                                           Premise(F236)
	S81= ALU.A=a                                                Path(S78,S80)
	S82= B.Out=>ALU.B                                           Premise(F237)
	S83= ALU.B=b                                                Path(S79,S82)
	S84= ALU.Out=a+b                                            ALU(S81,S83)
	S85= ALU.Out=>ALUOut.In                                     Premise(F239)
	S86= ALUOut.In=a+b                                          Path(S84,S85)
	S87= MemDataSel.Out={24'b0,B4}                              MemDataSel()
	S88= MemDataSel.Out=>DR.In                                  Premise(F243)
	S89= DR.In={24'b0,B4}                                       Path(S87,S88)
	S90= CtrlPIDReg=0                                           Premise(F258)
	S91= [PIDReg]=pid                                           PIDReg-Hold(S66,S90)
	S92= CtrlPC=0                                               Premise(F260)
	S93= CtrlPCInc=0                                            Premise(F261)
	S94= PC[Out]=addr+4                                         PC-Hold(S69,S92,S93)
	S95= CtrlICache=0                                           Premise(F264)
	S96= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S71,S95)
	S97= CtrlIR=0                                               Premise(F269)
	S98= [IR]={31,rS,rA,rB,494}                                 IR-Hold(S73,S97)
	S99= CtrlDR=1                                               Premise(F273)
	S100= [DR]={24'b0,B4}                                       DR-Write(S89,S99)
	S101= CtrlALUOut=1                                          Premise(F274)
	S102= [ALUOut]=a+b                                          ALUOut-Write(S86,S101)

MEM	S103= PIDReg.Out=pid                                        PIDReg-Out(S91)
	S104= ALUOut.Out=a+b                                        ALUOut-Out(S102)
	S105= PIDReg.Out=>DMMU.PID                                  Premise(F313)
	S106= DMMU.PID=pid                                          Path(S103,S105)
	S107= ALUOut.Out=>DMMU.IEA                                  Premise(F314)
	S108= DMMU.IEA=a+b                                          Path(S104,S107)
	S109= DMMU.Addr={pid,a+b}                                   DMMU-Search(S106,S108)
	S110= DMMU.Addr=>DAddrReg.In                                Premise(F315)
	S111= DAddrReg.In={pid,a+b}                                 Path(S109,S110)
	S112= CtrlPC=0                                              Premise(F329)
	S113= CtrlPCInc=0                                           Premise(F330)
	S114= PC[Out]=addr+4                                        PC-Hold(S94,S112,S113)
	S115= CtrlICache=0                                          Premise(F333)
	S116= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S96,S115)
	S117= CtrlIR=0                                              Premise(F338)
	S118= [IR]={31,rS,rA,rB,494}                                IR-Hold(S98,S117)
	S119= CtrlDR=0                                              Premise(F342)
	S120= [DR]={24'b0,B4}                                       DR-Hold(S100,S119)
	S121= CtrlALUOut=0                                          Premise(F343)
	S122= [ALUOut]=a+b                                          ALUOut-Hold(S102,S121)
	S123= CtrlDAddrReg=1                                        Premise(F345)
	S124= [DAddrReg]={pid,a+b}                                  DAddrReg-Write(S111,S123)

DMMU1	S125= CtrlPC=0                                              Premise(F398)
	S126= CtrlPCInc=0                                           Premise(F399)
	S127= PC[Out]=addr+4                                        PC-Hold(S114,S125,S126)
	S128= CtrlICache=0                                          Premise(F402)
	S129= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S116,S128)
	S130= CtrlIR=0                                              Premise(F407)
	S131= [IR]={31,rS,rA,rB,494}                                IR-Hold(S118,S130)
	S132= CtrlDR=0                                              Premise(F411)
	S133= [DR]={24'b0,B4}                                       DR-Hold(S120,S132)
	S134= CtrlALUOut=0                                          Premise(F412)
	S135= [ALUOut]=a+b                                          ALUOut-Hold(S122,S134)
	S136= CtrlDAddrReg=0                                        Premise(F414)
	S137= [DAddrReg]={pid,a+b}                                  DAddrReg-Hold(S124,S136)

DMMU2	S138= DR.Out={24'b0,B4}                                     DR-Out(S133)
	S139= DAddrReg.Out={pid,a+b}                                DAddrReg-Out(S137)
	S140= DAddrReg.Out=>DMem.WAddr                              Premise(F459)
	S141= DMem.WAddr={pid,a+b}                                  Path(S139,S140)
	S142= DR.Out=>DMem.WData                                    Premise(F460)
	S143= DMem.WData={24'b0,B4}                                 Path(S138,S142)
	S144= CtrlPC=0                                              Premise(F467)
	S145= CtrlPCInc=0                                           Premise(F468)
	S146= PC[Out]=addr+4                                        PC-Hold(S127,S144,S145)
	S147= CtrlICache=0                                          Premise(F471)
	S148= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S129,S147)
	S149= CtrlIR=0                                              Premise(F476)
	S150= [IR]={31,rS,rA,rB,494}                                IR-Hold(S131,S149)
	S151= CtrlALUOut=0                                          Premise(F481)
	S152= [ALUOut]=a+b                                          ALUOut-Hold(S135,S151)
	S153= CtrlDMem=1                                            Premise(F487)
	S154= DMem[{pid,a+b}]={24'b0,B4}                            DMem-Write(S141,S143,S153)

WB	S155= IR.Out11_15=rA                                        IR-Out(S150)
	S156= ALUOut.Out=a+b                                        ALUOut-Out(S152)
	S157= ALUOut.Out=>GPRegs.WData                              Premise(F532)
	S158= GPRegs.WData=a+b                                      Path(S156,S157)
	S159= IR.Out11_15=>GPRegs.WReg                              Premise(F533)
	S160= GPRegs.WReg=rA                                        Path(S155,S159)
	S161= CtrlPC=0                                              Premise(F536)
	S162= CtrlPCInc=0                                           Premise(F537)
	S163= PC[Out]=addr+4                                        PC-Hold(S146,S161,S162)
	S164= CtrlICache=0                                          Premise(F540)
	S165= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S148,S164)
	S166= CtrlGPRegs=1                                          Premise(F546)
	S167= GPRegs[rA]=a+b                                        GPRegs-Write(S160,S158,S166)
	S168= CtrlDMem=0                                            Premise(F556)
	S169= DMem[{pid,a+b}]={24'b0,B4}                            DMem-Hold(S154,S168)

POST	S163= PC[Out]=addr+4                                        PC-Hold(S146,S161,S162)
	S165= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S148,S164)
	S167= GPRegs[rA]=a+b                                        GPRegs-Write(S160,S158,S166)
	S169= DMem[{pid,a+b}]={24'b0,B4}                            DMem-Hold(S154,S168)

