
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,rB,430}                      Premise(F2)
	S3= ICache[addr]={31,rS,rA,rB,430}                          Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F8)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F11)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={31,rS,rA,rB,430}                           ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F12)
	S19= ICacheReg.In={31,rS,rA,rB,430}                         Path(S17,S18)
	S20= CtrlPC=0                                               Premise(F54)
	S21= CtrlPCInc=0                                            Premise(F55)
	S22= PC[Out]=addr                                           PC-Hold(S1,S20,S21)
	S23= CtrlIAddrReg=1                                         Premise(F56)
	S24= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S23)
	S25= CtrlICacheReg=1                                        Premise(F59)
	S26= [ICacheReg]={31,rS,rA,rB,430}                          ICacheReg-Write(S19,S25)
	S27= CtrlIMem=0                                             Premise(F61)
	S28= IMem[{pid,addr}]={31,rS,rA,rB,430}                     IMem-Hold(S2,S27)
	S29= CtrlGPRegs=0                                           Premise(F64)
	S30= GPRegs[rA]=a                                           GPRegs-Hold(S4,S29)
	S31= GPRegs[rB]=b                                           GPRegs-Hold(S5,S29)

IMMU	S32= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S24)
	S33= ICacheReg.Out={31,rS,rA,rB,430}                        ICacheReg-Out(S26)
	S34= IAddrReg.Out=>IMem.RAddr                               Premise(F85)
	S35= IMem.RAddr={pid,addr}                                  Path(S32,S34)
	S36= IMem.Out={31,rS,rA,rB,430}                             IMem-Read(S35,S28)
	S37= IMem.Out=>IRMux.MemData                                Premise(F86)
	S38= IRMux.MemData={31,rS,rA,rB,430}                        Path(S36,S37)
	S39= ICacheReg.Out=>IRMux.CacheData                         Premise(F87)
	S40= IRMux.CacheData={31,rS,rA,rB,430}                      Path(S33,S39)
	S41= IRMux.Out={31,rS,rA,rB,430}                            IRMux-Select(S38,S40)
	S42= IRMux.Out=>IR.In                                       Premise(F90)
	S43= IR.In={31,rS,rA,rB,430}                                Path(S41,S42)
	S44= CtrlPC=0                                               Premise(F123)
	S45= CtrlPCInc=1                                            Premise(F124)
	S46= PC[Out]=addr+4                                         PC-Inc(S22,S44,S45)
	S47= CtrlIR=1                                               Premise(F132)
	S48= [IR]={31,rS,rA,rB,430}                                 IR-Write(S43,S47)
	S49= CtrlGPRegs=0                                           Premise(F133)
	S50= GPRegs[rA]=a                                           GPRegs-Hold(S30,S49)
	S51= GPRegs[rB]=b                                           GPRegs-Hold(S31,S49)

ID	S52= IR.Out11_15=rA                                         IR-Out(S48)
	S53= IR.Out16_20=rB                                         IR-Out(S48)
	S54= IR.Out11_15=>GPRegs.RReg1                              Premise(F163)
	S55= GPRegs.RReg1=rA                                        Path(S52,S54)
	S56= GPRegs.Rdata1=a                                        GPRegs-Read(S55,S50)
	S57= IR.Out16_20=>GPRegs.RReg2                              Premise(F164)
	S58= GPRegs.RReg2=rB                                        Path(S53,S57)
	S59= GPRegs.Rdata2=b                                        GPRegs-Read(S58,S51)
	S60= GPRegs.Rdata2=>B.In                                    Premise(F166)
	S61= B.In=b                                                 Path(S59,S60)
	S62= IR.Out11_15=>AddrSelMux.Sel                            Premise(F167)
	S63= AddrSelMux.Sel=rA                                      Path(S52,S62)
	S64= GPRegs.Rdata1=>AddrSelMux.Data                         Premise(F168)
	S65= AddrSelMux.Data=a                                      Path(S56,S64)
	S66= AddrSelMux.Out=AddrSel(rA,a)                           AddrSelMux(S63,S65)
	S67= AddrSelMux.Out=>A.In                                   Premise(F169)
	S68= A.In=AddrSel(rA,a)                                     Path(S66,S67)
	S69= CtrlPC=0                                               Premise(F192)
	S70= CtrlPCInc=0                                            Premise(F193)
	S71= PC[Out]=addr+4                                         PC-Hold(S46,S69,S70)
	S72= CtrlB=1                                                Premise(F203)
	S73= [B]=b                                                  B-Write(S61,S72)
	S74= CtrlA=1                                                Premise(F204)
	S75= [A]=AddrSel(rA,a)                                      A-Write(S68,S74)

EX	S76= B.Out=b                                                B-Out(S73)
	S77= A.Out=AddrSel(rA,a)                                    A-Out(S75)
	S78= A.Out=>ALU.A                                           Premise(F239)
	S79= ALU.A=AddrSel(rA,a)                                    Path(S77,S78)
	S80= B.Out=>ALU.B                                           Premise(F240)
	S81= ALU.B=b                                                Path(S76,S80)
	S82= ALU.Out=AddrSel(rA,a)+b                                ALU(S79,S81)
	S83= ALU.Out=>ALUOut.In                                     Premise(F242)
	S84= ALUOut.In=AddrSel(rA,a)+b                              Path(S82,S83)
	S85= MemDataSel.Out={24'b0,B4}                              MemDataSel()
	S86= MemDataSel.Out=>DR.In                                  Premise(F246)
	S87= DR.In={24'b0,B4}                                       Path(S85,S86)
	S88= CtrlPC=0                                               Premise(F261)
	S89= CtrlPCInc=0                                            Premise(F262)
	S90= PC[Out]=addr+4                                         PC-Hold(S71,S88,S89)
	S91= CtrlALUOut=1                                           Premise(F274)
	S92= [ALUOut]=AddrSel(rA,a)+b                               ALUOut-Write(S84,S91)
	S93= CtrlDR=1                                               Premise(F275)
	S94= [DR]={24'b0,B4}                                        DR-Write(S87,S93)

MEM	S95= CtrlPC=0                                               Premise(F330)
	S96= CtrlPCInc=0                                            Premise(F331)
	S97= PC[Out]=addr+4                                         PC-Hold(S90,S95,S96)
	S98= CtrlALUOut=0                                           Premise(F343)
	S99= [ALUOut]=AddrSel(rA,a)+b                               ALUOut-Hold(S92,S98)
	S100= CtrlDR=0                                              Premise(F344)
	S101= [DR]={24'b0,B4}                                       DR-Hold(S94,S100)

DMMU1	S102= CtrlPC=0                                              Premise(F399)
	S103= CtrlPCInc=0                                           Premise(F400)
	S104= PC[Out]=addr+4                                        PC-Hold(S97,S102,S103)
	S105= CtrlALUOut=0                                          Premise(F412)
	S106= [ALUOut]=AddrSel(rA,a)+b                              ALUOut-Hold(S99,S105)
	S107= CtrlDR=0                                              Premise(F413)
	S108= [DR]={24'b0,B4}                                       DR-Hold(S101,S107)

DMMU2	S109= ALUOut.Out=AddrSel(rA,a)+b                            ALUOut-Out(S106)
	S110= DR.Out={24'b0,B4}                                     DR-Out(S108)
	S111= ALUOut.Out=>DCache.IEA                                Premise(F458)
	S112= DCache.IEA=AddrSel(rA,a)+b                            Path(S109,S111)
	S113= DR.Out=>DCache.In                                     Premise(F465)
	S114= DCache.In={24'b0,B4}                                  Path(S110,S113)
	S115= CtrlPC=0                                              Premise(F468)
	S116= CtrlPCInc=0                                           Premise(F469)
	S117= PC[Out]=addr+4                                        PC-Hold(S104,S115,S116)
	S118= CtrlDCache=1                                          Premise(F486)
	S119= DCache[AddrSel(rA,a)+b]={24'b0,B4}                    DCache-Write(S112,S114,S118)

WB	S120= CtrlPC=0                                              Premise(F537)
	S121= CtrlPCInc=0                                           Premise(F538)
	S122= PC[Out]=addr+4                                        PC-Hold(S117,S120,S121)
	S123= CtrlDCache=0                                          Premise(F555)
	S124= DCache[AddrSel(rA,a)+b]={24'b0,B4}                    DCache-Hold(S119,S123)

POST	S122= PC[Out]=addr+4                                        PC-Hold(S117,S120,S121)
	S124= DCache[AddrSel(rA,a)+b]={24'b0,B4}                    DCache-Hold(S119,S123)

