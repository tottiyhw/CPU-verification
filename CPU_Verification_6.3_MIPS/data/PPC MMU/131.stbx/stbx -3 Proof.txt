
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,rB,430}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F7)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPIDReg=0                                           Premise(F51)
	S15= [PIDReg]=pid                                           PIDReg-Hold(S0,S14)
	S16= CtrlPC=0                                               Premise(F53)
	S17= CtrlPCInc=0                                            Premise(F54)
	S18= PC[Out]=addr                                           PC-Hold(S1,S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F55)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S19)
	S21= CtrlIMem=0                                             Premise(F60)
	S22= IMem[{pid,addr}]={31,rS,rA,rB,430}                     IMem-Hold(S2,S21)
	S23= CtrlGPRegs=0                                           Premise(F63)
	S24= GPRegs[rA]=a                                           GPRegs-Hold(S3,S23)
	S25= GPRegs[rB]=b                                           GPRegs-Hold(S4,S23)

IMMU	S26= PC.Out=addr                                            PC-Out(S18)
	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S28= PC.Out=>ICache.IEA                                     Premise(F79)
	S29= ICache.IEA=addr                                        Path(S26,S28)
	S30= IAddrReg.Out=>IMem.RAddr                               Premise(F84)
	S31= IMem.RAddr={pid,addr}                                  Path(S27,S30)
	S32= IMem.Out={31,rS,rA,rB,430}                             IMem-Read(S31,S22)
	S33= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S31,S22)
	S34= IMem.Out=>IRMux.MemData                                Premise(F85)
	S35= IRMux.MemData={31,rS,rA,rB,430}                        Path(S32,S34)
	S36= IRMux.Out={31,rS,rA,rB,430}                            IRMux-Select(S35)
	S37= IRMux.Out=>IR.In                                       Premise(F89)
	S38= IR.In={31,rS,rA,rB,430}                                Path(S36,S37)
	S39= IMem.MEM8WordOut=>ICache.WData                         Premise(F90)
	S40= ICache.WData=IMemGet8Word({pid,addr})                  Path(S33,S39)
	S41= CtrlPIDReg=0                                           Premise(F120)
	S42= [PIDReg]=pid                                           PIDReg-Hold(S15,S41)
	S43= CtrlPC=0                                               Premise(F122)
	S44= CtrlPCInc=1                                            Premise(F123)
	S45= PC[Out]=addr+4                                         PC-Inc(S18,S43,S44)
	S46= CtrlICache=1                                           Premise(F126)
	S47= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S29,S40,S46)
	S48= CtrlIR=1                                               Premise(F131)
	S49= [IR]={31,rS,rA,rB,430}                                 IR-Write(S38,S48)
	S50= CtrlGPRegs=0                                           Premise(F132)
	S51= GPRegs[rA]=a                                           GPRegs-Hold(S24,S50)
	S52= GPRegs[rB]=b                                           GPRegs-Hold(S25,S50)

ID	S53= IR.Out11_15=rA                                         IR-Out(S49)
	S54= IR.Out16_20=rB                                         IR-Out(S49)
	S55= IR.Out11_15=>GPRegs.RReg1                              Premise(F162)
	S56= GPRegs.RReg1=rA                                        Path(S53,S55)
	S57= GPRegs.Rdata1=a                                        GPRegs-Read(S56,S51)
	S58= IR.Out16_20=>GPRegs.RReg2                              Premise(F163)
	S59= GPRegs.RReg2=rB                                        Path(S54,S58)
	S60= GPRegs.Rdata2=b                                        GPRegs-Read(S59,S52)
	S61= GPRegs.Rdata2=>B.In                                    Premise(F165)
	S62= B.In=b                                                 Path(S60,S61)
	S63= IR.Out11_15=>AddrSelMux.Sel                            Premise(F166)
	S64= AddrSelMux.Sel=rA                                      Path(S53,S63)
	S65= GPRegs.Rdata1=>AddrSelMux.Data                         Premise(F167)
	S66= AddrSelMux.Data=a                                      Path(S57,S65)
	S67= AddrSelMux.Out=AddrSel(rA,a)                           AddrSelMux(S64,S66)
	S68= AddrSelMux.Out=>A.In                                   Premise(F168)
	S69= A.In=AddrSel(rA,a)                                     Path(S67,S68)
	S70= CtrlPIDReg=0                                           Premise(F189)
	S71= [PIDReg]=pid                                           PIDReg-Hold(S42,S70)
	S72= CtrlPC=0                                               Premise(F191)
	S73= CtrlPCInc=0                                            Premise(F192)
	S74= PC[Out]=addr+4                                         PC-Hold(S45,S72,S73)
	S75= CtrlICache=0                                           Premise(F195)
	S76= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S47,S75)
	S77= CtrlB=1                                                Premise(F202)
	S78= [B]=b                                                  B-Write(S62,S77)
	S79= CtrlA=1                                                Premise(F203)
	S80= [A]=AddrSel(rA,a)                                      A-Write(S69,S79)

EX	S81= B.Out=b                                                B-Out(S78)
	S82= A.Out=AddrSel(rA,a)                                    A-Out(S80)
	S83= A.Out=>ALU.A                                           Premise(F238)
	S84= ALU.A=AddrSel(rA,a)                                    Path(S82,S83)
	S85= B.Out=>ALU.B                                           Premise(F239)
	S86= ALU.B=b                                                Path(S81,S85)
	S87= ALU.Out=AddrSel(rA,a)+b                                ALU(S84,S86)
	S88= ALU.Out=>ALUOut.In                                     Premise(F241)
	S89= ALUOut.In=AddrSel(rA,a)+b                              Path(S87,S88)
	S90= MemDataSel.Out={24'b0,B4}                              MemDataSel()
	S91= MemDataSel.Out=>DR.In                                  Premise(F245)
	S92= DR.In={24'b0,B4}                                       Path(S90,S91)
	S93= CtrlPIDReg=0                                           Premise(F258)
	S94= [PIDReg]=pid                                           PIDReg-Hold(S71,S93)
	S95= CtrlPC=0                                               Premise(F260)
	S96= CtrlPCInc=0                                            Premise(F261)
	S97= PC[Out]=addr+4                                         PC-Hold(S74,S95,S96)
	S98= CtrlICache=0                                           Premise(F264)
	S99= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S76,S98)
	S100= CtrlALUOut=1                                          Premise(F273)
	S101= [ALUOut]=AddrSel(rA,a)+b                              ALUOut-Write(S89,S100)
	S102= CtrlDR=1                                              Premise(F274)
	S103= [DR]={24'b0,B4}                                       DR-Write(S92,S102)

MEM	S104= PIDReg.Out=pid                                        PIDReg-Out(S94)
	S105= ALUOut.Out=AddrSel(rA,a)+b                            ALUOut-Out(S101)
	S106= PIDReg.Out=>DMMU.PID                                  Premise(F315)
	S107= DMMU.PID=pid                                          Path(S104,S106)
	S108= ALUOut.Out=>DMMU.IEA                                  Premise(F316)
	S109= DMMU.IEA=AddrSel(rA,a)+b                              Path(S105,S108)
	S110= DMMU.Addr={pid,AddrSel(rA,a)+b}                       DMMU-Search(S107,S109)
	S111= DMMU.Addr=>DAddrReg.In                                Premise(F317)
	S112= DAddrReg.In={pid,AddrSel(rA,a)+b}                     Path(S110,S111)
	S113= CtrlPC=0                                              Premise(F329)
	S114= CtrlPCInc=0                                           Premise(F330)
	S115= PC[Out]=addr+4                                        PC-Hold(S97,S113,S114)
	S116= CtrlICache=0                                          Premise(F333)
	S117= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S99,S116)
	S118= CtrlDR=0                                              Premise(F343)
	S119= [DR]={24'b0,B4}                                       DR-Hold(S103,S118)
	S120= CtrlDAddrReg=1                                        Premise(F345)
	S121= [DAddrReg]={pid,AddrSel(rA,a)+b}                      DAddrReg-Write(S112,S120)

DMMU1	S122= CtrlPC=0                                              Premise(F398)
	S123= CtrlPCInc=0                                           Premise(F399)
	S124= PC[Out]=addr+4                                        PC-Hold(S115,S122,S123)
	S125= CtrlICache=0                                          Premise(F402)
	S126= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S117,S125)
	S127= CtrlDR=0                                              Premise(F412)
	S128= [DR]={24'b0,B4}                                       DR-Hold(S119,S127)
	S129= CtrlDAddrReg=0                                        Premise(F414)
	S130= [DAddrReg]={pid,AddrSel(rA,a)+b}                      DAddrReg-Hold(S121,S129)

DMMU2	S131= DR.Out={24'b0,B4}                                     DR-Out(S128)
	S132= DAddrReg.Out={pid,AddrSel(rA,a)+b}                    DAddrReg-Out(S130)
	S133= DAddrReg.Out=>DMem.WAddr                              Premise(F461)
	S134= DMem.WAddr={pid,AddrSel(rA,a)+b}                      Path(S132,S133)
	S135= DR.Out=>DMem.WData                                    Premise(F462)
	S136= DMem.WData={24'b0,B4}                                 Path(S131,S135)
	S137= CtrlPC=0                                              Premise(F467)
	S138= CtrlPCInc=0                                           Premise(F468)
	S139= PC[Out]=addr+4                                        PC-Hold(S124,S137,S138)
	S140= CtrlICache=0                                          Premise(F471)
	S141= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S126,S140)
	S142= CtrlDMem=1                                            Premise(F487)
	S143= DMem[{pid,AddrSel(rA,a)+b}]={24'b0,B4}                DMem-Write(S134,S136,S142)

WB	S144= CtrlPC=0                                              Premise(F536)
	S145= CtrlPCInc=0                                           Premise(F537)
	S146= PC[Out]=addr+4                                        PC-Hold(S139,S144,S145)
	S147= CtrlICache=0                                          Premise(F540)
	S148= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S141,S147)
	S149= CtrlDMem=0                                            Premise(F556)
	S150= DMem[{pid,AddrSel(rA,a)+b}]={24'b0,B4}                DMem-Hold(S143,S149)

POST	S146= PC[Out]=addr+4                                        PC-Hold(S139,S144,S145)
	S148= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S141,S147)
	S150= DMem[{pid,AddrSel(rA,a)+b}]={24'b0,B4}                DMem-Hold(S143,S149)

