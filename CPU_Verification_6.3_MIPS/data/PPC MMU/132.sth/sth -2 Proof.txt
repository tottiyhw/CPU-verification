
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={44,rS,rA,d}                           Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F6)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F51)
	S14= CtrlPCInc=0                                            Premise(F52)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F53)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F58)
	S19= IMem[{pid,addr}]={44,rS,rA,d}                          IMem-Hold(S2,S18)
	S20= CtrlGPRegs=0                                           Premise(F61)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)

IMMU	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= PC.Out=>ICache.IEA                                     Premise(F77)
	S25= ICache.IEA=addr                                        Path(S22,S24)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F82)
	S27= IMem.RAddr={pid,addr}                                  Path(S23,S26)
	S28= IMem.Out={44,rS,rA,d}                                  IMem-Read(S27,S19)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S19)
	S30= IMem.Out=>IRMux.MemData                                Premise(F83)
	S31= IRMux.MemData={44,rS,rA,d}                             Path(S28,S30)
	S32= IRMux.Out={44,rS,rA,d}                                 IRMux-Select(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F87)
	S34= IR.In={44,rS,rA,d}                                     Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F88)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= CtrlPC=0                                               Premise(F119)
	S38= CtrlPCInc=1                                            Premise(F120)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F123)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S36,S40)
	S42= CtrlIR=1                                               Premise(F128)
	S43= [IR]={44,rS,rA,d}                                      IR-Write(S34,S42)
	S44= CtrlGPRegs=0                                           Premise(F129)
	S45= GPRegs[rA]=a                                           GPRegs-Hold(S21,S44)

ID	S46= IR.Out11_15=rA                                         IR-Out(S43)
	S47= IR.Out16_31=d                                          IR-Out(S43)
	S48= IR.Out11_15=>GPRegs.RReg2                              Premise(F159)
	S49= GPRegs.RReg2=rA                                        Path(S46,S48)
	S50= GPRegs.Rdata2=a                                        GPRegs-Read(S49,S45)
	S51= IR.Out11_15=>AddrSelMux.Sel                            Premise(F160)
	S52= AddrSelMux.Sel=rA                                      Path(S46,S51)
	S53= GPRegs.Rdata2=>AddrSelMux.Data                         Premise(F161)
	S54= AddrSelMux.Data=a                                      Path(S50,S53)
	S55= AddrSelMux.Out=AddrSel(rA,a)                           AddrSelMux(S52,S54)
	S56= AddrSelMux.Out=>A.In                                   Premise(F162)
	S57= A.In=AddrSel(rA,a)                                     Path(S55,S56)
	S58= IR.Out16_31=>IMMEXT.In                                 Premise(F163)
	S59= IMMEXT.In=d                                            Path(S47,S58)
	S60= IMMEXT.Out={16{d[0]},d}                                IMMEXT(S59)
	S61= IMMEXT.Out=>B.In                                       Premise(F164)
	S62= B.In={16{d[0]},d}                                      Path(S60,S61)
	S63= MemDataSel.Out={16'b0,B3,B4}                           MemDataSel()
	S64= MemDataSel.Out=>DR.In                                  Premise(F168)
	S65= DR.In={16'b0,B3,B4}                                    Path(S63,S64)
	S66= CtrlPC=0                                               Premise(F187)
	S67= CtrlPCInc=0                                            Premise(F188)
	S68= PC[Out]=addr+4                                         PC-Hold(S39,S66,S67)
	S69= CtrlICache=0                                           Premise(F191)
	S70= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S69)
	S71= CtrlA=1                                                Premise(F198)
	S72= [A]=AddrSel(rA,a)                                      A-Write(S57,S71)
	S73= CtrlB=1                                                Premise(F199)
	S74= [B]={16{d[0]},d}                                       B-Write(S62,S73)
	S75= CtrlDR=1                                               Premise(F200)
	S76= [DR]={16'b0,B3,B4}                                     DR-Write(S65,S75)

EX	S77= A.Out=AddrSel(rA,a)                                    A-Out(S72)
	S78= B.Out={16{d[0]},d}                                     B-Out(S74)
	S79= A.Out=>ALU.A                                           Premise(F237)
	S80= ALU.A=AddrSel(rA,a)                                    Path(S77,S79)
	S81= B.Out=>ALU.B                                           Premise(F238)
	S82= ALU.B={16{d[0]},d}                                     Path(S78,S81)
	S83= ALU.Out=AddrSel(rA,a)+{16{d[0]},d}                     ALU(S80,S82)
	S84= ALU.Out=>ALUOut.In                                     Premise(F240)
	S85= ALUOut.In=AddrSel(rA,a)+{16{d[0]},d}                   Path(S83,S84)
	S86= CtrlPC=0                                               Premise(F255)
	S87= CtrlPCInc=0                                            Premise(F256)
	S88= PC[Out]=addr+4                                         PC-Hold(S68,S86,S87)
	S89= CtrlICache=0                                           Premise(F259)
	S90= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S70,S89)
	S91= CtrlDR=0                                               Premise(F268)
	S92= [DR]={16'b0,B3,B4}                                     DR-Hold(S76,S91)
	S93= CtrlALUOut=1                                           Premise(F269)
	S94= [ALUOut]=AddrSel(rA,a)+{16{d[0]},d}                    ALUOut-Write(S85,S93)

MEM	S95= CtrlPC=0                                               Premise(F323)
	S96= CtrlPCInc=0                                            Premise(F324)
	S97= PC[Out]=addr+4                                         PC-Hold(S88,S95,S96)
	S98= CtrlICache=0                                           Premise(F327)
	S99= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S90,S98)
	S100= CtrlDR=0                                              Premise(F336)
	S101= [DR]={16'b0,B3,B4}                                    DR-Hold(S92,S100)
	S102= CtrlALUOut=0                                          Premise(F337)
	S103= [ALUOut]=AddrSel(rA,a)+{16{d[0]},d}                   ALUOut-Hold(S94,S102)

DMMU1	S104= CtrlPC=0                                              Premise(F391)
	S105= CtrlPCInc=0                                           Premise(F392)
	S106= PC[Out]=addr+4                                        PC-Hold(S97,S104,S105)
	S107= CtrlICache=0                                          Premise(F395)
	S108= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S99,S107)
	S109= CtrlDR=0                                              Premise(F404)
	S110= [DR]={16'b0,B3,B4}                                    DR-Hold(S101,S109)
	S111= CtrlALUOut=0                                          Premise(F405)
	S112= [ALUOut]=AddrSel(rA,a)+{16{d[0]},d}                   ALUOut-Hold(S103,S111)

DMMU2	S113= DR.Out={16'b0,B3,B4}                                  DR-Out(S110)
	S114= ALUOut.Out=AddrSel(rA,a)+{16{d[0]},d}                 ALUOut-Out(S112)
	S115= ALUOut.Out=>DCache.IEA                                Premise(F449)
	S116= DCache.IEA=AddrSel(rA,a)+{16{d[0]},d}                 Path(S114,S115)
	S117= DR.Out=>DCache.In                                     Premise(F456)
	S118= DCache.In={16'b0,B3,B4}                               Path(S113,S117)
	S119= CtrlPC=0                                              Premise(F459)
	S120= CtrlPCInc=0                                           Premise(F460)
	S121= PC[Out]=addr+4                                        PC-Hold(S106,S119,S120)
	S122= CtrlICache=0                                          Premise(F463)
	S123= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S108,S122)
	S124= CtrlDCache=1                                          Premise(F477)
	S125= DCache[AddrSel(rA,a)+{16{d[0]},d}]={16'b0,B3,B4}      DCache-Write(S116,S118,S124)

WB	S126= CtrlPC=0                                              Premise(F527)
	S127= CtrlPCInc=0                                           Premise(F528)
	S128= PC[Out]=addr+4                                        PC-Hold(S121,S126,S127)
	S129= CtrlICache=0                                          Premise(F531)
	S130= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S123,S129)
	S131= CtrlDCache=0                                          Premise(F545)
	S132= DCache[AddrSel(rA,a)+{16{d[0]},d}]={16'b0,B3,B4}      DCache-Hold(S125,S131)

POST	S128= PC[Out]=addr+4                                        PC-Hold(S121,S126,S127)
	S130= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S123,S129)
	S132= DCache[AddrSel(rA,a)+{16{d[0]},d}]={16'b0,B3,B4}      DCache-Hold(S125,S131)

