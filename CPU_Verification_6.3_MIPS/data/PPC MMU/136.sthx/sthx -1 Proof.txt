
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,rB,814}                      Premise(F2)
	S3= ICache[addr]={31,rS,rA,rB,814}                          Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F8)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F11)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={31,rS,rA,rB,814}                           ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F12)
	S19= ICacheReg.In={31,rS,rA,rB,814}                         Path(S17,S18)
	S20= CtrlPIDReg=0                                           Premise(F52)
	S21= [PIDReg]=pid                                           PIDReg-Hold(S0,S20)
	S22= CtrlPC=0                                               Premise(F54)
	S23= CtrlPCInc=0                                            Premise(F55)
	S24= PC[Out]=addr                                           PC-Hold(S1,S22,S23)
	S25= CtrlIAddrReg=1                                         Premise(F56)
	S26= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S25)
	S27= CtrlICacheReg=1                                        Premise(F59)
	S28= [ICacheReg]={31,rS,rA,rB,814}                          ICacheReg-Write(S19,S27)
	S29= CtrlIMem=0                                             Premise(F61)
	S30= IMem[{pid,addr}]={31,rS,rA,rB,814}                     IMem-Hold(S2,S29)
	S31= CtrlGPRegs=0                                           Premise(F64)
	S32= GPRegs[rA]=a                                           GPRegs-Hold(S4,S31)
	S33= GPRegs[rB]=b                                           GPRegs-Hold(S5,S31)

IMMU	S34= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S26)
	S35= ICacheReg.Out={31,rS,rA,rB,814}                        ICacheReg-Out(S28)
	S36= IAddrReg.Out=>IMem.RAddr                               Premise(F85)
	S37= IMem.RAddr={pid,addr}                                  Path(S34,S36)
	S38= IMem.Out={31,rS,rA,rB,814}                             IMem-Read(S37,S30)
	S39= IMem.Out=>IRMux.MemData                                Premise(F86)
	S40= IRMux.MemData={31,rS,rA,rB,814}                        Path(S38,S39)
	S41= ICacheReg.Out=>IRMux.CacheData                         Premise(F87)
	S42= IRMux.CacheData={31,rS,rA,rB,814}                      Path(S35,S41)
	S43= IRMux.Out={31,rS,rA,rB,814}                            IRMux-Select(S40,S42)
	S44= IRMux.Out=>IR.In                                       Premise(F90)
	S45= IR.In={31,rS,rA,rB,814}                                Path(S43,S44)
	S46= CtrlPIDReg=0                                           Premise(F121)
	S47= [PIDReg]=pid                                           PIDReg-Hold(S21,S46)
	S48= CtrlPC=0                                               Premise(F123)
	S49= CtrlPCInc=1                                            Premise(F124)
	S50= PC[Out]=addr+4                                         PC-Inc(S24,S48,S49)
	S51= CtrlIR=1                                               Premise(F132)
	S52= [IR]={31,rS,rA,rB,814}                                 IR-Write(S45,S51)
	S53= CtrlGPRegs=0                                           Premise(F133)
	S54= GPRegs[rA]=a                                           GPRegs-Hold(S32,S53)
	S55= GPRegs[rB]=b                                           GPRegs-Hold(S33,S53)

ID	S56= IR.Out11_15=rA                                         IR-Out(S52)
	S57= IR.Out16_20=rB                                         IR-Out(S52)
	S58= IR.Out11_15=>GPRegs.RReg1                              Premise(F163)
	S59= GPRegs.RReg1=rA                                        Path(S56,S58)
	S60= GPRegs.Rdata1=a                                        GPRegs-Read(S59,S54)
	S61= IR.Out16_20=>GPRegs.RReg2                              Premise(F164)
	S62= GPRegs.RReg2=rB                                        Path(S57,S61)
	S63= GPRegs.Rdata2=b                                        GPRegs-Read(S62,S55)
	S64= GPRegs.Rdata2=>B.In                                    Premise(F166)
	S65= B.In=b                                                 Path(S63,S64)
	S66= IR.Out11_15=>AddrSelMux.Sel                            Premise(F167)
	S67= AddrSelMux.Sel=rA                                      Path(S56,S66)
	S68= GPRegs.Rdata1=>AddrSelMux.Data                         Premise(F168)
	S69= AddrSelMux.Data=a                                      Path(S60,S68)
	S70= AddrSelMux.Out=AddrSel(rA,a)                           AddrSelMux(S67,S69)
	S71= AddrSelMux.Out=>A.In                                   Premise(F169)
	S72= A.In=AddrSel(rA,a)                                     Path(S70,S71)
	S73= CtrlPIDReg=0                                           Premise(F190)
	S74= [PIDReg]=pid                                           PIDReg-Hold(S47,S73)
	S75= CtrlPC=0                                               Premise(F192)
	S76= CtrlPCInc=0                                            Premise(F193)
	S77= PC[Out]=addr+4                                         PC-Hold(S50,S75,S76)
	S78= CtrlB=1                                                Premise(F203)
	S79= [B]=b                                                  B-Write(S65,S78)
	S80= CtrlA=1                                                Premise(F204)
	S81= [A]=AddrSel(rA,a)                                      A-Write(S72,S80)

EX	S82= B.Out=b                                                B-Out(S79)
	S83= A.Out=AddrSel(rA,a)                                    A-Out(S81)
	S84= A.Out=>ALU.A                                           Premise(F239)
	S85= ALU.A=AddrSel(rA,a)                                    Path(S83,S84)
	S86= B.Out=>ALU.B                                           Premise(F240)
	S87= ALU.B=b                                                Path(S82,S86)
	S88= ALU.Out=AddrSel(rA,a)+b                                ALU(S85,S87)
	S89= ALU.Out=>ALUOut.In                                     Premise(F242)
	S90= ALUOut.In=AddrSel(rA,a)+b                              Path(S88,S89)
	S91= MemDataSel.Out={16'b0,B3,B4}                           MemDataSel()
	S92= MemDataSel.Out=>DR.In                                  Premise(F246)
	S93= DR.In={16'b0,B3,B4}                                    Path(S91,S92)
	S94= CtrlPIDReg=0                                           Premise(F259)
	S95= [PIDReg]=pid                                           PIDReg-Hold(S74,S94)
	S96= CtrlPC=0                                               Premise(F261)
	S97= CtrlPCInc=0                                            Premise(F262)
	S98= PC[Out]=addr+4                                         PC-Hold(S77,S96,S97)
	S99= CtrlALUOut=1                                           Premise(F274)
	S100= [ALUOut]=AddrSel(rA,a)+b                              ALUOut-Write(S90,S99)
	S101= CtrlDR=1                                              Premise(F275)
	S102= [DR]={16'b0,B3,B4}                                    DR-Write(S93,S101)

MEM	S103= PIDReg.Out=pid                                        PIDReg-Out(S95)
	S104= ALUOut.Out=AddrSel(rA,a)+b                            ALUOut-Out(S100)
	S105= PIDReg.Out=>DMMU.PID                                  Premise(F316)
	S106= DMMU.PID=pid                                          Path(S103,S105)
	S107= ALUOut.Out=>DMMU.IEA                                  Premise(F317)
	S108= DMMU.IEA=AddrSel(rA,a)+b                              Path(S104,S107)
	S109= DMMU.Addr={pid,AddrSel(rA,a)+b}                       DMMU-Search(S106,S108)
	S110= DMMU.Addr=>DAddrReg.In                                Premise(F318)
	S111= DAddrReg.In={pid,AddrSel(rA,a)+b}                     Path(S109,S110)
	S112= CtrlPC=0                                              Premise(F330)
	S113= CtrlPCInc=0                                           Premise(F331)
	S114= PC[Out]=addr+4                                        PC-Hold(S98,S112,S113)
	S115= CtrlDR=0                                              Premise(F344)
	S116= [DR]={16'b0,B3,B4}                                    DR-Hold(S102,S115)
	S117= CtrlDAddrReg=1                                        Premise(F346)
	S118= [DAddrReg]={pid,AddrSel(rA,a)+b}                      DAddrReg-Write(S111,S117)

DMMU1	S119= CtrlPC=0                                              Premise(F399)
	S120= CtrlPCInc=0                                           Premise(F400)
	S121= PC[Out]=addr+4                                        PC-Hold(S114,S119,S120)
	S122= CtrlDR=0                                              Premise(F413)
	S123= [DR]={16'b0,B3,B4}                                    DR-Hold(S116,S122)
	S124= CtrlDAddrReg=0                                        Premise(F415)
	S125= [DAddrReg]={pid,AddrSel(rA,a)+b}                      DAddrReg-Hold(S118,S124)

DMMU2	S126= DR.Out={16'b0,B3,B4}                                  DR-Out(S123)
	S127= DAddrReg.Out={pid,AddrSel(rA,a)+b}                    DAddrReg-Out(S125)
	S128= DAddrReg.Out=>DMem.WAddr                              Premise(F462)
	S129= DMem.WAddr={pid,AddrSel(rA,a)+b}                      Path(S127,S128)
	S130= DR.Out=>DMem.WData                                    Premise(F463)
	S131= DMem.WData={16'b0,B3,B4}                              Path(S126,S130)
	S132= CtrlPC=0                                              Premise(F468)
	S133= CtrlPCInc=0                                           Premise(F469)
	S134= PC[Out]=addr+4                                        PC-Hold(S121,S132,S133)
	S135= CtrlDMem=1                                            Premise(F488)
	S136= DMem[{pid,AddrSel(rA,a)+b}]={16'b0,B3,B4}             DMem-Write(S129,S131,S135)

WB	S137= CtrlPC=0                                              Premise(F537)
	S138= CtrlPCInc=0                                           Premise(F538)
	S139= PC[Out]=addr+4                                        PC-Hold(S134,S137,S138)
	S140= CtrlDMem=0                                            Premise(F557)
	S141= DMem[{pid,AddrSel(rA,a)+b}]={16'b0,B3,B4}             DMem-Hold(S136,S140)

POST	S139= PC[Out]=addr+4                                        PC-Hold(S134,S137,S138)
	S141= DMem[{pid,AddrSel(rA,a)+b}]={16'b0,B3,B4}             DMem-Hold(S136,S140)

