
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={36,rS,rA,d}                           Premise(F2)
	S3= ICache[addr]={36,rS,rA,d}                               Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F7)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F10)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={36,rS,rA,d}                                ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F11)
	S18= ICacheReg.In={36,rS,rA,d}                              Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F52)
	S20= CtrlPCInc=0                                            Premise(F53)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F54)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F57)
	S25= [ICacheReg]={36,rS,rA,d}                               ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F59)
	S27= IMem[{pid,addr}]={36,rS,rA,d}                          IMem-Hold(S2,S26)
	S28= CtrlGPRegs=0                                           Premise(F62)
	S29= GPRegs[rA]=a                                           GPRegs-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={36,rS,rA,d}                             ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F83)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={36,rS,rA,d}                                  IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F84)
	S36= IRMux.MemData={36,rS,rA,d}                             Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F85)
	S38= IRMux.CacheData={36,rS,rA,d}                           Path(S31,S37)
	S39= IRMux.Out={36,rS,rA,d}                                 IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F88)
	S41= IR.In={36,rS,rA,d}                                     Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F120)
	S43= CtrlPCInc=1                                            Premise(F121)
	S44= PC[Out]=addr+4                                         PC-Inc(S21,S42,S43)
	S45= CtrlIR=1                                               Premise(F129)
	S46= [IR]={36,rS,rA,d}                                      IR-Write(S41,S45)
	S47= CtrlGPRegs=0                                           Premise(F130)
	S48= GPRegs[rA]=a                                           GPRegs-Hold(S29,S47)

ID	S49= IR.Out11_15=rA                                         IR-Out(S46)
	S50= IR.Out16_31=d                                          IR-Out(S46)
	S51= IR.Out11_15=>GPRegs.RReg2                              Premise(F160)
	S52= GPRegs.RReg2=rA                                        Path(S49,S51)
	S53= GPRegs.Rdata2=a                                        GPRegs-Read(S52,S48)
	S54= IR.Out11_15=>AddrSelMux.Sel                            Premise(F161)
	S55= AddrSelMux.Sel=rA                                      Path(S49,S54)
	S56= GPRegs.Rdata2=>AddrSelMux.Data                         Premise(F162)
	S57= AddrSelMux.Data=a                                      Path(S53,S56)
	S58= AddrSelMux.Out=AddrSel(rA,a)                           AddrSelMux(S55,S57)
	S59= AddrSelMux.Out=>A.In                                   Premise(F163)
	S60= A.In=AddrSel(rA,a)                                     Path(S58,S59)
	S61= IR.Out16_31=>IMMEXT.In                                 Premise(F164)
	S62= IMMEXT.In=d                                            Path(S50,S61)
	S63= IMMEXT.Out={16{d[0]},d}                                IMMEXT(S62)
	S64= IMMEXT.Out=>B.In                                       Premise(F165)
	S65= B.In={16{d[0]},d}                                      Path(S63,S64)
	S66= MemDataSel.Out={B1,B2,B3,B4}                           MemDataSel()
	S67= MemDataSel.Out=>DR.In                                  Premise(F169)
	S68= DR.In={B1,B2,B3,B4}                                    Path(S66,S67)
	S69= CtrlPC=0                                               Premise(F188)
	S70= CtrlPCInc=0                                            Premise(F189)
	S71= PC[Out]=addr+4                                         PC-Hold(S44,S69,S70)
	S72= CtrlA=1                                                Premise(F199)
	S73= [A]=AddrSel(rA,a)                                      A-Write(S60,S72)
	S74= CtrlB=1                                                Premise(F200)
	S75= [B]={16{d[0]},d}                                       B-Write(S65,S74)
	S76= CtrlDR=1                                               Premise(F201)
	S77= [DR]={B1,B2,B3,B4}                                     DR-Write(S68,S76)

EX	S78= A.Out=AddrSel(rA,a)                                    A-Out(S73)
	S79= B.Out={16{d[0]},d}                                     B-Out(S75)
	S80= A.Out=>ALU.A                                           Premise(F238)
	S81= ALU.A=AddrSel(rA,a)                                    Path(S78,S80)
	S82= B.Out=>ALU.B                                           Premise(F239)
	S83= ALU.B={16{d[0]},d}                                     Path(S79,S82)
	S84= ALU.Out=AddrSel(rA,a)+{16{d[0]},d}                     ALU(S81,S83)
	S85= ALU.Out=>ALUOut.In                                     Premise(F241)
	S86= ALUOut.In=AddrSel(rA,a)+{16{d[0]},d}                   Path(S84,S85)
	S87= CtrlPC=0                                               Premise(F256)
	S88= CtrlPCInc=0                                            Premise(F257)
	S89= PC[Out]=addr+4                                         PC-Hold(S71,S87,S88)
	S90= CtrlDR=0                                               Premise(F269)
	S91= [DR]={B1,B2,B3,B4}                                     DR-Hold(S77,S90)
	S92= CtrlALUOut=1                                           Premise(F270)
	S93= [ALUOut]=AddrSel(rA,a)+{16{d[0]},d}                    ALUOut-Write(S86,S92)

MEM	S94= CtrlPC=0                                               Premise(F324)
	S95= CtrlPCInc=0                                            Premise(F325)
	S96= PC[Out]=addr+4                                         PC-Hold(S89,S94,S95)
	S97= CtrlDR=0                                               Premise(F337)
	S98= [DR]={B1,B2,B3,B4}                                     DR-Hold(S91,S97)
	S99= CtrlALUOut=0                                           Premise(F338)
	S100= [ALUOut]=AddrSel(rA,a)+{16{d[0]},d}                   ALUOut-Hold(S93,S99)

DMMU1	S101= CtrlPC=0                                              Premise(F392)
	S102= CtrlPCInc=0                                           Premise(F393)
	S103= PC[Out]=addr+4                                        PC-Hold(S96,S101,S102)
	S104= CtrlDR=0                                              Premise(F405)
	S105= [DR]={B1,B2,B3,B4}                                    DR-Hold(S98,S104)
	S106= CtrlALUOut=0                                          Premise(F406)
	S107= [ALUOut]=AddrSel(rA,a)+{16{d[0]},d}                   ALUOut-Hold(S100,S106)

DMMU2	S108= DR.Out={B1,B2,B3,B4}                                  DR-Out(S105)
	S109= ALUOut.Out=AddrSel(rA,a)+{16{d[0]},d}                 ALUOut-Out(S107)
	S110= ALUOut.Out=>DCache.IEA                                Premise(F450)
	S111= DCache.IEA=AddrSel(rA,a)+{16{d[0]},d}                 Path(S109,S110)
	S112= DR.Out=>DCache.In                                     Premise(F457)
	S113= DCache.In={B1,B2,B3,B4}                               Path(S108,S112)
	S114= CtrlPC=0                                              Premise(F460)
	S115= CtrlPCInc=0                                           Premise(F461)
	S116= PC[Out]=addr+4                                        PC-Hold(S103,S114,S115)
	S117= CtrlDCache=1                                          Premise(F478)
	S118= DCache[AddrSel(rA,a)+{16{d[0]},d}]={B1,B2,B3,B4}      DCache-Write(S111,S113,S117)

WB	S119= CtrlPC=0                                              Premise(F528)
	S120= CtrlPCInc=0                                           Premise(F529)
	S121= PC[Out]=addr+4                                        PC-Hold(S116,S119,S120)
	S122= CtrlDCache=0                                          Premise(F546)
	S123= DCache[AddrSel(rA,a)+{16{d[0]},d}]={B1,B2,B3,B4}      DCache-Hold(S118,S122)

POST	S121= PC[Out]=addr+4                                        PC-Hold(S116,S119,S120)
	S123= DCache[AddrSel(rA,a)+{16{d[0]},d}]={B1,B2,B3,B4}      DCache-Hold(S118,S122)

