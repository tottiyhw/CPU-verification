
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={36,rS,rA,d}                           Premise(F2)
	S3= ICache[addr]={36,rS,rA,d}                               Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F7)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F10)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={36,rS,rA,d}                                ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F11)
	S18= ICacheReg.In={36,rS,rA,d}                              Path(S16,S17)
	S19= CtrlPIDReg=0                                           Premise(F50)
	S20= [PIDReg]=pid                                           PIDReg-Hold(S0,S19)
	S21= CtrlPC=0                                               Premise(F52)
	S22= CtrlPCInc=0                                            Premise(F53)
	S23= PC[Out]=addr                                           PC-Hold(S1,S21,S22)
	S24= CtrlIAddrReg=1                                         Premise(F54)
	S25= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S24)
	S26= CtrlICacheReg=1                                        Premise(F57)
	S27= [ICacheReg]={36,rS,rA,d}                               ICacheReg-Write(S18,S26)
	S28= CtrlIMem=0                                             Premise(F59)
	S29= IMem[{pid,addr}]={36,rS,rA,d}                          IMem-Hold(S2,S28)
	S30= CtrlGPRegs=0                                           Premise(F62)
	S31= GPRegs[rA]=a                                           GPRegs-Hold(S4,S30)

IMMU	S32= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S25)
	S33= ICacheReg.Out={36,rS,rA,d}                             ICacheReg-Out(S27)
	S34= IAddrReg.Out=>IMem.RAddr                               Premise(F83)
	S35= IMem.RAddr={pid,addr}                                  Path(S32,S34)
	S36= IMem.Out={36,rS,rA,d}                                  IMem-Read(S35,S29)
	S37= IMem.Out=>IRMux.MemData                                Premise(F84)
	S38= IRMux.MemData={36,rS,rA,d}                             Path(S36,S37)
	S39= ICacheReg.Out=>IRMux.CacheData                         Premise(F85)
	S40= IRMux.CacheData={36,rS,rA,d}                           Path(S33,S39)
	S41= IRMux.Out={36,rS,rA,d}                                 IRMux-Select(S38,S40)
	S42= IRMux.Out=>IR.In                                       Premise(F88)
	S43= IR.In={36,rS,rA,d}                                     Path(S41,S42)
	S44= CtrlPIDReg=0                                           Premise(F118)
	S45= [PIDReg]=pid                                           PIDReg-Hold(S20,S44)
	S46= CtrlPC=0                                               Premise(F120)
	S47= CtrlPCInc=1                                            Premise(F121)
	S48= PC[Out]=addr+4                                         PC-Inc(S23,S46,S47)
	S49= CtrlIR=1                                               Premise(F129)
	S50= [IR]={36,rS,rA,d}                                      IR-Write(S43,S49)
	S51= CtrlGPRegs=0                                           Premise(F130)
	S52= GPRegs[rA]=a                                           GPRegs-Hold(S31,S51)

ID	S53= IR.Out11_15=rA                                         IR-Out(S50)
	S54= IR.Out16_31=d                                          IR-Out(S50)
	S55= IR.Out11_15=>GPRegs.RReg2                              Premise(F160)
	S56= GPRegs.RReg2=rA                                        Path(S53,S55)
	S57= GPRegs.Rdata2=a                                        GPRegs-Read(S56,S52)
	S58= IR.Out11_15=>AddrSelMux.Sel                            Premise(F161)
	S59= AddrSelMux.Sel=rA                                      Path(S53,S58)
	S60= GPRegs.Rdata2=>AddrSelMux.Data                         Premise(F162)
	S61= AddrSelMux.Data=a                                      Path(S57,S60)
	S62= AddrSelMux.Out=AddrSel(rA,a)                           AddrSelMux(S59,S61)
	S63= AddrSelMux.Out=>A.In                                   Premise(F163)
	S64= A.In=AddrSel(rA,a)                                     Path(S62,S63)
	S65= IR.Out16_31=>IMMEXT.In                                 Premise(F164)
	S66= IMMEXT.In=d                                            Path(S54,S65)
	S67= IMMEXT.Out={16{d[0]},d}                                IMMEXT(S66)
	S68= IMMEXT.Out=>B.In                                       Premise(F165)
	S69= B.In={16{d[0]},d}                                      Path(S67,S68)
	S70= MemDataSel.Out={B1,B2,B3,B4}                           MemDataSel()
	S71= MemDataSel.Out=>DR.In                                  Premise(F169)
	S72= DR.In={B1,B2,B3,B4}                                    Path(S70,S71)
	S73= CtrlPIDReg=0                                           Premise(F186)
	S74= [PIDReg]=pid                                           PIDReg-Hold(S45,S73)
	S75= CtrlPC=0                                               Premise(F188)
	S76= CtrlPCInc=0                                            Premise(F189)
	S77= PC[Out]=addr+4                                         PC-Hold(S48,S75,S76)
	S78= CtrlA=1                                                Premise(F199)
	S79= [A]=AddrSel(rA,a)                                      A-Write(S64,S78)
	S80= CtrlB=1                                                Premise(F200)
	S81= [B]={16{d[0]},d}                                       B-Write(S69,S80)
	S82= CtrlDR=1                                               Premise(F201)
	S83= [DR]={B1,B2,B3,B4}                                     DR-Write(S72,S82)

EX	S84= A.Out=AddrSel(rA,a)                                    A-Out(S79)
	S85= B.Out={16{d[0]},d}                                     B-Out(S81)
	S86= A.Out=>ALU.A                                           Premise(F238)
	S87= ALU.A=AddrSel(rA,a)                                    Path(S84,S86)
	S88= B.Out=>ALU.B                                           Premise(F239)
	S89= ALU.B={16{d[0]},d}                                     Path(S85,S88)
	S90= ALU.Out=AddrSel(rA,a)+{16{d[0]},d}                     ALU(S87,S89)
	S91= ALU.Out=>ALUOut.In                                     Premise(F241)
	S92= ALUOut.In=AddrSel(rA,a)+{16{d[0]},d}                   Path(S90,S91)
	S93= CtrlPIDReg=0                                           Premise(F254)
	S94= [PIDReg]=pid                                           PIDReg-Hold(S74,S93)
	S95= CtrlPC=0                                               Premise(F256)
	S96= CtrlPCInc=0                                            Premise(F257)
	S97= PC[Out]=addr+4                                         PC-Hold(S77,S95,S96)
	S98= CtrlDR=0                                               Premise(F269)
	S99= [DR]={B1,B2,B3,B4}                                     DR-Hold(S83,S98)
	S100= CtrlALUOut=1                                          Premise(F270)
	S101= [ALUOut]=AddrSel(rA,a)+{16{d[0]},d}                   ALUOut-Write(S92,S100)

MEM	S102= PIDReg.Out=pid                                        PIDReg-Out(S94)
	S103= ALUOut.Out=AddrSel(rA,a)+{16{d[0]},d}                 ALUOut-Out(S101)
	S104= PIDReg.Out=>DMMU.PID                                  Premise(F310)
	S105= DMMU.PID=pid                                          Path(S102,S104)
	S106= ALUOut.Out=>DMMU.IEA                                  Premise(F311)
	S107= DMMU.IEA=AddrSel(rA,a)+{16{d[0]},d}                   Path(S103,S106)
	S108= DMMU.Addr={pid,AddrSel(rA,a)+{16{d[0]},d}}            DMMU-Search(S105,S107)
	S109= DMMU.Addr=>DAddrReg.In                                Premise(F312)
	S110= DAddrReg.In={pid,AddrSel(rA,a)+{16{d[0]},d}}          Path(S108,S109)
	S111= CtrlPC=0                                              Premise(F324)
	S112= CtrlPCInc=0                                           Premise(F325)
	S113= PC[Out]=addr+4                                        PC-Hold(S97,S111,S112)
	S114= CtrlDR=0                                              Premise(F337)
	S115= [DR]={B1,B2,B3,B4}                                    DR-Hold(S99,S114)
	S116= CtrlDAddrReg=1                                        Premise(F340)
	S117= [DAddrReg]={pid,AddrSel(rA,a)+{16{d[0]},d}}           DAddrReg-Write(S110,S116)

DMMU1	S118= CtrlPC=0                                              Premise(F392)
	S119= CtrlPCInc=0                                           Premise(F393)
	S120= PC[Out]=addr+4                                        PC-Hold(S113,S118,S119)
	S121= CtrlDR=0                                              Premise(F405)
	S122= [DR]={B1,B2,B3,B4}                                    DR-Hold(S115,S121)
	S123= CtrlDAddrReg=0                                        Premise(F408)
	S124= [DAddrReg]={pid,AddrSel(rA,a)+{16{d[0]},d}}           DAddrReg-Hold(S117,S123)

DMMU2	S125= DR.Out={B1,B2,B3,B4}                                  DR-Out(S122)
	S126= DAddrReg.Out={pid,AddrSel(rA,a)+{16{d[0]},d}}         DAddrReg-Out(S124)
	S127= DAddrReg.Out=>DMem.WAddr                              Premise(F454)
	S128= DMem.WAddr={pid,AddrSel(rA,a)+{16{d[0]},d}}           Path(S126,S127)
	S129= DR.Out=>DMem.WData                                    Premise(F455)
	S130= DMem.WData={B1,B2,B3,B4}                              Path(S125,S129)
	S131= CtrlPC=0                                              Premise(F460)
	S132= CtrlPCInc=0                                           Premise(F461)
	S133= PC[Out]=addr+4                                        PC-Hold(S120,S131,S132)
	S134= CtrlDMem=1                                            Premise(F480)
	S135= DMem[{pid,AddrSel(rA,a)+{16{d[0]},d}}]={B1,B2,B3,B4}  DMem-Write(S128,S130,S134)

WB	S136= CtrlPC=0                                              Premise(F528)
	S137= CtrlPCInc=0                                           Premise(F529)
	S138= PC[Out]=addr+4                                        PC-Hold(S133,S136,S137)
	S139= CtrlDMem=0                                            Premise(F548)
	S140= DMem[{pid,AddrSel(rA,a)+{16{d[0]},d}}]={B1,B2,B3,B4}  DMem-Hold(S135,S139)

POST	S138= PC[Out]=addr+4                                        PC-Hold(S133,S136,S137)
	S140= DMem[{pid,AddrSel(rA,a)+{16{d[0]},d}}]={B1,B2,B3,B4}  DMem-Hold(S135,S139)

