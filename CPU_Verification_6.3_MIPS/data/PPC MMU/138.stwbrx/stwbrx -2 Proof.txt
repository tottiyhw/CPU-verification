
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,rB,1324}                     Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F7)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F53)
	S15= CtrlPCInc=0                                            Premise(F54)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F55)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F60)
	S20= IMem[{pid,addr}]={31,rS,rA,rB,1324}                    IMem-Hold(S2,S19)
	S21= CtrlGPRegs=0                                           Premise(F63)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= GPRegs[rB]=b                                           GPRegs-Hold(S4,S21)

IMMU	S24= PC.Out=addr                                            PC-Out(S16)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S26= PC.Out=>ICache.IEA                                     Premise(F79)
	S27= ICache.IEA=addr                                        Path(S24,S26)
	S28= IAddrReg.Out=>IMem.RAddr                               Premise(F84)
	S29= IMem.RAddr={pid,addr}                                  Path(S25,S28)
	S30= IMem.Out={31,rS,rA,rB,1324}                            IMem-Read(S29,S20)
	S31= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S29,S20)
	S32= IMem.Out=>IRMux.MemData                                Premise(F85)
	S33= IRMux.MemData={31,rS,rA,rB,1324}                       Path(S30,S32)
	S34= IRMux.Out={31,rS,rA,rB,1324}                           IRMux-Select(S33)
	S35= IRMux.Out=>IR.In                                       Premise(F89)
	S36= IR.In={31,rS,rA,rB,1324}                               Path(S34,S35)
	S37= IMem.MEM8WordOut=>ICache.WData                         Premise(F90)
	S38= ICache.WData=IMemGet8Word({pid,addr})                  Path(S31,S37)
	S39= CtrlPC=0                                               Premise(F122)
	S40= CtrlPCInc=1                                            Premise(F123)
	S41= PC[Out]=addr+4                                         PC-Inc(S16,S39,S40)
	S42= CtrlICache=1                                           Premise(F126)
	S43= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S27,S38,S42)
	S44= CtrlIR=1                                               Premise(F131)
	S45= [IR]={31,rS,rA,rB,1324}                                IR-Write(S36,S44)
	S46= CtrlGPRegs=0                                           Premise(F132)
	S47= GPRegs[rA]=a                                           GPRegs-Hold(S22,S46)
	S48= GPRegs[rB]=b                                           GPRegs-Hold(S23,S46)

ID	S49= IR.Out11_15=rA                                         IR-Out(S45)
	S50= IR.Out16_20=rB                                         IR-Out(S45)
	S51= IR.Out11_15=>GPRegs.RReg1                              Premise(F162)
	S52= GPRegs.RReg1=rA                                        Path(S49,S51)
	S53= GPRegs.Rdata1=a                                        GPRegs-Read(S52,S47)
	S54= IR.Out16_20=>GPRegs.RReg2                              Premise(F163)
	S55= GPRegs.RReg2=rB                                        Path(S50,S54)
	S56= GPRegs.Rdata2=b                                        GPRegs-Read(S55,S48)
	S57= GPRegs.Rdata2=>B.In                                    Premise(F165)
	S58= B.In=b                                                 Path(S56,S57)
	S59= IR.Out11_15=>AddrSelMux.Sel                            Premise(F166)
	S60= AddrSelMux.Sel=rA                                      Path(S49,S59)
	S61= GPRegs.Rdata1=>AddrSelMux.Data                         Premise(F167)
	S62= AddrSelMux.Data=a                                      Path(S53,S61)
	S63= AddrSelMux.Out=AddrSel(rA,a)                           AddrSelMux(S60,S62)
	S64= AddrSelMux.Out=>A.In                                   Premise(F168)
	S65= A.In=AddrSel(rA,a)                                     Path(S63,S64)
	S66= CtrlPC=0                                               Premise(F191)
	S67= CtrlPCInc=0                                            Premise(F192)
	S68= PC[Out]=addr+4                                         PC-Hold(S41,S66,S67)
	S69= CtrlICache=0                                           Premise(F195)
	S70= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S43,S69)
	S71= CtrlB=1                                                Premise(F202)
	S72= [B]=b                                                  B-Write(S58,S71)
	S73= CtrlA=1                                                Premise(F203)
	S74= [A]=AddrSel(rA,a)                                      A-Write(S65,S73)

EX	S75= B.Out=b                                                B-Out(S72)
	S76= A.Out=AddrSel(rA,a)                                    A-Out(S74)
	S77= A.Out=>ALU.A                                           Premise(F238)
	S78= ALU.A=AddrSel(rA,a)                                    Path(S76,S77)
	S79= B.Out=>ALU.B                                           Premise(F239)
	S80= ALU.B=b                                                Path(S75,S79)
	S81= ALU.Out=AddrSel(rA,a)+b                                ALU(S78,S80)
	S82= ALU.Out=>ALUOut.In                                     Premise(F241)
	S83= ALUOut.In=AddrSel(rA,a)+b                              Path(S81,S82)
	S84= MemDataSel.Out={B4,B3,B2,B1}                           MemDataSel()
	S85= MemDataSel.Out=>DR.In                                  Premise(F245)
	S86= DR.In={B4,B3,B2,B1}                                    Path(S84,S85)
	S87= CtrlPC=0                                               Premise(F260)
	S88= CtrlPCInc=0                                            Premise(F261)
	S89= PC[Out]=addr+4                                         PC-Hold(S68,S87,S88)
	S90= CtrlICache=0                                           Premise(F264)
	S91= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S70,S90)
	S92= CtrlALUOut=1                                           Premise(F273)
	S93= [ALUOut]=AddrSel(rA,a)+b                               ALUOut-Write(S83,S92)
	S94= CtrlDR=1                                               Premise(F274)
	S95= [DR]={B4,B3,B2,B1}                                     DR-Write(S86,S94)

MEM	S96= CtrlPC=0                                               Premise(F329)
	S97= CtrlPCInc=0                                            Premise(F330)
	S98= PC[Out]=addr+4                                         PC-Hold(S89,S96,S97)
	S99= CtrlICache=0                                           Premise(F333)
	S100= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S91,S99)
	S101= CtrlALUOut=0                                          Premise(F342)
	S102= [ALUOut]=AddrSel(rA,a)+b                              ALUOut-Hold(S93,S101)
	S103= CtrlDR=0                                              Premise(F343)
	S104= [DR]={B4,B3,B2,B1}                                    DR-Hold(S95,S103)

DMMU1	S105= CtrlPC=0                                              Premise(F398)
	S106= CtrlPCInc=0                                           Premise(F399)
	S107= PC[Out]=addr+4                                        PC-Hold(S98,S105,S106)
	S108= CtrlICache=0                                          Premise(F402)
	S109= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S100,S108)
	S110= CtrlALUOut=0                                          Premise(F411)
	S111= [ALUOut]=AddrSel(rA,a)+b                              ALUOut-Hold(S102,S110)
	S112= CtrlDR=0                                              Premise(F412)
	S113= [DR]={B4,B3,B2,B1}                                    DR-Hold(S104,S112)

DMMU2	S114= ALUOut.Out=AddrSel(rA,a)+b                            ALUOut-Out(S111)
	S115= DR.Out={B4,B3,B2,B1}                                  DR-Out(S113)
	S116= ALUOut.Out=>DCache.IEA                                Premise(F457)
	S117= DCache.IEA=AddrSel(rA,a)+b                            Path(S114,S116)
	S118= DR.Out=>DCache.In                                     Premise(F464)
	S119= DCache.In={B4,B3,B2,B1}                               Path(S115,S118)
	S120= CtrlPC=0                                              Premise(F467)
	S121= CtrlPCInc=0                                           Premise(F468)
	S122= PC[Out]=addr+4                                        PC-Hold(S107,S120,S121)
	S123= CtrlICache=0                                          Premise(F471)
	S124= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S123)
	S125= CtrlDCache=1                                          Premise(F485)
	S126= DCache[AddrSel(rA,a)+b]={B4,B3,B2,B1}                 DCache-Write(S117,S119,S125)

WB	S127= CtrlPC=0                                              Premise(F536)
	S128= CtrlPCInc=0                                           Premise(F537)
	S129= PC[Out]=addr+4                                        PC-Hold(S122,S127,S128)
	S130= CtrlICache=0                                          Premise(F540)
	S131= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S124,S130)
	S132= CtrlDCache=0                                          Premise(F554)
	S133= DCache[AddrSel(rA,a)+b]={B4,B3,B2,B1}                 DCache-Hold(S126,S132)

POST	S129= PC[Out]=addr+4                                        PC-Hold(S122,S127,S128)
	S131= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S124,S130)
	S133= DCache[AddrSel(rA,a)+b]={B4,B3,B2,B1}                 DCache-Hold(S126,S132)

