
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={37,rS,rA,d}                           Premise(F2)
	S3= ICache[addr]={37,rS,rA,d}                               Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F7)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F10)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={37,rS,rA,d}                                ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F11)
	S18= ICacheReg.In={37,rS,rA,d}                              Path(S16,S17)
	S19= CtrlPIDReg=0                                           Premise(F50)
	S20= [PIDReg]=pid                                           PIDReg-Hold(S0,S19)
	S21= CtrlPC=0                                               Premise(F52)
	S22= CtrlPCInc=0                                            Premise(F53)
	S23= PC[Out]=addr                                           PC-Hold(S1,S21,S22)
	S24= CtrlIAddrReg=1                                         Premise(F54)
	S25= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S24)
	S26= CtrlICacheReg=1                                        Premise(F57)
	S27= [ICacheReg]={37,rS,rA,d}                               ICacheReg-Write(S18,S26)
	S28= CtrlIMem=0                                             Premise(F59)
	S29= IMem[{pid,addr}]={37,rS,rA,d}                          IMem-Hold(S2,S28)
	S30= CtrlGPRegs=0                                           Premise(F62)
	S31= GPRegs[rA]=a                                           GPRegs-Hold(S4,S30)

IMMU	S32= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S25)
	S33= ICacheReg.Out={37,rS,rA,d}                             ICacheReg-Out(S27)
	S34= IAddrReg.Out=>IMem.RAddr                               Premise(F83)
	S35= IMem.RAddr={pid,addr}                                  Path(S32,S34)
	S36= IMem.Out={37,rS,rA,d}                                  IMem-Read(S35,S29)
	S37= IMem.Out=>IRMux.MemData                                Premise(F84)
	S38= IRMux.MemData={37,rS,rA,d}                             Path(S36,S37)
	S39= ICacheReg.Out=>IRMux.CacheData                         Premise(F85)
	S40= IRMux.CacheData={37,rS,rA,d}                           Path(S33,S39)
	S41= IRMux.Out={37,rS,rA,d}                                 IRMux-Select(S38,S40)
	S42= IRMux.Out=>IR.In                                       Premise(F88)
	S43= IR.In={37,rS,rA,d}                                     Path(S41,S42)
	S44= CtrlPIDReg=0                                           Premise(F118)
	S45= [PIDReg]=pid                                           PIDReg-Hold(S20,S44)
	S46= CtrlPC=0                                               Premise(F120)
	S47= CtrlPCInc=1                                            Premise(F121)
	S48= PC[Out]=addr+4                                         PC-Inc(S23,S46,S47)
	S49= CtrlIR=1                                               Premise(F129)
	S50= [IR]={37,rS,rA,d}                                      IR-Write(S43,S49)
	S51= CtrlGPRegs=0                                           Premise(F130)
	S52= GPRegs[rA]=a                                           GPRegs-Hold(S31,S51)

ID	S53= IR.Out11_15=rA                                         IR-Out(S50)
	S54= IR.Out16_31=d                                          IR-Out(S50)
	S55= IR.Out11_15=>GPRegs.RReg2                              Premise(F160)
	S56= GPRegs.RReg2=rA                                        Path(S53,S55)
	S57= GPRegs.Rdata2=a                                        GPRegs-Read(S56,S52)
	S58= GPRegs.Rdata2=>A.In                                    Premise(F161)
	S59= A.In=a                                                 Path(S57,S58)
	S60= IR.Out16_31=>IMMEXT.In                                 Premise(F162)
	S61= IMMEXT.In=d                                            Path(S54,S60)
	S62= IMMEXT.Out={16{d[0]},d}                                IMMEXT(S61)
	S63= IMMEXT.Out=>B.In                                       Premise(F163)
	S64= B.In={16{d[0]},d}                                      Path(S62,S63)
	S65= MemDataSel.Out={B1,B2,B3,B4}                           MemDataSel()
	S66= MemDataSel.Out=>DR.In                                  Premise(F167)
	S67= DR.In={B1,B2,B3,B4}                                    Path(S65,S66)
	S68= CtrlPIDReg=0                                           Premise(F186)
	S69= [PIDReg]=pid                                           PIDReg-Hold(S45,S68)
	S70= CtrlPC=0                                               Premise(F188)
	S71= CtrlPCInc=0                                            Premise(F189)
	S72= PC[Out]=addr+4                                         PC-Hold(S48,S70,S71)
	S73= CtrlIR=0                                               Premise(F197)
	S74= [IR]={37,rS,rA,d}                                      IR-Hold(S50,S73)
	S75= CtrlA=1                                                Premise(F199)
	S76= [A]=a                                                  A-Write(S59,S75)
	S77= CtrlB=1                                                Premise(F200)
	S78= [B]={16{d[0]},d}                                       B-Write(S64,S77)
	S79= CtrlDR=1                                               Premise(F201)
	S80= [DR]={B1,B2,B3,B4}                                     DR-Write(S67,S79)

EX	S81= A.Out=a                                                A-Out(S76)
	S82= B.Out={16{d[0]},d}                                     B-Out(S78)
	S83= A.Out=>ALU.A                                           Premise(F236)
	S84= ALU.A=a                                                Path(S81,S83)
	S85= B.Out=>ALU.B                                           Premise(F237)
	S86= ALU.B={16{d[0]},d}                                     Path(S82,S85)
	S87= ALU.Out=a+{16{d[0]},d}                                 ALU(S84,S86)
	S88= ALU.Out=>ALUOut.In                                     Premise(F239)
	S89= ALUOut.In=a+{16{d[0]},d}                               Path(S87,S88)
	S90= CtrlPIDReg=0                                           Premise(F254)
	S91= [PIDReg]=pid                                           PIDReg-Hold(S69,S90)
	S92= CtrlPC=0                                               Premise(F256)
	S93= CtrlPCInc=0                                            Premise(F257)
	S94= PC[Out]=addr+4                                         PC-Hold(S72,S92,S93)
	S95= CtrlIR=0                                               Premise(F265)
	S96= [IR]={37,rS,rA,d}                                      IR-Hold(S74,S95)
	S97= CtrlDR=0                                               Premise(F269)
	S98= [DR]={B1,B2,B3,B4}                                     DR-Hold(S80,S97)
	S99= CtrlALUOut=1                                           Premise(F270)
	S100= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Write(S89,S99)

MEM	S101= PIDReg.Out=pid                                        PIDReg-Out(S91)
	S102= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S100)
	S103= PIDReg.Out=>DMMU.PID                                  Premise(F308)
	S104= DMMU.PID=pid                                          Path(S101,S103)
	S105= ALUOut.Out=>DMMU.IEA                                  Premise(F309)
	S106= DMMU.IEA=a+{16{d[0]},d}                               Path(S102,S105)
	S107= DMMU.Addr={pid,a+{16{d[0]},d}}                        DMMU-Search(S104,S106)
	S108= DMMU.Addr=>DAddrReg.In                                Premise(F310)
	S109= DAddrReg.In={pid,a+{16{d[0]},d}}                      Path(S107,S108)
	S110= CtrlPC=0                                              Premise(F324)
	S111= CtrlPCInc=0                                           Premise(F325)
	S112= PC[Out]=addr+4                                        PC-Hold(S94,S110,S111)
	S113= CtrlIR=0                                              Premise(F333)
	S114= [IR]={37,rS,rA,d}                                     IR-Hold(S96,S113)
	S115= CtrlDR=0                                              Premise(F337)
	S116= [DR]={B1,B2,B3,B4}                                    DR-Hold(S98,S115)
	S117= CtrlALUOut=0                                          Premise(F338)
	S118= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S100,S117)
	S119= CtrlDAddrReg=1                                        Premise(F340)
	S120= [DAddrReg]={pid,a+{16{d[0]},d}}                       DAddrReg-Write(S109,S119)

DMMU1	S121= CtrlPC=0                                              Premise(F392)
	S122= CtrlPCInc=0                                           Premise(F393)
	S123= PC[Out]=addr+4                                        PC-Hold(S112,S121,S122)
	S124= CtrlIR=0                                              Premise(F401)
	S125= [IR]={37,rS,rA,d}                                     IR-Hold(S114,S124)
	S126= CtrlDR=0                                              Premise(F405)
	S127= [DR]={B1,B2,B3,B4}                                    DR-Hold(S116,S126)
	S128= CtrlALUOut=0                                          Premise(F406)
	S129= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S118,S128)
	S130= CtrlDAddrReg=0                                        Premise(F408)
	S131= [DAddrReg]={pid,a+{16{d[0]},d}}                       DAddrReg-Hold(S120,S130)

DMMU2	S132= DR.Out={B1,B2,B3,B4}                                  DR-Out(S127)
	S133= DAddrReg.Out={pid,a+{16{d[0]},d}}                     DAddrReg-Out(S131)
	S134= DAddrReg.Out=>DMem.WAddr                              Premise(F452)
	S135= DMem.WAddr={pid,a+{16{d[0]},d}}                       Path(S133,S134)
	S136= DR.Out=>DMem.WData                                    Premise(F453)
	S137= DMem.WData={B1,B2,B3,B4}                              Path(S132,S136)
	S138= CtrlPC=0                                              Premise(F460)
	S139= CtrlPCInc=0                                           Premise(F461)
	S140= PC[Out]=addr+4                                        PC-Hold(S123,S138,S139)
	S141= CtrlIR=0                                              Premise(F469)
	S142= [IR]={37,rS,rA,d}                                     IR-Hold(S125,S141)
	S143= CtrlALUOut=0                                          Premise(F474)
	S144= [ALUOut]=a+{16{d[0]},d}                               ALUOut-Hold(S129,S143)
	S145= CtrlDMem=1                                            Premise(F480)
	S146= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}              DMem-Write(S135,S137,S145)

WB	S147= IR.Out11_15=rA                                        IR-Out(S142)
	S148= ALUOut.Out=a+{16{d[0]},d}                             ALUOut-Out(S144)
	S149= ALUOut.Out=>GPRegs.WData                              Premise(F524)
	S150= GPRegs.WData=a+{16{d[0]},d}                           Path(S148,S149)
	S151= IR.Out11_15=>GPRegs.WReg                              Premise(F525)
	S152= GPRegs.WReg=rA                                        Path(S147,S151)
	S153= CtrlPC=0                                              Premise(F528)
	S154= CtrlPCInc=0                                           Premise(F529)
	S155= PC[Out]=addr+4                                        PC-Hold(S140,S153,S154)
	S156= CtrlGPRegs=1                                          Premise(F538)
	S157= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S152,S150,S156)
	S158= CtrlDMem=0                                            Premise(F548)
	S159= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}              DMem-Hold(S146,S158)

POST	S155= PC[Out]=addr+4                                        PC-Hold(S140,S153,S154)
	S157= GPRegs[rA]=a+{16{d[0]},d}                             GPRegs-Write(S152,S150,S156)
	S159= DMem[{pid,a+{16{d[0]},d}}]={B1,B2,B3,B4}              DMem-Hold(S146,S158)

