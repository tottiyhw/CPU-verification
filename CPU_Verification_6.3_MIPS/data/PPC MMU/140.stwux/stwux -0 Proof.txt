
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,rB,366}                      Premise(F2)
	S3= ICache[addr]={31,rS,rA,rB,366}                          Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F8)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F11)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={31,rS,rA,rB,366}                           ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F12)
	S19= ICacheReg.In={31,rS,rA,rB,366}                         Path(S17,S18)
	S20= CtrlPC=0                                               Premise(F54)
	S21= CtrlPCInc=0                                            Premise(F55)
	S22= PC[Out]=addr                                           PC-Hold(S1,S20,S21)
	S23= CtrlIAddrReg=1                                         Premise(F56)
	S24= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S23)
	S25= CtrlICacheReg=1                                        Premise(F59)
	S26= [ICacheReg]={31,rS,rA,rB,366}                          ICacheReg-Write(S19,S25)
	S27= CtrlIMem=0                                             Premise(F61)
	S28= IMem[{pid,addr}]={31,rS,rA,rB,366}                     IMem-Hold(S2,S27)
	S29= CtrlGPRegs=0                                           Premise(F64)
	S30= GPRegs[rA]=a                                           GPRegs-Hold(S4,S29)
	S31= GPRegs[rB]=b                                           GPRegs-Hold(S5,S29)

IMMU	S32= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S24)
	S33= ICacheReg.Out={31,rS,rA,rB,366}                        ICacheReg-Out(S26)
	S34= IAddrReg.Out=>IMem.RAddr                               Premise(F85)
	S35= IMem.RAddr={pid,addr}                                  Path(S32,S34)
	S36= IMem.Out={31,rS,rA,rB,366}                             IMem-Read(S35,S28)
	S37= IMem.Out=>IRMux.MemData                                Premise(F86)
	S38= IRMux.MemData={31,rS,rA,rB,366}                        Path(S36,S37)
	S39= ICacheReg.Out=>IRMux.CacheData                         Premise(F87)
	S40= IRMux.CacheData={31,rS,rA,rB,366}                      Path(S33,S39)
	S41= IRMux.Out={31,rS,rA,rB,366}                            IRMux-Select(S38,S40)
	S42= IRMux.Out=>IR.In                                       Premise(F90)
	S43= IR.In={31,rS,rA,rB,366}                                Path(S41,S42)
	S44= CtrlPC=0                                               Premise(F123)
	S45= CtrlPCInc=1                                            Premise(F124)
	S46= PC[Out]=addr+4                                         PC-Inc(S22,S44,S45)
	S47= CtrlIR=1                                               Premise(F132)
	S48= [IR]={31,rS,rA,rB,366}                                 IR-Write(S43,S47)
	S49= CtrlGPRegs=0                                           Premise(F133)
	S50= GPRegs[rA]=a                                           GPRegs-Hold(S30,S49)
	S51= GPRegs[rB]=b                                           GPRegs-Hold(S31,S49)

ID	S52= IR.Out11_15=rA                                         IR-Out(S48)
	S53= IR.Out16_20=rB                                         IR-Out(S48)
	S54= IR.Out11_15=>GPRegs.RReg1                              Premise(F163)
	S55= GPRegs.RReg1=rA                                        Path(S52,S54)
	S56= GPRegs.Rdata1=a                                        GPRegs-Read(S55,S50)
	S57= IR.Out16_20=>GPRegs.RReg2                              Premise(F164)
	S58= GPRegs.RReg2=rB                                        Path(S53,S57)
	S59= GPRegs.Rdata2=b                                        GPRegs-Read(S58,S51)
	S60= GPRegs.Rdata1=>A.In                                    Premise(F166)
	S61= A.In=a                                                 Path(S56,S60)
	S62= GPRegs.Rdata2=>B.In                                    Premise(F167)
	S63= B.In=b                                                 Path(S59,S62)
	S64= CtrlPC=0                                               Premise(F192)
	S65= CtrlPCInc=0                                            Premise(F193)
	S66= PC[Out]=addr+4                                         PC-Hold(S46,S64,S65)
	S67= CtrlIR=0                                               Premise(F201)
	S68= [IR]={31,rS,rA,rB,366}                                 IR-Hold(S48,S67)
	S69= CtrlA=1                                                Premise(F203)
	S70= [A]=a                                                  A-Write(S61,S69)
	S71= CtrlB=1                                                Premise(F204)
	S72= [B]=b                                                  B-Write(S63,S71)

EX	S73= A.Out=a                                                A-Out(S70)
	S74= B.Out=b                                                B-Out(S72)
	S75= A.Out=>ALU.A                                           Premise(F237)
	S76= ALU.A=a                                                Path(S73,S75)
	S77= B.Out=>ALU.B                                           Premise(F238)
	S78= ALU.B=b                                                Path(S74,S77)
	S79= ALU.Out=a+b                                            ALU(S76,S78)
	S80= ALU.Out=>ALUOut.In                                     Premise(F240)
	S81= ALUOut.In=a+b                                          Path(S79,S80)
	S82= MemDataSel.Out={B1,B2,B3,B4}                           MemDataSel()
	S83= MemDataSel.Out=>DR.In                                  Premise(F244)
	S84= DR.In={B1,B2,B3,B4}                                    Path(S82,S83)
	S85= CtrlPC=0                                               Premise(F261)
	S86= CtrlPCInc=0                                            Premise(F262)
	S87= PC[Out]=addr+4                                         PC-Hold(S66,S85,S86)
	S88= CtrlIR=0                                               Premise(F270)
	S89= [IR]={31,rS,rA,rB,366}                                 IR-Hold(S68,S88)
	S90= CtrlDR=1                                               Premise(F274)
	S91= [DR]={B1,B2,B3,B4}                                     DR-Write(S84,S90)
	S92= CtrlALUOut=1                                           Premise(F275)
	S93= [ALUOut]=a+b                                           ALUOut-Write(S81,S92)

MEM	S94= CtrlPC=0                                               Premise(F330)
	S95= CtrlPCInc=0                                            Premise(F331)
	S96= PC[Out]=addr+4                                         PC-Hold(S87,S94,S95)
	S97= CtrlIR=0                                               Premise(F339)
	S98= [IR]={31,rS,rA,rB,366}                                 IR-Hold(S89,S97)
	S99= CtrlDR=0                                               Premise(F343)
	S100= [DR]={B1,B2,B3,B4}                                    DR-Hold(S91,S99)
	S101= CtrlALUOut=0                                          Premise(F344)
	S102= [ALUOut]=a+b                                          ALUOut-Hold(S93,S101)

DMMU1	S103= CtrlPC=0                                              Premise(F399)
	S104= CtrlPCInc=0                                           Premise(F400)
	S105= PC[Out]=addr+4                                        PC-Hold(S96,S103,S104)
	S106= CtrlIR=0                                              Premise(F408)
	S107= [IR]={31,rS,rA,rB,366}                                IR-Hold(S98,S106)
	S108= CtrlDR=0                                              Premise(F412)
	S109= [DR]={B1,B2,B3,B4}                                    DR-Hold(S100,S108)
	S110= CtrlALUOut=0                                          Premise(F413)
	S111= [ALUOut]=a+b                                          ALUOut-Hold(S102,S110)

DMMU2	S112= DR.Out={B1,B2,B3,B4}                                  DR-Out(S109)
	S113= ALUOut.Out=a+b                                        ALUOut-Out(S111)
	S114= ALUOut.Out=>DCache.IEA                                Premise(F456)
	S115= DCache.IEA=a+b                                        Path(S113,S114)
	S116= DR.Out=>DCache.In                                     Premise(F463)
	S117= DCache.In={B1,B2,B3,B4}                               Path(S112,S116)
	S118= CtrlPC=0                                              Premise(F468)
	S119= CtrlPCInc=0                                           Premise(F469)
	S120= PC[Out]=addr+4                                        PC-Hold(S105,S118,S119)
	S121= CtrlIR=0                                              Premise(F477)
	S122= [IR]={31,rS,rA,rB,366}                                IR-Hold(S107,S121)
	S123= CtrlALUOut=0                                          Premise(F482)
	S124= [ALUOut]=a+b                                          ALUOut-Hold(S111,S123)
	S125= CtrlDCache=1                                          Premise(F486)
	S126= DCache[a+b]={B1,B2,B3,B4}                             DCache-Write(S115,S117,S125)

WB	S127= IR.Out11_15=rA                                        IR-Out(S122)
	S128= ALUOut.Out=a+b                                        ALUOut-Out(S124)
	S129= ALUOut.Out=>GPRegs.WData                              Premise(F533)
	S130= GPRegs.WData=a+b                                      Path(S128,S129)
	S131= IR.Out11_15=>GPRegs.WReg                              Premise(F534)
	S132= GPRegs.WReg=rA                                        Path(S127,S131)
	S133= CtrlPC=0                                              Premise(F537)
	S134= CtrlPCInc=0                                           Premise(F538)
	S135= PC[Out]=addr+4                                        PC-Hold(S120,S133,S134)
	S136= CtrlGPRegs=1                                          Premise(F547)
	S137= GPRegs[rA]=a+b                                        GPRegs-Write(S132,S130,S136)
	S138= CtrlDCache=0                                          Premise(F555)
	S139= DCache[a+b]={B1,B2,B3,B4}                             DCache-Hold(S126,S138)

POST	S135= PC[Out]=addr+4                                        PC-Hold(S120,S133,S134)
	S137= GPRegs[rA]=a+b                                        GPRegs-Write(S132,S130,S136)
	S139= DCache[a+b]={B1,B2,B3,B4}                             DCache-Hold(S126,S138)

