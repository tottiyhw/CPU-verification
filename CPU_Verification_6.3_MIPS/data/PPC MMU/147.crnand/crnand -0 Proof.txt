
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={19,BT,BA,BB,450}                      Premise(F2)
	S3= ICache[addr]={19,BT,BA,BB,450}                          Premise(F3)
	S4= CRRegs[BA]=a                                            Premise(F4)
	S5= CRRegs[BB]=b                                            Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F10)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={19,BT,BA,BB,450}                           ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F11)
	S19= ICacheReg.In={19,BT,BA,BB,450}                         Path(S17,S18)
	S20= CtrlPC=0                                               Premise(F37)
	S21= CtrlPCInc=0                                            Premise(F38)
	S22= PC[Out]=addr                                           PC-Hold(S1,S20,S21)
	S23= CtrlIAddrReg=1                                         Premise(F39)
	S24= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S23)
	S25= CtrlICacheReg=1                                        Premise(F42)
	S26= [ICacheReg]={19,BT,BA,BB,450}                          ICacheReg-Write(S19,S25)
	S27= CtrlIMem=0                                             Premise(F44)
	S28= IMem[{pid,addr}]={19,BT,BA,BB,450}                     IMem-Hold(S2,S27)
	S29= CtrlCRRegs=0                                           Premise(F47)
	S30= CRRegs[BA]=a                                           CRRegs-Hold(S4,S29)
	S31= CRRegs[BB]=b                                           CRRegs-Hold(S5,S29)

IMMU	S32= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S24)
	S33= ICacheReg.Out={19,BT,BA,BB,450}                        ICacheReg-Out(S26)
	S34= IAddrReg.Out=>IMem.RAddr                               Premise(F63)
	S35= IMem.RAddr={pid,addr}                                  Path(S32,S34)
	S36= IMem.Out={19,BT,BA,BB,450}                             IMem-Read(S35,S28)
	S37= IMem.Out=>IRMux.MemData                                Premise(F64)
	S38= IRMux.MemData={19,BT,BA,BB,450}                        Path(S36,S37)
	S39= ICacheReg.Out=>IRMux.CacheData                         Premise(F65)
	S40= IRMux.CacheData={19,BT,BA,BB,450}                      Path(S33,S39)
	S41= IRMux.Out={19,BT,BA,BB,450}                            IRMux-Select(S38,S40)
	S42= IRMux.Out=>IR.In                                       Premise(F68)
	S43= IR.In={19,BT,BA,BB,450}                                Path(S41,S42)
	S44= CtrlPC=0                                               Premise(F85)
	S45= CtrlPCInc=1                                            Premise(F86)
	S46= PC[Out]=addr+4                                         PC-Inc(S22,S44,S45)
	S47= CtrlIR=1                                               Premise(F94)
	S48= [IR]={19,BT,BA,BB,450}                                 IR-Write(S43,S47)
	S49= CtrlCRRegs=0                                           Premise(F95)
	S50= CRRegs[BA]=a                                           CRRegs-Hold(S30,S49)
	S51= CRRegs[BB]=b                                           CRRegs-Hold(S31,S49)

ID	S52= IR.Out11_15=BA                                         IR-Out(S48)
	S53= IR.Out16_20=BB                                         IR-Out(S48)
	S54= IR.Out11_15=>CRRegs.RBitReg1                           Premise(F120)
	S55= CRRegs.RBitReg1=BA                                     Path(S52,S54)
	S56= CRRegs.RBitdata1=a                                     CRRegs-Read(S55,S50)
	S57= IR.Out16_20=>CRRegs.RBitReg2                           Premise(F121)
	S58= CRRegs.RBitReg2=BB                                     Path(S53,S57)
	S59= CRRegs.RBitdata2=b                                     CRRegs-Read(S58,S51)
	S60= CRRegs.RBitdata1=>A1bit.In                             Premise(F123)
	S61= A1bit.In=a                                             Path(S56,S60)
	S62= CRRegs.RBitdata2=>B1bit.In                             Premise(F124)
	S63= B1bit.In=b                                             Path(S59,S62)
	S64= CtrlPC=0                                               Premise(F133)
	S65= CtrlPCInc=0                                            Premise(F134)
	S66= PC[Out]=addr+4                                         PC-Hold(S46,S64,S65)
	S67= CtrlIR=0                                               Premise(F142)
	S68= [IR]={19,BT,BA,BB,450}                                 IR-Hold(S48,S67)
	S69= CtrlA1bit=1                                            Premise(F147)
	S70= [A1bit]=a                                              A1bit-Write(S61,S69)
	S71= CtrlB1bit=1                                            Premise(F148)
	S72= [B1bit]=b                                              B1bit-Write(S63,S71)

EX	S73= A1bit.Out=a                                            A1bit-Out(S70)
	S74= B1bit.Out=b                                            B1bit-Out(S72)
	S75= A1bit.Out=>ALU1bit.A                                   Premise(F173)
	S76= ALU1bit.A=a                                            Path(S73,S75)
	S77= B1bit.Out=>ALU1bit.B                                   Premise(F174)
	S78= ALU1bit.B=b                                            Path(S74,S77)
	S79= ALU1bit.Out=~(a&b)                                     ALU1bit(S76,S78)
	S80= ALU1bit.Out=>ALU1bitOut.In                             Premise(F176)
	S81= ALU1bitOut.In=~(a&b)                                   Path(S79,S80)
	S82= CtrlPC=0                                               Premise(F181)
	S83= CtrlPCInc=0                                            Premise(F182)
	S84= PC[Out]=addr+4                                         PC-Hold(S66,S82,S83)
	S85= CtrlIR=0                                               Premise(F190)
	S86= [IR]={19,BT,BA,BB,450}                                 IR-Hold(S68,S85)
	S87= CtrlALU1bitOut=1                                       Premise(F197)
	S88= [ALU1bitOut]=~(a&b)                                    ALU1bitOut-Write(S81,S87)

MEM	S89= CtrlPC=0                                               Premise(F229)
	S90= CtrlPCInc=0                                            Premise(F230)
	S91= PC[Out]=addr+4                                         PC-Hold(S84,S89,S90)
	S92= CtrlIR=0                                               Premise(F238)
	S93= [IR]={19,BT,BA,BB,450}                                 IR-Hold(S86,S92)
	S94= CtrlALU1bitOut=0                                       Premise(F245)
	S95= [ALU1bitOut]=~(a&b)                                    ALU1bitOut-Hold(S88,S94)

DMMU1	S96= CtrlPC=0                                               Premise(F277)
	S97= CtrlPCInc=0                                            Premise(F278)
	S98= PC[Out]=addr+4                                         PC-Hold(S91,S96,S97)
	S99= CtrlIR=0                                               Premise(F286)
	S100= [IR]={19,BT,BA,BB,450}                                IR-Hold(S93,S99)
	S101= CtrlALU1bitOut=0                                      Premise(F293)
	S102= [ALU1bitOut]=~(a&b)                                   ALU1bitOut-Hold(S95,S101)

DMMU2	S103= CtrlPC=0                                              Premise(F325)
	S104= CtrlPCInc=0                                           Premise(F326)
	S105= PC[Out]=addr+4                                        PC-Hold(S98,S103,S104)
	S106= CtrlIR=0                                              Premise(F334)
	S107= [IR]={19,BT,BA,BB,450}                                IR-Hold(S100,S106)
	S108= CtrlALU1bitOut=0                                      Premise(F341)
	S109= [ALU1bitOut]=~(a&b)                                   ALU1bitOut-Hold(S102,S108)

WB	S110= IR.Out6_10=BT                                         IR-Out(S107)
	S111= ALU1bitOut.Out=~(a&b)                                 ALU1bitOut-Out(S109)
	S112= IR.Out6_10=>CRRegs.W1bitReg                           Premise(F369)
	S113= CRRegs.W1bitReg=BT                                    Path(S110,S112)
	S114= ALU1bitOut.Out=>CRRegs.W1bitData                      Premise(F370)
	S115= CRRegs.W1bitData=~(a&b)                               Path(S111,S114)
	S116= CtrlPC=0                                              Premise(F373)
	S117= CtrlPCInc=0                                           Premise(F374)
	S118= PC[Out]=addr+4                                        PC-Hold(S105,S116,S117)
	S119= CtrlCRRegsW1bitRegs=1                                 Premise(F386)
	S120= CRRegs[BT]=~(a&b)                                     CRRegs-Write(S113,S115,S119)

POST	S118= PC[Out]=addr+4                                        PC-Hold(S105,S116,S117)
	S120= CRRegs[BT]=~(a&b)                                     CRRegs-Write(S113,S115,S119)

