
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={19,BT,BA,BB,386}                      Premise(F2)
	S3= CRRegs[BA]=a                                            Premise(F3)
	S4= CRRegs[BB]=b                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F36)
	S15= CtrlPCInc=0                                            Premise(F37)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F38)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F43)
	S20= IMem[{pid,addr}]={19,BT,BA,BB,386}                     IMem-Hold(S2,S19)
	S21= CtrlCRRegs=0                                           Premise(F46)
	S22= CRRegs[BA]=a                                           CRRegs-Hold(S3,S21)
	S23= CRRegs[BB]=b                                           CRRegs-Hold(S4,S21)

IMMU	S24= PC.Out=addr                                            PC-Out(S16)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S26= PC.Out=>ICache.IEA                                     Premise(F57)
	S27= ICache.IEA=addr                                        Path(S24,S26)
	S28= IAddrReg.Out=>IMem.RAddr                               Premise(F62)
	S29= IMem.RAddr={pid,addr}                                  Path(S25,S28)
	S30= IMem.Out={19,BT,BA,BB,386}                             IMem-Read(S29,S20)
	S31= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S29,S20)
	S32= IMem.Out=>IRMux.MemData                                Premise(F63)
	S33= IRMux.MemData={19,BT,BA,BB,386}                        Path(S30,S32)
	S34= IRMux.Out={19,BT,BA,BB,386}                            IRMux-Select(S33)
	S35= IRMux.Out=>IR.In                                       Premise(F67)
	S36= IR.In={19,BT,BA,BB,386}                                Path(S34,S35)
	S37= IMem.MEM8WordOut=>ICache.WData                         Premise(F68)
	S38= ICache.WData=IMemGet8Word({pid,addr})                  Path(S31,S37)
	S39= CtrlPC=0                                               Premise(F84)
	S40= CtrlPCInc=1                                            Premise(F85)
	S41= PC[Out]=addr+4                                         PC-Inc(S16,S39,S40)
	S42= CtrlICache=1                                           Premise(F88)
	S43= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S27,S38,S42)
	S44= CtrlIR=1                                               Premise(F93)
	S45= [IR]={19,BT,BA,BB,386}                                 IR-Write(S36,S44)
	S46= CtrlCRRegs=0                                           Premise(F94)
	S47= CRRegs[BA]=a                                           CRRegs-Hold(S22,S46)
	S48= CRRegs[BB]=b                                           CRRegs-Hold(S23,S46)

ID	S49= IR.Out11_15=BA                                         IR-Out(S45)
	S50= IR.Out16_20=BB                                         IR-Out(S45)
	S51= IR.Out11_15=>CRRegs.RBitReg1                           Premise(F119)
	S52= CRRegs.RBitReg1=BA                                     Path(S49,S51)
	S53= CRRegs.RBitdata1=a                                     CRRegs-Read(S52,S47)
	S54= IR.Out16_20=>CRRegs.RBitReg2                           Premise(F120)
	S55= CRRegs.RBitReg2=BB                                     Path(S50,S54)
	S56= CRRegs.RBitdata2=b                                     CRRegs-Read(S55,S48)
	S57= CRRegs.RBitdata1=>A1bit.In                             Premise(F122)
	S58= A1bit.In=a                                             Path(S53,S57)
	S59= CRRegs.RBitdata2=>B1bit.In                             Premise(F123)
	S60= B1bit.In=b                                             Path(S56,S59)
	S61= CtrlPC=0                                               Premise(F132)
	S62= CtrlPCInc=0                                            Premise(F133)
	S63= PC[Out]=addr+4                                         PC-Hold(S41,S61,S62)
	S64= CtrlICache=0                                           Premise(F136)
	S65= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S43,S64)
	S66= CtrlIR=0                                               Premise(F141)
	S67= [IR]={19,BT,BA,BB,386}                                 IR-Hold(S45,S66)
	S68= CtrlA1bit=1                                            Premise(F146)
	S69= [A1bit]=a                                              A1bit-Write(S58,S68)
	S70= CtrlB1bit=1                                            Premise(F147)
	S71= [B1bit]=b                                              B1bit-Write(S60,S70)

EX	S72= A1bit.Out=a                                            A1bit-Out(S69)
	S73= B1bit.Out=b                                            B1bit-Out(S71)
	S74= A1bit.Out=>ALU1bit.A                                   Premise(F172)
	S75= ALU1bit.A=a                                            Path(S72,S74)
	S76= B1bit.Out=>ALU1bit.B                                   Premise(F173)
	S77= ALU1bit.B=b                                            Path(S73,S76)
	S78= ALU1bit.Out=a^b                                        ALU1bit(S75,S77)
	S79= ALU1bit.Out=>ALU1bitOut.In                             Premise(F175)
	S80= ALU1bitOut.In=a^b                                      Path(S78,S79)
	S81= CtrlPC=0                                               Premise(F180)
	S82= CtrlPCInc=0                                            Premise(F181)
	S83= PC[Out]=addr+4                                         PC-Hold(S63,S81,S82)
	S84= CtrlICache=0                                           Premise(F184)
	S85= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S65,S84)
	S86= CtrlIR=0                                               Premise(F189)
	S87= [IR]={19,BT,BA,BB,386}                                 IR-Hold(S67,S86)
	S88= CtrlALU1bitOut=1                                       Premise(F196)
	S89= [ALU1bitOut]=a^b                                       ALU1bitOut-Write(S80,S88)

MEM	S90= CtrlPC=0                                               Premise(F228)
	S91= CtrlPCInc=0                                            Premise(F229)
	S92= PC[Out]=addr+4                                         PC-Hold(S83,S90,S91)
	S93= CtrlICache=0                                           Premise(F232)
	S94= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S85,S93)
	S95= CtrlIR=0                                               Premise(F237)
	S96= [IR]={19,BT,BA,BB,386}                                 IR-Hold(S87,S95)
	S97= CtrlALU1bitOut=0                                       Premise(F244)
	S98= [ALU1bitOut]=a^b                                       ALU1bitOut-Hold(S89,S97)

DMMU1	S99= CtrlPC=0                                               Premise(F276)
	S100= CtrlPCInc=0                                           Premise(F277)
	S101= PC[Out]=addr+4                                        PC-Hold(S92,S99,S100)
	S102= CtrlICache=0                                          Premise(F280)
	S103= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S94,S102)
	S104= CtrlIR=0                                              Premise(F285)
	S105= [IR]={19,BT,BA,BB,386}                                IR-Hold(S96,S104)
	S106= CtrlALU1bitOut=0                                      Premise(F292)
	S107= [ALU1bitOut]=a^b                                      ALU1bitOut-Hold(S98,S106)

DMMU2	S108= CtrlPC=0                                              Premise(F324)
	S109= CtrlPCInc=0                                           Premise(F325)
	S110= PC[Out]=addr+4                                        PC-Hold(S101,S108,S109)
	S111= CtrlICache=0                                          Premise(F328)
	S112= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S103,S111)
	S113= CtrlIR=0                                              Premise(F333)
	S114= [IR]={19,BT,BA,BB,386}                                IR-Hold(S105,S113)
	S115= CtrlALU1bitOut=0                                      Premise(F340)
	S116= [ALU1bitOut]=a^b                                      ALU1bitOut-Hold(S107,S115)

WB	S117= IR.Out6_10=BT                                         IR-Out(S114)
	S118= ALU1bitOut.Out=a^b                                    ALU1bitOut-Out(S116)
	S119= IR.Out6_10=>CRRegs.W1bitReg                           Premise(F368)
	S120= CRRegs.W1bitReg=BT                                    Path(S117,S119)
	S121= ALU1bitOut.Out=>CRRegs.W1bitData                      Premise(F369)
	S122= CRRegs.W1bitData=a^b                                  Path(S118,S121)
	S123= CtrlPC=0                                              Premise(F372)
	S124= CtrlPCInc=0                                           Premise(F373)
	S125= PC[Out]=addr+4                                        PC-Hold(S110,S123,S124)
	S126= CtrlICache=0                                          Premise(F376)
	S127= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S112,S126)
	S128= CtrlCRRegsW1bitRegs=1                                 Premise(F385)
	S129= CRRegs[BT]=a^b                                        CRRegs-Write(S120,S122,S128)

POST	S125= PC[Out]=addr+4                                        PC-Hold(S110,S123,S124)
	S127= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S112,S126)
	S129= CRRegs[BT]=a^b                                        CRRegs-Write(S120,S122,S128)

