
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,rB,633}                      Premise(F2)
	S3= GPRegs[rS]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F41)
	S16= CtrlPCInc=0                                            Premise(F42)
	S17= PC[Out]=addr                                           PC-Hold(S1,S15,S16)
	S18= CtrlIAddrReg=1                                         Premise(F43)
	S19= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S18)
	S20= CtrlIMem=0                                             Premise(F48)
	S21= IMem[{pid,addr}]={31,rS,rA,rB,633}                     IMem-Hold(S2,S20)
	S22= CtrlGPRegs=0                                           Premise(F51)
	S23= GPRegs[rS]=a                                           GPRegs-Hold(S3,S22)
	S24= GPRegs[rB]=b                                           GPRegs-Hold(S4,S22)
	S25= CtrlXERSO=0                                            Premise(F55)
	S26= XER[SO]=so                                             XER-SO-Hold(S5,S25)

IMMU	S27= PC.Out=addr                                            PC-Out(S17)
	S28= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S19)
	S29= PC.Out=>ICache.IEA                                     Premise(F67)
	S30= ICache.IEA=addr                                        Path(S27,S29)
	S31= IAddrReg.Out=>IMem.RAddr                               Premise(F72)
	S32= IMem.RAddr={pid,addr}                                  Path(S28,S31)
	S33= IMem.Out={31,rS,rA,rB,633}                             IMem-Read(S32,S21)
	S34= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S32,S21)
	S35= IMem.Out=>IRMux.MemData                                Premise(F73)
	S36= IRMux.MemData={31,rS,rA,rB,633}                        Path(S33,S35)
	S37= IRMux.Out={31,rS,rA,rB,633}                            IRMux-Select(S36)
	S38= IRMux.Out=>IR.In                                       Premise(F77)
	S39= IR.In={31,rS,rA,rB,633}                                Path(S37,S38)
	S40= IMem.MEM8WordOut=>ICache.WData                         Premise(F78)
	S41= ICache.WData=IMemGet8Word({pid,addr})                  Path(S34,S40)
	S42= CtrlPC=0                                               Premise(F98)
	S43= CtrlPCInc=1                                            Premise(F99)
	S44= PC[Out]=addr+4                                         PC-Inc(S17,S42,S43)
	S45= CtrlICache=1                                           Premise(F102)
	S46= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S30,S41,S45)
	S47= CtrlIR=1                                               Premise(F107)
	S48= [IR]={31,rS,rA,rB,633}                                 IR-Write(S39,S47)
	S49= CtrlGPRegs=0                                           Premise(F108)
	S50= GPRegs[rS]=a                                           GPRegs-Hold(S23,S49)
	S51= GPRegs[rB]=b                                           GPRegs-Hold(S24,S49)
	S52= CtrlXERSO=0                                            Premise(F112)
	S53= XER[SO]=so                                             XER-SO-Hold(S26,S52)

ID	S54= IR.Out6_10=rS                                          IR-Out(S48)
	S55= IR.Out16_20=rB                                         IR-Out(S48)
	S56= IR.Out6_10=>GPRegs.RReg1                               Premise(F138)
	S57= GPRegs.RReg1=rS                                        Path(S54,S56)
	S58= GPRegs.Rdata1=a                                        GPRegs-Read(S57,S50)
	S59= IR.Out16_20=>GPRegs.RReg2                              Premise(F139)
	S60= GPRegs.RReg2=rB                                        Path(S55,S59)
	S61= GPRegs.Rdata2=b                                        GPRegs-Read(S60,S51)
	S62= GPRegs.Rdata1=>A.In                                    Premise(F141)
	S63= A.In=a                                                 Path(S58,S62)
	S64= GPRegs.Rdata2=>B.In                                    Premise(F142)
	S65= B.In=b                                                 Path(S61,S64)
	S66= CtrlPC=0                                               Premise(F155)
	S67= CtrlPCInc=0                                            Premise(F156)
	S68= PC[Out]=addr+4                                         PC-Hold(S44,S66,S67)
	S69= CtrlICache=0                                           Premise(F159)
	S70= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S46,S69)
	S71= CtrlIR=0                                               Premise(F164)
	S72= [IR]={31,rS,rA,rB,633}                                 IR-Hold(S48,S71)
	S73= CtrlA=1                                                Premise(F166)
	S74= [A]=a                                                  A-Write(S63,S73)
	S75= CtrlB=1                                                Premise(F167)
	S76= [B]=b                                                  B-Write(S65,S75)
	S77= CtrlXERSO=0                                            Premise(F169)
	S78= XER[SO]=so                                             XER-SO-Hold(S53,S77)

EX	S79= A.Out=a                                                A-Out(S74)
	S80= B.Out=b                                                B-Out(S76)
	S81= XER.SOOut=so                                           XER-SO-Out(S78)
	S82= A.Out=>ALU.A                                           Premise(F200)
	S83= ALU.A=a                                                Path(S79,S82)
	S84= B.Out=>ALU.B                                           Premise(F201)
	S85= ALU.B=b                                                Path(S80,S84)
	S86= ALU.Out=a^b                                            ALU(S83,S85)
	S87= ALU.CMP=Compare0(a^b)                                  ALU(S83,S85)
	S88= ALU.Out=>ALUOut.In                                     Premise(F203)
	S89= ALUOut.In=a^b                                          Path(S86,S88)
	S90= ALU.CMP=>DataCmb.A                                     Premise(F204)
	S91= DataCmb.A=Compare0(a^b)                                Path(S87,S90)
	S92= XER.SOOut=>DataCmb.B                                   Premise(F205)
	S93= DataCmb.B=so                                           Path(S81,S92)
	S94= DataCmb.Out={Compare0(a^b),so}                         DataCmb(S91,S93)
	S95= DataCmb.Out=>DR4bit.In                                 Premise(F206)
	S96= DR4bit.In={Compare0(a^b),so}                           Path(S94,S95)
	S97= CtrlPC=0                                               Premise(F212)
	S98= CtrlPCInc=0                                            Premise(F213)
	S99= PC[Out]=addr+4                                         PC-Hold(S68,S97,S98)
	S100= CtrlICache=0                                          Premise(F216)
	S101= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S70,S100)
	S102= CtrlIR=0                                              Premise(F221)
	S103= [IR]={31,rS,rA,rB,633}                                IR-Hold(S72,S102)
	S104= CtrlALUOut=1                                          Premise(F225)
	S105= [ALUOut]=a^b                                          ALUOut-Write(S89,S104)
	S106= CtrlDR4bit=1                                          Premise(F229)
	S107= [DR4bit]={Compare0(a^b),so}                           DR4bit-Write(S96,S106)

MEM	S108= CtrlPC=0                                              Premise(F269)
	S109= CtrlPCInc=0                                           Premise(F270)
	S110= PC[Out]=addr+4                                        PC-Hold(S99,S108,S109)
	S111= CtrlICache=0                                          Premise(F273)
	S112= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S101,S111)
	S113= CtrlIR=0                                              Premise(F278)
	S114= [IR]={31,rS,rA,rB,633}                                IR-Hold(S103,S113)
	S115= CtrlALUOut=0                                          Premise(F282)
	S116= [ALUOut]=a^b                                          ALUOut-Hold(S105,S115)
	S117= CtrlDR4bit=0                                          Premise(F286)
	S118= [DR4bit]={Compare0(a^b),so}                           DR4bit-Hold(S107,S117)

DMMU1	S119= CtrlPC=0                                              Premise(F326)
	S120= CtrlPCInc=0                                           Premise(F327)
	S121= PC[Out]=addr+4                                        PC-Hold(S110,S119,S120)
	S122= CtrlICache=0                                          Premise(F330)
	S123= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S112,S122)
	S124= CtrlIR=0                                              Premise(F335)
	S125= [IR]={31,rS,rA,rB,633}                                IR-Hold(S114,S124)
	S126= CtrlALUOut=0                                          Premise(F339)
	S127= [ALUOut]=a^b                                          ALUOut-Hold(S116,S126)
	S128= CtrlDR4bit=0                                          Premise(F343)
	S129= [DR4bit]={Compare0(a^b),so}                           DR4bit-Hold(S118,S128)

DMMU2	S130= CtrlPC=0                                              Premise(F383)
	S131= CtrlPCInc=0                                           Premise(F384)
	S132= PC[Out]=addr+4                                        PC-Hold(S121,S130,S131)
	S133= CtrlICache=0                                          Premise(F387)
	S134= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S123,S133)
	S135= CtrlIR=0                                              Premise(F392)
	S136= [IR]={31,rS,rA,rB,633}                                IR-Hold(S125,S135)
	S137= CtrlALUOut=0                                          Premise(F396)
	S138= [ALUOut]=a^b                                          ALUOut-Hold(S127,S137)
	S139= CtrlDR4bit=0                                          Premise(F400)
	S140= [DR4bit]={Compare0(a^b),so}                           DR4bit-Hold(S129,S139)

WB	S141= IR.Out11_15=rA                                        IR-Out(S136)
	S142= ALUOut.Out=a^b                                        ALUOut-Out(S138)
	S143= DR4bit.Out={Compare0(a^b),so}                         DR4bit-Out(S140)
	S144= IR.Out11_15=>GPRegs.WReg                              Premise(F435)
	S145= GPRegs.WReg=rA                                        Path(S141,S144)
	S146= ALUOut.Out=>GPRegs.WData                              Premise(F436)
	S147= GPRegs.WData=a^b                                      Path(S142,S146)
	S148= DR4bit.Out=>CRRegs.CR0In                              Premise(F437)
	S149= CRRegs.CR0In={Compare0(a^b),so}                       Path(S143,S148)
	S150= CtrlPC=0                                              Premise(F440)
	S151= CtrlPCInc=0                                           Premise(F441)
	S152= PC[Out]=addr+4                                        PC-Hold(S132,S150,S151)
	S153= CtrlICache=0                                          Premise(F444)
	S154= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S134,S153)
	S155= CtrlGPRegs=1                                          Premise(F450)
	S156= GPRegs[rA]=a^b                                        GPRegs-Write(S145,S147,S155)
	S157= CtrlCRRegsCR0=1                                       Premise(F459)
	S158= CRRegs[CR0]={Compare0(a^b),so}                        CRRegs-CR0-Write(S149,S157)

POST	S152= PC[Out]=addr+4                                        PC-Hold(S132,S150,S151)
	S154= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S134,S153)
	S156= GPRegs[rA]=a^b                                        GPRegs-Write(S145,S147,S155)
	S158= CRRegs[CR0]={Compare0(a^b),so}                        CRRegs-CR0-Write(S149,S157)

