
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={26,rS,rA,UIMM}                        Premise(F2)
	S3= GPRegs[rS]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F39)
	S15= CtrlPCInc=0                                            Premise(F40)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F41)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F46)
	S20= IMem[{pid,addr}]={26,rS,rA,UIMM}                       IMem-Hold(S2,S19)
	S21= CtrlGPRegs=0                                           Premise(F49)
	S22= GPRegs[rS]=a                                           GPRegs-Hold(S3,S21)
	S23= CtrlXERSO=0                                            Premise(F53)
	S24= XER[SO]=so                                             XER-SO-Hold(S4,S23)

IMMU	S25= PC.Out=addr                                            PC-Out(S16)
	S26= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S27= PC.Out=>ICache.IEA                                     Premise(F65)
	S28= ICache.IEA=addr                                        Path(S25,S27)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F70)
	S30= IMem.RAddr={pid,addr}                                  Path(S26,S29)
	S31= IMem.Out={26,rS,rA,UIMM}                               IMem-Read(S30,S20)
	S32= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S30,S20)
	S33= IMem.Out=>IRMux.MemData                                Premise(F71)
	S34= IRMux.MemData={26,rS,rA,UIMM}                          Path(S31,S33)
	S35= IRMux.Out={26,rS,rA,UIMM}                              IRMux-Select(S34)
	S36= IRMux.Out=>IR.In                                       Premise(F75)
	S37= IR.In={26,rS,rA,UIMM}                                  Path(S35,S36)
	S38= IMem.MEM8WordOut=>ICache.WData                         Premise(F76)
	S39= ICache.WData=IMemGet8Word({pid,addr})                  Path(S32,S38)
	S40= CtrlPC=0                                               Premise(F95)
	S41= CtrlPCInc=1                                            Premise(F96)
	S42= PC[Out]=addr+4                                         PC-Inc(S16,S40,S41)
	S43= CtrlICache=1                                           Premise(F99)
	S44= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S28,S39,S43)
	S45= CtrlIR=1                                               Premise(F104)
	S46= [IR]={26,rS,rA,UIMM}                                   IR-Write(S37,S45)
	S47= CtrlGPRegs=0                                           Premise(F105)
	S48= GPRegs[rS]=a                                           GPRegs-Hold(S22,S47)
	S49= CtrlXERSO=0                                            Premise(F109)
	S50= XER[SO]=so                                             XER-SO-Hold(S24,S49)

ID	S51= IR.Out6_10=rS                                          IR-Out(S46)
	S52= IR.Out16_31=UIMM                                       IR-Out(S46)
	S53= IR.Out6_10=>GPRegs.RReg1                               Premise(F135)
	S54= GPRegs.RReg1=rS                                        Path(S51,S53)
	S55= GPRegs.Rdata1=a                                        GPRegs-Read(S54,S48)
	S56= IR.Out16_31=>LIMMEXT.In                                Premise(F136)
	S57= LIMMEXT.In=UIMM                                        Path(S52,S56)
	S58= LIMMEXT.Out={16'b0,UIMM}                               LIMMEXT(S57)
	S59= GPRegs.Rdata1=>A.In                                    Premise(F137)
	S60= A.In=a                                                 Path(S55,S59)
	S61= LIMMEXT.Out=>B.In                                      Premise(F138)
	S62= B.In={16'b0,UIMM}                                      Path(S58,S61)
	S63= CtrlPC=0                                               Premise(F151)
	S64= CtrlPCInc=0                                            Premise(F152)
	S65= PC[Out]=addr+4                                         PC-Hold(S42,S63,S64)
	S66= CtrlICache=0                                           Premise(F155)
	S67= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S44,S66)
	S68= CtrlIR=0                                               Premise(F160)
	S69= [IR]={26,rS,rA,UIMM}                                   IR-Hold(S46,S68)
	S70= CtrlA=1                                                Premise(F162)
	S71= [A]=a                                                  A-Write(S60,S70)
	S72= CtrlB=1                                                Premise(F163)
	S73= [B]={16'b0,UIMM}                                       B-Write(S62,S72)
	S74= CtrlXERSO=0                                            Premise(F165)
	S75= XER[SO]=so                                             XER-SO-Hold(S50,S74)

EX	S76= A.Out=a                                                A-Out(S71)
	S77= B.Out={16'b0,UIMM}                                     B-Out(S73)
	S78= XER.SOOut=so                                           XER-SO-Out(S75)
	S79= A.Out=>ALU.A                                           Premise(F195)
	S80= ALU.A=a                                                Path(S76,S79)
	S81= B.Out=>ALU.B                                           Premise(F196)
	S82= ALU.B={16'b0,UIMM}                                     Path(S77,S81)
	S83= ALU.Out=a^{16'b0,UIMM}                                 ALU(S80,S82)
	S84= ALU.CMP=Compare0(a^{16'b0,UIMM})                       ALU(S80,S82)
	S85= ALU.Out=>ALUOut.In                                     Premise(F198)
	S86= ALUOut.In=a^{16'b0,UIMM}                               Path(S83,S85)
	S87= ALU.CMP=>DataCmb.A                                     Premise(F199)
	S88= DataCmb.A=Compare0(a^{16'b0,UIMM})                     Path(S84,S87)
	S89= XER.SOOut=>DataCmb.B                                   Premise(F200)
	S90= DataCmb.B=so                                           Path(S78,S89)
	S91= DataCmb.Out={Compare0(a^{16'b0,UIMM}),so}              DataCmb(S88,S90)
	S92= DataCmb.Out=>DR4bit.In                                 Premise(F201)
	S93= DR4bit.In={Compare0(a^{16'b0,UIMM}),so}                Path(S91,S92)
	S94= CtrlPC=0                                               Premise(F207)
	S95= CtrlPCInc=0                                            Premise(F208)
	S96= PC[Out]=addr+4                                         PC-Hold(S65,S94,S95)
	S97= CtrlICache=0                                           Premise(F211)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S67,S97)
	S99= CtrlIR=0                                               Premise(F216)
	S100= [IR]={26,rS,rA,UIMM}                                  IR-Hold(S69,S99)
	S101= CtrlALUOut=1                                          Premise(F220)
	S102= [ALUOut]=a^{16'b0,UIMM}                               ALUOut-Write(S86,S101)
	S103= CtrlDR4bit=1                                          Premise(F224)
	S104= [DR4bit]={Compare0(a^{16'b0,UIMM}),so}                DR4bit-Write(S93,S103)

MEM	S105= CtrlPC=0                                              Premise(F263)
	S106= CtrlPCInc=0                                           Premise(F264)
	S107= PC[Out]=addr+4                                        PC-Hold(S96,S105,S106)
	S108= CtrlICache=0                                          Premise(F267)
	S109= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S108)
	S110= CtrlIR=0                                              Premise(F272)
	S111= [IR]={26,rS,rA,UIMM}                                  IR-Hold(S100,S110)
	S112= CtrlALUOut=0                                          Premise(F276)
	S113= [ALUOut]=a^{16'b0,UIMM}                               ALUOut-Hold(S102,S112)
	S114= CtrlDR4bit=0                                          Premise(F280)
	S115= [DR4bit]={Compare0(a^{16'b0,UIMM}),so}                DR4bit-Hold(S104,S114)

DMMU1	S116= CtrlPC=0                                              Premise(F319)
	S117= CtrlPCInc=0                                           Premise(F320)
	S118= PC[Out]=addr+4                                        PC-Hold(S107,S116,S117)
	S119= CtrlICache=0                                          Premise(F323)
	S120= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S119)
	S121= CtrlIR=0                                              Premise(F328)
	S122= [IR]={26,rS,rA,UIMM}                                  IR-Hold(S111,S121)
	S123= CtrlALUOut=0                                          Premise(F332)
	S124= [ALUOut]=a^{16'b0,UIMM}                               ALUOut-Hold(S113,S123)
	S125= CtrlDR4bit=0                                          Premise(F336)
	S126= [DR4bit]={Compare0(a^{16'b0,UIMM}),so}                DR4bit-Hold(S115,S125)

DMMU2	S127= CtrlPC=0                                              Premise(F375)
	S128= CtrlPCInc=0                                           Premise(F376)
	S129= PC[Out]=addr+4                                        PC-Hold(S118,S127,S128)
	S130= CtrlICache=0                                          Premise(F379)
	S131= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S120,S130)
	S132= CtrlIR=0                                              Premise(F384)
	S133= [IR]={26,rS,rA,UIMM}                                  IR-Hold(S122,S132)
	S134= CtrlALUOut=0                                          Premise(F388)
	S135= [ALUOut]=a^{16'b0,UIMM}                               ALUOut-Hold(S124,S134)
	S136= CtrlDR4bit=0                                          Premise(F392)
	S137= [DR4bit]={Compare0(a^{16'b0,UIMM}),so}                DR4bit-Hold(S126,S136)

WB	S138= IR.Out11_15=rA                                        IR-Out(S133)
	S139= ALUOut.Out=a^{16'b0,UIMM}                             ALUOut-Out(S135)
	S140= DR4bit.Out={Compare0(a^{16'b0,UIMM}),so}              DR4bit-Out(S137)
	S141= IR.Out11_15=>GPRegs.WReg                              Premise(F426)
	S142= GPRegs.WReg=rA                                        Path(S138,S141)
	S143= ALUOut.Out=>GPRegs.WData                              Premise(F427)
	S144= GPRegs.WData=a^{16'b0,UIMM}                           Path(S139,S143)
	S145= DR4bit.Out=>CRRegs.CR0In                              Premise(F428)
	S146= CRRegs.CR0In={Compare0(a^{16'b0,UIMM}),so}            Path(S140,S145)
	S147= CtrlPC=0                                              Premise(F431)
	S148= CtrlPCInc=0                                           Premise(F432)
	S149= PC[Out]=addr+4                                        PC-Hold(S129,S147,S148)
	S150= CtrlICache=0                                          Premise(F435)
	S151= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S131,S150)
	S152= CtrlGPRegs=1                                          Premise(F441)
	S153= GPRegs[rA]=a^{16'b0,UIMM}                             GPRegs-Write(S142,S144,S152)
	S154= CtrlCRRegsCR0=1                                       Premise(F450)
	S155= CRRegs[CR0]={Compare0(a^{16'b0,UIMM}),so}             CRRegs-CR0-Write(S146,S154)

POST	S149= PC[Out]=addr+4                                        PC-Hold(S129,S147,S148)
	S151= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S131,S150)
	S153= GPRegs[rA]=a^{16'b0,UIMM}                             GPRegs-Write(S142,S144,S152)
	S155= CRRegs[CR0]={Compare0(a^{16'b0,UIMM}),so}             CRRegs-CR0-Write(S146,S154)

