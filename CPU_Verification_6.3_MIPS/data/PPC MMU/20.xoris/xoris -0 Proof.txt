
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={27,rS,rA,UIMM}                        Premise(F2)
	S3= ICache[addr]={27,rS,rA,UIMM}                            Premise(F3)
	S4= GPRegs[rS]=a                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F10)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={27,rS,rA,UIMM}                             ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F11)
	S19= ICacheReg.In={27,rS,rA,UIMM}                           Path(S17,S18)
	S20= CtrlPC=0                                               Premise(F40)
	S21= CtrlPCInc=0                                            Premise(F41)
	S22= PC[Out]=addr                                           PC-Hold(S1,S20,S21)
	S23= CtrlIAddrReg=1                                         Premise(F42)
	S24= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S23)
	S25= CtrlICacheReg=1                                        Premise(F45)
	S26= [ICacheReg]={27,rS,rA,UIMM}                            ICacheReg-Write(S19,S25)
	S27= CtrlIMem=0                                             Premise(F47)
	S28= IMem[{pid,addr}]={27,rS,rA,UIMM}                       IMem-Hold(S2,S27)
	S29= CtrlGPRegs=0                                           Premise(F50)
	S30= GPRegs[rS]=a                                           GPRegs-Hold(S4,S29)
	S31= CtrlXERSO=0                                            Premise(F54)
	S32= XER[SO]=so                                             XER-SO-Hold(S5,S31)

IMMU	S33= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S24)
	S34= ICacheReg.Out={27,rS,rA,UIMM}                          ICacheReg-Out(S26)
	S35= IAddrReg.Out=>IMem.RAddr                               Premise(F71)
	S36= IMem.RAddr={pid,addr}                                  Path(S33,S35)
	S37= IMem.Out={27,rS,rA,UIMM}                               IMem-Read(S36,S28)
	S38= IMem.Out=>IRMux.MemData                                Premise(F72)
	S39= IRMux.MemData={27,rS,rA,UIMM}                          Path(S37,S38)
	S40= ICacheReg.Out=>IRMux.CacheData                         Premise(F73)
	S41= IRMux.CacheData={27,rS,rA,UIMM}                        Path(S34,S40)
	S42= IRMux.Out={27,rS,rA,UIMM}                              IRMux-Select(S39,S41)
	S43= IRMux.Out=>IR.In                                       Premise(F76)
	S44= IR.In={27,rS,rA,UIMM}                                  Path(S42,S43)
	S45= CtrlPC=0                                               Premise(F96)
	S46= CtrlPCInc=1                                            Premise(F97)
	S47= PC[Out]=addr+4                                         PC-Inc(S22,S45,S46)
	S48= CtrlIR=1                                               Premise(F105)
	S49= [IR]={27,rS,rA,UIMM}                                   IR-Write(S44,S48)
	S50= CtrlGPRegs=0                                           Premise(F106)
	S51= GPRegs[rS]=a                                           GPRegs-Hold(S30,S50)
	S52= CtrlXERSO=0                                            Premise(F110)
	S53= XER[SO]=so                                             XER-SO-Hold(S32,S52)

ID	S54= IR.Out6_10=rS                                          IR-Out(S49)
	S55= IR.Out16_31=UIMM                                       IR-Out(S49)
	S56= IR.Out6_10=>GPRegs.RReg1                               Premise(F136)
	S57= GPRegs.RReg1=rS                                        Path(S54,S56)
	S58= GPRegs.Rdata1=a                                        GPRegs-Read(S57,S51)
	S59= IR.Out16_31=>IMMSEXT.In                                Premise(F137)
	S60= IMMSEXT.In=UIMM                                        Path(S55,S59)
	S61= IMMSEXT.Out={UIMM,16'b0}                               IMMSEXT(S60)
	S62= GPRegs.Rdata1=>A.In                                    Premise(F138)
	S63= A.In=a                                                 Path(S58,S62)
	S64= IMMSEXT.Out=>B.In                                      Premise(F139)
	S65= B.In={UIMM,16'b0}                                      Path(S61,S64)
	S66= CtrlPC=0                                               Premise(F152)
	S67= CtrlPCInc=0                                            Premise(F153)
	S68= PC[Out]=addr+4                                         PC-Hold(S47,S66,S67)
	S69= CtrlIR=0                                               Premise(F161)
	S70= [IR]={27,rS,rA,UIMM}                                   IR-Hold(S49,S69)
	S71= CtrlA=1                                                Premise(F163)
	S72= [A]=a                                                  A-Write(S63,S71)
	S73= CtrlB=1                                                Premise(F164)
	S74= [B]={UIMM,16'b0}                                       B-Write(S65,S73)
	S75= CtrlXERSO=0                                            Premise(F166)
	S76= XER[SO]=so                                             XER-SO-Hold(S53,S75)

EX	S77= A.Out=a                                                A-Out(S72)
	S78= B.Out={UIMM,16'b0}                                     B-Out(S74)
	S79= XER.SOOut=so                                           XER-SO-Out(S76)
	S80= A.Out=>ALU.A                                           Premise(F196)
	S81= ALU.A=a                                                Path(S77,S80)
	S82= B.Out=>ALU.B                                           Premise(F197)
	S83= ALU.B={UIMM,16'b0}                                     Path(S78,S82)
	S84= ALU.Out=a^{UIMM,16'b0}                                 ALU(S81,S83)
	S85= ALU.CMP=Compare0(a^{UIMM,16'b0})                       ALU(S81,S83)
	S86= ALU.Out=>ALUOut.In                                     Premise(F199)
	S87= ALUOut.In=a^{UIMM,16'b0}                               Path(S84,S86)
	S88= ALU.CMP=>DataCmb.A                                     Premise(F200)
	S89= DataCmb.A=Compare0(a^{UIMM,16'b0})                     Path(S85,S88)
	S90= XER.SOOut=>DataCmb.B                                   Premise(F201)
	S91= DataCmb.B=so                                           Path(S79,S90)
	S92= DataCmb.Out={Compare0(a^{UIMM,16'b0}),so}              DataCmb(S89,S91)
	S93= DataCmb.Out=>DR4bit.In                                 Premise(F202)
	S94= DR4bit.In={Compare0(a^{UIMM,16'b0}),so}                Path(S92,S93)
	S95= CtrlPC=0                                               Premise(F208)
	S96= CtrlPCInc=0                                            Premise(F209)
	S97= PC[Out]=addr+4                                         PC-Hold(S68,S95,S96)
	S98= CtrlIR=0                                               Premise(F217)
	S99= [IR]={27,rS,rA,UIMM}                                   IR-Hold(S70,S98)
	S100= CtrlALUOut=1                                          Premise(F221)
	S101= [ALUOut]=a^{UIMM,16'b0}                               ALUOut-Write(S87,S100)
	S102= CtrlDR4bit=1                                          Premise(F225)
	S103= [DR4bit]={Compare0(a^{UIMM,16'b0}),so}                DR4bit-Write(S94,S102)

MEM	S104= CtrlPC=0                                              Premise(F264)
	S105= CtrlPCInc=0                                           Premise(F265)
	S106= PC[Out]=addr+4                                        PC-Hold(S97,S104,S105)
	S107= CtrlIR=0                                              Premise(F273)
	S108= [IR]={27,rS,rA,UIMM}                                  IR-Hold(S99,S107)
	S109= CtrlALUOut=0                                          Premise(F277)
	S110= [ALUOut]=a^{UIMM,16'b0}                               ALUOut-Hold(S101,S109)
	S111= CtrlDR4bit=0                                          Premise(F281)
	S112= [DR4bit]={Compare0(a^{UIMM,16'b0}),so}                DR4bit-Hold(S103,S111)

DMMU1	S113= CtrlPC=0                                              Premise(F320)
	S114= CtrlPCInc=0                                           Premise(F321)
	S115= PC[Out]=addr+4                                        PC-Hold(S106,S113,S114)
	S116= CtrlIR=0                                              Premise(F329)
	S117= [IR]={27,rS,rA,UIMM}                                  IR-Hold(S108,S116)
	S118= CtrlALUOut=0                                          Premise(F333)
	S119= [ALUOut]=a^{UIMM,16'b0}                               ALUOut-Hold(S110,S118)
	S120= CtrlDR4bit=0                                          Premise(F337)
	S121= [DR4bit]={Compare0(a^{UIMM,16'b0}),so}                DR4bit-Hold(S112,S120)

DMMU2	S122= CtrlPC=0                                              Premise(F376)
	S123= CtrlPCInc=0                                           Premise(F377)
	S124= PC[Out]=addr+4                                        PC-Hold(S115,S122,S123)
	S125= CtrlIR=0                                              Premise(F385)
	S126= [IR]={27,rS,rA,UIMM}                                  IR-Hold(S117,S125)
	S127= CtrlALUOut=0                                          Premise(F389)
	S128= [ALUOut]=a^{UIMM,16'b0}                               ALUOut-Hold(S119,S127)
	S129= CtrlDR4bit=0                                          Premise(F393)
	S130= [DR4bit]={Compare0(a^{UIMM,16'b0}),so}                DR4bit-Hold(S121,S129)

WB	S131= IR.Out11_15=rA                                        IR-Out(S126)
	S132= ALUOut.Out=a^{UIMM,16'b0}                             ALUOut-Out(S128)
	S133= DR4bit.Out={Compare0(a^{UIMM,16'b0}),so}              DR4bit-Out(S130)
	S134= IR.Out11_15=>GPRegs.WReg                              Premise(F427)
	S135= GPRegs.WReg=rA                                        Path(S131,S134)
	S136= ALUOut.Out=>GPRegs.WData                              Premise(F428)
	S137= GPRegs.WData=a^{UIMM,16'b0}                           Path(S132,S136)
	S138= DR4bit.Out=>CRRegs.CR0In                              Premise(F429)
	S139= CRRegs.CR0In={Compare0(a^{UIMM,16'b0}),so}            Path(S133,S138)
	S140= CtrlPC=0                                              Premise(F432)
	S141= CtrlPCInc=0                                           Premise(F433)
	S142= PC[Out]=addr+4                                        PC-Hold(S124,S140,S141)
	S143= CtrlGPRegs=1                                          Premise(F442)
	S144= GPRegs[rA]=a^{UIMM,16'b0}                             GPRegs-Write(S135,S137,S143)
	S145= CtrlCRRegsCR0=1                                       Premise(F451)
	S146= CRRegs[CR0]={Compare0(a^{UIMM,16'b0}),so}             CRRegs-CR0-Write(S139,S145)

POST	S142= PC[Out]=addr+4                                        PC-Hold(S124,S140,S141)
	S144= GPRegs[rA]=a^{UIMM,16'b0}                             GPRegs-Write(S135,S137,S143)
	S146= CRRegs[CR0]={Compare0(a^{UIMM,16'b0}),so}             CRRegs-CR0-Write(S139,S145)

