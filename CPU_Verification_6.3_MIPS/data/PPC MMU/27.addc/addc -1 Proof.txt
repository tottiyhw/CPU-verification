
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,20}                       Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F38)
	S15= CtrlPCInc=0                                            Premise(F39)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F40)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F45)
	S20= IMem[{pid,addr}]={31,rT,rA,rB,20}                      IMem-Hold(S2,S19)
	S21= CtrlGPRegs=0                                           Premise(F48)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= GPRegs[rB]=b                                           GPRegs-Hold(S4,S21)

IMMU	S24= PC.Out=addr                                            PC-Out(S16)
	S25= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S26= PC.Out=>ICache.IEA                                     Premise(F60)
	S27= ICache.IEA=addr                                        Path(S24,S26)
	S28= IAddrReg.Out=>IMem.RAddr                               Premise(F65)
	S29= IMem.RAddr={pid,addr}                                  Path(S25,S28)
	S30= IMem.Out={31,rT,rA,rB,20}                              IMem-Read(S29,S20)
	S31= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S29,S20)
	S32= IMem.Out=>IRMux.MemData                                Premise(F66)
	S33= IRMux.MemData={31,rT,rA,rB,20}                         Path(S30,S32)
	S34= IRMux.Out={31,rT,rA,rB,20}                             IRMux-Select(S33)
	S35= IRMux.Out=>IR.In                                       Premise(F70)
	S36= IR.In={31,rT,rA,rB,20}                                 Path(S34,S35)
	S37= IMem.MEM8WordOut=>ICache.WData                         Premise(F71)
	S38= ICache.WData=IMemGet8Word({pid,addr})                  Path(S31,S37)
	S39= CtrlPC=0                                               Premise(F89)
	S40= CtrlPCInc=1                                            Premise(F90)
	S41= PC[Out]=addr+4                                         PC-Inc(S16,S39,S40)
	S42= CtrlICache=1                                           Premise(F93)
	S43= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S27,S38,S42)
	S44= CtrlIR=1                                               Premise(F98)
	S45= [IR]={31,rT,rA,rB,20}                                  IR-Write(S36,S44)
	S46= CtrlGPRegs=0                                           Premise(F99)
	S47= GPRegs[rA]=a                                           GPRegs-Hold(S22,S46)
	S48= GPRegs[rB]=b                                           GPRegs-Hold(S23,S46)

ID	S49= IR.Out11_15=rA                                         IR-Out(S45)
	S50= IR.Out16_20=rB                                         IR-Out(S45)
	S51= IR.Out11_15=>GPRegs.RReg1                              Premise(F125)
	S52= GPRegs.RReg1=rA                                        Path(S49,S51)
	S53= GPRegs.Rdata1=a                                        GPRegs-Read(S52,S47)
	S54= IR.Out16_20=>GPRegs.RReg2                              Premise(F126)
	S55= GPRegs.RReg2=rB                                        Path(S50,S54)
	S56= GPRegs.Rdata2=b                                        GPRegs-Read(S55,S48)
	S57= GPRegs.Rdata1=>A.In                                    Premise(F128)
	S58= A.In=a                                                 Path(S53,S57)
	S59= GPRegs.Rdata2=>B.In                                    Premise(F129)
	S60= B.In=b                                                 Path(S56,S59)
	S61= CtrlPC=0                                               Premise(F140)
	S62= CtrlPCInc=0                                            Premise(F141)
	S63= PC[Out]=addr+4                                         PC-Hold(S41,S61,S62)
	S64= CtrlICache=0                                           Premise(F144)
	S65= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S43,S64)
	S66= CtrlIR=0                                               Premise(F149)
	S67= [IR]={31,rT,rA,rB,20}                                  IR-Hold(S45,S66)
	S68= CtrlA=1                                                Premise(F151)
	S69= [A]=a                                                  A-Write(S58,S68)
	S70= CtrlB=1                                                Premise(F152)
	S71= [B]=b                                                  B-Write(S60,S70)

EX	S72= A.Out=a                                                A-Out(S69)
	S73= B.Out=b                                                B-Out(S71)
	S74= A.Out=>ALU.A                                           Premise(F181)
	S75= ALU.A=a                                                Path(S72,S74)
	S76= B.Out=>ALU.B                                           Premise(F182)
	S77= ALU.B=b                                                Path(S73,S76)
	S78= ALU.Out=a+b                                            ALU(S75,S77)
	S79= ALU.CA=Carry(a+b)                                      ALU(S75,S77)
	S80= ALU.Out=>ALUOut.In                                     Premise(F184)
	S81= ALUOut.In=a+b                                          Path(S78,S80)
	S82= ALU.CA=>CAReg.In                                       Premise(F185)
	S83= CAReg.In=Carry(a+b)                                    Path(S79,S82)
	S84= CtrlPC=0                                               Premise(F191)
	S85= CtrlPCInc=0                                            Premise(F192)
	S86= PC[Out]=addr+4                                         PC-Hold(S63,S84,S85)
	S87= CtrlICache=0                                           Premise(F195)
	S88= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S65,S87)
	S89= CtrlIR=0                                               Premise(F200)
	S90= [IR]={31,rT,rA,rB,20}                                  IR-Hold(S67,S89)
	S91= CtrlALUOut=1                                           Premise(F204)
	S92= [ALUOut]=a+b                                           ALUOut-Write(S81,S91)
	S93= CtrlCAReg=1                                            Premise(F205)
	S94= [CAReg]=Carry(a+b)                                     CAReg-Write(S83,S93)

MEM	S95= CtrlPC=0                                               Premise(F242)
	S96= CtrlPCInc=0                                            Premise(F243)
	S97= PC[Out]=addr+4                                         PC-Hold(S86,S95,S96)
	S98= CtrlICache=0                                           Premise(F246)
	S99= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S88,S98)
	S100= CtrlIR=0                                              Premise(F251)
	S101= [IR]={31,rT,rA,rB,20}                                 IR-Hold(S90,S100)
	S102= CtrlALUOut=0                                          Premise(F255)
	S103= [ALUOut]=a+b                                          ALUOut-Hold(S92,S102)
	S104= CtrlCAReg=0                                           Premise(F256)
	S105= [CAReg]=Carry(a+b)                                    CAReg-Hold(S94,S104)

DMMU1	S106= CtrlPC=0                                              Premise(F293)
	S107= CtrlPCInc=0                                           Premise(F294)
	S108= PC[Out]=addr+4                                        PC-Hold(S97,S106,S107)
	S109= CtrlICache=0                                          Premise(F297)
	S110= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S99,S109)
	S111= CtrlIR=0                                              Premise(F302)
	S112= [IR]={31,rT,rA,rB,20}                                 IR-Hold(S101,S111)
	S113= CtrlALUOut=0                                          Premise(F306)
	S114= [ALUOut]=a+b                                          ALUOut-Hold(S103,S113)
	S115= CtrlCAReg=0                                           Premise(F307)
	S116= [CAReg]=Carry(a+b)                                    CAReg-Hold(S105,S115)

DMMU2	S117= CtrlPC=0                                              Premise(F344)
	S118= CtrlPCInc=0                                           Premise(F345)
	S119= PC[Out]=addr+4                                        PC-Hold(S108,S117,S118)
	S120= CtrlICache=0                                          Premise(F348)
	S121= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S110,S120)
	S122= CtrlIR=0                                              Premise(F353)
	S123= [IR]={31,rT,rA,rB,20}                                 IR-Hold(S112,S122)
	S124= CtrlALUOut=0                                          Premise(F357)
	S125= [ALUOut]=a+b                                          ALUOut-Hold(S114,S124)
	S126= CtrlCAReg=0                                           Premise(F358)
	S127= [CAReg]=Carry(a+b)                                    CAReg-Hold(S116,S126)

WB	S128= IR.Out6_10=rT                                         IR-Out(S123)
	S129= ALUOut.Out=a+b                                        ALUOut-Out(S125)
	S130= CAReg.Out=Carry(a+b)                                  CAReg-Out(S127)
	S131= IR.Out6_10=>GPRegs.WReg                               Premise(F390)
	S132= GPRegs.WReg=rT                                        Path(S128,S131)
	S133= ALUOut.Out=>GPRegs.WData                              Premise(F391)
	S134= GPRegs.WData=a+b                                      Path(S129,S133)
	S135= CAReg.Out=>XER.CAIn                                   Premise(F392)
	S136= XER.CAIn=Carry(a+b)                                   Path(S130,S135)
	S137= CtrlPC=0                                              Premise(F395)
	S138= CtrlPCInc=0                                           Premise(F396)
	S139= PC[Out]=addr+4                                        PC-Hold(S119,S137,S138)
	S140= CtrlICache=0                                          Premise(F399)
	S141= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S121,S140)
	S142= CtrlGPRegs=1                                          Premise(F405)
	S143= GPRegs[rT]=a+b                                        GPRegs-Write(S132,S134,S142)
	S144= CtrlXERCA=1                                           Premise(F412)
	S145= XER[CA]=Carry(a+b)                                    XER-CA-Write(S136,S144)

POST	S139= PC[Out]=addr+4                                        PC-Hold(S119,S137,S138)
	S141= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S121,S140)
	S143= GPRegs[rT]=a+b                                        GPRegs-Write(S132,S134,S142)
	S145= XER[CA]=Carry(a+b)                                    XER-CA-Write(S136,S144)

