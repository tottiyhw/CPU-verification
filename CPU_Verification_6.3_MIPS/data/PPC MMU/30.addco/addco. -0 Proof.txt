
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,1045}                     Premise(F2)
	S3= ICache[addr]={31,rT,rA,rB,1045}                         Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)
	S6= XER[SO]=so                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= PC.Out=>ICache.IEA                                     Premise(F11)
	S17= ICache.IEA=addr                                        Path(S8,S16)
	S18= ICache.Out={31,rT,rA,rB,1045}                          ICache-Search(S17,S3)
	S19= ICache.Out=>ICacheReg.In                               Premise(F12)
	S20= ICacheReg.In={31,rT,rA,rB,1045}                        Path(S18,S19)
	S21= CtrlPC=0                                               Premise(F50)
	S22= CtrlPCInc=0                                            Premise(F51)
	S23= PC[Out]=addr                                           PC-Hold(S1,S21,S22)
	S24= CtrlIAddrReg=1                                         Premise(F52)
	S25= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S24)
	S26= CtrlICacheReg=1                                        Premise(F55)
	S27= [ICacheReg]={31,rT,rA,rB,1045}                         ICacheReg-Write(S20,S26)
	S28= CtrlIMem=0                                             Premise(F57)
	S29= IMem[{pid,addr}]={31,rT,rA,rB,1045}                    IMem-Hold(S2,S28)
	S30= CtrlGPRegs=0                                           Premise(F60)
	S31= GPRegs[rA]=a                                           GPRegs-Hold(S4,S30)
	S32= GPRegs[rB]=b                                           GPRegs-Hold(S5,S30)
	S33= CtrlXERSO=0                                            Premise(F66)
	S34= XER[SO]=so                                             XER-SO-Hold(S6,S33)

IMMU	S35= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S25)
	S36= ICacheReg.Out={31,rT,rA,rB,1045}                       ICacheReg-Out(S27)
	S37= IAddrReg.Out=>IMem.RAddr                               Premise(F84)
	S38= IMem.RAddr={pid,addr}                                  Path(S35,S37)
	S39= IMem.Out={31,rT,rA,rB,1045}                            IMem-Read(S38,S29)
	S40= IMem.Out=>IRMux.MemData                                Premise(F85)
	S41= IRMux.MemData={31,rT,rA,rB,1045}                       Path(S39,S40)
	S42= ICacheReg.Out=>IRMux.CacheData                         Premise(F86)
	S43= IRMux.CacheData={31,rT,rA,rB,1045}                     Path(S36,S42)
	S44= IRMux.Out={31,rT,rA,rB,1045}                           IRMux-Select(S41,S43)
	S45= IRMux.Out=>IR.In                                       Premise(F89)
	S46= IR.In={31,rT,rA,rB,1045}                               Path(S44,S45)
	S47= CtrlPC=0                                               Premise(F118)
	S48= CtrlPCInc=1                                            Premise(F119)
	S49= PC[Out]=addr+4                                         PC-Inc(S23,S47,S48)
	S50= CtrlIR=1                                               Premise(F127)
	S51= [IR]={31,rT,rA,rB,1045}                                IR-Write(S46,S50)
	S52= CtrlGPRegs=0                                           Premise(F128)
	S53= GPRegs[rA]=a                                           GPRegs-Hold(S31,S52)
	S54= GPRegs[rB]=b                                           GPRegs-Hold(S32,S52)
	S55= CtrlXERSO=0                                            Premise(F134)
	S56= XER[SO]=so                                             XER-SO-Hold(S34,S55)

ID	S57= IR.Out11_15=rA                                         IR-Out(S51)
	S58= IR.Out16_20=rB                                         IR-Out(S51)
	S59= IR.Out11_15=>GPRegs.RReg1                              Premise(F161)
	S60= GPRegs.RReg1=rA                                        Path(S57,S59)
	S61= GPRegs.Rdata1=a                                        GPRegs-Read(S60,S53)
	S62= IR.Out16_20=>GPRegs.RReg2                              Premise(F162)
	S63= GPRegs.RReg2=rB                                        Path(S58,S62)
	S64= GPRegs.Rdata2=b                                        GPRegs-Read(S63,S54)
	S65= GPRegs.Rdata1=>A.In                                    Premise(F164)
	S66= A.In=a                                                 Path(S61,S65)
	S67= GPRegs.Rdata2=>B.In                                    Premise(F165)
	S68= B.In=b                                                 Path(S64,S67)
	S69= CtrlPC=0                                               Premise(F186)
	S70= CtrlPCInc=0                                            Premise(F187)
	S71= PC[Out]=addr+4                                         PC-Hold(S49,S69,S70)
	S72= CtrlIR=0                                               Premise(F195)
	S73= [IR]={31,rT,rA,rB,1045}                                IR-Hold(S51,S72)
	S74= CtrlA=1                                                Premise(F197)
	S75= [A]=a                                                  A-Write(S66,S74)
	S76= CtrlB=1                                                Premise(F198)
	S77= [B]=b                                                  B-Write(S68,S76)
	S78= CtrlXERSO=0                                            Premise(F202)
	S79= XER[SO]=so                                             XER-SO-Hold(S56,S78)

EX	S80= A.Out=a                                                A-Out(S75)
	S81= B.Out=b                                                B-Out(S77)
	S82= XER.SOOut=so                                           XER-SO-Out(S79)
	S83= A.Out=>ALU.A                                           Premise(F234)
	S84= ALU.A=a                                                Path(S80,S83)
	S85= B.Out=>ALU.B                                           Premise(F235)
	S86= ALU.B=b                                                Path(S81,S85)
	S87= ALU.Out=a+b                                            ALU(S84,S86)
	S88= ALU.CMP=Compare0(a+b)                                  ALU(S84,S86)
	S89= ALU.OV=OverFlow(a+b)                                   ALU(S84,S86)
	S90= ALU.CA=Carry(a+b)                                      ALU(S84,S86)
	S91= ALU.Out=>ALUOut.In                                     Premise(F237)
	S92= ALUOut.In=a+b                                          Path(S87,S91)
	S93= ALU.CA=>CAReg.In                                       Premise(F238)
	S94= CAReg.In=Carry(a+b)                                    Path(S90,S93)
	S95= ALU.CMP=>DataCmb.A                                     Premise(F239)
	S96= DataCmb.A=Compare0(a+b)                                Path(S88,S95)
	S97= ORGate.Out=>DataCmb.B                                  Premise(F240)
	S98= ALU.OV=>OVReg.In                                       Premise(F241)
	S99= OVReg.In=OverFlow(a+b)                                 Path(S89,S98)
	S100= XER.SOOut=>ORGate.A                                   Premise(F242)
	S101= ORGate.A=so                                           Path(S82,S100)
	S102= ALU.OV=>ORGate.B                                      Premise(F243)
	S103= ORGate.B=OverFlow(a+b)                                Path(S89,S102)
	S104= ORGate.Out=so|OverFlow(a+b)                           ORGate(S101,S103)
	S105= DataCmb.B=so|OverFlow(a+b)                            Path(S104,S97)
	S106= DataCmb.Out={Compare0(a+b),so|OverFlow(a+b)}          DataCmb(S96,S105)
	S107= ORGate.Out=>DR1bit.In                                 Premise(F244)
	S108= DR1bit.In=so|OverFlow(a+b)                            Path(S104,S107)
	S109= DataCmb.Out=>DR4bit.In                                Premise(F245)
	S110= DR4bit.In={Compare0(a+b),so|OverFlow(a+b)}            Path(S106,S109)
	S111= CtrlPC=0                                              Premise(F254)
	S112= CtrlPCInc=0                                           Premise(F255)
	S113= PC[Out]=addr+4                                        PC-Hold(S71,S111,S112)
	S114= CtrlIR=0                                              Premise(F263)
	S115= [IR]={31,rT,rA,rB,1045}                               IR-Hold(S73,S114)
	S116= CtrlALUOut=1                                          Premise(F267)
	S117= [ALUOut]=a+b                                          ALUOut-Write(S92,S116)
	S118= CtrlCAReg=1                                           Premise(F268)
	S119= [CAReg]=Carry(a+b)                                    CAReg-Write(S94,S118)
	S120= CtrlOVReg=1                                           Premise(F269)
	S121= [OVReg]=OverFlow(a+b)                                 OVReg-Write(S99,S120)
	S122= CtrlDR1bit=1                                          Premise(F273)
	S123= [DR1bit]=so|OverFlow(a+b)                             DR1bit-Write(S108,S122)
	S124= CtrlDR4bit=1                                          Premise(F274)
	S125= [DR4bit]={Compare0(a+b),so|OverFlow(a+b)}             DR4bit-Write(S110,S124)

MEM	S126= CtrlPC=0                                              Premise(F322)
	S127= CtrlPCInc=0                                           Premise(F323)
	S128= PC[Out]=addr+4                                        PC-Hold(S113,S126,S127)
	S129= CtrlIR=0                                              Premise(F331)
	S130= [IR]={31,rT,rA,rB,1045}                               IR-Hold(S115,S129)
	S131= CtrlALUOut=0                                          Premise(F335)
	S132= [ALUOut]=a+b                                          ALUOut-Hold(S117,S131)
	S133= CtrlCAReg=0                                           Premise(F336)
	S134= [CAReg]=Carry(a+b)                                    CAReg-Hold(S119,S133)
	S135= CtrlOVReg=0                                           Premise(F337)
	S136= [OVReg]=OverFlow(a+b)                                 OVReg-Hold(S121,S135)
	S137= CtrlDR1bit=0                                          Premise(F341)
	S138= [DR1bit]=so|OverFlow(a+b)                             DR1bit-Hold(S123,S137)
	S139= CtrlDR4bit=0                                          Premise(F342)
	S140= [DR4bit]={Compare0(a+b),so|OverFlow(a+b)}             DR4bit-Hold(S125,S139)

DMMU1	S141= CtrlPC=0                                              Premise(F390)
	S142= CtrlPCInc=0                                           Premise(F391)
	S143= PC[Out]=addr+4                                        PC-Hold(S128,S141,S142)
	S144= CtrlIR=0                                              Premise(F399)
	S145= [IR]={31,rT,rA,rB,1045}                               IR-Hold(S130,S144)
	S146= CtrlALUOut=0                                          Premise(F403)
	S147= [ALUOut]=a+b                                          ALUOut-Hold(S132,S146)
	S148= CtrlCAReg=0                                           Premise(F404)
	S149= [CAReg]=Carry(a+b)                                    CAReg-Hold(S134,S148)
	S150= CtrlOVReg=0                                           Premise(F405)
	S151= [OVReg]=OverFlow(a+b)                                 OVReg-Hold(S136,S150)
	S152= CtrlDR1bit=0                                          Premise(F409)
	S153= [DR1bit]=so|OverFlow(a+b)                             DR1bit-Hold(S138,S152)
	S154= CtrlDR4bit=0                                          Premise(F410)
	S155= [DR4bit]={Compare0(a+b),so|OverFlow(a+b)}             DR4bit-Hold(S140,S154)

DMMU2	S156= CtrlPC=0                                              Premise(F458)
	S157= CtrlPCInc=0                                           Premise(F459)
	S158= PC[Out]=addr+4                                        PC-Hold(S143,S156,S157)
	S159= CtrlIR=0                                              Premise(F467)
	S160= [IR]={31,rT,rA,rB,1045}                               IR-Hold(S145,S159)
	S161= CtrlALUOut=0                                          Premise(F471)
	S162= [ALUOut]=a+b                                          ALUOut-Hold(S147,S161)
	S163= CtrlCAReg=0                                           Premise(F472)
	S164= [CAReg]=Carry(a+b)                                    CAReg-Hold(S149,S163)
	S165= CtrlOVReg=0                                           Premise(F473)
	S166= [OVReg]=OverFlow(a+b)                                 OVReg-Hold(S151,S165)
	S167= CtrlDR1bit=0                                          Premise(F477)
	S168= [DR1bit]=so|OverFlow(a+b)                             DR1bit-Hold(S153,S167)
	S169= CtrlDR4bit=0                                          Premise(F478)
	S170= [DR4bit]={Compare0(a+b),so|OverFlow(a+b)}             DR4bit-Hold(S155,S169)

WB	S171= IR.Out6_10=rT                                         IR-Out(S160)
	S172= ALUOut.Out=a+b                                        ALUOut-Out(S162)
	S173= CAReg.Out=Carry(a+b)                                  CAReg-Out(S164)
	S174= OVReg.Out=OverFlow(a+b)                               OVReg-Out(S166)
	S175= DR1bit.Out=so|OverFlow(a+b)                           DR1bit-Out(S168)
	S176= DR4bit.Out={Compare0(a+b),so|OverFlow(a+b)}           DR4bit-Out(S170)
	S177= IR.Out6_10=>GPRegs.WReg                               Premise(F518)
	S178= GPRegs.WReg=rT                                        Path(S171,S177)
	S179= ALUOut.Out=>GPRegs.WData                              Premise(F519)
	S180= GPRegs.WData=a+b                                      Path(S172,S179)
	S181= DR4bit.Out=>CRRegs.CR0In                              Premise(F520)
	S182= CRRegs.CR0In={Compare0(a+b),so|OverFlow(a+b)}         Path(S176,S181)
	S183= DR1bit.Out=>XER.SOIn                                  Premise(F521)
	S184= XER.SOIn=so|OverFlow(a+b)                             Path(S175,S183)
	S185= CAReg.Out=>XER.CAIn                                   Premise(F522)
	S186= XER.CAIn=Carry(a+b)                                   Path(S173,S185)
	S187= OVReg.Out=>XER.OVIn                                   Premise(F523)
	S188= XER.OVIn=OverFlow(a+b)                                Path(S174,S187)
	S189= CtrlPC=0                                              Premise(F526)
	S190= CtrlPCInc=0                                           Premise(F527)
	S191= PC[Out]=addr+4                                        PC-Hold(S158,S189,S190)
	S192= CtrlGPRegs=1                                          Premise(F536)
	S193= GPRegs[rT]=a+b                                        GPRegs-Write(S178,S180,S192)
	S194= CtrlXERSO=1                                           Premise(F542)
	S195= XER[SO]=so|OverFlow(a+b)                              XER-SO-Write(S184,S194)
	S196= CtrlXEROV=1                                           Premise(F543)
	S197= XER[OV]=OverFlow(a+b)                                 XER-OV-Write(S188,S196)
	S198= CtrlXERCA=1                                           Premise(F544)
	S199= XER[CA]=Carry(a+b)                                    XER-CA-Write(S186,S198)
	S200= CtrlCRRegsCR0=1                                       Premise(F548)
	S201= CRRegs[CR0]={Compare0(a+b),so|OverFlow(a+b)}          CRRegs-CR0-Write(S182,S200)

POST	S191= PC[Out]=addr+4                                        PC-Hold(S158,S189,S190)
	S193= GPRegs[rT]=a+b                                        GPRegs-Write(S178,S180,S192)
	S195= XER[SO]=so|OverFlow(a+b)                              XER-SO-Write(S184,S194)
	S197= XER[OV]=OverFlow(a+b)                                 XER-OV-Write(S188,S196)
	S199= XER[CA]=Carry(a+b)                                    XER-CA-Write(S186,S198)
	S201= CRRegs[CR0]={Compare0(a+b),so|OverFlow(a+b)}          CRRegs-CR0-Write(S182,S200)

