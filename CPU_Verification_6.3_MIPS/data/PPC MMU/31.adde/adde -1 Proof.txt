
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,276}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[CA]=ca                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F40)
	S16= CtrlPCInc=0                                            Premise(F41)
	S17= PC[Out]=addr                                           PC-Hold(S1,S15,S16)
	S18= CtrlIAddrReg=1                                         Premise(F42)
	S19= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S18)
	S20= CtrlIMem=0                                             Premise(F47)
	S21= IMem[{pid,addr}]={31,rT,rA,rB,276}                     IMem-Hold(S2,S20)
	S22= CtrlGPRegs=0                                           Premise(F50)
	S23= GPRegs[rA]=a                                           GPRegs-Hold(S3,S22)
	S24= GPRegs[rB]=b                                           GPRegs-Hold(S4,S22)
	S25= CtrlXERCA=0                                            Premise(F55)
	S26= XER[CA]=ca                                             XER-CA-Hold(S5,S25)

IMMU	S27= PC.Out=addr                                            PC-Out(S17)
	S28= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S19)
	S29= PC.Out=>ICache.IEA                                     Premise(F62)
	S30= ICache.IEA=addr                                        Path(S27,S29)
	S31= IAddrReg.Out=>IMem.RAddr                               Premise(F67)
	S32= IMem.RAddr={pid,addr}                                  Path(S28,S31)
	S33= IMem.Out={31,rT,rA,rB,276}                             IMem-Read(S32,S21)
	S34= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S32,S21)
	S35= IMem.Out=>IRMux.MemData                                Premise(F68)
	S36= IRMux.MemData={31,rT,rA,rB,276}                        Path(S33,S35)
	S37= IRMux.Out={31,rT,rA,rB,276}                            IRMux-Select(S36)
	S38= IRMux.Out=>IR.In                                       Premise(F72)
	S39= IR.In={31,rT,rA,rB,276}                                Path(S37,S38)
	S40= IMem.MEM8WordOut=>ICache.WData                         Premise(F73)
	S41= ICache.WData=IMemGet8Word({pid,addr})                  Path(S34,S40)
	S42= CtrlPC=0                                               Premise(F92)
	S43= CtrlPCInc=1                                            Premise(F93)
	S44= PC[Out]=addr+4                                         PC-Inc(S17,S42,S43)
	S45= CtrlICache=1                                           Premise(F96)
	S46= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S30,S41,S45)
	S47= CtrlIR=1                                               Premise(F101)
	S48= [IR]={31,rT,rA,rB,276}                                 IR-Write(S39,S47)
	S49= CtrlGPRegs=0                                           Premise(F102)
	S50= GPRegs[rA]=a                                           GPRegs-Hold(S23,S49)
	S51= GPRegs[rB]=b                                           GPRegs-Hold(S24,S49)
	S52= CtrlXERCA=0                                            Premise(F107)
	S53= XER[CA]=ca                                             XER-CA-Hold(S26,S52)

ID	S54= IR.Out11_15=rA                                         IR-Out(S48)
	S55= IR.Out16_20=rB                                         IR-Out(S48)
	S56= IR.Out11_15=>GPRegs.RReg1                              Premise(F128)
	S57= GPRegs.RReg1=rA                                        Path(S54,S56)
	S58= GPRegs.Rdata1=a                                        GPRegs-Read(S57,S50)
	S59= IR.Out16_20=>GPRegs.RReg2                              Premise(F129)
	S60= GPRegs.RReg2=rB                                        Path(S55,S59)
	S61= GPRegs.Rdata2=b                                        GPRegs-Read(S60,S51)
	S62= GPRegs.Rdata1=>A.In                                    Premise(F131)
	S63= A.In=a                                                 Path(S58,S62)
	S64= GPRegs.Rdata2=>B.In                                    Premise(F132)
	S65= B.In=b                                                 Path(S61,S64)
	S66= CtrlPC=0                                               Premise(F144)
	S67= CtrlPCInc=0                                            Premise(F145)
	S68= PC[Out]=addr+4                                         PC-Hold(S44,S66,S67)
	S69= CtrlICache=0                                           Premise(F148)
	S70= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S46,S69)
	S71= CtrlIR=0                                               Premise(F153)
	S72= [IR]={31,rT,rA,rB,276}                                 IR-Hold(S48,S71)
	S73= CtrlA=1                                                Premise(F155)
	S74= [A]=a                                                  A-Write(S63,S73)
	S75= CtrlB=1                                                Premise(F156)
	S76= [B]=b                                                  B-Write(S65,S75)
	S77= CtrlXERCA=0                                            Premise(F159)
	S78= XER[CA]=ca                                             XER-CA-Hold(S53,S77)

EX	S79= A.Out=a                                                A-Out(S74)
	S80= B.Out=b                                                B-Out(S76)
	S81= XER.CAOut=ca                                           XER-CA-Out(S78)
	S82= A.Out=>ALU.A                                           Premise(F185)
	S83= ALU.A=a                                                Path(S79,S82)
	S84= B.Out=>ALU.B                                           Premise(F186)
	S85= ALU.B=b                                                Path(S80,S84)
	S86= XER.CAOut=>ALU.CAIn                                    Premise(F187)
	S87= ALU.CAIn=ca                                            Path(S81,S86)
	S88= ALU.Out=a+b+ca                                         ALU(S83,S85,S87)
	S89= ALU.CA=Carry(a+b+ca)                                   ALU(S83,S85,S87)
	S90= ALU.Out=>ALUOut.In                                     Premise(F189)
	S91= ALUOut.In=a+b+ca                                       Path(S88,S90)
	S92= ALU.CA=>CAReg.In                                       Premise(F190)
	S93= CAReg.In=Carry(a+b+ca)                                 Path(S89,S92)
	S94= CtrlPC=0                                               Premise(F196)
	S95= CtrlPCInc=0                                            Premise(F197)
	S96= PC[Out]=addr+4                                         PC-Hold(S68,S94,S95)
	S97= CtrlICache=0                                           Premise(F200)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S70,S97)
	S99= CtrlIR=0                                               Premise(F205)
	S100= [IR]={31,rT,rA,rB,276}                                IR-Hold(S72,S99)
	S101= CtrlALUOut=1                                          Premise(F212)
	S102= [ALUOut]=a+b+ca                                       ALUOut-Write(S91,S101)
	S103= CtrlCAReg=1                                           Premise(F213)
	S104= [CAReg]=Carry(a+b+ca)                                 CAReg-Write(S93,S103)

MEM	S105= CtrlPC=0                                              Premise(F248)
	S106= CtrlPCInc=0                                           Premise(F249)
	S107= PC[Out]=addr+4                                        PC-Hold(S96,S105,S106)
	S108= CtrlICache=0                                          Premise(F252)
	S109= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S108)
	S110= CtrlIR=0                                              Premise(F257)
	S111= [IR]={31,rT,rA,rB,276}                                IR-Hold(S100,S110)
	S112= CtrlALUOut=0                                          Premise(F264)
	S113= [ALUOut]=a+b+ca                                       ALUOut-Hold(S102,S112)
	S114= CtrlCAReg=0                                           Premise(F265)
	S115= [CAReg]=Carry(a+b+ca)                                 CAReg-Hold(S104,S114)

DMMU1	S116= CtrlPC=0                                              Premise(F300)
	S117= CtrlPCInc=0                                           Premise(F301)
	S118= PC[Out]=addr+4                                        PC-Hold(S107,S116,S117)
	S119= CtrlICache=0                                          Premise(F304)
	S120= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S119)
	S121= CtrlIR=0                                              Premise(F309)
	S122= [IR]={31,rT,rA,rB,276}                                IR-Hold(S111,S121)
	S123= CtrlALUOut=0                                          Premise(F316)
	S124= [ALUOut]=a+b+ca                                       ALUOut-Hold(S113,S123)
	S125= CtrlCAReg=0                                           Premise(F317)
	S126= [CAReg]=Carry(a+b+ca)                                 CAReg-Hold(S115,S125)

DMMU2	S127= CtrlPC=0                                              Premise(F352)
	S128= CtrlPCInc=0                                           Premise(F353)
	S129= PC[Out]=addr+4                                        PC-Hold(S118,S127,S128)
	S130= CtrlICache=0                                          Premise(F356)
	S131= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S120,S130)
	S132= CtrlIR=0                                              Premise(F361)
	S133= [IR]={31,rT,rA,rB,276}                                IR-Hold(S122,S132)
	S134= CtrlALUOut=0                                          Premise(F368)
	S135= [ALUOut]=a+b+ca                                       ALUOut-Hold(S124,S134)
	S136= CtrlCAReg=0                                           Premise(F369)
	S137= [CAReg]=Carry(a+b+ca)                                 CAReg-Hold(S126,S136)

WB	S138= IR.Out6_10=rT                                         IR-Out(S133)
	S139= ALUOut.Out=a+b+ca                                     ALUOut-Out(S135)
	S140= CAReg.Out=Carry(a+b+ca)                               CAReg-Out(S137)
	S141= IR.Out6_10=>GPRegs.WReg                               Premise(F399)
	S142= GPRegs.WReg=rT                                        Path(S138,S141)
	S143= ALUOut.Out=>GPRegs.WData                              Premise(F400)
	S144= GPRegs.WData=a+b+ca                                   Path(S139,S143)
	S145= CAReg.Out=>XER.CAIn                                   Premise(F401)
	S146= XER.CAIn=Carry(a+b+ca)                                Path(S140,S145)
	S147= CtrlPC=0                                              Premise(F404)
	S148= CtrlPCInc=0                                           Premise(F405)
	S149= PC[Out]=addr+4                                        PC-Hold(S129,S147,S148)
	S150= CtrlICache=0                                          Premise(F408)
	S151= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S131,S150)
	S152= CtrlGPRegs=1                                          Premise(F414)
	S153= GPRegs[rT]=a+b+ca                                     GPRegs-Write(S142,S144,S152)
	S154= CtrlXERCA=1                                           Premise(F419)
	S155= XER[CA]=Carry(a+b+ca)                                 XER-CA-Write(S146,S154)

POST	S149= PC[Out]=addr+4                                        PC-Hold(S129,S147,S148)
	S151= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S131,S150)
	S153= GPRegs[rT]=a+b+ca                                     GPRegs-Write(S142,S144,S152)
	S155= XER[CA]=Carry(a+b+ca)                                 XER-CA-Write(S146,S154)

