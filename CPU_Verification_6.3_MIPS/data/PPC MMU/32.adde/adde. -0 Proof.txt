
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,277}                      Premise(F2)
	S3= ICache[addr]={31,rT,rA,rB,277}                          Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)
	S6= XER[SO]=so                                              Premise(F6)
	S7= XER[CA]=ca                                              Premise(F7)

IF	S8= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S9= PC.Out=addr                                             PC-Out(S1)
	S10= PIDReg.Out=>IMMU.PID                                   Premise(F8)
	S11= IMMU.PID=pid                                           Path(S8,S10)
	S12= PC.Out=>IMMU.IEA                                       Premise(F9)
	S13= IMMU.IEA=addr                                          Path(S9,S12)
	S14= IMMU.Addr={pid,addr}                                   IMMU-Search(S11,S13)
	S15= IMMU.Addr=>IAddrReg.In                                 Premise(F10)
	S16= IAddrReg.In={pid,addr}                                 Path(S14,S15)
	S17= PC.Out=>ICache.IEA                                     Premise(F12)
	S18= ICache.IEA=addr                                        Path(S9,S17)
	S19= ICache.Out={31,rT,rA,rB,277}                           ICache-Search(S18,S3)
	S20= ICache.Out=>ICacheReg.In                               Premise(F13)
	S21= ICacheReg.In={31,rT,rA,rB,277}                         Path(S19,S20)
	S22= CtrlPC=0                                               Premise(F46)
	S23= CtrlPCInc=0                                            Premise(F47)
	S24= PC[Out]=addr                                           PC-Hold(S1,S22,S23)
	S25= CtrlIAddrReg=1                                         Premise(F48)
	S26= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S16,S25)
	S27= CtrlICacheReg=1                                        Premise(F51)
	S28= [ICacheReg]={31,rT,rA,rB,277}                          ICacheReg-Write(S21,S27)
	S29= CtrlIMem=0                                             Premise(F53)
	S30= IMem[{pid,addr}]={31,rT,rA,rB,277}                     IMem-Hold(S2,S29)
	S31= CtrlGPRegs=0                                           Premise(F56)
	S32= GPRegs[rA]=a                                           GPRegs-Hold(S4,S31)
	S33= GPRegs[rB]=b                                           GPRegs-Hold(S5,S31)
	S34= CtrlXERSO=0                                            Premise(F59)
	S35= XER[SO]=so                                             XER-SO-Hold(S6,S34)
	S36= CtrlXERCA=0                                            Premise(F61)
	S37= XER[CA]=ca                                             XER-CA-Hold(S7,S36)

IMMU	S38= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S26)
	S39= ICacheReg.Out={31,rT,rA,rB,277}                        ICacheReg-Out(S28)
	S40= IAddrReg.Out=>IMem.RAddr                               Premise(F78)
	S41= IMem.RAddr={pid,addr}                                  Path(S38,S40)
	S42= IMem.Out={31,rT,rA,rB,277}                             IMem-Read(S41,S30)
	S43= IMem.Out=>IRMux.MemData                                Premise(F79)
	S44= IRMux.MemData={31,rT,rA,rB,277}                        Path(S42,S43)
	S45= ICacheReg.Out=>IRMux.CacheData                         Premise(F80)
	S46= IRMux.CacheData={31,rT,rA,rB,277}                      Path(S39,S45)
	S47= IRMux.Out={31,rT,rA,rB,277}                            IRMux-Select(S44,S46)
	S48= IRMux.Out=>IR.In                                       Premise(F83)
	S49= IR.In={31,rT,rA,rB,277}                                Path(S47,S48)
	S50= CtrlPC=0                                               Premise(F107)
	S51= CtrlPCInc=1                                            Premise(F108)
	S52= PC[Out]=addr+4                                         PC-Inc(S24,S50,S51)
	S53= CtrlIR=1                                               Premise(F116)
	S54= [IR]={31,rT,rA,rB,277}                                 IR-Write(S49,S53)
	S55= CtrlGPRegs=0                                           Premise(F117)
	S56= GPRegs[rA]=a                                           GPRegs-Hold(S32,S55)
	S57= GPRegs[rB]=b                                           GPRegs-Hold(S33,S55)
	S58= CtrlXERSO=0                                            Premise(F120)
	S59= XER[SO]=so                                             XER-SO-Hold(S35,S58)
	S60= CtrlXERCA=0                                            Premise(F122)
	S61= XER[CA]=ca                                             XER-CA-Hold(S37,S60)

ID	S62= IR.Out11_15=rA                                         IR-Out(S54)
	S63= IR.Out16_20=rB                                         IR-Out(S54)
	S64= IR.Out11_15=>GPRegs.RReg1                              Premise(F148)
	S65= GPRegs.RReg1=rA                                        Path(S62,S64)
	S66= GPRegs.Rdata1=a                                        GPRegs-Read(S65,S56)
	S67= IR.Out16_20=>GPRegs.RReg2                              Premise(F149)
	S68= GPRegs.RReg2=rB                                        Path(S63,S67)
	S69= GPRegs.Rdata2=b                                        GPRegs-Read(S68,S57)
	S70= GPRegs.Rdata1=>A.In                                    Premise(F151)
	S71= A.In=a                                                 Path(S66,S70)
	S72= GPRegs.Rdata2=>B.In                                    Premise(F152)
	S73= B.In=b                                                 Path(S69,S72)
	S74= CtrlPC=0                                               Premise(F168)
	S75= CtrlPCInc=0                                            Premise(F169)
	S76= PC[Out]=addr+4                                         PC-Hold(S52,S74,S75)
	S77= CtrlIR=0                                               Premise(F177)
	S78= [IR]={31,rT,rA,rB,277}                                 IR-Hold(S54,S77)
	S79= CtrlA=1                                                Premise(F179)
	S80= [A]=a                                                  A-Write(S71,S79)
	S81= CtrlB=1                                                Premise(F180)
	S82= [B]=b                                                  B-Write(S73,S81)
	S83= CtrlXERSO=0                                            Premise(F181)
	S84= XER[SO]=so                                             XER-SO-Hold(S59,S83)
	S85= CtrlXERCA=0                                            Premise(F183)
	S86= XER[CA]=ca                                             XER-CA-Hold(S61,S85)

EX	S87= A.Out=a                                                A-Out(S80)
	S88= B.Out=b                                                B-Out(S82)
	S89= XER.SOOut=so                                           XER-SO-Out(S84)
	S90= XER.CAOut=ca                                           XER-CA-Out(S86)
	S91= A.Out=>ALU.A                                           Premise(F214)
	S92= ALU.A=a                                                Path(S87,S91)
	S93= B.Out=>ALU.B                                           Premise(F215)
	S94= ALU.B=b                                                Path(S88,S93)
	S95= XER.CAOut=>ALU.CAIn                                    Premise(F216)
	S96= ALU.CAIn=ca                                            Path(S90,S95)
	S97= ALU.Out=a+b+ca                                         ALU(S92,S94,S96)
	S98= ALU.CMP=Compare0(a+b+ca)                               ALU(S92,S94,S96)
	S99= ALU.CA=Carry(a+b+ca)                                   ALU(S92,S94,S96)
	S100= ALU.Out=>ALUOut.In                                    Premise(F218)
	S101= ALUOut.In=a+b+ca                                      Path(S97,S100)
	S102= ALU.CA=>CAReg.In                                      Premise(F219)
	S103= CAReg.In=Carry(a+b+ca)                                Path(S99,S102)
	S104= ALU.CMP=>DataCmb.A                                    Premise(F220)
	S105= DataCmb.A=Compare0(a+b+ca)                            Path(S98,S104)
	S106= XER.SOOut=>DataCmb.B                                  Premise(F221)
	S107= DataCmb.B=so                                          Path(S89,S106)
	S108= DataCmb.Out={Compare0(a+b+ca),so}                     DataCmb(S105,S107)
	S109= DataCmb.Out=>DR4bit.In                                Premise(F222)
	S110= DR4bit.In={Compare0(a+b+ca),so}                       Path(S108,S109)
	S111= CtrlPC=0                                              Premise(F229)
	S112= CtrlPCInc=0                                           Premise(F230)
	S113= PC[Out]=addr+4                                        PC-Hold(S76,S111,S112)
	S114= CtrlIR=0                                              Premise(F238)
	S115= [IR]={31,rT,rA,rB,277}                                IR-Hold(S78,S114)
	S116= CtrlALUOut=1                                          Premise(F245)
	S117= [ALUOut]=a+b+ca                                       ALUOut-Write(S101,S116)
	S118= CtrlCAReg=1                                           Premise(F246)
	S119= [CAReg]=Carry(a+b+ca)                                 CAReg-Write(S103,S118)
	S120= CtrlDR4bit=1                                          Premise(F247)
	S121= [DR4bit]={Compare0(a+b+ca),so}                        DR4bit-Write(S110,S120)

MEM	S122= CtrlPC=0                                              Premise(F290)
	S123= CtrlPCInc=0                                           Premise(F291)
	S124= PC[Out]=addr+4                                        PC-Hold(S113,S122,S123)
	S125= CtrlIR=0                                              Premise(F299)
	S126= [IR]={31,rT,rA,rB,277}                                IR-Hold(S115,S125)
	S127= CtrlALUOut=0                                          Premise(F306)
	S128= [ALUOut]=a+b+ca                                       ALUOut-Hold(S117,S127)
	S129= CtrlCAReg=0                                           Premise(F307)
	S130= [CAReg]=Carry(a+b+ca)                                 CAReg-Hold(S119,S129)
	S131= CtrlDR4bit=0                                          Premise(F308)
	S132= [DR4bit]={Compare0(a+b+ca),so}                        DR4bit-Hold(S121,S131)

DMMU1	S133= CtrlPC=0                                              Premise(F351)
	S134= CtrlPCInc=0                                           Premise(F352)
	S135= PC[Out]=addr+4                                        PC-Hold(S124,S133,S134)
	S136= CtrlIR=0                                              Premise(F360)
	S137= [IR]={31,rT,rA,rB,277}                                IR-Hold(S126,S136)
	S138= CtrlALUOut=0                                          Premise(F367)
	S139= [ALUOut]=a+b+ca                                       ALUOut-Hold(S128,S138)
	S140= CtrlCAReg=0                                           Premise(F368)
	S141= [CAReg]=Carry(a+b+ca)                                 CAReg-Hold(S130,S140)
	S142= CtrlDR4bit=0                                          Premise(F369)
	S143= [DR4bit]={Compare0(a+b+ca),so}                        DR4bit-Hold(S132,S142)

DMMU2	S144= CtrlPC=0                                              Premise(F412)
	S145= CtrlPCInc=0                                           Premise(F413)
	S146= PC[Out]=addr+4                                        PC-Hold(S135,S144,S145)
	S147= CtrlIR=0                                              Premise(F421)
	S148= [IR]={31,rT,rA,rB,277}                                IR-Hold(S137,S147)
	S149= CtrlALUOut=0                                          Premise(F428)
	S150= [ALUOut]=a+b+ca                                       ALUOut-Hold(S139,S149)
	S151= CtrlCAReg=0                                           Premise(F429)
	S152= [CAReg]=Carry(a+b+ca)                                 CAReg-Hold(S141,S151)
	S153= CtrlDR4bit=0                                          Premise(F430)
	S154= [DR4bit]={Compare0(a+b+ca),so}                        DR4bit-Hold(S143,S153)

WB	S155= IR.Out6_10=rT                                         IR-Out(S148)
	S156= ALUOut.Out=a+b+ca                                     ALUOut-Out(S150)
	S157= CAReg.Out=Carry(a+b+ca)                               CAReg-Out(S152)
	S158= DR4bit.Out={Compare0(a+b+ca),so}                      DR4bit-Out(S154)
	S159= IR.Out6_10=>GPRegs.WReg                               Premise(F467)
	S160= GPRegs.WReg=rT                                        Path(S155,S159)
	S161= ALUOut.Out=>GPRegs.WData                              Premise(F468)
	S162= GPRegs.WData=a+b+ca                                   Path(S156,S161)
	S163= DR4bit.Out=>CRRegs.CR0In                              Premise(F469)
	S164= CRRegs.CR0In={Compare0(a+b+ca),so}                    Path(S158,S163)
	S165= CAReg.Out=>XER.CAIn                                   Premise(F470)
	S166= XER.CAIn=Carry(a+b+ca)                                Path(S157,S165)
	S167= CtrlPC=0                                              Premise(F473)
	S168= CtrlPCInc=0                                           Premise(F474)
	S169= PC[Out]=addr+4                                        PC-Hold(S146,S167,S168)
	S170= CtrlGPRegs=1                                          Premise(F483)
	S171= GPRegs[rT]=a+b+ca                                     GPRegs-Write(S160,S162,S170)
	S172= CtrlXERCA=1                                           Premise(F488)
	S173= XER[CA]=Carry(a+b+ca)                                 XER-CA-Write(S166,S172)
	S174= CtrlCRRegsCR0=1                                       Premise(F493)
	S175= CRRegs[CR0]={Compare0(a+b+ca),so}                     CRRegs-CR0-Write(S164,S174)

POST	S169= PC[Out]=addr+4                                        PC-Hold(S146,S167,S168)
	S171= GPRegs[rT]=a+b+ca                                     GPRegs-Write(S160,S162,S170)
	S173= XER[CA]=Carry(a+b+ca)                                 XER-CA-Write(S166,S172)
	S175= CRRegs[CR0]={Compare0(a+b+ca),so}                     CRRegs-CR0-Write(S164,S174)

