
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,277}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)
	S6= XER[CA]=ca                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= CtrlPC=0                                               Premise(F45)
	S17= CtrlPCInc=0                                            Premise(F46)
	S18= PC[Out]=addr                                           PC-Hold(S1,S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F47)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S19)
	S21= CtrlIMem=0                                             Premise(F52)
	S22= IMem[{pid,addr}]={31,rT,rA,rB,277}                     IMem-Hold(S2,S21)
	S23= CtrlGPRegs=0                                           Premise(F55)
	S24= GPRegs[rA]=a                                           GPRegs-Hold(S3,S23)
	S25= GPRegs[rB]=b                                           GPRegs-Hold(S4,S23)
	S26= CtrlXERSO=0                                            Premise(F58)
	S27= XER[SO]=so                                             XER-SO-Hold(S5,S26)
	S28= CtrlXERCA=0                                            Premise(F60)
	S29= XER[CA]=ca                                             XER-CA-Hold(S6,S28)

IMMU	S30= PC.Out=addr                                            PC-Out(S18)
	S31= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S32= PC.Out=>ICache.IEA                                     Premise(F72)
	S33= ICache.IEA=addr                                        Path(S30,S32)
	S34= IAddrReg.Out=>IMem.RAddr                               Premise(F77)
	S35= IMem.RAddr={pid,addr}                                  Path(S31,S34)
	S36= IMem.Out={31,rT,rA,rB,277}                             IMem-Read(S35,S22)
	S37= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S35,S22)
	S38= IMem.Out=>IRMux.MemData                                Premise(F78)
	S39= IRMux.MemData={31,rT,rA,rB,277}                        Path(S36,S38)
	S40= IRMux.Out={31,rT,rA,rB,277}                            IRMux-Select(S39)
	S41= IRMux.Out=>IR.In                                       Premise(F82)
	S42= IR.In={31,rT,rA,rB,277}                                Path(S40,S41)
	S43= IMem.MEM8WordOut=>ICache.WData                         Premise(F83)
	S44= ICache.WData=IMemGet8Word({pid,addr})                  Path(S37,S43)
	S45= CtrlPC=0                                               Premise(F106)
	S46= CtrlPCInc=1                                            Premise(F107)
	S47= PC[Out]=addr+4                                         PC-Inc(S18,S45,S46)
	S48= CtrlICache=1                                           Premise(F110)
	S49= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S33,S44,S48)
	S50= CtrlIR=1                                               Premise(F115)
	S51= [IR]={31,rT,rA,rB,277}                                 IR-Write(S42,S50)
	S52= CtrlGPRegs=0                                           Premise(F116)
	S53= GPRegs[rA]=a                                           GPRegs-Hold(S24,S52)
	S54= GPRegs[rB]=b                                           GPRegs-Hold(S25,S52)
	S55= CtrlXERSO=0                                            Premise(F119)
	S56= XER[SO]=so                                             XER-SO-Hold(S27,S55)
	S57= CtrlXERCA=0                                            Premise(F121)
	S58= XER[CA]=ca                                             XER-CA-Hold(S29,S57)

ID	S59= IR.Out11_15=rA                                         IR-Out(S51)
	S60= IR.Out16_20=rB                                         IR-Out(S51)
	S61= IR.Out11_15=>GPRegs.RReg1                              Premise(F147)
	S62= GPRegs.RReg1=rA                                        Path(S59,S61)
	S63= GPRegs.Rdata1=a                                        GPRegs-Read(S62,S53)
	S64= IR.Out16_20=>GPRegs.RReg2                              Premise(F148)
	S65= GPRegs.RReg2=rB                                        Path(S60,S64)
	S66= GPRegs.Rdata2=b                                        GPRegs-Read(S65,S54)
	S67= GPRegs.Rdata1=>A.In                                    Premise(F150)
	S68= A.In=a                                                 Path(S63,S67)
	S69= GPRegs.Rdata2=>B.In                                    Premise(F151)
	S70= B.In=b                                                 Path(S66,S69)
	S71= CtrlPC=0                                               Premise(F167)
	S72= CtrlPCInc=0                                            Premise(F168)
	S73= PC[Out]=addr+4                                         PC-Hold(S47,S71,S72)
	S74= CtrlICache=0                                           Premise(F171)
	S75= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S49,S74)
	S76= CtrlIR=0                                               Premise(F176)
	S77= [IR]={31,rT,rA,rB,277}                                 IR-Hold(S51,S76)
	S78= CtrlA=1                                                Premise(F178)
	S79= [A]=a                                                  A-Write(S68,S78)
	S80= CtrlB=1                                                Premise(F179)
	S81= [B]=b                                                  B-Write(S70,S80)
	S82= CtrlXERSO=0                                            Premise(F180)
	S83= XER[SO]=so                                             XER-SO-Hold(S56,S82)
	S84= CtrlXERCA=0                                            Premise(F182)
	S85= XER[CA]=ca                                             XER-CA-Hold(S58,S84)

EX	S86= A.Out=a                                                A-Out(S79)
	S87= B.Out=b                                                B-Out(S81)
	S88= XER.SOOut=so                                           XER-SO-Out(S83)
	S89= XER.CAOut=ca                                           XER-CA-Out(S85)
	S90= A.Out=>ALU.A                                           Premise(F213)
	S91= ALU.A=a                                                Path(S86,S90)
	S92= B.Out=>ALU.B                                           Premise(F214)
	S93= ALU.B=b                                                Path(S87,S92)
	S94= XER.CAOut=>ALU.CAIn                                    Premise(F215)
	S95= ALU.CAIn=ca                                            Path(S89,S94)
	S96= ALU.Out=a+b+ca                                         ALU(S91,S93,S95)
	S97= ALU.CMP=Compare0(a+b+ca)                               ALU(S91,S93,S95)
	S98= ALU.CA=Carry(a+b+ca)                                   ALU(S91,S93,S95)
	S99= ALU.Out=>ALUOut.In                                     Premise(F217)
	S100= ALUOut.In=a+b+ca                                      Path(S96,S99)
	S101= ALU.CA=>CAReg.In                                      Premise(F218)
	S102= CAReg.In=Carry(a+b+ca)                                Path(S98,S101)
	S103= ALU.CMP=>DataCmb.A                                    Premise(F219)
	S104= DataCmb.A=Compare0(a+b+ca)                            Path(S97,S103)
	S105= XER.SOOut=>DataCmb.B                                  Premise(F220)
	S106= DataCmb.B=so                                          Path(S88,S105)
	S107= DataCmb.Out={Compare0(a+b+ca),so}                     DataCmb(S104,S106)
	S108= DataCmb.Out=>DR4bit.In                                Premise(F221)
	S109= DR4bit.In={Compare0(a+b+ca),so}                       Path(S107,S108)
	S110= CtrlPC=0                                              Premise(F228)
	S111= CtrlPCInc=0                                           Premise(F229)
	S112= PC[Out]=addr+4                                        PC-Hold(S73,S110,S111)
	S113= CtrlICache=0                                          Premise(F232)
	S114= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S75,S113)
	S115= CtrlIR=0                                              Premise(F237)
	S116= [IR]={31,rT,rA,rB,277}                                IR-Hold(S77,S115)
	S117= CtrlALUOut=1                                          Premise(F244)
	S118= [ALUOut]=a+b+ca                                       ALUOut-Write(S100,S117)
	S119= CtrlCAReg=1                                           Premise(F245)
	S120= [CAReg]=Carry(a+b+ca)                                 CAReg-Write(S102,S119)
	S121= CtrlDR4bit=1                                          Premise(F246)
	S122= [DR4bit]={Compare0(a+b+ca),so}                        DR4bit-Write(S109,S121)

MEM	S123= CtrlPC=0                                              Premise(F289)
	S124= CtrlPCInc=0                                           Premise(F290)
	S125= PC[Out]=addr+4                                        PC-Hold(S112,S123,S124)
	S126= CtrlICache=0                                          Premise(F293)
	S127= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S114,S126)
	S128= CtrlIR=0                                              Premise(F298)
	S129= [IR]={31,rT,rA,rB,277}                                IR-Hold(S116,S128)
	S130= CtrlALUOut=0                                          Premise(F305)
	S131= [ALUOut]=a+b+ca                                       ALUOut-Hold(S118,S130)
	S132= CtrlCAReg=0                                           Premise(F306)
	S133= [CAReg]=Carry(a+b+ca)                                 CAReg-Hold(S120,S132)
	S134= CtrlDR4bit=0                                          Premise(F307)
	S135= [DR4bit]={Compare0(a+b+ca),so}                        DR4bit-Hold(S122,S134)

DMMU1	S136= CtrlPC=0                                              Premise(F350)
	S137= CtrlPCInc=0                                           Premise(F351)
	S138= PC[Out]=addr+4                                        PC-Hold(S125,S136,S137)
	S139= CtrlICache=0                                          Premise(F354)
	S140= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S127,S139)
	S141= CtrlIR=0                                              Premise(F359)
	S142= [IR]={31,rT,rA,rB,277}                                IR-Hold(S129,S141)
	S143= CtrlALUOut=0                                          Premise(F366)
	S144= [ALUOut]=a+b+ca                                       ALUOut-Hold(S131,S143)
	S145= CtrlCAReg=0                                           Premise(F367)
	S146= [CAReg]=Carry(a+b+ca)                                 CAReg-Hold(S133,S145)
	S147= CtrlDR4bit=0                                          Premise(F368)
	S148= [DR4bit]={Compare0(a+b+ca),so}                        DR4bit-Hold(S135,S147)

DMMU2	S149= CtrlPC=0                                              Premise(F411)
	S150= CtrlPCInc=0                                           Premise(F412)
	S151= PC[Out]=addr+4                                        PC-Hold(S138,S149,S150)
	S152= CtrlICache=0                                          Premise(F415)
	S153= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S140,S152)
	S154= CtrlIR=0                                              Premise(F420)
	S155= [IR]={31,rT,rA,rB,277}                                IR-Hold(S142,S154)
	S156= CtrlALUOut=0                                          Premise(F427)
	S157= [ALUOut]=a+b+ca                                       ALUOut-Hold(S144,S156)
	S158= CtrlCAReg=0                                           Premise(F428)
	S159= [CAReg]=Carry(a+b+ca)                                 CAReg-Hold(S146,S158)
	S160= CtrlDR4bit=0                                          Premise(F429)
	S161= [DR4bit]={Compare0(a+b+ca),so}                        DR4bit-Hold(S148,S160)

WB	S162= IR.Out6_10=rT                                         IR-Out(S155)
	S163= ALUOut.Out=a+b+ca                                     ALUOut-Out(S157)
	S164= CAReg.Out=Carry(a+b+ca)                               CAReg-Out(S159)
	S165= DR4bit.Out={Compare0(a+b+ca),so}                      DR4bit-Out(S161)
	S166= IR.Out6_10=>GPRegs.WReg                               Premise(F466)
	S167= GPRegs.WReg=rT                                        Path(S162,S166)
	S168= ALUOut.Out=>GPRegs.WData                              Premise(F467)
	S169= GPRegs.WData=a+b+ca                                   Path(S163,S168)
	S170= DR4bit.Out=>CRRegs.CR0In                              Premise(F468)
	S171= CRRegs.CR0In={Compare0(a+b+ca),so}                    Path(S165,S170)
	S172= CAReg.Out=>XER.CAIn                                   Premise(F469)
	S173= XER.CAIn=Carry(a+b+ca)                                Path(S164,S172)
	S174= CtrlPC=0                                              Premise(F472)
	S175= CtrlPCInc=0                                           Premise(F473)
	S176= PC[Out]=addr+4                                        PC-Hold(S151,S174,S175)
	S177= CtrlICache=0                                          Premise(F476)
	S178= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S153,S177)
	S179= CtrlGPRegs=1                                          Premise(F482)
	S180= GPRegs[rT]=a+b+ca                                     GPRegs-Write(S167,S169,S179)
	S181= CtrlXERCA=1                                           Premise(F487)
	S182= XER[CA]=Carry(a+b+ca)                                 XER-CA-Write(S173,S181)
	S183= CtrlCRRegsCR0=1                                       Premise(F492)
	S184= CRRegs[CR0]={Compare0(a+b+ca),so}                     CRRegs-CR0-Write(S171,S183)

POST	S176= PC[Out]=addr+4                                        PC-Hold(S151,S174,S175)
	S178= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S153,S177)
	S180= GPRegs[rT]=a+b+ca                                     GPRegs-Write(S167,S169,S179)
	S182= XER[CA]=Carry(a+b+ca)                                 XER-CA-Write(S173,S181)
	S184= CRRegs[CR0]={Compare0(a+b+ca),so}                     CRRegs-CR0-Write(S171,S183)

