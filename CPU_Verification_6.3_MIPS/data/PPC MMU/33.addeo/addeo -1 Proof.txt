
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,1300}                     Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[CA]=ca                                              Premise(F5)
	S6= XER[SO]=so                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= CtrlPC=0                                               Premise(F47)
	S17= CtrlPCInc=0                                            Premise(F48)
	S18= PC[Out]=addr                                           PC-Hold(S1,S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F49)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S19)
	S21= CtrlIMem=0                                             Premise(F54)
	S22= IMem[{pid,addr}]={31,rT,rA,rB,1300}                    IMem-Hold(S2,S21)
	S23= CtrlGPRegs=0                                           Premise(F57)
	S24= GPRegs[rA]=a                                           GPRegs-Hold(S3,S23)
	S25= GPRegs[rB]=b                                           GPRegs-Hold(S4,S23)
	S26= CtrlXERSO=0                                            Premise(F60)
	S27= XER[SO]=so                                             XER-SO-Hold(S6,S26)
	S28= CtrlXERCA=0                                            Premise(F62)
	S29= XER[CA]=ca                                             XER-CA-Hold(S5,S28)

IMMU	S30= PC.Out=addr                                            PC-Out(S18)
	S31= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S32= PC.Out=>ICache.IEA                                     Premise(F71)
	S33= ICache.IEA=addr                                        Path(S30,S32)
	S34= IAddrReg.Out=>IMem.RAddr                               Premise(F76)
	S35= IMem.RAddr={pid,addr}                                  Path(S31,S34)
	S36= IMem.Out={31,rT,rA,rB,1300}                            IMem-Read(S35,S22)
	S37= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S35,S22)
	S38= IMem.Out=>IRMux.MemData                                Premise(F77)
	S39= IRMux.MemData={31,rT,rA,rB,1300}                       Path(S36,S38)
	S40= IRMux.Out={31,rT,rA,rB,1300}                           IRMux-Select(S39)
	S41= IRMux.Out=>IR.In                                       Premise(F81)
	S42= IR.In={31,rT,rA,rB,1300}                               Path(S40,S41)
	S43= IMem.MEM8WordOut=>ICache.WData                         Premise(F82)
	S44= ICache.WData=IMemGet8Word({pid,addr})                  Path(S37,S43)
	S45= CtrlPC=0                                               Premise(F107)
	S46= CtrlPCInc=1                                            Premise(F108)
	S47= PC[Out]=addr+4                                         PC-Inc(S18,S45,S46)
	S48= CtrlICache=1                                           Premise(F111)
	S49= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S33,S44,S48)
	S50= CtrlIR=1                                               Premise(F116)
	S51= [IR]={31,rT,rA,rB,1300}                                IR-Write(S42,S50)
	S52= CtrlGPRegs=0                                           Premise(F117)
	S53= GPRegs[rA]=a                                           GPRegs-Hold(S24,S52)
	S54= GPRegs[rB]=b                                           GPRegs-Hold(S25,S52)
	S55= CtrlXERSO=0                                            Premise(F120)
	S56= XER[SO]=so                                             XER-SO-Hold(S27,S55)
	S57= CtrlXERCA=0                                            Premise(F122)
	S58= XER[CA]=ca                                             XER-CA-Hold(S29,S57)

ID	S59= IR.Out11_15=rA                                         IR-Out(S51)
	S60= IR.Out16_20=rB                                         IR-Out(S51)
	S61= IR.Out11_15=>GPRegs.RReg1                              Premise(F145)
	S62= GPRegs.RReg1=rA                                        Path(S59,S61)
	S63= GPRegs.Rdata1=a                                        GPRegs-Read(S62,S53)
	S64= IR.Out16_20=>GPRegs.RReg2                              Premise(F146)
	S65= GPRegs.RReg2=rB                                        Path(S60,S64)
	S66= GPRegs.Rdata2=b                                        GPRegs-Read(S65,S54)
	S67= GPRegs.Rdata1=>A.In                                    Premise(F148)
	S68= A.In=a                                                 Path(S63,S67)
	S69= GPRegs.Rdata2=>B.In                                    Premise(F149)
	S70= B.In=b                                                 Path(S66,S69)
	S71= CtrlPC=0                                               Premise(F167)
	S72= CtrlPCInc=0                                            Premise(F168)
	S73= PC[Out]=addr+4                                         PC-Hold(S47,S71,S72)
	S74= CtrlICache=0                                           Premise(F171)
	S75= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S49,S74)
	S76= CtrlIR=0                                               Premise(F176)
	S77= [IR]={31,rT,rA,rB,1300}                                IR-Hold(S51,S76)
	S78= CtrlA=1                                                Premise(F178)
	S79= [A]=a                                                  A-Write(S68,S78)
	S80= CtrlB=1                                                Premise(F179)
	S81= [B]=b                                                  B-Write(S70,S80)
	S82= CtrlXERSO=0                                            Premise(F180)
	S83= XER[SO]=so                                             XER-SO-Hold(S56,S82)
	S84= CtrlXERCA=0                                            Premise(F182)
	S85= XER[CA]=ca                                             XER-CA-Hold(S58,S84)

EX	S86= A.Out=a                                                A-Out(S79)
	S87= B.Out=b                                                B-Out(S81)
	S88= XER.SOOut=so                                           XER-SO-Out(S83)
	S89= XER.CAOut=ca                                           XER-CA-Out(S85)
	S90= A.Out=>ALU.A                                           Premise(F210)
	S91= ALU.A=a                                                Path(S86,S90)
	S92= B.Out=>ALU.B                                           Premise(F211)
	S93= ALU.B=b                                                Path(S87,S92)
	S94= XER.CAOut=>ALU.CAIn                                    Premise(F212)
	S95= ALU.CAIn=ca                                            Path(S89,S94)
	S96= ALU.Out=a+b+ca                                         ALU(S91,S93,S95)
	S97= ALU.OV=OverFlow(a+b+ca)                                ALU(S91,S93,S95)
	S98= ALU.CA=Carry(a+b+ca)                                   ALU(S91,S93,S95)
	S99= ALU.Out=>ALUOut.In                                     Premise(F214)
	S100= ALUOut.In=a+b+ca                                      Path(S96,S99)
	S101= ALU.CA=>CAReg.In                                      Premise(F215)
	S102= CAReg.In=Carry(a+b+ca)                                Path(S98,S101)
	S103= ALU.OV=>OVReg.In                                      Premise(F216)
	S104= OVReg.In=OverFlow(a+b+ca)                             Path(S97,S103)
	S105= XER.SOOut=>ORGate.A                                   Premise(F217)
	S106= ORGate.A=so                                           Path(S88,S105)
	S107= ALU.OV=>ORGate.B                                      Premise(F218)
	S108= ORGate.B=OverFlow(a+b+ca)                             Path(S97,S107)
	S109= ORGate.Out=so|OverFlow(a+b+ca)                        ORGate(S106,S108)
	S110= ORGate.Out=>DR1bit.In                                 Premise(F219)
	S111= DR1bit.In=so|OverFlow(a+b+ca)                         Path(S109,S110)
	S112= CtrlPC=0                                              Premise(F227)
	S113= CtrlPCInc=0                                           Premise(F228)
	S114= PC[Out]=addr+4                                        PC-Hold(S73,S112,S113)
	S115= CtrlICache=0                                          Premise(F231)
	S116= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S75,S115)
	S117= CtrlIR=0                                              Premise(F236)
	S118= [IR]={31,rT,rA,rB,1300}                               IR-Hold(S77,S117)
	S119= CtrlALUOut=1                                          Premise(F243)
	S120= [ALUOut]=a+b+ca                                       ALUOut-Write(S100,S119)
	S121= CtrlCAReg=1                                           Premise(F244)
	S122= [CAReg]=Carry(a+b+ca)                                 CAReg-Write(S102,S121)
	S123= CtrlOVReg=1                                           Premise(F245)
	S124= [OVReg]=OverFlow(a+b+ca)                              OVReg-Write(S104,S123)
	S125= CtrlDR1bit=1                                          Premise(F246)
	S126= [DR1bit]=so|OverFlow(a+b+ca)                          DR1bit-Write(S111,S125)

MEM	S127= CtrlPC=0                                              Premise(F287)
	S128= CtrlPCInc=0                                           Premise(F288)
	S129= PC[Out]=addr+4                                        PC-Hold(S114,S127,S128)
	S130= CtrlICache=0                                          Premise(F291)
	S131= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S116,S130)
	S132= CtrlIR=0                                              Premise(F296)
	S133= [IR]={31,rT,rA,rB,1300}                               IR-Hold(S118,S132)
	S134= CtrlALUOut=0                                          Premise(F303)
	S135= [ALUOut]=a+b+ca                                       ALUOut-Hold(S120,S134)
	S136= CtrlCAReg=0                                           Premise(F304)
	S137= [CAReg]=Carry(a+b+ca)                                 CAReg-Hold(S122,S136)
	S138= CtrlOVReg=0                                           Premise(F305)
	S139= [OVReg]=OverFlow(a+b+ca)                              OVReg-Hold(S124,S138)
	S140= CtrlDR1bit=0                                          Premise(F306)
	S141= [DR1bit]=so|OverFlow(a+b+ca)                          DR1bit-Hold(S126,S140)

DMMU1	S142= CtrlPC=0                                              Premise(F347)
	S143= CtrlPCInc=0                                           Premise(F348)
	S144= PC[Out]=addr+4                                        PC-Hold(S129,S142,S143)
	S145= CtrlICache=0                                          Premise(F351)
	S146= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S131,S145)
	S147= CtrlIR=0                                              Premise(F356)
	S148= [IR]={31,rT,rA,rB,1300}                               IR-Hold(S133,S147)
	S149= CtrlALUOut=0                                          Premise(F363)
	S150= [ALUOut]=a+b+ca                                       ALUOut-Hold(S135,S149)
	S151= CtrlCAReg=0                                           Premise(F364)
	S152= [CAReg]=Carry(a+b+ca)                                 CAReg-Hold(S137,S151)
	S153= CtrlOVReg=0                                           Premise(F365)
	S154= [OVReg]=OverFlow(a+b+ca)                              OVReg-Hold(S139,S153)
	S155= CtrlDR1bit=0                                          Premise(F366)
	S156= [DR1bit]=so|OverFlow(a+b+ca)                          DR1bit-Hold(S141,S155)

DMMU2	S157= CtrlPC=0                                              Premise(F407)
	S158= CtrlPCInc=0                                           Premise(F408)
	S159= PC[Out]=addr+4                                        PC-Hold(S144,S157,S158)
	S160= CtrlICache=0                                          Premise(F411)
	S161= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S146,S160)
	S162= CtrlIR=0                                              Premise(F416)
	S163= [IR]={31,rT,rA,rB,1300}                               IR-Hold(S148,S162)
	S164= CtrlALUOut=0                                          Premise(F423)
	S165= [ALUOut]=a+b+ca                                       ALUOut-Hold(S150,S164)
	S166= CtrlCAReg=0                                           Premise(F424)
	S167= [CAReg]=Carry(a+b+ca)                                 CAReg-Hold(S152,S166)
	S168= CtrlOVReg=0                                           Premise(F425)
	S169= [OVReg]=OverFlow(a+b+ca)                              OVReg-Hold(S154,S168)
	S170= CtrlDR1bit=0                                          Premise(F426)
	S171= [DR1bit]=so|OverFlow(a+b+ca)                          DR1bit-Hold(S156,S170)

WB	S172= IR.Out6_10=rT                                         IR-Out(S163)
	S173= ALUOut.Out=a+b+ca                                     ALUOut-Out(S165)
	S174= CAReg.Out=Carry(a+b+ca)                               CAReg-Out(S167)
	S175= OVReg.Out=OverFlow(a+b+ca)                            OVReg-Out(S169)
	S176= DR1bit.Out=so|OverFlow(a+b+ca)                        DR1bit-Out(S171)
	S177= IR.Out6_10=>GPRegs.WReg                               Premise(F460)
	S178= GPRegs.WReg=rT                                        Path(S172,S177)
	S179= ALUOut.Out=>GPRegs.WData                              Premise(F461)
	S180= GPRegs.WData=a+b+ca                                   Path(S173,S179)
	S181= DR1bit.Out=>XER.SOIn                                  Premise(F462)
	S182= XER.SOIn=so|OverFlow(a+b+ca)                          Path(S176,S181)
	S183= CAReg.Out=>XER.CAIn                                   Premise(F463)
	S184= XER.CAIn=Carry(a+b+ca)                                Path(S174,S183)
	S185= OVReg.Out=>XER.OVIn                                   Premise(F464)
	S186= XER.OVIn=OverFlow(a+b+ca)                             Path(S175,S185)
	S187= CtrlPC=0                                              Premise(F467)
	S188= CtrlPCInc=0                                           Premise(F468)
	S189= PC[Out]=addr+4                                        PC-Hold(S159,S187,S188)
	S190= CtrlICache=0                                          Premise(F471)
	S191= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S161,S190)
	S192= CtrlGPRegs=1                                          Premise(F477)
	S193= GPRegs[rT]=a+b+ca                                     GPRegs-Write(S178,S180,S192)
	S194= CtrlXERSO=1                                           Premise(F480)
	S195= XER[SO]=so|OverFlow(a+b+ca)                           XER-SO-Write(S182,S194)
	S196= CtrlXEROV=1                                           Premise(F481)
	S197= XER[OV]=OverFlow(a+b+ca)                              XER-OV-Write(S186,S196)
	S198= CtrlXERCA=1                                           Premise(F482)
	S199= XER[CA]=Carry(a+b+ca)                                 XER-CA-Write(S184,S198)

POST	S189= PC[Out]=addr+4                                        PC-Hold(S159,S187,S188)
	S191= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S161,S190)
	S193= GPRegs[rT]=a+b+ca                                     GPRegs-Write(S178,S180,S192)
	S195= XER[SO]=so|OverFlow(a+b+ca)                           XER-SO-Write(S182,S194)
	S197= XER[OV]=OverFlow(a+b+ca)                              XER-OV-Write(S186,S196)
	S199= XER[CA]=Carry(a+b+ca)                                 XER-CA-Write(S184,S198)

