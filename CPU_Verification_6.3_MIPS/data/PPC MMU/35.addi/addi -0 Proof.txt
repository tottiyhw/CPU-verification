
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={14,rT,rA,SIMM}                        Premise(F2)
	S3= ICache[addr]={14,rT,rA,SIMM}                            Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={14,rT,rA,SIMM}                             ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={14,rT,rA,SIMM}                           Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F37)
	S20= CtrlPCInc=0                                            Premise(F38)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F39)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F42)
	S25= [ICacheReg]={14,rT,rA,SIMM}                            ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F44)
	S27= IMem[{pid,addr}]={14,rT,rA,SIMM}                       IMem-Hold(S2,S26)
	S28= CtrlGPRegs=0                                           Premise(F47)
	S29= GPRegs[rA]=a                                           GPRegs-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={14,rT,rA,SIMM}                          ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F60)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={14,rT,rA,SIMM}                               IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F61)
	S36= IRMux.MemData={14,rT,rA,SIMM}                          Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F62)
	S38= IRMux.CacheData={14,rT,rA,SIMM}                        Path(S31,S37)
	S39= IRMux.Out={14,rT,rA,SIMM}                              IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F65)
	S41= IR.In={14,rT,rA,SIMM}                                  Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F83)
	S43= CtrlPCInc=1                                            Premise(F84)
	S44= PC[Out]=addr+4                                         PC-Inc(S21,S42,S43)
	S45= CtrlIR=1                                               Premise(F92)
	S46= [IR]={14,rT,rA,SIMM}                                   IR-Write(S41,S45)
	S47= CtrlGPRegs=0                                           Premise(F93)
	S48= GPRegs[rA]=a                                           GPRegs-Hold(S29,S47)

ID	S49= IR.Out11_15=rA                                         IR-Out(S46)
	S50= IR.Out16_31=SIMM                                       IR-Out(S46)
	S51= IR.Out11_15=>GPRegs.RReg1                              Premise(F115)
	S52= GPRegs.RReg1=rA                                        Path(S49,S51)
	S53= GPRegs.Rdata1=a                                        GPRegs-Read(S52,S48)
	S54= IR.Out11_15=>AddrSelMux.Sel                            Premise(F116)
	S55= AddrSelMux.Sel=rA                                      Path(S49,S54)
	S56= GPRegs.Rdata1=>AddrSelMux.Data                         Premise(F117)
	S57= AddrSelMux.Data=a                                      Path(S53,S56)
	S58= AddrSelMux.Out=AddrSel(rA,a)                           AddrSelMux(S55,S57)
	S59= AddrSelMux.Out=>A.In                                   Premise(F118)
	S60= A.In=AddrSel(rA,a)                                     Path(S58,S59)
	S61= IR.Out16_31=>IMMEXT.In                                 Premise(F119)
	S62= IMMEXT.In=SIMM                                         Path(S50,S61)
	S63= IMMEXT.Out={16{SIMM[0]},SIMM}                          IMMEXT(S62)
	S64= IMMEXT.Out=>B.In                                       Premise(F120)
	S65= B.In={16{SIMM[0]},SIMM}                                Path(S63,S64)
	S66= CtrlPC=0                                               Premise(F129)
	S67= CtrlPCInc=0                                            Premise(F130)
	S68= PC[Out]=addr+4                                         PC-Hold(S44,S66,S67)
	S69= CtrlIR=0                                               Premise(F138)
	S70= [IR]={14,rT,rA,SIMM}                                   IR-Hold(S46,S69)
	S71= CtrlA=1                                                Premise(F140)
	S72= [A]=AddrSel(rA,a)                                      A-Write(S60,S71)
	S73= CtrlB=1                                                Premise(F141)
	S74= [B]={16{SIMM[0]},SIMM}                                 B-Write(S65,S73)

EX	S75= A.Out=AddrSel(rA,a)                                    A-Out(S72)
	S76= B.Out={16{SIMM[0]},SIMM}                               B-Out(S74)
	S77= A.Out=>ALU.A                                           Premise(F167)
	S78= ALU.A=AddrSel(rA,a)                                    Path(S75,S77)
	S79= B.Out=>ALU.B                                           Premise(F168)
	S80= ALU.B={16{SIMM[0]},SIMM}                               Path(S76,S79)
	S81= ALU.Out=AddrSel(rA,a)+{16{SIMM[0]},SIMM}               ALU(S78,S80)
	S82= ALU.Out=>ALUOut.In                                     Premise(F170)
	S83= ALUOut.In=AddrSel(rA,a)+{16{SIMM[0]},SIMM}             Path(S81,S82)
	S84= CtrlPC=0                                               Premise(F175)
	S85= CtrlPCInc=0                                            Premise(F176)
	S86= PC[Out]=addr+4                                         PC-Hold(S68,S84,S85)
	S87= CtrlIR=0                                               Premise(F184)
	S88= [IR]={14,rT,rA,SIMM}                                   IR-Hold(S70,S87)
	S89= CtrlALUOut=1                                           Premise(F188)
	S90= [ALUOut]=AddrSel(rA,a)+{16{SIMM[0]},SIMM}              ALUOut-Write(S83,S89)

MEM	S91= CtrlPC=0                                               Premise(F221)
	S92= CtrlPCInc=0                                            Premise(F222)
	S93= PC[Out]=addr+4                                         PC-Hold(S86,S91,S92)
	S94= CtrlIR=0                                               Premise(F230)
	S95= [IR]={14,rT,rA,SIMM}                                   IR-Hold(S88,S94)
	S96= CtrlALUOut=0                                           Premise(F234)
	S97= [ALUOut]=AddrSel(rA,a)+{16{SIMM[0]},SIMM}              ALUOut-Hold(S90,S96)

DMMU1	S98= CtrlPC=0                                               Premise(F267)
	S99= CtrlPCInc=0                                            Premise(F268)
	S100= PC[Out]=addr+4                                        PC-Hold(S93,S98,S99)
	S101= CtrlIR=0                                              Premise(F276)
	S102= [IR]={14,rT,rA,SIMM}                                  IR-Hold(S95,S101)
	S103= CtrlALUOut=0                                          Premise(F280)
	S104= [ALUOut]=AddrSel(rA,a)+{16{SIMM[0]},SIMM}             ALUOut-Hold(S97,S103)

DMMU2	S105= CtrlPC=0                                              Premise(F313)
	S106= CtrlPCInc=0                                           Premise(F314)
	S107= PC[Out]=addr+4                                        PC-Hold(S100,S105,S106)
	S108= CtrlIR=0                                              Premise(F322)
	S109= [IR]={14,rT,rA,SIMM}                                  IR-Hold(S102,S108)
	S110= CtrlALUOut=0                                          Premise(F326)
	S111= [ALUOut]=AddrSel(rA,a)+{16{SIMM[0]},SIMM}             ALUOut-Hold(S104,S110)

WB	S112= IR.Out6_10=rT                                         IR-Out(S109)
	S113= ALUOut.Out=AddrSel(rA,a)+{16{SIMM[0]},SIMM}           ALUOut-Out(S111)
	S114= IR.Out6_10=>GPRegs.WReg                               Premise(F355)
	S115= GPRegs.WReg=rT                                        Path(S112,S114)
	S116= ALUOut.Out=>GPRegs.WData                              Premise(F356)
	S117= GPRegs.WData=AddrSel(rA,a)+{16{SIMM[0]},SIMM}         Path(S113,S116)
	S118= CtrlPC=0                                              Premise(F359)
	S119= CtrlPCInc=0                                           Premise(F360)
	S120= PC[Out]=addr+4                                        PC-Hold(S107,S118,S119)
	S121= CtrlGPRegs=1                                          Premise(F369)
	S122= GPRegs[rT]=AddrSel(rA,a)+{16{SIMM[0]},SIMM}           GPRegs-Write(S115,S117,S121)

POST	S120= PC[Out]=addr+4                                        PC-Hold(S107,S118,S119)
	S122= GPRegs[rT]=AddrSel(rA,a)+{16{SIMM[0]},SIMM}           GPRegs-Write(S115,S117,S121)

