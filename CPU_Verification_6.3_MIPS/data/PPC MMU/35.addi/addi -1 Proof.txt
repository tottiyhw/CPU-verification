
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={14,rT,rA,SIMM}                        Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMMU.PID                                    Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F36)
	S14= CtrlPCInc=0                                            Premise(F37)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F38)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F43)
	S19= IMem[{pid,addr}]={14,rT,rA,SIMM}                       IMem-Hold(S2,S18)
	S20= CtrlGPRegs=0                                           Premise(F46)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)

IMMU	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= PC.Out=>ICache.IEA                                     Premise(F54)
	S25= ICache.IEA=addr                                        Path(S22,S24)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F59)
	S27= IMem.RAddr={pid,addr}                                  Path(S23,S26)
	S28= IMem.Out={14,rT,rA,SIMM}                               IMem-Read(S27,S19)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S19)
	S30= IMem.Out=>IRMux.MemData                                Premise(F60)
	S31= IRMux.MemData={14,rT,rA,SIMM}                          Path(S28,S30)
	S32= IRMux.Out={14,rT,rA,SIMM}                              IRMux-Select(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F64)
	S34= IR.In={14,rT,rA,SIMM}                                  Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F65)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= CtrlPC=0                                               Premise(F82)
	S38= CtrlPCInc=1                                            Premise(F83)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F86)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S36,S40)
	S42= CtrlIR=1                                               Premise(F91)
	S43= [IR]={14,rT,rA,SIMM}                                   IR-Write(S34,S42)
	S44= CtrlGPRegs=0                                           Premise(F92)
	S45= GPRegs[rA]=a                                           GPRegs-Hold(S21,S44)

ID	S46= IR.Out11_15=rA                                         IR-Out(S43)
	S47= IR.Out16_31=SIMM                                       IR-Out(S43)
	S48= IR.Out11_15=>GPRegs.RReg1                              Premise(F114)
	S49= GPRegs.RReg1=rA                                        Path(S46,S48)
	S50= GPRegs.Rdata1=a                                        GPRegs-Read(S49,S45)
	S51= IR.Out11_15=>AddrSelMux.Sel                            Premise(F115)
	S52= AddrSelMux.Sel=rA                                      Path(S46,S51)
	S53= GPRegs.Rdata1=>AddrSelMux.Data                         Premise(F116)
	S54= AddrSelMux.Data=a                                      Path(S50,S53)
	S55= AddrSelMux.Out=AddrSel(rA,a)                           AddrSelMux(S52,S54)
	S56= AddrSelMux.Out=>A.In                                   Premise(F117)
	S57= A.In=AddrSel(rA,a)                                     Path(S55,S56)
	S58= IR.Out16_31=>IMMEXT.In                                 Premise(F118)
	S59= IMMEXT.In=SIMM                                         Path(S47,S58)
	S60= IMMEXT.Out={16{SIMM[0]},SIMM}                          IMMEXT(S59)
	S61= IMMEXT.Out=>B.In                                       Premise(F119)
	S62= B.In={16{SIMM[0]},SIMM}                                Path(S60,S61)
	S63= CtrlPC=0                                               Premise(F128)
	S64= CtrlPCInc=0                                            Premise(F129)
	S65= PC[Out]=addr+4                                         PC-Hold(S39,S63,S64)
	S66= CtrlICache=0                                           Premise(F132)
	S67= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S66)
	S68= CtrlIR=0                                               Premise(F137)
	S69= [IR]={14,rT,rA,SIMM}                                   IR-Hold(S43,S68)
	S70= CtrlA=1                                                Premise(F139)
	S71= [A]=AddrSel(rA,a)                                      A-Write(S57,S70)
	S72= CtrlB=1                                                Premise(F140)
	S73= [B]={16{SIMM[0]},SIMM}                                 B-Write(S62,S72)

EX	S74= A.Out=AddrSel(rA,a)                                    A-Out(S71)
	S75= B.Out={16{SIMM[0]},SIMM}                               B-Out(S73)
	S76= A.Out=>ALU.A                                           Premise(F166)
	S77= ALU.A=AddrSel(rA,a)                                    Path(S74,S76)
	S78= B.Out=>ALU.B                                           Premise(F167)
	S79= ALU.B={16{SIMM[0]},SIMM}                               Path(S75,S78)
	S80= ALU.Out=AddrSel(rA,a)+{16{SIMM[0]},SIMM}               ALU(S77,S79)
	S81= ALU.Out=>ALUOut.In                                     Premise(F169)
	S82= ALUOut.In=AddrSel(rA,a)+{16{SIMM[0]},SIMM}             Path(S80,S81)
	S83= CtrlPC=0                                               Premise(F174)
	S84= CtrlPCInc=0                                            Premise(F175)
	S85= PC[Out]=addr+4                                         PC-Hold(S65,S83,S84)
	S86= CtrlICache=0                                           Premise(F178)
	S87= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S67,S86)
	S88= CtrlIR=0                                               Premise(F183)
	S89= [IR]={14,rT,rA,SIMM}                                   IR-Hold(S69,S88)
	S90= CtrlALUOut=1                                           Premise(F187)
	S91= [ALUOut]=AddrSel(rA,a)+{16{SIMM[0]},SIMM}              ALUOut-Write(S82,S90)

MEM	S92= CtrlPC=0                                               Premise(F220)
	S93= CtrlPCInc=0                                            Premise(F221)
	S94= PC[Out]=addr+4                                         PC-Hold(S85,S92,S93)
	S95= CtrlICache=0                                           Premise(F224)
	S96= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S87,S95)
	S97= CtrlIR=0                                               Premise(F229)
	S98= [IR]={14,rT,rA,SIMM}                                   IR-Hold(S89,S97)
	S99= CtrlALUOut=0                                           Premise(F233)
	S100= [ALUOut]=AddrSel(rA,a)+{16{SIMM[0]},SIMM}             ALUOut-Hold(S91,S99)

DMMU1	S101= CtrlPC=0                                              Premise(F266)
	S102= CtrlPCInc=0                                           Premise(F267)
	S103= PC[Out]=addr+4                                        PC-Hold(S94,S101,S102)
	S104= CtrlICache=0                                          Premise(F270)
	S105= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S96,S104)
	S106= CtrlIR=0                                              Premise(F275)
	S107= [IR]={14,rT,rA,SIMM}                                  IR-Hold(S98,S106)
	S108= CtrlALUOut=0                                          Premise(F279)
	S109= [ALUOut]=AddrSel(rA,a)+{16{SIMM[0]},SIMM}             ALUOut-Hold(S100,S108)

DMMU2	S110= CtrlPC=0                                              Premise(F312)
	S111= CtrlPCInc=0                                           Premise(F313)
	S112= PC[Out]=addr+4                                        PC-Hold(S103,S110,S111)
	S113= CtrlICache=0                                          Premise(F316)
	S114= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S105,S113)
	S115= CtrlIR=0                                              Premise(F321)
	S116= [IR]={14,rT,rA,SIMM}                                  IR-Hold(S107,S115)
	S117= CtrlALUOut=0                                          Premise(F325)
	S118= [ALUOut]=AddrSel(rA,a)+{16{SIMM[0]},SIMM}             ALUOut-Hold(S109,S117)

WB	S119= IR.Out6_10=rT                                         IR-Out(S116)
	S120= ALUOut.Out=AddrSel(rA,a)+{16{SIMM[0]},SIMM}           ALUOut-Out(S118)
	S121= IR.Out6_10=>GPRegs.WReg                               Premise(F354)
	S122= GPRegs.WReg=rT                                        Path(S119,S121)
	S123= ALUOut.Out=>GPRegs.WData                              Premise(F355)
	S124= GPRegs.WData=AddrSel(rA,a)+{16{SIMM[0]},SIMM}         Path(S120,S123)
	S125= CtrlPC=0                                              Premise(F358)
	S126= CtrlPCInc=0                                           Premise(F359)
	S127= PC[Out]=addr+4                                        PC-Hold(S112,S125,S126)
	S128= CtrlICache=0                                          Premise(F362)
	S129= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S114,S128)
	S130= CtrlGPRegs=1                                          Premise(F368)
	S131= GPRegs[rT]=AddrSel(rA,a)+{16{SIMM[0]},SIMM}           GPRegs-Write(S122,S124,S130)

POST	S127= PC[Out]=addr+4                                        PC-Hold(S112,S125,S126)
	S129= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S114,S128)
	S131= GPRegs[rT]=AddrSel(rA,a)+{16{SIMM[0]},SIMM}           GPRegs-Write(S122,S124,S130)

