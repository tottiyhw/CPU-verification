
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={12,rT,rA,SIMM}                        Premise(F2)
	S3= ICache[addr]={12,rT,rA,SIMM}                            Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={12,rT,rA,SIMM}                             ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={12,rT,rA,SIMM}                           Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F37)
	S20= CtrlPCInc=0                                            Premise(F38)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F39)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F42)
	S25= [ICacheReg]={12,rT,rA,SIMM}                            ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F44)
	S27= IMem[{pid,addr}]={12,rT,rA,SIMM}                       IMem-Hold(S2,S26)
	S28= CtrlGPRegs=0                                           Premise(F47)
	S29= GPRegs[rA]=a                                           GPRegs-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={12,rT,rA,SIMM}                          ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F64)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={12,rT,rA,SIMM}                               IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F65)
	S36= IRMux.MemData={12,rT,rA,SIMM}                          Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F66)
	S38= IRMux.CacheData={12,rT,rA,SIMM}                        Path(S31,S37)
	S39= IRMux.Out={12,rT,rA,SIMM}                              IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F69)
	S41= IR.In={12,rT,rA,SIMM}                                  Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F87)
	S43= CtrlPCInc=1                                            Premise(F88)
	S44= PC[Out]=addr+4                                         PC-Inc(S21,S42,S43)
	S45= CtrlIR=1                                               Premise(F96)
	S46= [IR]={12,rT,rA,SIMM}                                   IR-Write(S41,S45)
	S47= CtrlGPRegs=0                                           Premise(F97)
	S48= GPRegs[rA]=a                                           GPRegs-Hold(S29,S47)

ID	S49= IR.Out11_15=rA                                         IR-Out(S46)
	S50= IR.Out16_31=SIMM                                       IR-Out(S46)
	S51= IR.Out11_15=>GPRegs.RReg1                              Premise(F123)
	S52= GPRegs.RReg1=rA                                        Path(S49,S51)
	S53= GPRegs.Rdata1=a                                        GPRegs-Read(S52,S48)
	S54= IR.Out16_31=>IMMEXT.In                                 Premise(F124)
	S55= IMMEXT.In=SIMM                                         Path(S50,S54)
	S56= IMMEXT.Out={16{SIMM[0]},SIMM}                          IMMEXT(S55)
	S57= GPRegs.Rdata1=>A.In                                    Premise(F125)
	S58= A.In=a                                                 Path(S53,S57)
	S59= IMMEXT.Out=>B.In                                       Premise(F126)
	S60= B.In={16{SIMM[0]},SIMM}                                Path(S56,S59)
	S61= CtrlPC=0                                               Premise(F137)
	S62= CtrlPCInc=0                                            Premise(F138)
	S63= PC[Out]=addr+4                                         PC-Hold(S44,S61,S62)
	S64= CtrlIR=0                                               Premise(F146)
	S65= [IR]={12,rT,rA,SIMM}                                   IR-Hold(S46,S64)
	S66= CtrlA=1                                                Premise(F148)
	S67= [A]=a                                                  A-Write(S58,S66)
	S68= CtrlB=1                                                Premise(F149)
	S69= [B]={16{SIMM[0]},SIMM}                                 B-Write(S60,S68)

EX	S70= A.Out=a                                                A-Out(S67)
	S71= B.Out={16{SIMM[0]},SIMM}                               B-Out(S69)
	S72= A.Out=>ALU.A                                           Premise(F177)
	S73= ALU.A=a                                                Path(S70,S72)
	S74= B.Out=>ALU.B                                           Premise(F178)
	S75= ALU.B={16{SIMM[0]},SIMM}                               Path(S71,S74)
	S76= ALU.Out=a+{16{SIMM[0]},SIMM}                           ALU(S73,S75)
	S77= ALU.CA=Carry(a+{16{SIMM[0]},SIMM})                     ALU(S73,S75)
	S78= ALU.Out=>ALUOut.In                                     Premise(F180)
	S79= ALUOut.In=a+{16{SIMM[0]},SIMM}                         Path(S76,S78)
	S80= ALU.CA=>CAReg.In                                       Premise(F181)
	S81= CAReg.In=Carry(a+{16{SIMM[0]},SIMM})                   Path(S77,S80)
	S82= CtrlPC=0                                               Premise(F187)
	S83= CtrlPCInc=0                                            Premise(F188)
	S84= PC[Out]=addr+4                                         PC-Hold(S63,S82,S83)
	S85= CtrlIR=0                                               Premise(F196)
	S86= [IR]={12,rT,rA,SIMM}                                   IR-Hold(S65,S85)
	S87= CtrlALUOut=1                                           Premise(F200)
	S88= [ALUOut]=a+{16{SIMM[0]},SIMM}                          ALUOut-Write(S79,S87)
	S89= CtrlCAReg=1                                            Premise(F201)
	S90= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                    CAReg-Write(S81,S89)

MEM	S91= CtrlPC=0                                               Premise(F237)
	S92= CtrlPCInc=0                                            Premise(F238)
	S93= PC[Out]=addr+4                                         PC-Hold(S84,S91,S92)
	S94= CtrlIR=0                                               Premise(F246)
	S95= [IR]={12,rT,rA,SIMM}                                   IR-Hold(S86,S94)
	S96= CtrlALUOut=0                                           Premise(F250)
	S97= [ALUOut]=a+{16{SIMM[0]},SIMM}                          ALUOut-Hold(S88,S96)
	S98= CtrlCAReg=0                                            Premise(F251)
	S99= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                    CAReg-Hold(S90,S98)

DMMU1	S100= CtrlPC=0                                              Premise(F287)
	S101= CtrlPCInc=0                                           Premise(F288)
	S102= PC[Out]=addr+4                                        PC-Hold(S93,S100,S101)
	S103= CtrlIR=0                                              Premise(F296)
	S104= [IR]={12,rT,rA,SIMM}                                  IR-Hold(S95,S103)
	S105= CtrlALUOut=0                                          Premise(F300)
	S106= [ALUOut]=a+{16{SIMM[0]},SIMM}                         ALUOut-Hold(S97,S105)
	S107= CtrlCAReg=0                                           Premise(F301)
	S108= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                   CAReg-Hold(S99,S107)

DMMU2	S109= CtrlPC=0                                              Premise(F337)
	S110= CtrlPCInc=0                                           Premise(F338)
	S111= PC[Out]=addr+4                                        PC-Hold(S102,S109,S110)
	S112= CtrlIR=0                                              Premise(F346)
	S113= [IR]={12,rT,rA,SIMM}                                  IR-Hold(S104,S112)
	S114= CtrlALUOut=0                                          Premise(F350)
	S115= [ALUOut]=a+{16{SIMM[0]},SIMM}                         ALUOut-Hold(S106,S114)
	S116= CtrlCAReg=0                                           Premise(F351)
	S117= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                   CAReg-Hold(S108,S116)

WB	S118= IR.Out6_10=rT                                         IR-Out(S113)
	S119= ALUOut.Out=a+{16{SIMM[0]},SIMM}                       ALUOut-Out(S115)
	S120= CAReg.Out=Carry(a+{16{SIMM[0]},SIMM})                 CAReg-Out(S117)
	S121= IR.Out6_10=>GPRegs.WReg                               Premise(F382)
	S122= GPRegs.WReg=rT                                        Path(S118,S121)
	S123= ALUOut.Out=>GPRegs.WData                              Premise(F383)
	S124= GPRegs.WData=a+{16{SIMM[0]},SIMM}                     Path(S119,S123)
	S125= CAReg.Out=>XER.CAIn                                   Premise(F384)
	S126= XER.CAIn=Carry(a+{16{SIMM[0]},SIMM})                  Path(S120,S125)
	S127= CtrlPC=0                                              Premise(F387)
	S128= CtrlPCInc=0                                           Premise(F388)
	S129= PC[Out]=addr+4                                        PC-Hold(S111,S127,S128)
	S130= CtrlGPRegs=1                                          Premise(F397)
	S131= GPRegs[rT]=a+{16{SIMM[0]},SIMM}                       GPRegs-Write(S122,S124,S130)
	S132= CtrlXERCA=1                                           Premise(F404)
	S133= XER[CA]=Carry(a+{16{SIMM[0]},SIMM})                   XER-CA-Write(S126,S132)

POST	S129= PC[Out]=addr+4                                        PC-Hold(S111,S127,S128)
	S131= GPRegs[rT]=a+{16{SIMM[0]},SIMM}                       GPRegs-Write(S122,S124,S130)
	S133= XER[CA]=Carry(a+{16{SIMM[0]},SIMM})                   XER-CA-Write(S126,S132)

