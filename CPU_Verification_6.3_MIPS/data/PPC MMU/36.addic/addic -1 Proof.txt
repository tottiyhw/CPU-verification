
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={12,rT,rA,SIMM}                        Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMMU.PID                                    Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F36)
	S14= CtrlPCInc=0                                            Premise(F37)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F38)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F43)
	S19= IMem[{pid,addr}]={12,rT,rA,SIMM}                       IMem-Hold(S2,S18)
	S20= CtrlGPRegs=0                                           Premise(F46)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)

IMMU	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= PC.Out=>ICache.IEA                                     Premise(F58)
	S25= ICache.IEA=addr                                        Path(S22,S24)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F63)
	S27= IMem.RAddr={pid,addr}                                  Path(S23,S26)
	S28= IMem.Out={12,rT,rA,SIMM}                               IMem-Read(S27,S19)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S19)
	S30= IMem.Out=>IRMux.MemData                                Premise(F64)
	S31= IRMux.MemData={12,rT,rA,SIMM}                          Path(S28,S30)
	S32= IRMux.Out={12,rT,rA,SIMM}                              IRMux-Select(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F68)
	S34= IR.In={12,rT,rA,SIMM}                                  Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F69)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= CtrlPC=0                                               Premise(F86)
	S38= CtrlPCInc=1                                            Premise(F87)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F90)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S36,S40)
	S42= CtrlIR=1                                               Premise(F95)
	S43= [IR]={12,rT,rA,SIMM}                                   IR-Write(S34,S42)
	S44= CtrlGPRegs=0                                           Premise(F96)
	S45= GPRegs[rA]=a                                           GPRegs-Hold(S21,S44)

ID	S46= IR.Out11_15=rA                                         IR-Out(S43)
	S47= IR.Out16_31=SIMM                                       IR-Out(S43)
	S48= IR.Out11_15=>GPRegs.RReg1                              Premise(F122)
	S49= GPRegs.RReg1=rA                                        Path(S46,S48)
	S50= GPRegs.Rdata1=a                                        GPRegs-Read(S49,S45)
	S51= IR.Out16_31=>IMMEXT.In                                 Premise(F123)
	S52= IMMEXT.In=SIMM                                         Path(S47,S51)
	S53= IMMEXT.Out={16{SIMM[0]},SIMM}                          IMMEXT(S52)
	S54= GPRegs.Rdata1=>A.In                                    Premise(F124)
	S55= A.In=a                                                 Path(S50,S54)
	S56= IMMEXT.Out=>B.In                                       Premise(F125)
	S57= B.In={16{SIMM[0]},SIMM}                                Path(S53,S56)
	S58= CtrlPC=0                                               Premise(F136)
	S59= CtrlPCInc=0                                            Premise(F137)
	S60= PC[Out]=addr+4                                         PC-Hold(S39,S58,S59)
	S61= CtrlICache=0                                           Premise(F140)
	S62= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S61)
	S63= CtrlIR=0                                               Premise(F145)
	S64= [IR]={12,rT,rA,SIMM}                                   IR-Hold(S43,S63)
	S65= CtrlA=1                                                Premise(F147)
	S66= [A]=a                                                  A-Write(S55,S65)
	S67= CtrlB=1                                                Premise(F148)
	S68= [B]={16{SIMM[0]},SIMM}                                 B-Write(S57,S67)

EX	S69= A.Out=a                                                A-Out(S66)
	S70= B.Out={16{SIMM[0]},SIMM}                               B-Out(S68)
	S71= A.Out=>ALU.A                                           Premise(F176)
	S72= ALU.A=a                                                Path(S69,S71)
	S73= B.Out=>ALU.B                                           Premise(F177)
	S74= ALU.B={16{SIMM[0]},SIMM}                               Path(S70,S73)
	S75= ALU.Out=a+{16{SIMM[0]},SIMM}                           ALU(S72,S74)
	S76= ALU.CA=Carry(a+{16{SIMM[0]},SIMM})                     ALU(S72,S74)
	S77= ALU.Out=>ALUOut.In                                     Premise(F179)
	S78= ALUOut.In=a+{16{SIMM[0]},SIMM}                         Path(S75,S77)
	S79= ALU.CA=>CAReg.In                                       Premise(F180)
	S80= CAReg.In=Carry(a+{16{SIMM[0]},SIMM})                   Path(S76,S79)
	S81= CtrlPC=0                                               Premise(F186)
	S82= CtrlPCInc=0                                            Premise(F187)
	S83= PC[Out]=addr+4                                         PC-Hold(S60,S81,S82)
	S84= CtrlICache=0                                           Premise(F190)
	S85= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S62,S84)
	S86= CtrlIR=0                                               Premise(F195)
	S87= [IR]={12,rT,rA,SIMM}                                   IR-Hold(S64,S86)
	S88= CtrlALUOut=1                                           Premise(F199)
	S89= [ALUOut]=a+{16{SIMM[0]},SIMM}                          ALUOut-Write(S78,S88)
	S90= CtrlCAReg=1                                            Premise(F200)
	S91= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                    CAReg-Write(S80,S90)

MEM	S92= CtrlPC=0                                               Premise(F236)
	S93= CtrlPCInc=0                                            Premise(F237)
	S94= PC[Out]=addr+4                                         PC-Hold(S83,S92,S93)
	S95= CtrlICache=0                                           Premise(F240)
	S96= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S85,S95)
	S97= CtrlIR=0                                               Premise(F245)
	S98= [IR]={12,rT,rA,SIMM}                                   IR-Hold(S87,S97)
	S99= CtrlALUOut=0                                           Premise(F249)
	S100= [ALUOut]=a+{16{SIMM[0]},SIMM}                         ALUOut-Hold(S89,S99)
	S101= CtrlCAReg=0                                           Premise(F250)
	S102= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                   CAReg-Hold(S91,S101)

DMMU1	S103= CtrlPC=0                                              Premise(F286)
	S104= CtrlPCInc=0                                           Premise(F287)
	S105= PC[Out]=addr+4                                        PC-Hold(S94,S103,S104)
	S106= CtrlICache=0                                          Premise(F290)
	S107= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S96,S106)
	S108= CtrlIR=0                                              Premise(F295)
	S109= [IR]={12,rT,rA,SIMM}                                  IR-Hold(S98,S108)
	S110= CtrlALUOut=0                                          Premise(F299)
	S111= [ALUOut]=a+{16{SIMM[0]},SIMM}                         ALUOut-Hold(S100,S110)
	S112= CtrlCAReg=0                                           Premise(F300)
	S113= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                   CAReg-Hold(S102,S112)

DMMU2	S114= CtrlPC=0                                              Premise(F336)
	S115= CtrlPCInc=0                                           Premise(F337)
	S116= PC[Out]=addr+4                                        PC-Hold(S105,S114,S115)
	S117= CtrlICache=0                                          Premise(F340)
	S118= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S107,S117)
	S119= CtrlIR=0                                              Premise(F345)
	S120= [IR]={12,rT,rA,SIMM}                                  IR-Hold(S109,S119)
	S121= CtrlALUOut=0                                          Premise(F349)
	S122= [ALUOut]=a+{16{SIMM[0]},SIMM}                         ALUOut-Hold(S111,S121)
	S123= CtrlCAReg=0                                           Premise(F350)
	S124= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                   CAReg-Hold(S113,S123)

WB	S125= IR.Out6_10=rT                                         IR-Out(S120)
	S126= ALUOut.Out=a+{16{SIMM[0]},SIMM}                       ALUOut-Out(S122)
	S127= CAReg.Out=Carry(a+{16{SIMM[0]},SIMM})                 CAReg-Out(S124)
	S128= IR.Out6_10=>GPRegs.WReg                               Premise(F381)
	S129= GPRegs.WReg=rT                                        Path(S125,S128)
	S130= ALUOut.Out=>GPRegs.WData                              Premise(F382)
	S131= GPRegs.WData=a+{16{SIMM[0]},SIMM}                     Path(S126,S130)
	S132= CAReg.Out=>XER.CAIn                                   Premise(F383)
	S133= XER.CAIn=Carry(a+{16{SIMM[0]},SIMM})                  Path(S127,S132)
	S134= CtrlPC=0                                              Premise(F386)
	S135= CtrlPCInc=0                                           Premise(F387)
	S136= PC[Out]=addr+4                                        PC-Hold(S116,S134,S135)
	S137= CtrlICache=0                                          Premise(F390)
	S138= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S118,S137)
	S139= CtrlGPRegs=1                                          Premise(F396)
	S140= GPRegs[rT]=a+{16{SIMM[0]},SIMM}                       GPRegs-Write(S129,S131,S139)
	S141= CtrlXERCA=1                                           Premise(F403)
	S142= XER[CA]=Carry(a+{16{SIMM[0]},SIMM})                   XER-CA-Write(S133,S141)

POST	S136= PC[Out]=addr+4                                        PC-Hold(S116,S134,S135)
	S138= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S118,S137)
	S140= GPRegs[rT]=a+{16{SIMM[0]},SIMM}                       GPRegs-Write(S129,S131,S139)
	S142= XER[CA]=Carry(a+{16{SIMM[0]},SIMM})                   XER-CA-Write(S133,S141)

