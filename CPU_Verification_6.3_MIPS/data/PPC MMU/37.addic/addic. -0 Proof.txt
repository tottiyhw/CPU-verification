
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={13,rT,rA,SIMM}                        Premise(F2)
	S3= ICache[addr]={13,rT,rA,SIMM}                            Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F10)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={13,rT,rA,SIMM}                             ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F11)
	S19= ICacheReg.In={13,rT,rA,SIMM}                           Path(S17,S18)
	S20= CtrlPC=0                                               Premise(F42)
	S21= CtrlPCInc=0                                            Premise(F43)
	S22= PC[Out]=addr                                           PC-Hold(S1,S20,S21)
	S23= CtrlIAddrReg=1                                         Premise(F44)
	S24= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S23)
	S25= CtrlICacheReg=1                                        Premise(F47)
	S26= [ICacheReg]={13,rT,rA,SIMM}                            ICacheReg-Write(S19,S25)
	S27= CtrlIMem=0                                             Premise(F49)
	S28= IMem[{pid,addr}]={13,rT,rA,SIMM}                       IMem-Hold(S2,S27)
	S29= CtrlGPRegs=0                                           Premise(F52)
	S30= GPRegs[rA]=a                                           GPRegs-Hold(S4,S29)
	S31= CtrlXERSO=0                                            Premise(F56)
	S32= XER[SO]=so                                             XER-SO-Hold(S5,S31)

IMMU	S33= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S24)
	S34= ICacheReg.Out={13,rT,rA,SIMM}                          ICacheReg-Out(S26)
	S35= IAddrReg.Out=>IMem.RAddr                               Premise(F74)
	S36= IMem.RAddr={pid,addr}                                  Path(S33,S35)
	S37= IMem.Out={13,rT,rA,SIMM}                               IMem-Read(S36,S28)
	S38= IMem.Out=>IRMux.MemData                                Premise(F75)
	S39= IRMux.MemData={13,rT,rA,SIMM}                          Path(S37,S38)
	S40= ICacheReg.Out=>IRMux.CacheData                         Premise(F76)
	S41= IRMux.CacheData={13,rT,rA,SIMM}                        Path(S34,S40)
	S42= IRMux.Out={13,rT,rA,SIMM}                              IRMux-Select(S39,S41)
	S43= IRMux.Out=>IR.In                                       Premise(F79)
	S44= IR.In={13,rT,rA,SIMM}                                  Path(S42,S43)
	S45= CtrlPC=0                                               Premise(F101)
	S46= CtrlPCInc=1                                            Premise(F102)
	S47= PC[Out]=addr+4                                         PC-Inc(S22,S45,S46)
	S48= CtrlIR=1                                               Premise(F110)
	S49= [IR]={13,rT,rA,SIMM}                                   IR-Write(S44,S48)
	S50= CtrlGPRegs=0                                           Premise(F111)
	S51= GPRegs[rA]=a                                           GPRegs-Hold(S30,S50)
	S52= CtrlXERSO=0                                            Premise(F115)
	S53= XER[SO]=so                                             XER-SO-Hold(S32,S52)

ID	S54= IR.Out11_15=rA                                         IR-Out(S49)
	S55= IR.Out16_31=SIMM                                       IR-Out(S49)
	S56= IR.Out11_15=>GPRegs.RReg1                              Premise(F142)
	S57= GPRegs.RReg1=rA                                        Path(S54,S56)
	S58= GPRegs.Rdata1=a                                        GPRegs-Read(S57,S51)
	S59= IR.Out16_31=>IMMEXT.In                                 Premise(F143)
	S60= IMMEXT.In=SIMM                                         Path(S55,S59)
	S61= IMMEXT.Out={16{SIMM[0]},SIMM}                          IMMEXT(S60)
	S62= GPRegs.Rdata1=>A.In                                    Premise(F144)
	S63= A.In=a                                                 Path(S58,S62)
	S64= IMMEXT.Out=>B.In                                       Premise(F145)
	S65= B.In={16{SIMM[0]},SIMM}                                Path(S61,S64)
	S66= CtrlPC=0                                               Premise(F160)
	S67= CtrlPCInc=0                                            Premise(F161)
	S68= PC[Out]=addr+4                                         PC-Hold(S47,S66,S67)
	S69= CtrlIR=0                                               Premise(F169)
	S70= [IR]={13,rT,rA,SIMM}                                   IR-Hold(S49,S69)
	S71= CtrlA=1                                                Premise(F171)
	S72= [A]=a                                                  A-Write(S63,S71)
	S73= CtrlB=1                                                Premise(F172)
	S74= [B]={16{SIMM[0]},SIMM}                                 B-Write(S65,S73)
	S75= CtrlXERSO=0                                            Premise(F174)
	S76= XER[SO]=so                                             XER-SO-Hold(S53,S75)

EX	S77= A.Out=a                                                A-Out(S72)
	S78= B.Out={16{SIMM[0]},SIMM}                               B-Out(S74)
	S79= XER.SOOut=so                                           XER-SO-Out(S76)
	S80= A.Out=>ALU.A                                           Premise(F205)
	S81= ALU.A=a                                                Path(S77,S80)
	S82= B.Out=>ALU.B                                           Premise(F206)
	S83= ALU.B={16{SIMM[0]},SIMM}                               Path(S78,S82)
	S84= ALU.Out=a+{16{SIMM[0]},SIMM}                           ALU(S81,S83)
	S85= ALU.CMP=Compare0(a+{16{SIMM[0]},SIMM})                 ALU(S81,S83)
	S86= ALU.CA=Carry(a+{16{SIMM[0]},SIMM})                     ALU(S81,S83)
	S87= ALU.Out=>ALUOut.In                                     Premise(F208)
	S88= ALUOut.In=a+{16{SIMM[0]},SIMM}                         Path(S84,S87)
	S89= ALU.CMP=>DataCmb.A                                     Premise(F209)
	S90= DataCmb.A=Compare0(a+{16{SIMM[0]},SIMM})               Path(S85,S89)
	S91= XER.SOOut=>DataCmb.B                                   Premise(F210)
	S92= DataCmb.B=so                                           Path(S79,S91)
	S93= DataCmb.Out={Compare0(a+{16{SIMM[0]},SIMM}),so}        DataCmb(S90,S92)
	S94= DataCmb.Out=>DR4bit.In                                 Premise(F211)
	S95= DR4bit.In={Compare0(a+{16{SIMM[0]},SIMM}),so}          Path(S93,S94)
	S96= ALU.CA=>CAReg.In                                       Premise(F212)
	S97= CAReg.In=Carry(a+{16{SIMM[0]},SIMM})                   Path(S86,S96)
	S98= CtrlPC=0                                               Premise(F219)
	S99= CtrlPCInc=0                                            Premise(F220)
	S100= PC[Out]=addr+4                                        PC-Hold(S68,S98,S99)
	S101= CtrlIR=0                                              Premise(F228)
	S102= [IR]={13,rT,rA,SIMM}                                  IR-Hold(S70,S101)
	S103= CtrlALUOut=1                                          Premise(F232)
	S104= [ALUOut]=a+{16{SIMM[0]},SIMM}                         ALUOut-Write(S88,S103)
	S105= CtrlDR4bit=1                                          Premise(F236)
	S106= [DR4bit]={Compare0(a+{16{SIMM[0]},SIMM}),so}          DR4bit-Write(S95,S105)
	S107= CtrlCAReg=1                                           Premise(F237)
	S108= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                   CAReg-Write(S97,S107)

MEM	S109= CtrlPC=0                                              Premise(F278)
	S110= CtrlPCInc=0                                           Premise(F279)
	S111= PC[Out]=addr+4                                        PC-Hold(S100,S109,S110)
	S112= CtrlIR=0                                              Premise(F287)
	S113= [IR]={13,rT,rA,SIMM}                                  IR-Hold(S102,S112)
	S114= CtrlALUOut=0                                          Premise(F291)
	S115= [ALUOut]=a+{16{SIMM[0]},SIMM}                         ALUOut-Hold(S104,S114)
	S116= CtrlDR4bit=0                                          Premise(F295)
	S117= [DR4bit]={Compare0(a+{16{SIMM[0]},SIMM}),so}          DR4bit-Hold(S106,S116)
	S118= CtrlCAReg=0                                           Premise(F296)
	S119= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                   CAReg-Hold(S108,S118)

DMMU1	S120= CtrlPC=0                                              Premise(F337)
	S121= CtrlPCInc=0                                           Premise(F338)
	S122= PC[Out]=addr+4                                        PC-Hold(S111,S120,S121)
	S123= CtrlIR=0                                              Premise(F346)
	S124= [IR]={13,rT,rA,SIMM}                                  IR-Hold(S113,S123)
	S125= CtrlALUOut=0                                          Premise(F350)
	S126= [ALUOut]=a+{16{SIMM[0]},SIMM}                         ALUOut-Hold(S115,S125)
	S127= CtrlDR4bit=0                                          Premise(F354)
	S128= [DR4bit]={Compare0(a+{16{SIMM[0]},SIMM}),so}          DR4bit-Hold(S117,S127)
	S129= CtrlCAReg=0                                           Premise(F355)
	S130= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                   CAReg-Hold(S119,S129)

DMMU2	S131= CtrlPC=0                                              Premise(F396)
	S132= CtrlPCInc=0                                           Premise(F397)
	S133= PC[Out]=addr+4                                        PC-Hold(S122,S131,S132)
	S134= CtrlIR=0                                              Premise(F405)
	S135= [IR]={13,rT,rA,SIMM}                                  IR-Hold(S124,S134)
	S136= CtrlALUOut=0                                          Premise(F409)
	S137= [ALUOut]=a+{16{SIMM[0]},SIMM}                         ALUOut-Hold(S126,S136)
	S138= CtrlDR4bit=0                                          Premise(F413)
	S139= [DR4bit]={Compare0(a+{16{SIMM[0]},SIMM}),so}          DR4bit-Hold(S128,S138)
	S140= CtrlCAReg=0                                           Premise(F414)
	S141= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                   CAReg-Hold(S130,S140)

WB	S142= IR.Out6_10=rT                                         IR-Out(S135)
	S143= ALUOut.Out=a+{16{SIMM[0]},SIMM}                       ALUOut-Out(S137)
	S144= DR4bit.Out={Compare0(a+{16{SIMM[0]},SIMM}),so}        DR4bit-Out(S139)
	S145= CAReg.Out=Carry(a+{16{SIMM[0]},SIMM})                 CAReg-Out(S141)
	S146= IR.Out6_10=>GPRegs.WReg                               Premise(F449)
	S147= GPRegs.WReg=rT                                        Path(S142,S146)
	S148= ALUOut.Out=>GPRegs.WData                              Premise(F450)
	S149= GPRegs.WData=a+{16{SIMM[0]},SIMM}                     Path(S143,S148)
	S150= DR4bit.Out=>CRRegs.CR0In                              Premise(F451)
	S151= CRRegs.CR0In={Compare0(a+{16{SIMM[0]},SIMM}),so}      Path(S144,S150)
	S152= CAReg.Out=>XER.CAIn                                   Premise(F452)
	S153= XER.CAIn=Carry(a+{16{SIMM[0]},SIMM})                  Path(S145,S152)
	S154= CtrlPC=0                                              Premise(F455)
	S155= CtrlPCInc=0                                           Premise(F456)
	S156= PC[Out]=addr+4                                        PC-Hold(S133,S154,S155)
	S157= CtrlGPRegs=1                                          Premise(F465)
	S158= GPRegs[rT]=a+{16{SIMM[0]},SIMM}                       GPRegs-Write(S147,S149,S157)
	S159= CtrlXERCA=1                                           Premise(F471)
	S160= XER[CA]=Carry(a+{16{SIMM[0]},SIMM})                   XER-CA-Write(S153,S159)
	S161= CtrlCRRegsCR0=1                                       Premise(F475)
	S162= CRRegs[CR0]={Compare0(a+{16{SIMM[0]},SIMM}),so}       CRRegs-CR0-Write(S151,S161)

POST	S156= PC[Out]=addr+4                                        PC-Hold(S133,S154,S155)
	S158= GPRegs[rT]=a+{16{SIMM[0]},SIMM}                       GPRegs-Write(S147,S149,S157)
	S160= XER[CA]=Carry(a+{16{SIMM[0]},SIMM})                   XER-CA-Write(S153,S159)
	S162= CRRegs[CR0]={Compare0(a+{16{SIMM[0]},SIMM}),so}       CRRegs-CR0-Write(S151,S161)

