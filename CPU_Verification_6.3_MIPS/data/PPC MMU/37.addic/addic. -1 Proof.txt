
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={13,rT,rA,SIMM}                        Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F41)
	S15= CtrlPCInc=0                                            Premise(F42)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F43)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F48)
	S20= IMem[{pid,addr}]={13,rT,rA,SIMM}                       IMem-Hold(S2,S19)
	S21= CtrlGPRegs=0                                           Premise(F51)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= CtrlXERSO=0                                            Premise(F55)
	S24= XER[SO]=so                                             XER-SO-Hold(S4,S23)

IMMU	S25= PC.Out=addr                                            PC-Out(S16)
	S26= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S27= PC.Out=>ICache.IEA                                     Premise(F68)
	S28= ICache.IEA=addr                                        Path(S25,S27)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F73)
	S30= IMem.RAddr={pid,addr}                                  Path(S26,S29)
	S31= IMem.Out={13,rT,rA,SIMM}                               IMem-Read(S30,S20)
	S32= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S30,S20)
	S33= IMem.Out=>IRMux.MemData                                Premise(F74)
	S34= IRMux.MemData={13,rT,rA,SIMM}                          Path(S31,S33)
	S35= IRMux.Out={13,rT,rA,SIMM}                              IRMux-Select(S34)
	S36= IRMux.Out=>IR.In                                       Premise(F78)
	S37= IR.In={13,rT,rA,SIMM}                                  Path(S35,S36)
	S38= IMem.MEM8WordOut=>ICache.WData                         Premise(F79)
	S39= ICache.WData=IMemGet8Word({pid,addr})                  Path(S32,S38)
	S40= CtrlPC=0                                               Premise(F100)
	S41= CtrlPCInc=1                                            Premise(F101)
	S42= PC[Out]=addr+4                                         PC-Inc(S16,S40,S41)
	S43= CtrlICache=1                                           Premise(F104)
	S44= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S28,S39,S43)
	S45= CtrlIR=1                                               Premise(F109)
	S46= [IR]={13,rT,rA,SIMM}                                   IR-Write(S37,S45)
	S47= CtrlGPRegs=0                                           Premise(F110)
	S48= GPRegs[rA]=a                                           GPRegs-Hold(S22,S47)
	S49= CtrlXERSO=0                                            Premise(F114)
	S50= XER[SO]=so                                             XER-SO-Hold(S24,S49)

ID	S51= IR.Out11_15=rA                                         IR-Out(S46)
	S52= IR.Out16_31=SIMM                                       IR-Out(S46)
	S53= IR.Out11_15=>GPRegs.RReg1                              Premise(F141)
	S54= GPRegs.RReg1=rA                                        Path(S51,S53)
	S55= GPRegs.Rdata1=a                                        GPRegs-Read(S54,S48)
	S56= IR.Out16_31=>IMMEXT.In                                 Premise(F142)
	S57= IMMEXT.In=SIMM                                         Path(S52,S56)
	S58= IMMEXT.Out={16{SIMM[0]},SIMM}                          IMMEXT(S57)
	S59= GPRegs.Rdata1=>A.In                                    Premise(F143)
	S60= A.In=a                                                 Path(S55,S59)
	S61= IMMEXT.Out=>B.In                                       Premise(F144)
	S62= B.In={16{SIMM[0]},SIMM}                                Path(S58,S61)
	S63= CtrlPC=0                                               Premise(F159)
	S64= CtrlPCInc=0                                            Premise(F160)
	S65= PC[Out]=addr+4                                         PC-Hold(S42,S63,S64)
	S66= CtrlICache=0                                           Premise(F163)
	S67= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S44,S66)
	S68= CtrlIR=0                                               Premise(F168)
	S69= [IR]={13,rT,rA,SIMM}                                   IR-Hold(S46,S68)
	S70= CtrlA=1                                                Premise(F170)
	S71= [A]=a                                                  A-Write(S60,S70)
	S72= CtrlB=1                                                Premise(F171)
	S73= [B]={16{SIMM[0]},SIMM}                                 B-Write(S62,S72)
	S74= CtrlXERSO=0                                            Premise(F173)
	S75= XER[SO]=so                                             XER-SO-Hold(S50,S74)

EX	S76= A.Out=a                                                A-Out(S71)
	S77= B.Out={16{SIMM[0]},SIMM}                               B-Out(S73)
	S78= XER.SOOut=so                                           XER-SO-Out(S75)
	S79= A.Out=>ALU.A                                           Premise(F204)
	S80= ALU.A=a                                                Path(S76,S79)
	S81= B.Out=>ALU.B                                           Premise(F205)
	S82= ALU.B={16{SIMM[0]},SIMM}                               Path(S77,S81)
	S83= ALU.Out=a+{16{SIMM[0]},SIMM}                           ALU(S80,S82)
	S84= ALU.CMP=Compare0(a+{16{SIMM[0]},SIMM})                 ALU(S80,S82)
	S85= ALU.CA=Carry(a+{16{SIMM[0]},SIMM})                     ALU(S80,S82)
	S86= ALU.Out=>ALUOut.In                                     Premise(F207)
	S87= ALUOut.In=a+{16{SIMM[0]},SIMM}                         Path(S83,S86)
	S88= ALU.CMP=>DataCmb.A                                     Premise(F208)
	S89= DataCmb.A=Compare0(a+{16{SIMM[0]},SIMM})               Path(S84,S88)
	S90= XER.SOOut=>DataCmb.B                                   Premise(F209)
	S91= DataCmb.B=so                                           Path(S78,S90)
	S92= DataCmb.Out={Compare0(a+{16{SIMM[0]},SIMM}),so}        DataCmb(S89,S91)
	S93= DataCmb.Out=>DR4bit.In                                 Premise(F210)
	S94= DR4bit.In={Compare0(a+{16{SIMM[0]},SIMM}),so}          Path(S92,S93)
	S95= ALU.CA=>CAReg.In                                       Premise(F211)
	S96= CAReg.In=Carry(a+{16{SIMM[0]},SIMM})                   Path(S85,S95)
	S97= CtrlPC=0                                               Premise(F218)
	S98= CtrlPCInc=0                                            Premise(F219)
	S99= PC[Out]=addr+4                                         PC-Hold(S65,S97,S98)
	S100= CtrlICache=0                                          Premise(F222)
	S101= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S67,S100)
	S102= CtrlIR=0                                              Premise(F227)
	S103= [IR]={13,rT,rA,SIMM}                                  IR-Hold(S69,S102)
	S104= CtrlALUOut=1                                          Premise(F231)
	S105= [ALUOut]=a+{16{SIMM[0]},SIMM}                         ALUOut-Write(S87,S104)
	S106= CtrlDR4bit=1                                          Premise(F235)
	S107= [DR4bit]={Compare0(a+{16{SIMM[0]},SIMM}),so}          DR4bit-Write(S94,S106)
	S108= CtrlCAReg=1                                           Premise(F236)
	S109= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                   CAReg-Write(S96,S108)

MEM	S110= CtrlPC=0                                              Premise(F277)
	S111= CtrlPCInc=0                                           Premise(F278)
	S112= PC[Out]=addr+4                                        PC-Hold(S99,S110,S111)
	S113= CtrlICache=0                                          Premise(F281)
	S114= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S101,S113)
	S115= CtrlIR=0                                              Premise(F286)
	S116= [IR]={13,rT,rA,SIMM}                                  IR-Hold(S103,S115)
	S117= CtrlALUOut=0                                          Premise(F290)
	S118= [ALUOut]=a+{16{SIMM[0]},SIMM}                         ALUOut-Hold(S105,S117)
	S119= CtrlDR4bit=0                                          Premise(F294)
	S120= [DR4bit]={Compare0(a+{16{SIMM[0]},SIMM}),so}          DR4bit-Hold(S107,S119)
	S121= CtrlCAReg=0                                           Premise(F295)
	S122= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                   CAReg-Hold(S109,S121)

DMMU1	S123= CtrlPC=0                                              Premise(F336)
	S124= CtrlPCInc=0                                           Premise(F337)
	S125= PC[Out]=addr+4                                        PC-Hold(S112,S123,S124)
	S126= CtrlICache=0                                          Premise(F340)
	S127= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S114,S126)
	S128= CtrlIR=0                                              Premise(F345)
	S129= [IR]={13,rT,rA,SIMM}                                  IR-Hold(S116,S128)
	S130= CtrlALUOut=0                                          Premise(F349)
	S131= [ALUOut]=a+{16{SIMM[0]},SIMM}                         ALUOut-Hold(S118,S130)
	S132= CtrlDR4bit=0                                          Premise(F353)
	S133= [DR4bit]={Compare0(a+{16{SIMM[0]},SIMM}),so}          DR4bit-Hold(S120,S132)
	S134= CtrlCAReg=0                                           Premise(F354)
	S135= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                   CAReg-Hold(S122,S134)

DMMU2	S136= CtrlPC=0                                              Premise(F395)
	S137= CtrlPCInc=0                                           Premise(F396)
	S138= PC[Out]=addr+4                                        PC-Hold(S125,S136,S137)
	S139= CtrlICache=0                                          Premise(F399)
	S140= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S127,S139)
	S141= CtrlIR=0                                              Premise(F404)
	S142= [IR]={13,rT,rA,SIMM}                                  IR-Hold(S129,S141)
	S143= CtrlALUOut=0                                          Premise(F408)
	S144= [ALUOut]=a+{16{SIMM[0]},SIMM}                         ALUOut-Hold(S131,S143)
	S145= CtrlDR4bit=0                                          Premise(F412)
	S146= [DR4bit]={Compare0(a+{16{SIMM[0]},SIMM}),so}          DR4bit-Hold(S133,S145)
	S147= CtrlCAReg=0                                           Premise(F413)
	S148= [CAReg]=Carry(a+{16{SIMM[0]},SIMM})                   CAReg-Hold(S135,S147)

WB	S149= IR.Out6_10=rT                                         IR-Out(S142)
	S150= ALUOut.Out=a+{16{SIMM[0]},SIMM}                       ALUOut-Out(S144)
	S151= DR4bit.Out={Compare0(a+{16{SIMM[0]},SIMM}),so}        DR4bit-Out(S146)
	S152= CAReg.Out=Carry(a+{16{SIMM[0]},SIMM})                 CAReg-Out(S148)
	S153= IR.Out6_10=>GPRegs.WReg                               Premise(F448)
	S154= GPRegs.WReg=rT                                        Path(S149,S153)
	S155= ALUOut.Out=>GPRegs.WData                              Premise(F449)
	S156= GPRegs.WData=a+{16{SIMM[0]},SIMM}                     Path(S150,S155)
	S157= DR4bit.Out=>CRRegs.CR0In                              Premise(F450)
	S158= CRRegs.CR0In={Compare0(a+{16{SIMM[0]},SIMM}),so}      Path(S151,S157)
	S159= CAReg.Out=>XER.CAIn                                   Premise(F451)
	S160= XER.CAIn=Carry(a+{16{SIMM[0]},SIMM})                  Path(S152,S159)
	S161= CtrlPC=0                                              Premise(F454)
	S162= CtrlPCInc=0                                           Premise(F455)
	S163= PC[Out]=addr+4                                        PC-Hold(S138,S161,S162)
	S164= CtrlICache=0                                          Premise(F458)
	S165= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S140,S164)
	S166= CtrlGPRegs=1                                          Premise(F464)
	S167= GPRegs[rT]=a+{16{SIMM[0]},SIMM}                       GPRegs-Write(S154,S156,S166)
	S168= CtrlXERCA=1                                           Premise(F470)
	S169= XER[CA]=Carry(a+{16{SIMM[0]},SIMM})                   XER-CA-Write(S160,S168)
	S170= CtrlCRRegsCR0=1                                       Premise(F474)
	S171= CRRegs[CR0]={Compare0(a+{16{SIMM[0]},SIMM}),so}       CRRegs-CR0-Write(S158,S170)

POST	S163= PC[Out]=addr+4                                        PC-Hold(S138,S161,S162)
	S165= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S140,S164)
	S167= GPRegs[rT]=a+{16{SIMM[0]},SIMM}                       GPRegs-Write(S154,S156,S166)
	S169= XER[CA]=Carry(a+{16{SIMM[0]},SIMM})                   XER-CA-Write(S160,S168)
	S171= CRRegs[CR0]={Compare0(a+{16{SIMM[0]},SIMM}),so}       CRRegs-CR0-Write(S158,S170)

