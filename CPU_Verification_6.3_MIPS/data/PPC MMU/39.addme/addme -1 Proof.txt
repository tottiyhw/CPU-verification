
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,468}                       Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[CA]=ca                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F37)
	S15= CtrlPCInc=0                                            Premise(F38)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F39)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F44)
	S20= IMem[{pid,addr}]={31,rT,rA,0,468}                      IMem-Hold(S2,S19)
	S21= CtrlGPRegs=0                                           Premise(F47)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= CtrlXERCA=0                                            Premise(F52)
	S24= XER[CA]=ca                                             XER-CA-Hold(S4,S23)

IMMU	S25= PC.Out=addr                                            PC-Out(S16)
	S26= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S27= PC.Out=>ICache.IEA                                     Premise(F59)
	S28= ICache.IEA=addr                                        Path(S25,S27)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F64)
	S30= IMem.RAddr={pid,addr}                                  Path(S26,S29)
	S31= IMem.Out={31,rT,rA,0,468}                              IMem-Read(S30,S20)
	S32= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S30,S20)
	S33= IMem.Out=>IRMux.MemData                                Premise(F65)
	S34= IRMux.MemData={31,rT,rA,0,468}                         Path(S31,S33)
	S35= IRMux.Out={31,rT,rA,0,468}                             IRMux-Select(S34)
	S36= IRMux.Out=>IR.In                                       Premise(F69)
	S37= IR.In={31,rT,rA,0,468}                                 Path(S35,S36)
	S38= IMem.MEM8WordOut=>ICache.WData                         Premise(F70)
	S39= ICache.WData=IMemGet8Word({pid,addr})                  Path(S32,S38)
	S40= CtrlPC=0                                               Premise(F87)
	S41= CtrlPCInc=1                                            Premise(F88)
	S42= PC[Out]=addr+4                                         PC-Inc(S16,S40,S41)
	S43= CtrlICache=1                                           Premise(F91)
	S44= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S28,S39,S43)
	S45= CtrlIR=1                                               Premise(F96)
	S46= [IR]={31,rT,rA,0,468}                                  IR-Write(S37,S45)
	S47= CtrlGPRegs=0                                           Premise(F97)
	S48= GPRegs[rA]=a                                           GPRegs-Hold(S22,S47)
	S49= CtrlXERCA=0                                            Premise(F102)
	S50= XER[CA]=ca                                             XER-CA-Hold(S24,S49)

ID	S51= IR.Out11_15=rA                                         IR-Out(S46)
	S52= IR.Out11_15=>GPRegs.RReg1                              Premise(F123)
	S53= GPRegs.RReg1=rA                                        Path(S51,S52)
	S54= GPRegs.Rdata1=a                                        GPRegs-Read(S53,S48)
	S55= GPRegs.Rdata1=>A.In                                    Premise(F125)
	S56= A.In=a                                                 Path(S54,S55)
	S57= B.In=32'hFFFFFFFF                                      Premise(F126)
	S58= CtrlPC=0                                               Premise(F138)
	S59= CtrlPCInc=0                                            Premise(F139)
	S60= PC[Out]=addr+4                                         PC-Hold(S42,S58,S59)
	S61= CtrlICache=0                                           Premise(F142)
	S62= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S44,S61)
	S63= CtrlIR=0                                               Premise(F147)
	S64= [IR]={31,rT,rA,0,468}                                  IR-Hold(S46,S63)
	S65= CtrlA=1                                                Premise(F149)
	S66= [A]=a                                                  A-Write(S56,S65)
	S67= CtrlB=1                                                Premise(F150)
	S68= [B]=32'hFFFFFFFF                                       B-Write(S57,S67)
	S69= CtrlXERCA=0                                            Premise(F153)
	S70= XER[CA]=ca                                             XER-CA-Hold(S50,S69)

EX	S71= A.Out=a                                                A-Out(S66)
	S72= B.Out=32'hFFFFFFFF                                     B-Out(S68)
	S73= XER.CAOut=ca                                           XER-CA-Out(S70)
	S74= A.Out=>ALU.A                                           Premise(F177)
	S75= ALU.A=a                                                Path(S71,S74)
	S76= B.Out=>ALU.B                                           Premise(F178)
	S77= ALU.B=32'hFFFFFFFF                                     Path(S72,S76)
	S78= XER.CAOut=>ALU.CAIn                                    Premise(F179)
	S79= ALU.CAIn=ca                                            Path(S73,S78)
	S80= ALU.Out=a+32'hFFFFFFFF+ca                              ALU(S75,S77,S79)
	S81= ALU.CA=Carry(a+32'hFFFFFFFF+ca)                        ALU(S75,S77,S79)
	S82= ALU.Out=>ALUOut.In                                     Premise(F181)
	S83= ALUOut.In=a+32'hFFFFFFFF+ca                            Path(S80,S82)
	S84= ALU.CA=>CAReg.In                                       Premise(F182)
	S85= CAReg.In=Carry(a+32'hFFFFFFFF+ca)                      Path(S81,S84)
	S86= CtrlPC=0                                               Premise(F188)
	S87= CtrlPCInc=0                                            Premise(F189)
	S88= PC[Out]=addr+4                                         PC-Hold(S60,S86,S87)
	S89= CtrlICache=0                                           Premise(F192)
	S90= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S62,S89)
	S91= CtrlIR=0                                               Premise(F197)
	S92= [IR]={31,rT,rA,0,468}                                  IR-Hold(S64,S91)
	S93= CtrlALUOut=1                                           Premise(F204)
	S94= [ALUOut]=a+32'hFFFFFFFF+ca                             ALUOut-Write(S83,S93)
	S95= CtrlCAReg=1                                            Premise(F205)
	S96= [CAReg]=Carry(a+32'hFFFFFFFF+ca)                       CAReg-Write(S85,S95)

MEM	S97= CtrlPC=0                                               Premise(F238)
	S98= CtrlPCInc=0                                            Premise(F239)
	S99= PC[Out]=addr+4                                         PC-Hold(S88,S97,S98)
	S100= CtrlICache=0                                          Premise(F242)
	S101= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S90,S100)
	S102= CtrlIR=0                                              Premise(F247)
	S103= [IR]={31,rT,rA,0,468}                                 IR-Hold(S92,S102)
	S104= CtrlALUOut=0                                          Premise(F254)
	S105= [ALUOut]=a+32'hFFFFFFFF+ca                            ALUOut-Hold(S94,S104)
	S106= CtrlCAReg=0                                           Premise(F255)
	S107= [CAReg]=Carry(a+32'hFFFFFFFF+ca)                      CAReg-Hold(S96,S106)

DMMU1	S108= CtrlPC=0                                              Premise(F288)
	S109= CtrlPCInc=0                                           Premise(F289)
	S110= PC[Out]=addr+4                                        PC-Hold(S99,S108,S109)
	S111= CtrlICache=0                                          Premise(F292)
	S112= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S101,S111)
	S113= CtrlIR=0                                              Premise(F297)
	S114= [IR]={31,rT,rA,0,468}                                 IR-Hold(S103,S113)
	S115= CtrlALUOut=0                                          Premise(F304)
	S116= [ALUOut]=a+32'hFFFFFFFF+ca                            ALUOut-Hold(S105,S115)
	S117= CtrlCAReg=0                                           Premise(F305)
	S118= [CAReg]=Carry(a+32'hFFFFFFFF+ca)                      CAReg-Hold(S107,S117)

DMMU2	S119= CtrlPC=0                                              Premise(F338)
	S120= CtrlPCInc=0                                           Premise(F339)
	S121= PC[Out]=addr+4                                        PC-Hold(S110,S119,S120)
	S122= CtrlICache=0                                          Premise(F342)
	S123= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S112,S122)
	S124= CtrlIR=0                                              Premise(F347)
	S125= [IR]={31,rT,rA,0,468}                                 IR-Hold(S114,S124)
	S126= CtrlALUOut=0                                          Premise(F354)
	S127= [ALUOut]=a+32'hFFFFFFFF+ca                            ALUOut-Hold(S116,S126)
	S128= CtrlCAReg=0                                           Premise(F355)
	S129= [CAReg]=Carry(a+32'hFFFFFFFF+ca)                      CAReg-Hold(S118,S128)

WB	S130= IR.Out6_10=rT                                         IR-Out(S125)
	S131= ALUOut.Out=a+32'hFFFFFFFF+ca                          ALUOut-Out(S127)
	S132= CAReg.Out=Carry(a+32'hFFFFFFFF+ca)                    CAReg-Out(S129)
	S133= IR.Out6_10=>GPRegs.WReg                               Premise(F383)
	S134= GPRegs.WReg=rT                                        Path(S130,S133)
	S135= ALUOut.Out=>GPRegs.WData                              Premise(F384)
	S136= GPRegs.WData=a+32'hFFFFFFFF+ca                        Path(S131,S135)
	S137= CAReg.Out=>XER.CAIn                                   Premise(F385)
	S138= XER.CAIn=Carry(a+32'hFFFFFFFF+ca)                     Path(S132,S137)
	S139= CtrlPC=0                                              Premise(F388)
	S140= CtrlPCInc=0                                           Premise(F389)
	S141= PC[Out]=addr+4                                        PC-Hold(S121,S139,S140)
	S142= CtrlICache=0                                          Premise(F392)
	S143= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S123,S142)
	S144= CtrlGPRegs=1                                          Premise(F398)
	S145= GPRegs[rT]=a+32'hFFFFFFFF+ca                          GPRegs-Write(S134,S136,S144)
	S146= CtrlXERCA=1                                           Premise(F403)
	S147= XER[CA]=Carry(a+32'hFFFFFFFF+ca)                      XER-CA-Write(S138,S146)

POST	S141= PC[Out]=addr+4                                        PC-Hold(S121,S139,S140)
	S143= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S123,S142)
	S145= GPRegs[rT]=a+32'hFFFFFFFF+ca                          GPRegs-Write(S134,S136,S144)
	S147= XER[CA]=Carry(a+32'hFFFFFFFF+ca)                      XER-CA-Write(S138,S146)

