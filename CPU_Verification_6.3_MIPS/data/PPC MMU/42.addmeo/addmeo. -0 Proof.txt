
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,1493}                      Premise(F2)
	S3= ICache[addr]={31,rT,rA,0,1493}                          Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= XER[CA]=ca                                              Premise(F5)
	S6= XER[SO]=so                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= PC.Out=>ICache.IEA                                     Premise(F11)
	S17= ICache.IEA=addr                                        Path(S8,S16)
	S18= ICache.Out={31,rT,rA,0,1493}                           ICache-Search(S17,S3)
	S19= ICache.Out=>ICacheReg.In                               Premise(F12)
	S20= ICacheReg.In={31,rT,rA,0,1493}                         Path(S18,S19)
	S21= CtrlPC=0                                               Premise(F49)
	S22= CtrlPCInc=0                                            Premise(F50)
	S23= PC[Out]=addr                                           PC-Hold(S1,S21,S22)
	S24= CtrlIAddrReg=1                                         Premise(F51)
	S25= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S24)
	S26= CtrlICacheReg=1                                        Premise(F54)
	S27= [ICacheReg]={31,rT,rA,0,1493}                          ICacheReg-Write(S20,S26)
	S28= CtrlIMem=0                                             Premise(F56)
	S29= IMem[{pid,addr}]={31,rT,rA,0,1493}                     IMem-Hold(S2,S28)
	S30= CtrlGPRegs=0                                           Premise(F59)
	S31= GPRegs[rA]=a                                           GPRegs-Hold(S4,S30)
	S32= CtrlXERSO=0                                            Premise(F62)
	S33= XER[SO]=so                                             XER-SO-Hold(S6,S32)
	S34= CtrlXERCA=0                                            Premise(F64)
	S35= XER[CA]=ca                                             XER-CA-Hold(S5,S34)

IMMU	S36= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S25)
	S37= ICacheReg.Out={31,rT,rA,0,1493}                        ICacheReg-Out(S27)
	S38= IAddrReg.Out=>IMem.RAddr                               Premise(F83)
	S39= IMem.RAddr={pid,addr}                                  Path(S36,S38)
	S40= IMem.Out={31,rT,rA,0,1493}                             IMem-Read(S39,S29)
	S41= IMem.Out=>IRMux.MemData                                Premise(F84)
	S42= IRMux.MemData={31,rT,rA,0,1493}                        Path(S40,S41)
	S43= ICacheReg.Out=>IRMux.CacheData                         Premise(F85)
	S44= IRMux.CacheData={31,rT,rA,0,1493}                      Path(S37,S43)
	S45= IRMux.Out={31,rT,rA,0,1493}                            IRMux-Select(S42,S44)
	S46= IRMux.Out=>IR.In                                       Premise(F88)
	S47= IR.In={31,rT,rA,0,1493}                                Path(S45,S46)
	S48= CtrlPC=0                                               Premise(F116)
	S49= CtrlPCInc=1                                            Premise(F117)
	S50= PC[Out]=addr+4                                         PC-Inc(S23,S48,S49)
	S51= CtrlIR=1                                               Premise(F125)
	S52= [IR]={31,rT,rA,0,1493}                                 IR-Write(S47,S51)
	S53= CtrlGPRegs=0                                           Premise(F126)
	S54= GPRegs[rA]=a                                           GPRegs-Hold(S31,S53)
	S55= CtrlXERSO=0                                            Premise(F129)
	S56= XER[SO]=so                                             XER-SO-Hold(S33,S55)
	S57= CtrlXERCA=0                                            Premise(F131)
	S58= XER[CA]=ca                                             XER-CA-Hold(S35,S57)

ID	S59= IR.Out11_15=rA                                         IR-Out(S52)
	S60= IR.Out11_15=>GPRegs.RReg1                              Premise(F159)
	S61= GPRegs.RReg1=rA                                        Path(S59,S60)
	S62= GPRegs.Rdata1=a                                        GPRegs-Read(S61,S54)
	S63= GPRegs.Rdata1=>A.In                                    Premise(F161)
	S64= A.In=a                                                 Path(S62,S63)
	S65= B.In=32'hFFFFFFFF                                      Premise(F162)
	S66= CtrlPC=0                                               Premise(F184)
	S67= CtrlPCInc=0                                            Premise(F185)
	S68= PC[Out]=addr+4                                         PC-Hold(S50,S66,S67)
	S69= CtrlIR=0                                               Premise(F193)
	S70= [IR]={31,rT,rA,0,1493}                                 IR-Hold(S52,S69)
	S71= CtrlA=1                                                Premise(F195)
	S72= [A]=a                                                  A-Write(S64,S71)
	S73= CtrlB=1                                                Premise(F196)
	S74= [B]=32'hFFFFFFFF                                       B-Write(S65,S73)
	S75= CtrlXERSO=0                                            Premise(F197)
	S76= XER[SO]=so                                             XER-SO-Hold(S56,S75)
	S77= CtrlXERCA=0                                            Premise(F199)
	S78= XER[CA]=ca                                             XER-CA-Hold(S58,S77)

EX	S79= A.Out=a                                                A-Out(S72)
	S80= B.Out=32'hFFFFFFFF                                     B-Out(S74)
	S81= XER.SOOut=so                                           XER-SO-Out(S76)
	S82= XER.CAOut=ca                                           XER-CA-Out(S78)
	S83= A.Out=>ALU.A                                           Premise(F230)
	S84= ALU.A=a                                                Path(S79,S83)
	S85= B.Out=>ALU.B                                           Premise(F231)
	S86= ALU.B=32'hFFFFFFFF                                     Path(S80,S85)
	S87= XER.CAOut=>ALU.CAIn                                    Premise(F232)
	S88= ALU.CAIn=ca                                            Path(S82,S87)
	S89= ALU.Out=a+32'hFFFFFFFF+ca                              ALU(S84,S86,S88)
	S90= ALU.CMP=Compare0(a+32'hFFFFFFFF+ca)                    ALU(S84,S86,S88)
	S91= ALU.OV=OverFlow(a+32'hFFFFFFFF+ca)                     ALU(S84,S86,S88)
	S92= ALU.CA=Carry(a+32'hFFFFFFFF+ca)                        ALU(S84,S86,S88)
	S93= ALU.Out=>ALUOut.In                                     Premise(F234)
	S94= ALUOut.In=a+32'hFFFFFFFF+ca                            Path(S89,S93)
	S95= ALU.CA=>CAReg.In                                       Premise(F235)
	S96= CAReg.In=Carry(a+32'hFFFFFFFF+ca)                      Path(S92,S95)
	S97= ALU.CMP=>DataCmb.A                                     Premise(F236)
	S98= DataCmb.A=Compare0(a+32'hFFFFFFFF+ca)                  Path(S90,S97)
	S99= ORGate.Out=>DataCmb.B                                  Premise(F237)
	S100= ALU.OV=>OVReg.In                                      Premise(F238)
	S101= OVReg.In=OverFlow(a+32'hFFFFFFFF+ca)                  Path(S91,S100)
	S102= XER.SOOut=>ORGate.A                                   Premise(F239)
	S103= ORGate.A=so                                           Path(S81,S102)
	S104= ALU.OV=>ORGate.B                                      Premise(F240)
	S105= ORGate.B=OverFlow(a+32'hFFFFFFFF+ca)                  Path(S91,S104)
	S106= ORGate.Out=so|OverFlow(a+32'hFFFFFFFF+ca)             ORGate(S103,S105)
	S107= DataCmb.B=so|OverFlow(a+32'hFFFFFFFF+ca)              Path(S106,S99)
	S108= DataCmb.Out={Compare0(a+32'hFFFFFFFF+ca),so|OverFlow(a+32'hFFFFFFFF+ca)}DataCmb(S98,S107)
	S109= ORGate.Out=>DR1bit.In                                 Premise(F241)
	S110= DR1bit.In=so|OverFlow(a+32'hFFFFFFFF+ca)              Path(S106,S109)
	S111= DataCmb.Out=>DR4bit.In                                Premise(F242)
	S112= DR4bit.In={Compare0(a+32'hFFFFFFFF+ca),so|OverFlow(a+32'hFFFFFFFF+ca)}Path(S108,S111)
	S113= CtrlPC=0                                              Premise(F251)
	S114= CtrlPCInc=0                                           Premise(F252)
	S115= PC[Out]=addr+4                                        PC-Hold(S68,S113,S114)
	S116= CtrlIR=0                                              Premise(F260)
	S117= [IR]={31,rT,rA,0,1493}                                IR-Hold(S70,S116)
	S118= CtrlALUOut=1                                          Premise(F267)
	S119= [ALUOut]=a+32'hFFFFFFFF+ca                            ALUOut-Write(S94,S118)
	S120= CtrlCAReg=1                                           Premise(F268)
	S121= [CAReg]=Carry(a+32'hFFFFFFFF+ca)                      CAReg-Write(S96,S120)
	S122= CtrlOVReg=1                                           Premise(F269)
	S123= [OVReg]=OverFlow(a+32'hFFFFFFFF+ca)                   OVReg-Write(S101,S122)
	S124= CtrlDR1bit=1                                          Premise(F270)
	S125= [DR1bit]=so|OverFlow(a+32'hFFFFFFFF+ca)               DR1bit-Write(S110,S124)
	S126= CtrlDR4bit=1                                          Premise(F271)
	S127= [DR4bit]={Compare0(a+32'hFFFFFFFF+ca),so|OverFlow(a+32'hFFFFFFFF+ca)}DR4bit-Write(S112,S126)

MEM	S128= CtrlPC=0                                              Premise(F318)
	S129= CtrlPCInc=0                                           Premise(F319)
	S130= PC[Out]=addr+4                                        PC-Hold(S115,S128,S129)
	S131= CtrlIR=0                                              Premise(F327)
	S132= [IR]={31,rT,rA,0,1493}                                IR-Hold(S117,S131)
	S133= CtrlALUOut=0                                          Premise(F334)
	S134= [ALUOut]=a+32'hFFFFFFFF+ca                            ALUOut-Hold(S119,S133)
	S135= CtrlCAReg=0                                           Premise(F335)
	S136= [CAReg]=Carry(a+32'hFFFFFFFF+ca)                      CAReg-Hold(S121,S135)
	S137= CtrlOVReg=0                                           Premise(F336)
	S138= [OVReg]=OverFlow(a+32'hFFFFFFFF+ca)                   OVReg-Hold(S123,S137)
	S139= CtrlDR1bit=0                                          Premise(F337)
	S140= [DR1bit]=so|OverFlow(a+32'hFFFFFFFF+ca)               DR1bit-Hold(S125,S139)
	S141= CtrlDR4bit=0                                          Premise(F338)
	S142= [DR4bit]={Compare0(a+32'hFFFFFFFF+ca),so|OverFlow(a+32'hFFFFFFFF+ca)}DR4bit-Hold(S127,S141)

DMMU1	S143= CtrlPC=0                                              Premise(F385)
	S144= CtrlPCInc=0                                           Premise(F386)
	S145= PC[Out]=addr+4                                        PC-Hold(S130,S143,S144)
	S146= CtrlIR=0                                              Premise(F394)
	S147= [IR]={31,rT,rA,0,1493}                                IR-Hold(S132,S146)
	S148= CtrlALUOut=0                                          Premise(F401)
	S149= [ALUOut]=a+32'hFFFFFFFF+ca                            ALUOut-Hold(S134,S148)
	S150= CtrlCAReg=0                                           Premise(F402)
	S151= [CAReg]=Carry(a+32'hFFFFFFFF+ca)                      CAReg-Hold(S136,S150)
	S152= CtrlOVReg=0                                           Premise(F403)
	S153= [OVReg]=OverFlow(a+32'hFFFFFFFF+ca)                   OVReg-Hold(S138,S152)
	S154= CtrlDR1bit=0                                          Premise(F404)
	S155= [DR1bit]=so|OverFlow(a+32'hFFFFFFFF+ca)               DR1bit-Hold(S140,S154)
	S156= CtrlDR4bit=0                                          Premise(F405)
	S157= [DR4bit]={Compare0(a+32'hFFFFFFFF+ca),so|OverFlow(a+32'hFFFFFFFF+ca)}DR4bit-Hold(S142,S156)

DMMU2	S158= CtrlPC=0                                              Premise(F452)
	S159= CtrlPCInc=0                                           Premise(F453)
	S160= PC[Out]=addr+4                                        PC-Hold(S145,S158,S159)
	S161= CtrlIR=0                                              Premise(F461)
	S162= [IR]={31,rT,rA,0,1493}                                IR-Hold(S147,S161)
	S163= CtrlALUOut=0                                          Premise(F468)
	S164= [ALUOut]=a+32'hFFFFFFFF+ca                            ALUOut-Hold(S149,S163)
	S165= CtrlCAReg=0                                           Premise(F469)
	S166= [CAReg]=Carry(a+32'hFFFFFFFF+ca)                      CAReg-Hold(S151,S165)
	S167= CtrlOVReg=0                                           Premise(F470)
	S168= [OVReg]=OverFlow(a+32'hFFFFFFFF+ca)                   OVReg-Hold(S153,S167)
	S169= CtrlDR1bit=0                                          Premise(F471)
	S170= [DR1bit]=so|OverFlow(a+32'hFFFFFFFF+ca)               DR1bit-Hold(S155,S169)
	S171= CtrlDR4bit=0                                          Premise(F472)
	S172= [DR4bit]={Compare0(a+32'hFFFFFFFF+ca),so|OverFlow(a+32'hFFFFFFFF+ca)}DR4bit-Hold(S157,S171)

WB	S173= IR.Out6_10=rT                                         IR-Out(S162)
	S174= ALUOut.Out=a+32'hFFFFFFFF+ca                          ALUOut-Out(S164)
	S175= CAReg.Out=Carry(a+32'hFFFFFFFF+ca)                    CAReg-Out(S166)
	S176= OVReg.Out=OverFlow(a+32'hFFFFFFFF+ca)                 OVReg-Out(S168)
	S177= DR1bit.Out=so|OverFlow(a+32'hFFFFFFFF+ca)             DR1bit-Out(S170)
	S178= DR4bit.Out={Compare0(a+32'hFFFFFFFF+ca),so|OverFlow(a+32'hFFFFFFFF+ca)}DR4bit-Out(S172)
	S179= IR.Out6_10=>GPRegs.WReg                               Premise(F511)
	S180= GPRegs.WReg=rT                                        Path(S173,S179)
	S181= ALUOut.Out=>GPRegs.WData                              Premise(F512)
	S182= GPRegs.WData=a+32'hFFFFFFFF+ca                        Path(S174,S181)
	S183= DR4bit.Out=>CRRegs.CR0In                              Premise(F513)
	S184= CRRegs.CR0In={Compare0(a+32'hFFFFFFFF+ca),so|OverFlow(a+32'hFFFFFFFF+ca)}Path(S178,S183)
	S185= DR1bit.Out=>XER.SOIn                                  Premise(F514)
	S186= XER.SOIn=so|OverFlow(a+32'hFFFFFFFF+ca)               Path(S177,S185)
	S187= CAReg.Out=>XER.CAIn                                   Premise(F515)
	S188= XER.CAIn=Carry(a+32'hFFFFFFFF+ca)                     Path(S175,S187)
	S189= OVReg.Out=>XER.OVIn                                   Premise(F516)
	S190= XER.OVIn=OverFlow(a+32'hFFFFFFFF+ca)                  Path(S176,S189)
	S191= CtrlPC=0                                              Premise(F519)
	S192= CtrlPCInc=0                                           Premise(F520)
	S193= PC[Out]=addr+4                                        PC-Hold(S160,S191,S192)
	S194= CtrlGPRegs=1                                          Premise(F529)
	S195= GPRegs[rT]=a+32'hFFFFFFFF+ca                          GPRegs-Write(S180,S182,S194)
	S196= CtrlXERSO=1                                           Premise(F532)
	S197= XER[SO]=so|OverFlow(a+32'hFFFFFFFF+ca)                XER-SO-Write(S186,S196)
	S198= CtrlXEROV=1                                           Premise(F533)
	S199= XER[OV]=OverFlow(a+32'hFFFFFFFF+ca)                   XER-OV-Write(S190,S198)
	S200= CtrlXERCA=1                                           Premise(F534)
	S201= XER[CA]=Carry(a+32'hFFFFFFFF+ca)                      XER-CA-Write(S188,S200)
	S202= CtrlCRRegsCR0=1                                       Premise(F541)
	S203= CRRegs[CR0]={Compare0(a+32'hFFFFFFFF+ca),so|OverFlow(a+32'hFFFFFFFF+ca)}CRRegs-CR0-Write(S184,S202)

POST	S193= PC[Out]=addr+4                                        PC-Hold(S160,S191,S192)
	S195= GPRegs[rT]=a+32'hFFFFFFFF+ca                          GPRegs-Write(S180,S182,S194)
	S197= XER[SO]=so|OverFlow(a+32'hFFFFFFFF+ca)                XER-SO-Write(S186,S196)
	S199= XER[OV]=OverFlow(a+32'hFFFFFFFF+ca)                   XER-OV-Write(S190,S198)
	S201= XER[CA]=Carry(a+32'hFFFFFFFF+ca)                      XER-CA-Write(S188,S200)
	S203= CRRegs[CR0]={Compare0(a+32'hFFFFFFFF+ca),so|OverFlow(a+32'hFFFFFFFF+ca)}CRRegs-CR0-Write(S184,S202)

