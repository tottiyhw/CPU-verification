
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,405}                       Premise(F2)
	S3= ICache[addr]={31,rT,rA,0,405}                           Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)
	S6= XER[CA]=ca                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= PC.Out=>ICache.IEA                                     Premise(F11)
	S17= ICache.IEA=addr                                        Path(S8,S16)
	S18= ICache.Out={31,rT,rA,0,405}                            ICache-Search(S17,S3)
	S19= ICache.Out=>ICacheReg.In                               Premise(F12)
	S20= ICacheReg.In={31,rT,rA,0,405}                          Path(S18,S19)
	S21= CtrlPC=0                                               Premise(F43)
	S22= CtrlPCInc=0                                            Premise(F44)
	S23= PC[Out]=addr                                           PC-Hold(S1,S21,S22)
	S24= CtrlIAddrReg=1                                         Premise(F45)
	S25= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S24)
	S26= CtrlICacheReg=1                                        Premise(F48)
	S27= [ICacheReg]={31,rT,rA,0,405}                           ICacheReg-Write(S20,S26)
	S28= CtrlIMem=0                                             Premise(F50)
	S29= IMem[{pid,addr}]={31,rT,rA,0,405}                      IMem-Hold(S2,S28)
	S30= CtrlGPRegs=0                                           Premise(F53)
	S31= GPRegs[rA]=a                                           GPRegs-Hold(S4,S30)
	S32= CtrlXERSO=0                                            Premise(F56)
	S33= XER[SO]=so                                             XER-SO-Hold(S5,S32)
	S34= CtrlXERCA=0                                            Premise(F58)
	S35= XER[CA]=ca                                             XER-CA-Hold(S6,S34)

IMMU	S36= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S25)
	S37= ICacheReg.Out={31,rT,rA,0,405}                         ICacheReg-Out(S27)
	S38= IAddrReg.Out=>IMem.RAddr                               Premise(F75)
	S39= IMem.RAddr={pid,addr}                                  Path(S36,S38)
	S40= IMem.Out={31,rT,rA,0,405}                              IMem-Read(S39,S29)
	S41= IMem.Out=>IRMux.MemData                                Premise(F76)
	S42= IRMux.MemData={31,rT,rA,0,405}                         Path(S40,S41)
	S43= ICacheReg.Out=>IRMux.CacheData                         Premise(F77)
	S44= IRMux.CacheData={31,rT,rA,0,405}                       Path(S37,S43)
	S45= IRMux.Out={31,rT,rA,0,405}                             IRMux-Select(S42,S44)
	S46= IRMux.Out=>IR.In                                       Premise(F80)
	S47= IR.In={31,rT,rA,0,405}                                 Path(S45,S46)
	S48= CtrlPC=0                                               Premise(F102)
	S49= CtrlPCInc=1                                            Premise(F103)
	S50= PC[Out]=addr+4                                         PC-Inc(S23,S48,S49)
	S51= CtrlIR=1                                               Premise(F111)
	S52= [IR]={31,rT,rA,0,405}                                  IR-Write(S47,S51)
	S53= CtrlGPRegs=0                                           Premise(F112)
	S54= GPRegs[rA]=a                                           GPRegs-Hold(S31,S53)
	S55= CtrlXERSO=0                                            Premise(F115)
	S56= XER[SO]=so                                             XER-SO-Hold(S33,S55)
	S57= CtrlXERCA=0                                            Premise(F117)
	S58= XER[CA]=ca                                             XER-CA-Hold(S35,S57)

ID	S59= IR.Out11_15=rA                                         IR-Out(S52)
	S60= IR.Out11_15=>GPRegs.RReg1                              Premise(F143)
	S61= GPRegs.RReg1=rA                                        Path(S59,S60)
	S62= GPRegs.Rdata1=a                                        GPRegs-Read(S61,S54)
	S63= GPRegs.Rdata1=>A.In                                    Premise(F145)
	S64= A.In=a                                                 Path(S62,S63)
	S65= B.In=32'b0                                             Premise(F146)
	S66= CtrlPC=0                                               Premise(F162)
	S67= CtrlPCInc=0                                            Premise(F163)
	S68= PC[Out]=addr+4                                         PC-Hold(S50,S66,S67)
	S69= CtrlIR=0                                               Premise(F171)
	S70= [IR]={31,rT,rA,0,405}                                  IR-Hold(S52,S69)
	S71= CtrlA=1                                                Premise(F173)
	S72= [A]=a                                                  A-Write(S64,S71)
	S73= CtrlB=1                                                Premise(F174)
	S74= [B]=32'b0                                              B-Write(S65,S73)
	S75= CtrlXERSO=0                                            Premise(F175)
	S76= XER[SO]=so                                             XER-SO-Hold(S56,S75)
	S77= CtrlXERCA=0                                            Premise(F177)
	S78= XER[CA]=ca                                             XER-CA-Hold(S58,S77)

EX	S79= A.Out=a                                                A-Out(S72)
	S80= B.Out=32'b0                                            B-Out(S74)
	S81= XER.SOOut=so                                           XER-SO-Out(S76)
	S82= XER.CAOut=ca                                           XER-CA-Out(S78)
	S83= A.Out=>ALU.A                                           Premise(F206)
	S84= ALU.A=a                                                Path(S79,S83)
	S85= B.Out=>ALU.B                                           Premise(F207)
	S86= ALU.B=32'b0                                            Path(S80,S85)
	S87= XER.CAOut=>ALU.CAIn                                    Premise(F208)
	S88= ALU.CAIn=ca                                            Path(S82,S87)
	S89= ALU.Out=a+32'b0+ca                                     ALU(S84,S86,S88)
	S90= ALU.CMP=Compare0(a+32'b0+ca)                           ALU(S84,S86,S88)
	S91= ALU.CA=Carry(a+32'b0+ca)                               ALU(S84,S86,S88)
	S92= ALU.Out=>ALUOut.In                                     Premise(F210)
	S93= ALUOut.In=a+32'b0+ca                                   Path(S89,S92)
	S94= ALU.CA=>CAReg.In                                       Premise(F211)
	S95= CAReg.In=Carry(a+32'b0+ca)                             Path(S91,S94)
	S96= ALU.CMP=>DataCmb.A                                     Premise(F212)
	S97= DataCmb.A=Compare0(a+32'b0+ca)                         Path(S90,S96)
	S98= XER.SOOut=>DataCmb.B                                   Premise(F213)
	S99= DataCmb.B=so                                           Path(S81,S98)
	S100= DataCmb.Out={Compare0(a+32'b0+ca),so}                 DataCmb(S97,S99)
	S101= DataCmb.Out=>DR4bit.In                                Premise(F214)
	S102= DR4bit.In={Compare0(a+32'b0+ca),so}                   Path(S100,S101)
	S103= CtrlPC=0                                              Premise(F221)
	S104= CtrlPCInc=0                                           Premise(F222)
	S105= PC[Out]=addr+4                                        PC-Hold(S68,S103,S104)
	S106= CtrlIR=0                                              Premise(F230)
	S107= [IR]={31,rT,rA,0,405}                                 IR-Hold(S70,S106)
	S108= CtrlALUOut=1                                          Premise(F237)
	S109= [ALUOut]=a+32'b0+ca                                   ALUOut-Write(S93,S108)
	S110= CtrlCAReg=1                                           Premise(F238)
	S111= [CAReg]=Carry(a+32'b0+ca)                             CAReg-Write(S95,S110)
	S112= CtrlDR4bit=1                                          Premise(F239)
	S113= [DR4bit]={Compare0(a+32'b0+ca),so}                    DR4bit-Write(S102,S112)

MEM	S114= CtrlPC=0                                              Premise(F280)
	S115= CtrlPCInc=0                                           Premise(F281)
	S116= PC[Out]=addr+4                                        PC-Hold(S105,S114,S115)
	S117= CtrlIR=0                                              Premise(F289)
	S118= [IR]={31,rT,rA,0,405}                                 IR-Hold(S107,S117)
	S119= CtrlALUOut=0                                          Premise(F296)
	S120= [ALUOut]=a+32'b0+ca                                   ALUOut-Hold(S109,S119)
	S121= CtrlCAReg=0                                           Premise(F297)
	S122= [CAReg]=Carry(a+32'b0+ca)                             CAReg-Hold(S111,S121)
	S123= CtrlDR4bit=0                                          Premise(F298)
	S124= [DR4bit]={Compare0(a+32'b0+ca),so}                    DR4bit-Hold(S113,S123)

DMMU1	S125= CtrlPC=0                                              Premise(F339)
	S126= CtrlPCInc=0                                           Premise(F340)
	S127= PC[Out]=addr+4                                        PC-Hold(S116,S125,S126)
	S128= CtrlIR=0                                              Premise(F348)
	S129= [IR]={31,rT,rA,0,405}                                 IR-Hold(S118,S128)
	S130= CtrlALUOut=0                                          Premise(F355)
	S131= [ALUOut]=a+32'b0+ca                                   ALUOut-Hold(S120,S130)
	S132= CtrlCAReg=0                                           Premise(F356)
	S133= [CAReg]=Carry(a+32'b0+ca)                             CAReg-Hold(S122,S132)
	S134= CtrlDR4bit=0                                          Premise(F357)
	S135= [DR4bit]={Compare0(a+32'b0+ca),so}                    DR4bit-Hold(S124,S134)

DMMU2	S136= CtrlPC=0                                              Premise(F398)
	S137= CtrlPCInc=0                                           Premise(F399)
	S138= PC[Out]=addr+4                                        PC-Hold(S127,S136,S137)
	S139= CtrlIR=0                                              Premise(F407)
	S140= [IR]={31,rT,rA,0,405}                                 IR-Hold(S129,S139)
	S141= CtrlALUOut=0                                          Premise(F414)
	S142= [ALUOut]=a+32'b0+ca                                   ALUOut-Hold(S131,S141)
	S143= CtrlCAReg=0                                           Premise(F415)
	S144= [CAReg]=Carry(a+32'b0+ca)                             CAReg-Hold(S133,S143)
	S145= CtrlDR4bit=0                                          Premise(F416)
	S146= [DR4bit]={Compare0(a+32'b0+ca),so}                    DR4bit-Hold(S135,S145)

WB	S147= IR.Out6_10=rT                                         IR-Out(S140)
	S148= ALUOut.Out=a+32'b0+ca                                 ALUOut-Out(S142)
	S149= CAReg.Out=Carry(a+32'b0+ca)                           CAReg-Out(S144)
	S150= DR4bit.Out={Compare0(a+32'b0+ca),so}                  DR4bit-Out(S146)
	S151= IR.Out6_10=>GPRegs.WReg                               Premise(F451)
	S152= GPRegs.WReg=rT                                        Path(S147,S151)
	S153= ALUOut.Out=>GPRegs.WData                              Premise(F452)
	S154= GPRegs.WData=a+32'b0+ca                               Path(S148,S153)
	S155= DR4bit.Out=>CRRegs.CR0In                              Premise(F453)
	S156= CRRegs.CR0In={Compare0(a+32'b0+ca),so}                Path(S150,S155)
	S157= CAReg.Out=>XER.CAIn                                   Premise(F454)
	S158= XER.CAIn=Carry(a+32'b0+ca)                            Path(S149,S157)
	S159= CtrlPC=0                                              Premise(F457)
	S160= CtrlPCInc=0                                           Premise(F458)
	S161= PC[Out]=addr+4                                        PC-Hold(S138,S159,S160)
	S162= CtrlGPRegs=1                                          Premise(F467)
	S163= GPRegs[rT]=a+32'b0+ca                                 GPRegs-Write(S152,S154,S162)
	S164= CtrlXERCA=1                                           Premise(F472)
	S165= XER[CA]=Carry(a+32'b0+ca)                             XER-CA-Write(S158,S164)
	S166= CtrlCRRegsCR0=1                                       Premise(F477)
	S167= CRRegs[CR0]={Compare0(a+32'b0+ca),so}                 CRRegs-CR0-Write(S156,S166)

POST	S161= PC[Out]=addr+4                                        PC-Hold(S138,S159,S160)
	S163= GPRegs[rT]=a+32'b0+ca                                 GPRegs-Write(S152,S154,S162)
	S165= XER[CA]=Carry(a+32'b0+ca)                             XER-CA-Write(S158,S164)
	S167= CRRegs[CR0]={Compare0(a+32'b0+ca),so}                 CRRegs-CR0-Write(S156,S166)

