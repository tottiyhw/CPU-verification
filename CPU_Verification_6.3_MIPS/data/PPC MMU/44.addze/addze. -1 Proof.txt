
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,405}                       Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)
	S5= XER[CA]=ca                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F42)
	S16= CtrlPCInc=0                                            Premise(F43)
	S17= PC[Out]=addr                                           PC-Hold(S1,S15,S16)
	S18= CtrlIAddrReg=1                                         Premise(F44)
	S19= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S18)
	S20= CtrlIMem=0                                             Premise(F49)
	S21= IMem[{pid,addr}]={31,rT,rA,0,405}                      IMem-Hold(S2,S20)
	S22= CtrlGPRegs=0                                           Premise(F52)
	S23= GPRegs[rA]=a                                           GPRegs-Hold(S3,S22)
	S24= CtrlXERSO=0                                            Premise(F55)
	S25= XER[SO]=so                                             XER-SO-Hold(S4,S24)
	S26= CtrlXERCA=0                                            Premise(F57)
	S27= XER[CA]=ca                                             XER-CA-Hold(S5,S26)

IMMU	S28= PC.Out=addr                                            PC-Out(S17)
	S29= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S19)
	S30= PC.Out=>ICache.IEA                                     Premise(F69)
	S31= ICache.IEA=addr                                        Path(S28,S30)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F74)
	S33= IMem.RAddr={pid,addr}                                  Path(S29,S32)
	S34= IMem.Out={31,rT,rA,0,405}                              IMem-Read(S33,S21)
	S35= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S33,S21)
	S36= IMem.Out=>IRMux.MemData                                Premise(F75)
	S37= IRMux.MemData={31,rT,rA,0,405}                         Path(S34,S36)
	S38= IRMux.Out={31,rT,rA,0,405}                             IRMux-Select(S37)
	S39= IRMux.Out=>IR.In                                       Premise(F79)
	S40= IR.In={31,rT,rA,0,405}                                 Path(S38,S39)
	S41= IMem.MEM8WordOut=>ICache.WData                         Premise(F80)
	S42= ICache.WData=IMemGet8Word({pid,addr})                  Path(S35,S41)
	S43= CtrlPC=0                                               Premise(F101)
	S44= CtrlPCInc=1                                            Premise(F102)
	S45= PC[Out]=addr+4                                         PC-Inc(S17,S43,S44)
	S46= CtrlICache=1                                           Premise(F105)
	S47= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S31,S42,S46)
	S48= CtrlIR=1                                               Premise(F110)
	S49= [IR]={31,rT,rA,0,405}                                  IR-Write(S40,S48)
	S50= CtrlGPRegs=0                                           Premise(F111)
	S51= GPRegs[rA]=a                                           GPRegs-Hold(S23,S50)
	S52= CtrlXERSO=0                                            Premise(F114)
	S53= XER[SO]=so                                             XER-SO-Hold(S25,S52)
	S54= CtrlXERCA=0                                            Premise(F116)
	S55= XER[CA]=ca                                             XER-CA-Hold(S27,S54)

ID	S56= IR.Out11_15=rA                                         IR-Out(S49)
	S57= IR.Out11_15=>GPRegs.RReg1                              Premise(F142)
	S58= GPRegs.RReg1=rA                                        Path(S56,S57)
	S59= GPRegs.Rdata1=a                                        GPRegs-Read(S58,S51)
	S60= GPRegs.Rdata1=>A.In                                    Premise(F144)
	S61= A.In=a                                                 Path(S59,S60)
	S62= B.In=32'b0                                             Premise(F145)
	S63= CtrlPC=0                                               Premise(F161)
	S64= CtrlPCInc=0                                            Premise(F162)
	S65= PC[Out]=addr+4                                         PC-Hold(S45,S63,S64)
	S66= CtrlICache=0                                           Premise(F165)
	S67= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S47,S66)
	S68= CtrlIR=0                                               Premise(F170)
	S69= [IR]={31,rT,rA,0,405}                                  IR-Hold(S49,S68)
	S70= CtrlA=1                                                Premise(F172)
	S71= [A]=a                                                  A-Write(S61,S70)
	S72= CtrlB=1                                                Premise(F173)
	S73= [B]=32'b0                                              B-Write(S62,S72)
	S74= CtrlXERSO=0                                            Premise(F174)
	S75= XER[SO]=so                                             XER-SO-Hold(S53,S74)
	S76= CtrlXERCA=0                                            Premise(F176)
	S77= XER[CA]=ca                                             XER-CA-Hold(S55,S76)

EX	S78= A.Out=a                                                A-Out(S71)
	S79= B.Out=32'b0                                            B-Out(S73)
	S80= XER.SOOut=so                                           XER-SO-Out(S75)
	S81= XER.CAOut=ca                                           XER-CA-Out(S77)
	S82= A.Out=>ALU.A                                           Premise(F205)
	S83= ALU.A=a                                                Path(S78,S82)
	S84= B.Out=>ALU.B                                           Premise(F206)
	S85= ALU.B=32'b0                                            Path(S79,S84)
	S86= XER.CAOut=>ALU.CAIn                                    Premise(F207)
	S87= ALU.CAIn=ca                                            Path(S81,S86)
	S88= ALU.Out=a+32'b0+ca                                     ALU(S83,S85,S87)
	S89= ALU.CMP=Compare0(a+32'b0+ca)                           ALU(S83,S85,S87)
	S90= ALU.CA=Carry(a+32'b0+ca)                               ALU(S83,S85,S87)
	S91= ALU.Out=>ALUOut.In                                     Premise(F209)
	S92= ALUOut.In=a+32'b0+ca                                   Path(S88,S91)
	S93= ALU.CA=>CAReg.In                                       Premise(F210)
	S94= CAReg.In=Carry(a+32'b0+ca)                             Path(S90,S93)
	S95= ALU.CMP=>DataCmb.A                                     Premise(F211)
	S96= DataCmb.A=Compare0(a+32'b0+ca)                         Path(S89,S95)
	S97= XER.SOOut=>DataCmb.B                                   Premise(F212)
	S98= DataCmb.B=so                                           Path(S80,S97)
	S99= DataCmb.Out={Compare0(a+32'b0+ca),so}                  DataCmb(S96,S98)
	S100= DataCmb.Out=>DR4bit.In                                Premise(F213)
	S101= DR4bit.In={Compare0(a+32'b0+ca),so}                   Path(S99,S100)
	S102= CtrlPC=0                                              Premise(F220)
	S103= CtrlPCInc=0                                           Premise(F221)
	S104= PC[Out]=addr+4                                        PC-Hold(S65,S102,S103)
	S105= CtrlICache=0                                          Premise(F224)
	S106= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S67,S105)
	S107= CtrlIR=0                                              Premise(F229)
	S108= [IR]={31,rT,rA,0,405}                                 IR-Hold(S69,S107)
	S109= CtrlALUOut=1                                          Premise(F236)
	S110= [ALUOut]=a+32'b0+ca                                   ALUOut-Write(S92,S109)
	S111= CtrlCAReg=1                                           Premise(F237)
	S112= [CAReg]=Carry(a+32'b0+ca)                             CAReg-Write(S94,S111)
	S113= CtrlDR4bit=1                                          Premise(F238)
	S114= [DR4bit]={Compare0(a+32'b0+ca),so}                    DR4bit-Write(S101,S113)

MEM	S115= CtrlPC=0                                              Premise(F279)
	S116= CtrlPCInc=0                                           Premise(F280)
	S117= PC[Out]=addr+4                                        PC-Hold(S104,S115,S116)
	S118= CtrlICache=0                                          Premise(F283)
	S119= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S106,S118)
	S120= CtrlIR=0                                              Premise(F288)
	S121= [IR]={31,rT,rA,0,405}                                 IR-Hold(S108,S120)
	S122= CtrlALUOut=0                                          Premise(F295)
	S123= [ALUOut]=a+32'b0+ca                                   ALUOut-Hold(S110,S122)
	S124= CtrlCAReg=0                                           Premise(F296)
	S125= [CAReg]=Carry(a+32'b0+ca)                             CAReg-Hold(S112,S124)
	S126= CtrlDR4bit=0                                          Premise(F297)
	S127= [DR4bit]={Compare0(a+32'b0+ca),so}                    DR4bit-Hold(S114,S126)

DMMU1	S128= CtrlPC=0                                              Premise(F338)
	S129= CtrlPCInc=0                                           Premise(F339)
	S130= PC[Out]=addr+4                                        PC-Hold(S117,S128,S129)
	S131= CtrlICache=0                                          Premise(F342)
	S132= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S119,S131)
	S133= CtrlIR=0                                              Premise(F347)
	S134= [IR]={31,rT,rA,0,405}                                 IR-Hold(S121,S133)
	S135= CtrlALUOut=0                                          Premise(F354)
	S136= [ALUOut]=a+32'b0+ca                                   ALUOut-Hold(S123,S135)
	S137= CtrlCAReg=0                                           Premise(F355)
	S138= [CAReg]=Carry(a+32'b0+ca)                             CAReg-Hold(S125,S137)
	S139= CtrlDR4bit=0                                          Premise(F356)
	S140= [DR4bit]={Compare0(a+32'b0+ca),so}                    DR4bit-Hold(S127,S139)

DMMU2	S141= CtrlPC=0                                              Premise(F397)
	S142= CtrlPCInc=0                                           Premise(F398)
	S143= PC[Out]=addr+4                                        PC-Hold(S130,S141,S142)
	S144= CtrlICache=0                                          Premise(F401)
	S145= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S132,S144)
	S146= CtrlIR=0                                              Premise(F406)
	S147= [IR]={31,rT,rA,0,405}                                 IR-Hold(S134,S146)
	S148= CtrlALUOut=0                                          Premise(F413)
	S149= [ALUOut]=a+32'b0+ca                                   ALUOut-Hold(S136,S148)
	S150= CtrlCAReg=0                                           Premise(F414)
	S151= [CAReg]=Carry(a+32'b0+ca)                             CAReg-Hold(S138,S150)
	S152= CtrlDR4bit=0                                          Premise(F415)
	S153= [DR4bit]={Compare0(a+32'b0+ca),so}                    DR4bit-Hold(S140,S152)

WB	S154= IR.Out6_10=rT                                         IR-Out(S147)
	S155= ALUOut.Out=a+32'b0+ca                                 ALUOut-Out(S149)
	S156= CAReg.Out=Carry(a+32'b0+ca)                           CAReg-Out(S151)
	S157= DR4bit.Out={Compare0(a+32'b0+ca),so}                  DR4bit-Out(S153)
	S158= IR.Out6_10=>GPRegs.WReg                               Premise(F450)
	S159= GPRegs.WReg=rT                                        Path(S154,S158)
	S160= ALUOut.Out=>GPRegs.WData                              Premise(F451)
	S161= GPRegs.WData=a+32'b0+ca                               Path(S155,S160)
	S162= DR4bit.Out=>CRRegs.CR0In                              Premise(F452)
	S163= CRRegs.CR0In={Compare0(a+32'b0+ca),so}                Path(S157,S162)
	S164= CAReg.Out=>XER.CAIn                                   Premise(F453)
	S165= XER.CAIn=Carry(a+32'b0+ca)                            Path(S156,S164)
	S166= CtrlPC=0                                              Premise(F456)
	S167= CtrlPCInc=0                                           Premise(F457)
	S168= PC[Out]=addr+4                                        PC-Hold(S143,S166,S167)
	S169= CtrlICache=0                                          Premise(F460)
	S170= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S145,S169)
	S171= CtrlGPRegs=1                                          Premise(F466)
	S172= GPRegs[rT]=a+32'b0+ca                                 GPRegs-Write(S159,S161,S171)
	S173= CtrlXERCA=1                                           Premise(F471)
	S174= XER[CA]=Carry(a+32'b0+ca)                             XER-CA-Write(S165,S173)
	S175= CtrlCRRegsCR0=1                                       Premise(F476)
	S176= CRRegs[CR0]={Compare0(a+32'b0+ca),so}                 CRRegs-CR0-Write(S163,S175)

POST	S168= PC[Out]=addr+4                                        PC-Hold(S143,S166,S167)
	S170= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S145,S169)
	S172= GPRegs[rT]=a+32'b0+ca                                 GPRegs-Write(S159,S161,S171)
	S174= XER[CA]=Carry(a+32'b0+ca)                             XER-CA-Write(S165,S173)
	S176= CRRegs[CR0]={Compare0(a+32'b0+ca),so}                 CRRegs-CR0-Write(S163,S175)

