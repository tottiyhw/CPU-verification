
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,1428}                      Premise(F2)
	S3= ICache[addr]={31,rT,rA,0,1428}                          Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= XER[CA]=ca                                              Premise(F5)
	S6= XER[SO]=so                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= PC.Out=>ICache.IEA                                     Premise(F11)
	S17= ICache.IEA=addr                                        Path(S8,S16)
	S18= ICache.Out={31,rT,rA,0,1428}                           ICache-Search(S17,S3)
	S19= ICache.Out=>ICacheReg.In                               Premise(F12)
	S20= ICacheReg.In={31,rT,rA,0,1428}                         Path(S18,S19)
	S21= CtrlPC=0                                               Premise(F45)
	S22= CtrlPCInc=0                                            Premise(F46)
	S23= PC[Out]=addr                                           PC-Hold(S1,S21,S22)
	S24= CtrlIAddrReg=1                                         Premise(F47)
	S25= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S24)
	S26= CtrlICacheReg=1                                        Premise(F50)
	S27= [ICacheReg]={31,rT,rA,0,1428}                          ICacheReg-Write(S20,S26)
	S28= CtrlIMem=0                                             Premise(F52)
	S29= IMem[{pid,addr}]={31,rT,rA,0,1428}                     IMem-Hold(S2,S28)
	S30= CtrlGPRegs=0                                           Premise(F55)
	S31= GPRegs[rA]=a                                           GPRegs-Hold(S4,S30)
	S32= CtrlXERSO=0                                            Premise(F58)
	S33= XER[SO]=so                                             XER-SO-Hold(S6,S32)
	S34= CtrlXERCA=0                                            Premise(F60)
	S35= XER[CA]=ca                                             XER-CA-Hold(S5,S34)

IMMU	S36= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S25)
	S37= ICacheReg.Out={31,rT,rA,0,1428}                        ICacheReg-Out(S27)
	S38= IAddrReg.Out=>IMem.RAddr                               Premise(F74)
	S39= IMem.RAddr={pid,addr}                                  Path(S36,S38)
	S40= IMem.Out={31,rT,rA,0,1428}                             IMem-Read(S39,S29)
	S41= IMem.Out=>IRMux.MemData                                Premise(F75)
	S42= IRMux.MemData={31,rT,rA,0,1428}                        Path(S40,S41)
	S43= ICacheReg.Out=>IRMux.CacheData                         Premise(F76)
	S44= IRMux.CacheData={31,rT,rA,0,1428}                      Path(S37,S43)
	S45= IRMux.Out={31,rT,rA,0,1428}                            IRMux-Select(S42,S44)
	S46= IRMux.Out=>IR.In                                       Premise(F79)
	S47= IR.In={31,rT,rA,0,1428}                                Path(S45,S46)
	S48= CtrlPC=0                                               Premise(F103)
	S49= CtrlPCInc=1                                            Premise(F104)
	S50= PC[Out]=addr+4                                         PC-Inc(S23,S48,S49)
	S51= CtrlIR=1                                               Premise(F112)
	S52= [IR]={31,rT,rA,0,1428}                                 IR-Write(S47,S51)
	S53= CtrlGPRegs=0                                           Premise(F113)
	S54= GPRegs[rA]=a                                           GPRegs-Hold(S31,S53)
	S55= CtrlXERSO=0                                            Premise(F116)
	S56= XER[SO]=so                                             XER-SO-Hold(S33,S55)
	S57= CtrlXERCA=0                                            Premise(F118)
	S58= XER[CA]=ca                                             XER-CA-Hold(S35,S57)

ID	S59= IR.Out11_15=rA                                         IR-Out(S52)
	S60= IR.Out11_15=>GPRegs.RReg1                              Premise(F141)
	S61= GPRegs.RReg1=rA                                        Path(S59,S60)
	S62= GPRegs.Rdata1=a                                        GPRegs-Read(S61,S54)
	S63= GPRegs.Rdata1=>A.In                                    Premise(F143)
	S64= A.In=a                                                 Path(S62,S63)
	S65= B.In=32'b0                                             Premise(F144)
	S66= CtrlPC=0                                               Premise(F162)
	S67= CtrlPCInc=0                                            Premise(F163)
	S68= PC[Out]=addr+4                                         PC-Hold(S50,S66,S67)
	S69= CtrlIR=0                                               Premise(F171)
	S70= [IR]={31,rT,rA,0,1428}                                 IR-Hold(S52,S69)
	S71= CtrlA=1                                                Premise(F173)
	S72= [A]=a                                                  A-Write(S64,S71)
	S73= CtrlB=1                                                Premise(F174)
	S74= [B]=32'b0                                              B-Write(S65,S73)
	S75= CtrlXERSO=0                                            Premise(F175)
	S76= XER[SO]=so                                             XER-SO-Hold(S56,S75)
	S77= CtrlXERCA=0                                            Premise(F177)
	S78= XER[CA]=ca                                             XER-CA-Hold(S58,S77)

EX	S79= A.Out=a                                                A-Out(S72)
	S80= B.Out=32'b0                                            B-Out(S74)
	S81= XER.SOOut=so                                           XER-SO-Out(S76)
	S82= XER.CAOut=ca                                           XER-CA-Out(S78)
	S83= A.Out=>ALU.A                                           Premise(F203)
	S84= ALU.A=a                                                Path(S79,S83)
	S85= B.Out=>ALU.B                                           Premise(F204)
	S86= ALU.B=32'b0                                            Path(S80,S85)
	S87= XER.CAOut=>ALU.CAIn                                    Premise(F205)
	S88= ALU.CAIn=ca                                            Path(S82,S87)
	S89= ALU.Out=a+32'b0+ca                                     ALU(S84,S86,S88)
	S90= ALU.OV=OverFlow(a+32'b0+ca)                            ALU(S84,S86,S88)
	S91= ALU.CA=Carry(a+32'b0+ca)                               ALU(S84,S86,S88)
	S92= ALU.Out=>ALUOut.In                                     Premise(F207)
	S93= ALUOut.In=a+32'b0+ca                                   Path(S89,S92)
	S94= ALU.CA=>CAReg.In                                       Premise(F208)
	S95= CAReg.In=Carry(a+32'b0+ca)                             Path(S91,S94)
	S96= ALU.OV=>OVReg.In                                       Premise(F209)
	S97= OVReg.In=OverFlow(a+32'b0+ca)                          Path(S90,S96)
	S98= XER.SOOut=>ORGate.A                                    Premise(F210)
	S99= ORGate.A=so                                            Path(S81,S98)
	S100= ALU.OV=>ORGate.B                                      Premise(F211)
	S101= ORGate.B=OverFlow(a+32'b0+ca)                         Path(S90,S100)
	S102= ORGate.Out=so|OverFlow(a+32'b0+ca)                    ORGate(S99,S101)
	S103= ORGate.Out=>DR1bit.In                                 Premise(F212)
	S104= DR1bit.In=so|OverFlow(a+32'b0+ca)                     Path(S102,S103)
	S105= CtrlPC=0                                              Premise(F220)
	S106= CtrlPCInc=0                                           Premise(F221)
	S107= PC[Out]=addr+4                                        PC-Hold(S68,S105,S106)
	S108= CtrlIR=0                                              Premise(F229)
	S109= [IR]={31,rT,rA,0,1428}                                IR-Hold(S70,S108)
	S110= CtrlALUOut=1                                          Premise(F236)
	S111= [ALUOut]=a+32'b0+ca                                   ALUOut-Write(S93,S110)
	S112= CtrlCAReg=1                                           Premise(F237)
	S113= [CAReg]=Carry(a+32'b0+ca)                             CAReg-Write(S95,S112)
	S114= CtrlOVReg=1                                           Premise(F238)
	S115= [OVReg]=OverFlow(a+32'b0+ca)                          OVReg-Write(S97,S114)
	S116= CtrlDR1bit=1                                          Premise(F239)
	S117= [DR1bit]=so|OverFlow(a+32'b0+ca)                      DR1bit-Write(S104,S116)

MEM	S118= CtrlPC=0                                              Premise(F278)
	S119= CtrlPCInc=0                                           Premise(F279)
	S120= PC[Out]=addr+4                                        PC-Hold(S107,S118,S119)
	S121= CtrlIR=0                                              Premise(F287)
	S122= [IR]={31,rT,rA,0,1428}                                IR-Hold(S109,S121)
	S123= CtrlALUOut=0                                          Premise(F294)
	S124= [ALUOut]=a+32'b0+ca                                   ALUOut-Hold(S111,S123)
	S125= CtrlCAReg=0                                           Premise(F295)
	S126= [CAReg]=Carry(a+32'b0+ca)                             CAReg-Hold(S113,S125)
	S127= CtrlOVReg=0                                           Premise(F296)
	S128= [OVReg]=OverFlow(a+32'b0+ca)                          OVReg-Hold(S115,S127)
	S129= CtrlDR1bit=0                                          Premise(F297)
	S130= [DR1bit]=so|OverFlow(a+32'b0+ca)                      DR1bit-Hold(S117,S129)

DMMU1	S131= CtrlPC=0                                              Premise(F336)
	S132= CtrlPCInc=0                                           Premise(F337)
	S133= PC[Out]=addr+4                                        PC-Hold(S120,S131,S132)
	S134= CtrlIR=0                                              Premise(F345)
	S135= [IR]={31,rT,rA,0,1428}                                IR-Hold(S122,S134)
	S136= CtrlALUOut=0                                          Premise(F352)
	S137= [ALUOut]=a+32'b0+ca                                   ALUOut-Hold(S124,S136)
	S138= CtrlCAReg=0                                           Premise(F353)
	S139= [CAReg]=Carry(a+32'b0+ca)                             CAReg-Hold(S126,S138)
	S140= CtrlOVReg=0                                           Premise(F354)
	S141= [OVReg]=OverFlow(a+32'b0+ca)                          OVReg-Hold(S128,S140)
	S142= CtrlDR1bit=0                                          Premise(F355)
	S143= [DR1bit]=so|OverFlow(a+32'b0+ca)                      DR1bit-Hold(S130,S142)

DMMU2	S144= CtrlPC=0                                              Premise(F394)
	S145= CtrlPCInc=0                                           Premise(F395)
	S146= PC[Out]=addr+4                                        PC-Hold(S133,S144,S145)
	S147= CtrlIR=0                                              Premise(F403)
	S148= [IR]={31,rT,rA,0,1428}                                IR-Hold(S135,S147)
	S149= CtrlALUOut=0                                          Premise(F410)
	S150= [ALUOut]=a+32'b0+ca                                   ALUOut-Hold(S137,S149)
	S151= CtrlCAReg=0                                           Premise(F411)
	S152= [CAReg]=Carry(a+32'b0+ca)                             CAReg-Hold(S139,S151)
	S153= CtrlOVReg=0                                           Premise(F412)
	S154= [OVReg]=OverFlow(a+32'b0+ca)                          OVReg-Hold(S141,S153)
	S155= CtrlDR1bit=0                                          Premise(F413)
	S156= [DR1bit]=so|OverFlow(a+32'b0+ca)                      DR1bit-Hold(S143,S155)

WB	S157= IR.Out6_10=rT                                         IR-Out(S148)
	S158= ALUOut.Out=a+32'b0+ca                                 ALUOut-Out(S150)
	S159= CAReg.Out=Carry(a+32'b0+ca)                           CAReg-Out(S152)
	S160= OVReg.Out=OverFlow(a+32'b0+ca)                        OVReg-Out(S154)
	S161= DR1bit.Out=so|OverFlow(a+32'b0+ca)                    DR1bit-Out(S156)
	S162= IR.Out6_10=>GPRegs.WReg                               Premise(F445)
	S163= GPRegs.WReg=rT                                        Path(S157,S162)
	S164= ALUOut.Out=>GPRegs.WData                              Premise(F446)
	S165= GPRegs.WData=a+32'b0+ca                               Path(S158,S164)
	S166= DR1bit.Out=>XER.SOIn                                  Premise(F447)
	S167= XER.SOIn=so|OverFlow(a+32'b0+ca)                      Path(S161,S166)
	S168= CAReg.Out=>XER.CAIn                                   Premise(F448)
	S169= XER.CAIn=Carry(a+32'b0+ca)                            Path(S159,S168)
	S170= OVReg.Out=>XER.OVIn                                   Premise(F449)
	S171= XER.OVIn=OverFlow(a+32'b0+ca)                         Path(S160,S170)
	S172= CtrlPC=0                                              Premise(F452)
	S173= CtrlPCInc=0                                           Premise(F453)
	S174= PC[Out]=addr+4                                        PC-Hold(S146,S172,S173)
	S175= CtrlGPRegs=1                                          Premise(F462)
	S176= GPRegs[rT]=a+32'b0+ca                                 GPRegs-Write(S163,S165,S175)
	S177= CtrlXERSO=1                                           Premise(F465)
	S178= XER[SO]=so|OverFlow(a+32'b0+ca)                       XER-SO-Write(S167,S177)
	S179= CtrlXEROV=1                                           Premise(F466)
	S180= XER[OV]=OverFlow(a+32'b0+ca)                          XER-OV-Write(S171,S179)
	S181= CtrlXERCA=1                                           Premise(F467)
	S182= XER[CA]=Carry(a+32'b0+ca)                             XER-CA-Write(S169,S181)

POST	S174= PC[Out]=addr+4                                        PC-Hold(S146,S172,S173)
	S176= GPRegs[rT]=a+32'b0+ca                                 GPRegs-Write(S163,S165,S175)
	S178= XER[SO]=so|OverFlow(a+32'b0+ca)                       XER-SO-Write(S167,S177)
	S180= XER[OV]=OverFlow(a+32'b0+ca)                          XER-OV-Write(S171,S179)
	S182= XER[CA]=Carry(a+32'b0+ca)                             XER-CA-Write(S169,S181)

