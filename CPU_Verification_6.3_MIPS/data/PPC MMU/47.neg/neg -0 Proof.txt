
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,208}                       Premise(F2)
	S3= ICache[addr]={31,rT,rA,0,208}                           Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= PC.Out=>ICache.IEA                                     Premise(F9)
	S15= ICache.IEA=addr                                        Path(S6,S14)
	S16= ICache.Out={31,rT,rA,0,208}                            ICache-Search(S15,S3)
	S17= ICache.Out=>ICacheReg.In                               Premise(F10)
	S18= ICacheReg.In={31,rT,rA,0,208}                          Path(S16,S17)
	S19= CtrlPC=0                                               Premise(F34)
	S20= CtrlPCInc=0                                            Premise(F35)
	S21= PC[Out]=addr                                           PC-Hold(S1,S19,S20)
	S22= CtrlIAddrReg=1                                         Premise(F36)
	S23= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S22)
	S24= CtrlICacheReg=1                                        Premise(F39)
	S25= [ICacheReg]={31,rT,rA,0,208}                           ICacheReg-Write(S18,S24)
	S26= CtrlIMem=0                                             Premise(F41)
	S27= IMem[{pid,addr}]={31,rT,rA,0,208}                      IMem-Hold(S2,S26)
	S28= CtrlGPRegs=0                                           Premise(F44)
	S29= GPRegs[rA]=a                                           GPRegs-Hold(S4,S28)

IMMU	S30= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S23)
	S31= ICacheReg.Out={31,rT,rA,0,208}                         ICacheReg-Out(S25)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F57)
	S33= IMem.RAddr={pid,addr}                                  Path(S30,S32)
	S34= IMem.Out={31,rT,rA,0,208}                              IMem-Read(S33,S27)
	S35= IMem.Out=>IRMux.MemData                                Premise(F58)
	S36= IRMux.MemData={31,rT,rA,0,208}                         Path(S34,S35)
	S37= ICacheReg.Out=>IRMux.CacheData                         Premise(F59)
	S38= IRMux.CacheData={31,rT,rA,0,208}                       Path(S31,S37)
	S39= IRMux.Out={31,rT,rA,0,208}                             IRMux-Select(S36,S38)
	S40= IRMux.Out=>IR.In                                       Premise(F62)
	S41= IR.In={31,rT,rA,0,208}                                 Path(S39,S40)
	S42= CtrlPC=0                                               Premise(F77)
	S43= CtrlPCInc=1                                            Premise(F78)
	S44= PC[Out]=addr+4                                         PC-Inc(S21,S42,S43)
	S45= CtrlIR=1                                               Premise(F86)
	S46= [IR]={31,rT,rA,0,208}                                  IR-Write(S41,S45)
	S47= CtrlGPRegs=0                                           Premise(F87)
	S48= GPRegs[rA]=a                                           GPRegs-Hold(S29,S47)

ID	S49= IR.Out11_15=rA                                         IR-Out(S46)
	S50= IR.Out11_15=>GPRegs.RReg1                              Premise(F109)
	S51= GPRegs.RReg1=rA                                        Path(S49,S50)
	S52= GPRegs.Rdata1=a                                        GPRegs-Read(S51,S48)
	S53= GPRegs.Rdata1=>A.In                                    Premise(F111)
	S54= A.In=a                                                 Path(S52,S53)
	S55= CtrlPC=0                                               Premise(F121)
	S56= CtrlPCInc=0                                            Premise(F122)
	S57= PC[Out]=addr+4                                         PC-Hold(S44,S55,S56)
	S58= CtrlIR=0                                               Premise(F130)
	S59= [IR]={31,rT,rA,0,208}                                  IR-Hold(S46,S58)
	S60= CtrlA=1                                                Premise(F132)
	S61= [A]=a                                                  A-Write(S54,S60)

EX	S62= A.Out=a                                                A-Out(S61)
	S63= A.Out=>ALU.A                                           Premise(F156)
	S64= ALU.A=a                                                Path(S62,S63)
	S65= ALU.Out=(-a)                                           ALU(S64)
	S66= ALU.Out=>ALUOut.In                                     Premise(F159)
	S67= ALUOut.In=(-a)                                         Path(S65,S66)
	S68= CtrlPC=0                                               Premise(F164)
	S69= CtrlPCInc=0                                            Premise(F165)
	S70= PC[Out]=addr+4                                         PC-Hold(S57,S68,S69)
	S71= CtrlIR=0                                               Premise(F173)
	S72= [IR]={31,rT,rA,0,208}                                  IR-Hold(S59,S71)
	S73= CtrlALUOut=1                                           Premise(F177)
	S74= [ALUOut]=(-a)                                          ALUOut-Write(S67,S73)

MEM	S75= CtrlPC=0                                               Premise(F207)
	S76= CtrlPCInc=0                                            Premise(F208)
	S77= PC[Out]=addr+4                                         PC-Hold(S70,S75,S76)
	S78= CtrlIR=0                                               Premise(F216)
	S79= [IR]={31,rT,rA,0,208}                                  IR-Hold(S72,S78)
	S80= CtrlALUOut=0                                           Premise(F220)
	S81= [ALUOut]=(-a)                                          ALUOut-Hold(S74,S80)

DMMU1	S82= CtrlPC=0                                               Premise(F250)
	S83= CtrlPCInc=0                                            Premise(F251)
	S84= PC[Out]=addr+4                                         PC-Hold(S77,S82,S83)
	S85= CtrlIR=0                                               Premise(F259)
	S86= [IR]={31,rT,rA,0,208}                                  IR-Hold(S79,S85)
	S87= CtrlALUOut=0                                           Premise(F263)
	S88= [ALUOut]=(-a)                                          ALUOut-Hold(S81,S87)

DMMU2	S89= CtrlPC=0                                               Premise(F293)
	S90= CtrlPCInc=0                                            Premise(F294)
	S91= PC[Out]=addr+4                                         PC-Hold(S84,S89,S90)
	S92= CtrlIR=0                                               Premise(F302)
	S93= [IR]={31,rT,rA,0,208}                                  IR-Hold(S86,S92)
	S94= CtrlALUOut=0                                           Premise(F306)
	S95= [ALUOut]=(-a)                                          ALUOut-Hold(S88,S94)

WB	S96= IR.Out6_10=rT                                          IR-Out(S93)
	S97= ALUOut.Out=(-a)                                        ALUOut-Out(S95)
	S98= IR.Out6_10=>GPRegs.WReg                                Premise(F332)
	S99= GPRegs.WReg=rT                                         Path(S96,S98)
	S100= ALUOut.Out=>GPRegs.WData                              Premise(F333)
	S101= GPRegs.WData=(-a)                                     Path(S97,S100)
	S102= CtrlPC=0                                              Premise(F336)
	S103= CtrlPCInc=0                                           Premise(F337)
	S104= PC[Out]=addr+4                                        PC-Hold(S91,S102,S103)
	S105= CtrlGPRegs=1                                          Premise(F346)
	S106= GPRegs[rT]=(-a)                                       GPRegs-Write(S99,S101,S105)

POST	S104= PC[Out]=addr+4                                        PC-Hold(S91,S102,S103)
	S106= GPRegs[rT]=(-a)                                       GPRegs-Write(S99,S101,S105)

