
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,208}                       Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMMU.PID                                    Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F33)
	S14= CtrlPCInc=0                                            Premise(F34)
	S15= PC[Out]=addr                                           PC-Hold(S1,S13,S14)
	S16= CtrlIAddrReg=1                                         Premise(F35)
	S17= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S16)
	S18= CtrlIMem=0                                             Premise(F40)
	S19= IMem[{pid,addr}]={31,rT,rA,0,208}                      IMem-Hold(S2,S18)
	S20= CtrlGPRegs=0                                           Premise(F43)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)

IMMU	S22= PC.Out=addr                                            PC-Out(S15)
	S23= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S17)
	S24= PC.Out=>ICache.IEA                                     Premise(F51)
	S25= ICache.IEA=addr                                        Path(S22,S24)
	S26= IAddrReg.Out=>IMem.RAddr                               Premise(F56)
	S27= IMem.RAddr={pid,addr}                                  Path(S23,S26)
	S28= IMem.Out={31,rT,rA,0,208}                              IMem-Read(S27,S19)
	S29= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S27,S19)
	S30= IMem.Out=>IRMux.MemData                                Premise(F57)
	S31= IRMux.MemData={31,rT,rA,0,208}                         Path(S28,S30)
	S32= IRMux.Out={31,rT,rA,0,208}                             IRMux-Select(S31)
	S33= IRMux.Out=>IR.In                                       Premise(F61)
	S34= IR.In={31,rT,rA,0,208}                                 Path(S32,S33)
	S35= IMem.MEM8WordOut=>ICache.WData                         Premise(F62)
	S36= ICache.WData=IMemGet8Word({pid,addr})                  Path(S29,S35)
	S37= CtrlPC=0                                               Premise(F76)
	S38= CtrlPCInc=1                                            Premise(F77)
	S39= PC[Out]=addr+4                                         PC-Inc(S15,S37,S38)
	S40= CtrlICache=1                                           Premise(F80)
	S41= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S25,S36,S40)
	S42= CtrlIR=1                                               Premise(F85)
	S43= [IR]={31,rT,rA,0,208}                                  IR-Write(S34,S42)
	S44= CtrlGPRegs=0                                           Premise(F86)
	S45= GPRegs[rA]=a                                           GPRegs-Hold(S21,S44)

ID	S46= IR.Out11_15=rA                                         IR-Out(S43)
	S47= IR.Out11_15=>GPRegs.RReg1                              Premise(F108)
	S48= GPRegs.RReg1=rA                                        Path(S46,S47)
	S49= GPRegs.Rdata1=a                                        GPRegs-Read(S48,S45)
	S50= GPRegs.Rdata1=>A.In                                    Premise(F110)
	S51= A.In=a                                                 Path(S49,S50)
	S52= CtrlPC=0                                               Premise(F120)
	S53= CtrlPCInc=0                                            Premise(F121)
	S54= PC[Out]=addr+4                                         PC-Hold(S39,S52,S53)
	S55= CtrlICache=0                                           Premise(F124)
	S56= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S41,S55)
	S57= CtrlIR=0                                               Premise(F129)
	S58= [IR]={31,rT,rA,0,208}                                  IR-Hold(S43,S57)
	S59= CtrlA=1                                                Premise(F131)
	S60= [A]=a                                                  A-Write(S51,S59)

EX	S61= A.Out=a                                                A-Out(S60)
	S62= A.Out=>ALU.A                                           Premise(F155)
	S63= ALU.A=a                                                Path(S61,S62)
	S64= ALU.Out=(-a)                                           ALU(S63)
	S65= ALU.Out=>ALUOut.In                                     Premise(F158)
	S66= ALUOut.In=(-a)                                         Path(S64,S65)
	S67= CtrlPC=0                                               Premise(F163)
	S68= CtrlPCInc=0                                            Premise(F164)
	S69= PC[Out]=addr+4                                         PC-Hold(S54,S67,S68)
	S70= CtrlICache=0                                           Premise(F167)
	S71= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S56,S70)
	S72= CtrlIR=0                                               Premise(F172)
	S73= [IR]={31,rT,rA,0,208}                                  IR-Hold(S58,S72)
	S74= CtrlALUOut=1                                           Premise(F176)
	S75= [ALUOut]=(-a)                                          ALUOut-Write(S66,S74)

MEM	S76= CtrlPC=0                                               Premise(F206)
	S77= CtrlPCInc=0                                            Premise(F207)
	S78= PC[Out]=addr+4                                         PC-Hold(S69,S76,S77)
	S79= CtrlICache=0                                           Premise(F210)
	S80= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S71,S79)
	S81= CtrlIR=0                                               Premise(F215)
	S82= [IR]={31,rT,rA,0,208}                                  IR-Hold(S73,S81)
	S83= CtrlALUOut=0                                           Premise(F219)
	S84= [ALUOut]=(-a)                                          ALUOut-Hold(S75,S83)

DMMU1	S85= CtrlPC=0                                               Premise(F249)
	S86= CtrlPCInc=0                                            Premise(F250)
	S87= PC[Out]=addr+4                                         PC-Hold(S78,S85,S86)
	S88= CtrlICache=0                                           Premise(F253)
	S89= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S80,S88)
	S90= CtrlIR=0                                               Premise(F258)
	S91= [IR]={31,rT,rA,0,208}                                  IR-Hold(S82,S90)
	S92= CtrlALUOut=0                                           Premise(F262)
	S93= [ALUOut]=(-a)                                          ALUOut-Hold(S84,S92)

DMMU2	S94= CtrlPC=0                                               Premise(F292)
	S95= CtrlPCInc=0                                            Premise(F293)
	S96= PC[Out]=addr+4                                         PC-Hold(S87,S94,S95)
	S97= CtrlICache=0                                           Premise(F296)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S89,S97)
	S99= CtrlIR=0                                               Premise(F301)
	S100= [IR]={31,rT,rA,0,208}                                 IR-Hold(S91,S99)
	S101= CtrlALUOut=0                                          Premise(F305)
	S102= [ALUOut]=(-a)                                         ALUOut-Hold(S93,S101)

WB	S103= IR.Out6_10=rT                                         IR-Out(S100)
	S104= ALUOut.Out=(-a)                                       ALUOut-Out(S102)
	S105= IR.Out6_10=>GPRegs.WReg                               Premise(F331)
	S106= GPRegs.WReg=rT                                        Path(S103,S105)
	S107= ALUOut.Out=>GPRegs.WData                              Premise(F332)
	S108= GPRegs.WData=(-a)                                     Path(S104,S107)
	S109= CtrlPC=0                                              Premise(F335)
	S110= CtrlPCInc=0                                           Premise(F336)
	S111= PC[Out]=addr+4                                        PC-Hold(S96,S109,S110)
	S112= CtrlICache=0                                          Premise(F339)
	S113= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S112)
	S114= CtrlGPRegs=1                                          Premise(F345)
	S115= GPRegs[rT]=(-a)                                       GPRegs-Write(S106,S108,S114)

POST	S111= PC[Out]=addr+4                                        PC-Hold(S96,S109,S110)
	S113= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S112)
	S115= GPRegs[rT]=(-a)                                       GPRegs-Write(S106,S108,S114)

