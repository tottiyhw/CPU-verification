
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,209}                       Premise(F2)
	S3= ICache[addr]={31,rT,rA,0,209}                           Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F10)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={31,rT,rA,0,209}                            ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F11)
	S19= ICacheReg.In={31,rT,rA,0,209}                          Path(S17,S18)
	S20= CtrlPC=0                                               Premise(F39)
	S21= CtrlPCInc=0                                            Premise(F40)
	S22= PC[Out]=addr                                           PC-Hold(S1,S20,S21)
	S23= CtrlIAddrReg=1                                         Premise(F41)
	S24= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S23)
	S25= CtrlICacheReg=1                                        Premise(F44)
	S26= [ICacheReg]={31,rT,rA,0,209}                           ICacheReg-Write(S19,S25)
	S27= CtrlIMem=0                                             Premise(F46)
	S28= IMem[{pid,addr}]={31,rT,rA,0,209}                      IMem-Hold(S2,S27)
	S29= CtrlGPRegs=0                                           Premise(F49)
	S30= GPRegs[rA]=a                                           GPRegs-Hold(S4,S29)
	S31= CtrlXERSO=0                                            Premise(F53)
	S32= XER[SO]=so                                             XER-SO-Hold(S5,S31)

IMMU	S33= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S24)
	S34= ICacheReg.Out={31,rT,rA,0,209}                         ICacheReg-Out(S26)
	S35= IAddrReg.Out=>IMem.RAddr                               Premise(F70)
	S36= IMem.RAddr={pid,addr}                                  Path(S33,S35)
	S37= IMem.Out={31,rT,rA,0,209}                              IMem-Read(S36,S28)
	S38= IMem.Out=>IRMux.MemData                                Premise(F71)
	S39= IRMux.MemData={31,rT,rA,0,209}                         Path(S37,S38)
	S40= ICacheReg.Out=>IRMux.CacheData                         Premise(F72)
	S41= IRMux.CacheData={31,rT,rA,0,209}                       Path(S34,S40)
	S42= IRMux.Out={31,rT,rA,0,209}                             IRMux-Select(S39,S41)
	S43= IRMux.Out=>IR.In                                       Premise(F75)
	S44= IR.In={31,rT,rA,0,209}                                 Path(S42,S43)
	S45= CtrlPC=0                                               Premise(F94)
	S46= CtrlPCInc=1                                            Premise(F95)
	S47= PC[Out]=addr+4                                         PC-Inc(S22,S45,S46)
	S48= CtrlIR=1                                               Premise(F103)
	S49= [IR]={31,rT,rA,0,209}                                  IR-Write(S44,S48)
	S50= CtrlGPRegs=0                                           Premise(F104)
	S51= GPRegs[rA]=a                                           GPRegs-Hold(S30,S50)
	S52= CtrlXERSO=0                                            Premise(F108)
	S53= XER[SO]=so                                             XER-SO-Hold(S32,S52)

ID	S54= IR.Out11_15=rA                                         IR-Out(S49)
	S55= IR.Out11_15=>GPRegs.RReg1                              Premise(F134)
	S56= GPRegs.RReg1=rA                                        Path(S54,S55)
	S57= GPRegs.Rdata1=a                                        GPRegs-Read(S56,S51)
	S58= GPRegs.Rdata1=>A.In                                    Premise(F136)
	S59= A.In=a                                                 Path(S57,S58)
	S60= CtrlPC=0                                               Premise(F150)
	S61= CtrlPCInc=0                                            Premise(F151)
	S62= PC[Out]=addr+4                                         PC-Hold(S47,S60,S61)
	S63= CtrlIR=0                                               Premise(F159)
	S64= [IR]={31,rT,rA,0,209}                                  IR-Hold(S49,S63)
	S65= CtrlA=1                                                Premise(F161)
	S66= [A]=a                                                  A-Write(S59,S65)
	S67= CtrlXERSO=0                                            Premise(F164)
	S68= XER[SO]=so                                             XER-SO-Hold(S53,S67)

EX	S69= A.Out=a                                                A-Out(S66)
	S70= XER.SOOut=so                                           XER-SO-Out(S68)
	S71= A.Out=>ALU.A                                           Premise(F193)
	S72= ALU.A=a                                                Path(S69,S71)
	S73= ALU.Out=(-a)                                           ALU(S72)
	S74= ALU.CMP=Compare0((-a))                                 ALU(S72)
	S75= ALU.Out=>ALUOut.In                                     Premise(F196)
	S76= ALUOut.In=(-a)                                         Path(S73,S75)
	S77= ALU.CMP=>DataCmb.A                                     Premise(F197)
	S78= DataCmb.A=Compare0((-a))                               Path(S74,S77)
	S79= XER.SOOut=>DataCmb.B                                   Premise(F198)
	S80= DataCmb.B=so                                           Path(S70,S79)
	S81= DataCmb.Out={Compare0((-a)),so}                        DataCmb(S78,S80)
	S82= DataCmb.Out=>DR4bit.In                                 Premise(F199)
	S83= DR4bit.In={Compare0((-a)),so}                          Path(S81,S82)
	S84= CtrlPC=0                                               Premise(F205)
	S85= CtrlPCInc=0                                            Premise(F206)
	S86= PC[Out]=addr+4                                         PC-Hold(S62,S84,S85)
	S87= CtrlIR=0                                               Premise(F214)
	S88= [IR]={31,rT,rA,0,209}                                  IR-Hold(S64,S87)
	S89= CtrlALUOut=1                                           Premise(F218)
	S90= [ALUOut]=(-a)                                          ALUOut-Write(S76,S89)
	S91= CtrlDR4bit=1                                           Premise(F222)
	S92= [DR4bit]={Compare0((-a)),so}                           DR4bit-Write(S83,S91)

MEM	S93= CtrlPC=0                                               Premise(F260)
	S94= CtrlPCInc=0                                            Premise(F261)
	S95= PC[Out]=addr+4                                         PC-Hold(S86,S93,S94)
	S96= CtrlIR=0                                               Premise(F269)
	S97= [IR]={31,rT,rA,0,209}                                  IR-Hold(S88,S96)
	S98= CtrlALUOut=0                                           Premise(F273)
	S99= [ALUOut]=(-a)                                          ALUOut-Hold(S90,S98)
	S100= CtrlDR4bit=0                                          Premise(F277)
	S101= [DR4bit]={Compare0((-a)),so}                          DR4bit-Hold(S92,S100)

DMMU1	S102= CtrlPC=0                                              Premise(F315)
	S103= CtrlPCInc=0                                           Premise(F316)
	S104= PC[Out]=addr+4                                        PC-Hold(S95,S102,S103)
	S105= CtrlIR=0                                              Premise(F324)
	S106= [IR]={31,rT,rA,0,209}                                 IR-Hold(S97,S105)
	S107= CtrlALUOut=0                                          Premise(F328)
	S108= [ALUOut]=(-a)                                         ALUOut-Hold(S99,S107)
	S109= CtrlDR4bit=0                                          Premise(F332)
	S110= [DR4bit]={Compare0((-a)),so}                          DR4bit-Hold(S101,S109)

DMMU2	S111= CtrlPC=0                                              Premise(F370)
	S112= CtrlPCInc=0                                           Premise(F371)
	S113= PC[Out]=addr+4                                        PC-Hold(S104,S111,S112)
	S114= CtrlIR=0                                              Premise(F379)
	S115= [IR]={31,rT,rA,0,209}                                 IR-Hold(S106,S114)
	S116= CtrlALUOut=0                                          Premise(F383)
	S117= [ALUOut]=(-a)                                         ALUOut-Hold(S108,S116)
	S118= CtrlDR4bit=0                                          Premise(F387)
	S119= [DR4bit]={Compare0((-a)),so}                          DR4bit-Hold(S110,S118)

WB	S120= IR.Out6_10=rT                                         IR-Out(S115)
	S121= ALUOut.Out=(-a)                                       ALUOut-Out(S117)
	S122= DR4bit.Out={Compare0((-a)),so}                        DR4bit-Out(S119)
	S123= IR.Out6_10=>GPRegs.WReg                               Premise(F420)
	S124= GPRegs.WReg=rT                                        Path(S120,S123)
	S125= ALUOut.Out=>GPRegs.WData                              Premise(F421)
	S126= GPRegs.WData=(-a)                                     Path(S121,S125)
	S127= DR4bit.Out=>CRRegs.CR0In                              Premise(F422)
	S128= CRRegs.CR0In={Compare0((-a)),so}                      Path(S122,S127)
	S129= CtrlPC=0                                              Premise(F425)
	S130= CtrlPCInc=0                                           Premise(F426)
	S131= PC[Out]=addr+4                                        PC-Hold(S113,S129,S130)
	S132= CtrlGPRegs=1                                          Premise(F435)
	S133= GPRegs[rT]=(-a)                                       GPRegs-Write(S124,S126,S132)
	S134= CtrlCRRegsCR0=1                                       Premise(F444)
	S135= CRRegs[CR0]={Compare0((-a)),so}                       CRRegs-CR0-Write(S128,S134)

POST	S131= PC[Out]=addr+4                                        PC-Hold(S113,S129,S130)
	S133= GPRegs[rT]=(-a)                                       GPRegs-Write(S124,S126,S132)
	S135= CRRegs[CR0]={Compare0((-a)),so}                       CRRegs-CR0-Write(S128,S134)

