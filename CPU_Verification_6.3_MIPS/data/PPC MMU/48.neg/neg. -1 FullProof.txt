
----------------------------------- FullProof -----------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={31,rT,rA,0,209}                       Premise(F2)
	S0= GPRegs[rA]=a                                            Premise(F3)
	S0= XER[SO]=so                                              Premise(F4)

IF	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= XER.SOOut=so                                            XER-SO-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F6)
	S0= IMMU.IEA=addr                                           Path(S0,S0)
	S0= IMMU.Addr={pid,addr}                                    IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr)                              IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F7)
	S0= IAddrReg.In={pid,addr}                                  Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F8)
	S0= IMMUHitReg.In=IMMUHit(pid,addr)                         Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F9)
	S0= ICache.IEA=addr                                         Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr)                              ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F10)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F11)
	S0= ICacheHitReg.In=ICacheHit(addr)                         Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F12)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F13)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F14)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F15)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F16)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F17)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F18)
	S0= IRMux.Out=>IR.In                                        Premise(F19)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F20)
	S0= PC.Out=>ICache.IEA                                      Premise(F21)
	S0= IR.Out0_5=>CU.Op                                        Premise(F22)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F23)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F24)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F25)
	S0= A.Out=>ALU.A                                            Premise(F26)
	S0= B.Out=>ALU.B                                            Premise(F27)
	S0= CU.Func=>ALU.Func                                       Premise(F28)
	S0= ALU.Out=>ALUOut.In                                      Premise(F29)
	S0= ALU.CMP=>DataCmb.A                                      Premise(F30)
	S0= XER.SOOut=>DataCmb.B                                    Premise(F31)
	S0= DataCmb.B=so                                            Path(S0,S0)
	S0= DataCmb.Out=>DR4bit.In                                  Premise(F32)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F33)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F34)
	S0= DR4bit.Out=>CRRegs.CR0In                                Premise(F35)
	S0= CtrlPIDReg=0                                            Premise(F36)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F37)
	S0= CtrlPC=0                                                Premise(F38)
	S0= CtrlPCInc=0                                             Premise(F39)
	S0= PC[Out]=addr                                            PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=1                                          Premise(F40)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Write(S0,S0)
	S0= CtrlIMMUHitReg=1                                        Premise(F41)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Write(S0,S0)
	S0= CtrlICache=0                                            Premise(F42)
	S0= CtrlICacheReg=1                                         Premise(F43)
	S0= CtrlICacheHitReg=1                                      Premise(F44)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Write(S0,S0)
	S0= CtrlIMem=0                                              Premise(F45)
	S0= IMem[{pid,addr}]={31,rT,rA,0,209}                       IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F46)
	S0= CtrlIR=0                                                Premise(F47)
	S0= CtrlGPRegs=0                                            Premise(F48)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F49)
	S0= CtrlB=0                                                 Premise(F50)
	S0= CtrlALUOut=0                                            Premise(F51)
	S0= CtrlXERSO=0                                             Premise(F52)
	S0= XER[SO]=so                                              XER-SO-Hold(S0,S0)
	S0= CtrlXEROV=0                                             Premise(F53)
	S0= CtrlXERCA=0                                             Premise(F54)
	S0= CtrlDR4bit=0                                            Premise(F55)
	S0= CtrlCRRegs=0                                            Premise(F56)
	S0= CtrlCRRegsCR0=0                                         Premise(F57)
	S0= CtrlCRRegsW4bitRegs=0                                   Premise(F58)
	S0= CtrlCRRegsW1bitRegs=0                                   Premise(F59)

IMMU	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= XER.SOOut=so                                            XER-SO-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F60)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F61)
	S0= IMMU.IEA=addr                                           Path(S0,S0)
	S0= IMMU.Addr={pid,addr}                                    IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr)                              IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F62)
	S0= IAddrReg.In={pid,addr}                                  Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F63)
	S0= IMMUHitReg.In=IMMUHit(pid,addr)                         Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F64)
	S0= ICache.IEA=addr                                         Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr)                              ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F65)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F66)
	S0= ICacheHitReg.In=ICacheHit(addr)                         Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F67)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F68)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F69)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={31,rT,rA,0,209}                               IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F70)
	S0= IRMux.MemData={31,rT,rA,0,209}                          Path(S0,S0)
	S0= IRMux.Out={31,rT,rA,0,209}                              IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F71)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F72)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F73)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F74)
	S0= IR.In={31,rT,rA,0,209}                                  Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F75)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F76)
	S0= IR.Out0_5=>CU.Op                                        Premise(F77)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F78)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F79)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F80)
	S0= A.Out=>ALU.A                                            Premise(F81)
	S0= B.Out=>ALU.B                                            Premise(F82)
	S0= CU.Func=>ALU.Func                                       Premise(F83)
	S0= ALU.Out=>ALUOut.In                                      Premise(F84)
	S0= ALU.CMP=>DataCmb.A                                      Premise(F85)
	S0= XER.SOOut=>DataCmb.B                                    Premise(F86)
	S0= DataCmb.B=so                                            Path(S0,S0)
	S0= DataCmb.Out=>DR4bit.In                                  Premise(F87)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F88)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F89)
	S0= DR4bit.Out=>CRRegs.CR0In                                Premise(F90)
	S0= CtrlPIDReg=0                                            Premise(F91)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F92)
	S0= CtrlPC=0                                                Premise(F93)
	S0= CtrlPCInc=1                                             Premise(F94)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F95)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F96)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=1                                            Premise(F97)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Write(S0,S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F98)
	S0= CtrlICacheHitReg=0                                      Premise(F99)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F100)
	S0= IMem[{pid,addr}]={31,rT,rA,0,209}                       IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F101)
	S0= CtrlIR=1                                                Premise(F102)
	S0= [IR]={31,rT,rA,0,209}                                   IR-Write(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F103)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F104)
	S0= CtrlB=0                                                 Premise(F105)
	S0= CtrlALUOut=0                                            Premise(F106)
	S0= CtrlXERSO=0                                             Premise(F107)
	S0= XER[SO]=so                                              XER-SO-Hold(S0,S0)
	S0= CtrlXEROV=0                                             Premise(F108)
	S0= CtrlXERCA=0                                             Premise(F109)
	S0= CtrlDR4bit=0                                            Premise(F110)
	S0= CtrlCRRegs=0                                            Premise(F111)
	S0= CtrlCRRegsCR0=0                                         Premise(F112)
	S0= CtrlCRRegsW4bitRegs=0                                   Premise(F113)
	S0= CtrlCRRegsW1bitRegs=0                                   Premise(F114)

ID	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=0                                           IR-Out(S0)
	S0= IR.Out21_31=209                                         IR-Out(S0)
	S0= XER.SOOut=so                                            XER-SO-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F115)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F116)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F117)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F118)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F119)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F120)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F121)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F122)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F123)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F124)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={31,rT,rA,0,209}                               IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F125)
	S0= IRMux.MemData={31,rT,rA,0,209}                          Path(S0,S0)
	S0= IRMux.Out={31,rT,rA,0,209}                              IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F126)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F127)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F128)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F129)
	S0= IR.In={31,rT,rA,0,209}                                  Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F130)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F131)
	S0= IR.Out0_5=>CU.Op                                        Premise(F132)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F133)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.Rdata1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F134)
	S0= CU.IRFunc=209                                           Path(S0,S0)
	S0= CU.Func=alu_neg                                         CU(S0,S0)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F135)
	S0= A.In=a                                                  Path(S0,S0)
	S0= B.In=32'b0                                              Premise(F136)
	S0= A.Out=>ALU.A                                            Premise(F137)
	S0= B.Out=>ALU.B                                            Premise(F138)
	S0= CU.Func=>ALU.Func                                       Premise(F139)
	S0= ALU.Func=alu_neg                                        Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F140)
	S0= ALU.CMP=>DataCmb.A                                      Premise(F141)
	S0= XER.SOOut=>DataCmb.B                                    Premise(F142)
	S0= DataCmb.B=so                                            Path(S0,S0)
	S0= DataCmb.Out=>DR4bit.In                                  Premise(F143)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F144)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F145)
	S0= DR4bit.Out=>CRRegs.CR0In                                Premise(F146)
	S0= CtrlPIDReg=0                                            Premise(F147)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F148)
	S0= CtrlPC=0                                                Premise(F149)
	S0= CtrlPCInc=0                                             Premise(F150)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F151)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F152)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F153)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F154)
	S0= CtrlICacheHitReg=0                                      Premise(F155)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F156)
	S0= IMem[{pid,addr}]={31,rT,rA,0,209}                       IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F157)
	S0= CtrlIR=0                                                Premise(F158)
	S0= [IR]={31,rT,rA,0,209}                                   IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F159)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=1                                                 Premise(F160)
	S0= [A]=a                                                   A-Write(S0,S0)
	S0= CtrlB=1                                                 Premise(F161)
	S0= [B]=32'b0                                               B-Write(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F162)
	S0= CtrlXERSO=0                                             Premise(F163)
	S0= XER[SO]=so                                              XER-SO-Hold(S0,S0)
	S0= CtrlXEROV=0                                             Premise(F164)
	S0= CtrlXERCA=0                                             Premise(F165)
	S0= CtrlDR4bit=0                                            Premise(F166)
	S0= CtrlCRRegs=0                                            Premise(F167)
	S0= CtrlCRRegsCR0=0                                         Premise(F168)
	S0= CtrlCRRegsW4bitRegs=0                                   Premise(F169)
	S0= CtrlCRRegsW1bitRegs=0                                   Premise(F170)

EX	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=0                                           IR-Out(S0)
	S0= IR.Out21_31=209                                         IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out26_31=a[26:31]                                     A-Out(S0)
	S0= A.Out30_31=a[30:31]                                     A-Out(S0)
	S0= B.Out=32'b0                                             B-Out(S0)
	S0= B.Out26_31=32'b0[26:31]                                 B-Out(S0)
	S0= B.Out30_31=32'b0[30:31]                                 B-Out(S0)
	S0= XER.SOOut=so                                            XER-SO-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F171)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F172)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F173)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F174)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F175)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F176)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F177)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F178)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F179)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F180)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={31,rT,rA,0,209}                               IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F181)
	S0= IRMux.MemData={31,rT,rA,0,209}                          Path(S0,S0)
	S0= IRMux.Out={31,rT,rA,0,209}                              IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F182)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F183)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F184)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F185)
	S0= IR.In={31,rT,rA,0,209}                                  Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F186)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F187)
	S0= IR.Out0_5=>CU.Op                                        Premise(F188)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F189)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.Rdata1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F190)
	S0= CU.IRFunc=209                                           Path(S0,S0)
	S0= CU.Func=alu_neg                                         CU(S0,S0)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F191)
	S0= A.In=a                                                  Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F192)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F193)
	S0= ALU.B=32'b0                                             Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F194)
	S0= ALU.Func=alu_neg                                        Path(S0,S0)
	S0= ALU.Out=(-a)                                            ALU(S0)
	S0= ALU.CMP=Compare0((-a))                                  ALU(S0)
	S0= ALU.OV=OverFlow((-a))                                   ALU(S0)
	S0= ALU.CA=Carry((-a))                                      ALU(S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F195)
	S0= ALUOut.In=(-a)                                          Path(S0,S0)
	S0= ALU.CMP=>DataCmb.A                                      Premise(F196)
	S0= DataCmb.A=Compare0((-a))                                Path(S0,S0)
	S0= XER.SOOut=>DataCmb.B                                    Premise(F197)
	S0= DataCmb.B=so                                            Path(S0,S0)
	S0= DataCmb.Out={Compare0((-a)),so}                         DataCmb(S0,S0)
	S0= DataCmb.Out=>DR4bit.In                                  Premise(F198)
	S0= DR4bit.In={Compare0((-a)),so}                           Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F199)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F200)
	S0= DR4bit.Out=>CRRegs.CR0In                                Premise(F201)
	S0= CtrlPIDReg=0                                            Premise(F202)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F203)
	S0= CtrlPC=0                                                Premise(F204)
	S0= CtrlPCInc=0                                             Premise(F205)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F206)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F207)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F208)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F209)
	S0= CtrlICacheHitReg=0                                      Premise(F210)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F211)
	S0= IMem[{pid,addr}]={31,rT,rA,0,209}                       IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F212)
	S0= CtrlIR=0                                                Premise(F213)
	S0= [IR]={31,rT,rA,0,209}                                   IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F214)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F215)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F216)
	S0= [B]=32'b0                                               B-Hold(S0,S0)
	S0= CtrlALUOut=1                                            Premise(F217)
	S0= [ALUOut]=(-a)                                           ALUOut-Write(S0,S0)
	S0= CtrlXERSO=0                                             Premise(F218)
	S0= XER[SO]=so                                              XER-SO-Hold(S0,S0)
	S0= CtrlXEROV=0                                             Premise(F219)
	S0= CtrlXERCA=0                                             Premise(F220)
	S0= CtrlDR4bit=1                                            Premise(F221)
	S0= [DR4bit]={Compare0((-a)),so}                            DR4bit-Write(S0,S0)
	S0= CtrlCRRegs=0                                            Premise(F222)
	S0= CtrlCRRegsCR0=0                                         Premise(F223)
	S0= CtrlCRRegsW4bitRegs=0                                   Premise(F224)
	S0= CtrlCRRegsW1bitRegs=0                                   Premise(F225)

MEM	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=0                                           IR-Out(S0)
	S0= IR.Out21_31=209                                         IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out26_31=a[26:31]                                     A-Out(S0)
	S0= A.Out30_31=a[30:31]                                     A-Out(S0)
	S0= B.Out=32'b0                                             B-Out(S0)
	S0= B.Out26_31=32'b0[26:31]                                 B-Out(S0)
	S0= B.Out30_31=32'b0[30:31]                                 B-Out(S0)
	S0= ALUOut.Out=(-a)                                         ALUOut-Out(S0)
	S0= ALUOut.Out26_31=(-a)[26:31]                             ALUOut-Out(S0)
	S0= ALUOut.Out30_31=(-a)[30:31]                             ALUOut-Out(S0)
	S0= XER.SOOut=so                                            XER-SO-Out(S0)
	S0= DR4bit.Out={Compare0((-a)),so}                          DR4bit-Out(S0)
	S0= DR4bit.Out26_31={Compare0((-a)),so}[26:31]              DR4bit-Out(S0)
	S0= DR4bit.Out30_31={Compare0((-a)),so}[30:31]              DR4bit-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F226)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F227)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F228)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F229)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F230)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F231)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F232)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F233)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F234)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F235)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={31,rT,rA,0,209}                               IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F236)
	S0= IRMux.MemData={31,rT,rA,0,209}                          Path(S0,S0)
	S0= IRMux.Out={31,rT,rA,0,209}                              IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F237)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F238)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F239)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F240)
	S0= IR.In={31,rT,rA,0,209}                                  Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F241)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F242)
	S0= IR.Out0_5=>CU.Op                                        Premise(F243)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F244)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.Rdata1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F245)
	S0= CU.IRFunc=209                                           Path(S0,S0)
	S0= CU.Func=alu_neg                                         CU(S0,S0)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F246)
	S0= A.In=a                                                  Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F247)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F248)
	S0= ALU.B=32'b0                                             Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F249)
	S0= ALU.Func=alu_neg                                        Path(S0,S0)
	S0= ALU.Out=(-a)                                            ALU(S0)
	S0= ALU.CMP=Compare0((-a))                                  ALU(S0)
	S0= ALU.OV=OverFlow((-a))                                   ALU(S0)
	S0= ALU.CA=Carry((-a))                                      ALU(S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F250)
	S0= ALUOut.In=(-a)                                          Path(S0,S0)
	S0= ALU.CMP=>DataCmb.A                                      Premise(F251)
	S0= DataCmb.A=Compare0((-a))                                Path(S0,S0)
	S0= XER.SOOut=>DataCmb.B                                    Premise(F252)
	S0= DataCmb.B=so                                            Path(S0,S0)
	S0= DataCmb.Out={Compare0((-a)),so}                         DataCmb(S0,S0)
	S0= DataCmb.Out=>DR4bit.In                                  Premise(F253)
	S0= DR4bit.In={Compare0((-a)),so}                           Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F254)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F255)
	S0= GPRegs.WData=(-a)                                       Path(S0,S0)
	S0= DR4bit.Out=>CRRegs.CR0In                                Premise(F256)
	S0= CRRegs.CR0In={Compare0((-a)),so}                        Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F257)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F258)
	S0= CtrlPC=0                                                Premise(F259)
	S0= CtrlPCInc=0                                             Premise(F260)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F261)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F262)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F263)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F264)
	S0= CtrlICacheHitReg=0                                      Premise(F265)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F266)
	S0= IMem[{pid,addr}]={31,rT,rA,0,209}                       IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F267)
	S0= CtrlIR=0                                                Premise(F268)
	S0= [IR]={31,rT,rA,0,209}                                   IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F269)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F270)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F271)
	S0= [B]=32'b0                                               B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F272)
	S0= [ALUOut]=(-a)                                           ALUOut-Hold(S0,S0)
	S0= CtrlXERSO=0                                             Premise(F273)
	S0= XER[SO]=so                                              XER-SO-Hold(S0,S0)
	S0= CtrlXEROV=0                                             Premise(F274)
	S0= CtrlXERCA=0                                             Premise(F275)
	S0= CtrlDR4bit=0                                            Premise(F276)
	S0= [DR4bit]={Compare0((-a)),so}                            DR4bit-Hold(S0,S0)
	S0= CtrlCRRegs=0                                            Premise(F277)
	S0= CtrlCRRegsCR0=0                                         Premise(F278)
	S0= CtrlCRRegsW4bitRegs=0                                   Premise(F279)
	S0= CtrlCRRegsW1bitRegs=0                                   Premise(F280)

DMMU1	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=0                                           IR-Out(S0)
	S0= IR.Out21_31=209                                         IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out26_31=a[26:31]                                     A-Out(S0)
	S0= A.Out30_31=a[30:31]                                     A-Out(S0)
	S0= B.Out=32'b0                                             B-Out(S0)
	S0= B.Out26_31=32'b0[26:31]                                 B-Out(S0)
	S0= B.Out30_31=32'b0[30:31]                                 B-Out(S0)
	S0= ALUOut.Out=(-a)                                         ALUOut-Out(S0)
	S0= ALUOut.Out26_31=(-a)[26:31]                             ALUOut-Out(S0)
	S0= ALUOut.Out30_31=(-a)[30:31]                             ALUOut-Out(S0)
	S0= XER.SOOut=so                                            XER-SO-Out(S0)
	S0= DR4bit.Out={Compare0((-a)),so}                          DR4bit-Out(S0)
	S0= DR4bit.Out26_31={Compare0((-a)),so}[26:31]              DR4bit-Out(S0)
	S0= DR4bit.Out30_31={Compare0((-a)),so}[30:31]              DR4bit-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F281)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F282)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F283)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F284)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F285)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F286)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F287)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F288)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F289)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F290)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={31,rT,rA,0,209}                               IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F291)
	S0= IRMux.MemData={31,rT,rA,0,209}                          Path(S0,S0)
	S0= IRMux.Out={31,rT,rA,0,209}                              IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F292)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F293)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F294)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F295)
	S0= IR.In={31,rT,rA,0,209}                                  Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F296)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F297)
	S0= IR.Out0_5=>CU.Op                                        Premise(F298)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F299)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.Rdata1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F300)
	S0= CU.IRFunc=209                                           Path(S0,S0)
	S0= CU.Func=alu_neg                                         CU(S0,S0)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F301)
	S0= A.In=a                                                  Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F302)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F303)
	S0= ALU.B=32'b0                                             Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F304)
	S0= ALU.Func=alu_neg                                        Path(S0,S0)
	S0= ALU.Out=(-a)                                            ALU(S0)
	S0= ALU.CMP=Compare0((-a))                                  ALU(S0)
	S0= ALU.OV=OverFlow((-a))                                   ALU(S0)
	S0= ALU.CA=Carry((-a))                                      ALU(S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F305)
	S0= ALUOut.In=(-a)                                          Path(S0,S0)
	S0= ALU.CMP=>DataCmb.A                                      Premise(F306)
	S0= DataCmb.A=Compare0((-a))                                Path(S0,S0)
	S0= XER.SOOut=>DataCmb.B                                    Premise(F307)
	S0= DataCmb.B=so                                            Path(S0,S0)
	S0= DataCmb.Out={Compare0((-a)),so}                         DataCmb(S0,S0)
	S0= DataCmb.Out=>DR4bit.In                                  Premise(F308)
	S0= DR4bit.In={Compare0((-a)),so}                           Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F309)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F310)
	S0= GPRegs.WData=(-a)                                       Path(S0,S0)
	S0= DR4bit.Out=>CRRegs.CR0In                                Premise(F311)
	S0= CRRegs.CR0In={Compare0((-a)),so}                        Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F312)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F313)
	S0= CtrlPC=0                                                Premise(F314)
	S0= CtrlPCInc=0                                             Premise(F315)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F316)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F317)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F318)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F319)
	S0= CtrlICacheHitReg=0                                      Premise(F320)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F321)
	S0= IMem[{pid,addr}]={31,rT,rA,0,209}                       IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F322)
	S0= CtrlIR=0                                                Premise(F323)
	S0= [IR]={31,rT,rA,0,209}                                   IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F324)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F325)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F326)
	S0= [B]=32'b0                                               B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F327)
	S0= [ALUOut]=(-a)                                           ALUOut-Hold(S0,S0)
	S0= CtrlXERSO=0                                             Premise(F328)
	S0= XER[SO]=so                                              XER-SO-Hold(S0,S0)
	S0= CtrlXEROV=0                                             Premise(F329)
	S0= CtrlXERCA=0                                             Premise(F330)
	S0= CtrlDR4bit=0                                            Premise(F331)
	S0= [DR4bit]={Compare0((-a)),so}                            DR4bit-Hold(S0,S0)
	S0= CtrlCRRegs=0                                            Premise(F332)
	S0= CtrlCRRegsCR0=0                                         Premise(F333)
	S0= CtrlCRRegsW4bitRegs=0                                   Premise(F334)
	S0= CtrlCRRegsW1bitRegs=0                                   Premise(F335)

DMMU2	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=0                                           IR-Out(S0)
	S0= IR.Out21_31=209                                         IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out26_31=a[26:31]                                     A-Out(S0)
	S0= A.Out30_31=a[30:31]                                     A-Out(S0)
	S0= B.Out=32'b0                                             B-Out(S0)
	S0= B.Out26_31=32'b0[26:31]                                 B-Out(S0)
	S0= B.Out30_31=32'b0[30:31]                                 B-Out(S0)
	S0= ALUOut.Out=(-a)                                         ALUOut-Out(S0)
	S0= ALUOut.Out26_31=(-a)[26:31]                             ALUOut-Out(S0)
	S0= ALUOut.Out30_31=(-a)[30:31]                             ALUOut-Out(S0)
	S0= XER.SOOut=so                                            XER-SO-Out(S0)
	S0= DR4bit.Out={Compare0((-a)),so}                          DR4bit-Out(S0)
	S0= DR4bit.Out26_31={Compare0((-a)),so}[26:31]              DR4bit-Out(S0)
	S0= DR4bit.Out30_31={Compare0((-a)),so}[30:31]              DR4bit-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F336)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F337)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F338)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F339)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F340)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F341)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F342)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F343)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F344)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F345)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={31,rT,rA,0,209}                               IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F346)
	S0= IRMux.MemData={31,rT,rA,0,209}                          Path(S0,S0)
	S0= IRMux.Out={31,rT,rA,0,209}                              IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F347)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F348)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F349)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F350)
	S0= IR.In={31,rT,rA,0,209}                                  Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F351)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F352)
	S0= IR.Out0_5=>CU.Op                                        Premise(F353)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F354)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.Rdata1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F355)
	S0= CU.IRFunc=209                                           Path(S0,S0)
	S0= CU.Func=alu_neg                                         CU(S0,S0)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F356)
	S0= A.In=a                                                  Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F357)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F358)
	S0= ALU.B=32'b0                                             Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F359)
	S0= ALU.Func=alu_neg                                        Path(S0,S0)
	S0= ALU.Out=(-a)                                            ALU(S0)
	S0= ALU.CMP=Compare0((-a))                                  ALU(S0)
	S0= ALU.OV=OverFlow((-a))                                   ALU(S0)
	S0= ALU.CA=Carry((-a))                                      ALU(S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F360)
	S0= ALUOut.In=(-a)                                          Path(S0,S0)
	S0= ALU.CMP=>DataCmb.A                                      Premise(F361)
	S0= DataCmb.A=Compare0((-a))                                Path(S0,S0)
	S0= XER.SOOut=>DataCmb.B                                    Premise(F362)
	S0= DataCmb.B=so                                            Path(S0,S0)
	S0= DataCmb.Out={Compare0((-a)),so}                         DataCmb(S0,S0)
	S0= DataCmb.Out=>DR4bit.In                                  Premise(F363)
	S0= DR4bit.In={Compare0((-a)),so}                           Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F364)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F365)
	S0= GPRegs.WData=(-a)                                       Path(S0,S0)
	S0= DR4bit.Out=>CRRegs.CR0In                                Premise(F366)
	S0= CRRegs.CR0In={Compare0((-a)),so}                        Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F367)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F368)
	S0= CtrlPC=0                                                Premise(F369)
	S0= CtrlPCInc=0                                             Premise(F370)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F371)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F372)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F373)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F374)
	S0= CtrlICacheHitReg=0                                      Premise(F375)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F376)
	S0= IMem[{pid,addr}]={31,rT,rA,0,209}                       IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F377)
	S0= CtrlIR=0                                                Premise(F378)
	S0= [IR]={31,rT,rA,0,209}                                   IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F379)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F380)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F381)
	S0= [B]=32'b0                                               B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F382)
	S0= [ALUOut]=(-a)                                           ALUOut-Hold(S0,S0)
	S0= CtrlXERSO=0                                             Premise(F383)
	S0= XER[SO]=so                                              XER-SO-Hold(S0,S0)
	S0= CtrlXEROV=0                                             Premise(F384)
	S0= CtrlXERCA=0                                             Premise(F385)
	S0= CtrlDR4bit=0                                            Premise(F386)
	S0= [DR4bit]={Compare0((-a)),so}                            DR4bit-Hold(S0,S0)
	S0= CtrlCRRegs=0                                            Premise(F387)
	S0= CtrlCRRegsCR0=0                                         Premise(F388)
	S0= CtrlCRRegsW4bitRegs=0                                   Premise(F389)
	S0= CtrlCRRegsW1bitRegs=0                                   Premise(F390)

WB	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=0                                           IR-Out(S0)
	S0= IR.Out21_31=209                                         IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out26_31=a[26:31]                                     A-Out(S0)
	S0= A.Out30_31=a[30:31]                                     A-Out(S0)
	S0= B.Out=32'b0                                             B-Out(S0)
	S0= B.Out26_31=32'b0[26:31]                                 B-Out(S0)
	S0= B.Out30_31=32'b0[30:31]                                 B-Out(S0)
	S0= ALUOut.Out=(-a)                                         ALUOut-Out(S0)
	S0= ALUOut.Out26_31=(-a)[26:31]                             ALUOut-Out(S0)
	S0= ALUOut.Out30_31=(-a)[30:31]                             ALUOut-Out(S0)
	S0= XER.SOOut=so                                            XER-SO-Out(S0)
	S0= DR4bit.Out={Compare0((-a)),so}                          DR4bit-Out(S0)
	S0= DR4bit.Out26_31={Compare0((-a)),so}[26:31]              DR4bit-Out(S0)
	S0= DR4bit.Out30_31={Compare0((-a)),so}[30:31]              DR4bit-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F391)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F392)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F393)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F394)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F395)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F396)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F397)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F398)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F399)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F400)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={31,rT,rA,0,209}                               IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F401)
	S0= IRMux.MemData={31,rT,rA,0,209}                          Path(S0,S0)
	S0= IRMux.Out={31,rT,rA,0,209}                              IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F402)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F403)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F404)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F405)
	S0= IR.In={31,rT,rA,0,209}                                  Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F406)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F407)
	S0= IR.Out0_5=>CU.Op                                        Premise(F408)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F409)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.Rdata1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F410)
	S0= CU.IRFunc=209                                           Path(S0,S0)
	S0= CU.Func=alu_neg                                         CU(S0,S0)
	S0= GPRegs.Rdata1=>A.In                                     Premise(F411)
	S0= A.In=a                                                  Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F412)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F413)
	S0= ALU.B=32'b0                                             Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F414)
	S0= ALU.Func=alu_neg                                        Path(S0,S0)
	S0= ALU.Out=(-a)                                            ALU(S0)
	S0= ALU.CMP=Compare0((-a))                                  ALU(S0)
	S0= ALU.OV=OverFlow((-a))                                   ALU(S0)
	S0= ALU.CA=Carry((-a))                                      ALU(S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F415)
	S0= ALUOut.In=(-a)                                          Path(S0,S0)
	S0= ALU.CMP=>DataCmb.A                                      Premise(F416)
	S0= DataCmb.A=Compare0((-a))                                Path(S0,S0)
	S0= XER.SOOut=>DataCmb.B                                    Premise(F417)
	S0= DataCmb.B=so                                            Path(S0,S0)
	S0= DataCmb.Out={Compare0((-a)),so}                         DataCmb(S0,S0)
	S0= DataCmb.Out=>DR4bit.In                                  Premise(F418)
	S0= DR4bit.In={Compare0((-a)),so}                           Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F419)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F420)
	S0= GPRegs.WData=(-a)                                       Path(S0,S0)
	S0= DR4bit.Out=>CRRegs.CR0In                                Premise(F421)
	S0= CRRegs.CR0In={Compare0((-a)),so}                        Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F422)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F423)
	S0= CtrlPC=0                                                Premise(F424)
	S0= CtrlPCInc=0                                             Premise(F425)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F426)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F427)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F428)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F429)
	S0= CtrlICacheHitReg=0                                      Premise(F430)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F431)
	S0= IMem[{pid,addr}]={31,rT,rA,0,209}                       IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F432)
	S0= CtrlIR=0                                                Premise(F433)
	S0= [IR]={31,rT,rA,0,209}                                   IR-Hold(S0,S0)
	S0= CtrlGPRegs=1                                            Premise(F434)
	S0= GPRegs[rT]=(-a)                                         GPRegs-Write(S0,S0,S0)
	S0= CtrlA=0                                                 Premise(F435)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F436)
	S0= [B]=32'b0                                               B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F437)
	S0= [ALUOut]=(-a)                                           ALUOut-Hold(S0,S0)
	S0= CtrlXERSO=0                                             Premise(F438)
	S0= XER[SO]=so                                              XER-SO-Hold(S0,S0)
	S0= CtrlXEROV=0                                             Premise(F439)
	S0= CtrlXERCA=0                                             Premise(F440)
	S0= CtrlDR4bit=0                                            Premise(F441)
	S0= [DR4bit]={Compare0((-a)),so}                            DR4bit-Hold(S0,S0)
	S0= CtrlCRRegs=0                                            Premise(F442)
	S0= CtrlCRRegsCR0=1                                         Premise(F443)
	S0= CRRegs[CR0]={Compare0((-a)),so}                         CRRegs-CR0-Write(S0,S0)
	S0= CtrlCRRegsW4bitRegs=0                                   Premise(F444)
	S0= CtrlCRRegsW1bitRegs=0                                   Premise(F445)

POST	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= IMem[{pid,addr}]={31,rT,rA,0,209}                       IMem-Hold(S0,S0)
	S0= [IR]={31,rT,rA,0,209}                                   IR-Hold(S0,S0)
	S0= GPRegs[rT]=(-a)                                         GPRegs-Write(S0,S0,S0)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= [B]=32'b0                                               B-Hold(S0,S0)
	S0= [ALUOut]=(-a)                                           ALUOut-Hold(S0,S0)
	S0= XER[SO]=so                                              XER-SO-Hold(S0,S0)
	S0= [DR4bit]={Compare0((-a)),so}                            DR4bit-Hold(S0,S0)
	S0= CRRegs[CR0]={Compare0((-a)),so}                         CRRegs-CR0-Write(S0,S0)

