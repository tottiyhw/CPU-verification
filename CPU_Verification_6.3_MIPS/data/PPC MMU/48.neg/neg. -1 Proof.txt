
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,209}                       Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F38)
	S15= CtrlPCInc=0                                            Premise(F39)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F40)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F45)
	S20= IMem[{pid,addr}]={31,rT,rA,0,209}                      IMem-Hold(S2,S19)
	S21= CtrlGPRegs=0                                           Premise(F48)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= CtrlXERSO=0                                            Premise(F52)
	S24= XER[SO]=so                                             XER-SO-Hold(S4,S23)

IMMU	S25= PC.Out=addr                                            PC-Out(S16)
	S26= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S27= PC.Out=>ICache.IEA                                     Premise(F64)
	S28= ICache.IEA=addr                                        Path(S25,S27)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F69)
	S30= IMem.RAddr={pid,addr}                                  Path(S26,S29)
	S31= IMem.Out={31,rT,rA,0,209}                              IMem-Read(S30,S20)
	S32= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S30,S20)
	S33= IMem.Out=>IRMux.MemData                                Premise(F70)
	S34= IRMux.MemData={31,rT,rA,0,209}                         Path(S31,S33)
	S35= IRMux.Out={31,rT,rA,0,209}                             IRMux-Select(S34)
	S36= IRMux.Out=>IR.In                                       Premise(F74)
	S37= IR.In={31,rT,rA,0,209}                                 Path(S35,S36)
	S38= IMem.MEM8WordOut=>ICache.WData                         Premise(F75)
	S39= ICache.WData=IMemGet8Word({pid,addr})                  Path(S32,S38)
	S40= CtrlPC=0                                               Premise(F93)
	S41= CtrlPCInc=1                                            Premise(F94)
	S42= PC[Out]=addr+4                                         PC-Inc(S16,S40,S41)
	S43= CtrlICache=1                                           Premise(F97)
	S44= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S28,S39,S43)
	S45= CtrlIR=1                                               Premise(F102)
	S46= [IR]={31,rT,rA,0,209}                                  IR-Write(S37,S45)
	S47= CtrlGPRegs=0                                           Premise(F103)
	S48= GPRegs[rA]=a                                           GPRegs-Hold(S22,S47)
	S49= CtrlXERSO=0                                            Premise(F107)
	S50= XER[SO]=so                                             XER-SO-Hold(S24,S49)

ID	S51= IR.Out11_15=rA                                         IR-Out(S46)
	S52= IR.Out11_15=>GPRegs.RReg1                              Premise(F133)
	S53= GPRegs.RReg1=rA                                        Path(S51,S52)
	S54= GPRegs.Rdata1=a                                        GPRegs-Read(S53,S48)
	S55= GPRegs.Rdata1=>A.In                                    Premise(F135)
	S56= A.In=a                                                 Path(S54,S55)
	S57= CtrlPC=0                                               Premise(F149)
	S58= CtrlPCInc=0                                            Premise(F150)
	S59= PC[Out]=addr+4                                         PC-Hold(S42,S57,S58)
	S60= CtrlICache=0                                           Premise(F153)
	S61= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S44,S60)
	S62= CtrlIR=0                                               Premise(F158)
	S63= [IR]={31,rT,rA,0,209}                                  IR-Hold(S46,S62)
	S64= CtrlA=1                                                Premise(F160)
	S65= [A]=a                                                  A-Write(S56,S64)
	S66= CtrlXERSO=0                                            Premise(F163)
	S67= XER[SO]=so                                             XER-SO-Hold(S50,S66)

EX	S68= A.Out=a                                                A-Out(S65)
	S69= XER.SOOut=so                                           XER-SO-Out(S67)
	S70= A.Out=>ALU.A                                           Premise(F192)
	S71= ALU.A=a                                                Path(S68,S70)
	S72= ALU.Out=(-a)                                           ALU(S71)
	S73= ALU.CMP=Compare0((-a))                                 ALU(S71)
	S74= ALU.Out=>ALUOut.In                                     Premise(F195)
	S75= ALUOut.In=(-a)                                         Path(S72,S74)
	S76= ALU.CMP=>DataCmb.A                                     Premise(F196)
	S77= DataCmb.A=Compare0((-a))                               Path(S73,S76)
	S78= XER.SOOut=>DataCmb.B                                   Premise(F197)
	S79= DataCmb.B=so                                           Path(S69,S78)
	S80= DataCmb.Out={Compare0((-a)),so}                        DataCmb(S77,S79)
	S81= DataCmb.Out=>DR4bit.In                                 Premise(F198)
	S82= DR4bit.In={Compare0((-a)),so}                          Path(S80,S81)
	S83= CtrlPC=0                                               Premise(F204)
	S84= CtrlPCInc=0                                            Premise(F205)
	S85= PC[Out]=addr+4                                         PC-Hold(S59,S83,S84)
	S86= CtrlICache=0                                           Premise(F208)
	S87= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S61,S86)
	S88= CtrlIR=0                                               Premise(F213)
	S89= [IR]={31,rT,rA,0,209}                                  IR-Hold(S63,S88)
	S90= CtrlALUOut=1                                           Premise(F217)
	S91= [ALUOut]=(-a)                                          ALUOut-Write(S75,S90)
	S92= CtrlDR4bit=1                                           Premise(F221)
	S93= [DR4bit]={Compare0((-a)),so}                           DR4bit-Write(S82,S92)

MEM	S94= CtrlPC=0                                               Premise(F259)
	S95= CtrlPCInc=0                                            Premise(F260)
	S96= PC[Out]=addr+4                                         PC-Hold(S85,S94,S95)
	S97= CtrlICache=0                                           Premise(F263)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S87,S97)
	S99= CtrlIR=0                                               Premise(F268)
	S100= [IR]={31,rT,rA,0,209}                                 IR-Hold(S89,S99)
	S101= CtrlALUOut=0                                          Premise(F272)
	S102= [ALUOut]=(-a)                                         ALUOut-Hold(S91,S101)
	S103= CtrlDR4bit=0                                          Premise(F276)
	S104= [DR4bit]={Compare0((-a)),so}                          DR4bit-Hold(S93,S103)

DMMU1	S105= CtrlPC=0                                              Premise(F314)
	S106= CtrlPCInc=0                                           Premise(F315)
	S107= PC[Out]=addr+4                                        PC-Hold(S96,S105,S106)
	S108= CtrlICache=0                                          Premise(F318)
	S109= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S108)
	S110= CtrlIR=0                                              Premise(F323)
	S111= [IR]={31,rT,rA,0,209}                                 IR-Hold(S100,S110)
	S112= CtrlALUOut=0                                          Premise(F327)
	S113= [ALUOut]=(-a)                                         ALUOut-Hold(S102,S112)
	S114= CtrlDR4bit=0                                          Premise(F331)
	S115= [DR4bit]={Compare0((-a)),so}                          DR4bit-Hold(S104,S114)

DMMU2	S116= CtrlPC=0                                              Premise(F369)
	S117= CtrlPCInc=0                                           Premise(F370)
	S118= PC[Out]=addr+4                                        PC-Hold(S107,S116,S117)
	S119= CtrlICache=0                                          Premise(F373)
	S120= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S109,S119)
	S121= CtrlIR=0                                              Premise(F378)
	S122= [IR]={31,rT,rA,0,209}                                 IR-Hold(S111,S121)
	S123= CtrlALUOut=0                                          Premise(F382)
	S124= [ALUOut]=(-a)                                         ALUOut-Hold(S113,S123)
	S125= CtrlDR4bit=0                                          Premise(F386)
	S126= [DR4bit]={Compare0((-a)),so}                          DR4bit-Hold(S115,S125)

WB	S127= IR.Out6_10=rT                                         IR-Out(S122)
	S128= ALUOut.Out=(-a)                                       ALUOut-Out(S124)
	S129= DR4bit.Out={Compare0((-a)),so}                        DR4bit-Out(S126)
	S130= IR.Out6_10=>GPRegs.WReg                               Premise(F419)
	S131= GPRegs.WReg=rT                                        Path(S127,S130)
	S132= ALUOut.Out=>GPRegs.WData                              Premise(F420)
	S133= GPRegs.WData=(-a)                                     Path(S128,S132)
	S134= DR4bit.Out=>CRRegs.CR0In                              Premise(F421)
	S135= CRRegs.CR0In={Compare0((-a)),so}                      Path(S129,S134)
	S136= CtrlPC=0                                              Premise(F424)
	S137= CtrlPCInc=0                                           Premise(F425)
	S138= PC[Out]=addr+4                                        PC-Hold(S118,S136,S137)
	S139= CtrlICache=0                                          Premise(F428)
	S140= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S120,S139)
	S141= CtrlGPRegs=1                                          Premise(F434)
	S142= GPRegs[rT]=(-a)                                       GPRegs-Write(S131,S133,S141)
	S143= CtrlCRRegsCR0=1                                       Premise(F443)
	S144= CRRegs[CR0]={Compare0((-a)),so}                       CRRegs-CR0-Write(S135,S143)

POST	S138= PC[Out]=addr+4                                        PC-Hold(S118,S136,S137)
	S140= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S120,S139)
	S142= GPRegs[rT]=(-a)                                       GPRegs-Write(S131,S133,S141)
	S144= CRRegs[CR0]={Compare0((-a)),so}                       CRRegs-CR0-Write(S135,S143)

