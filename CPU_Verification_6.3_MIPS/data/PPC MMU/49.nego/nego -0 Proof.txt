
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,1232}                      Premise(F2)
	S3= ICache[addr]={31,rT,rA,0,1232}                          Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F10)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={31,rT,rA,0,1232}                           ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F11)
	S19= ICacheReg.In={31,rT,rA,0,1232}                         Path(S17,S18)
	S20= CtrlPC=0                                               Premise(F41)
	S21= CtrlPCInc=0                                            Premise(F42)
	S22= PC[Out]=addr                                           PC-Hold(S1,S20,S21)
	S23= CtrlIAddrReg=1                                         Premise(F43)
	S24= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S23)
	S25= CtrlICacheReg=1                                        Premise(F46)
	S26= [ICacheReg]={31,rT,rA,0,1232}                          ICacheReg-Write(S19,S25)
	S27= CtrlIMem=0                                             Premise(F48)
	S28= IMem[{pid,addr}]={31,rT,rA,0,1232}                     IMem-Hold(S2,S27)
	S29= CtrlGPRegs=0                                           Premise(F51)
	S30= GPRegs[rA]=a                                           GPRegs-Hold(S4,S29)
	S31= CtrlXERSO=0                                            Premise(F56)
	S32= XER[SO]=so                                             XER-SO-Hold(S5,S31)

IMMU	S33= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S24)
	S34= ICacheReg.Out={31,rT,rA,0,1232}                        ICacheReg-Out(S26)
	S35= IAddrReg.Out=>IMem.RAddr                               Premise(F69)
	S36= IMem.RAddr={pid,addr}                                  Path(S33,S35)
	S37= IMem.Out={31,rT,rA,0,1232}                             IMem-Read(S36,S28)
	S38= IMem.Out=>IRMux.MemData                                Premise(F70)
	S39= IRMux.MemData={31,rT,rA,0,1232}                        Path(S37,S38)
	S40= ICacheReg.Out=>IRMux.CacheData                         Premise(F71)
	S41= IRMux.CacheData={31,rT,rA,0,1232}                      Path(S34,S40)
	S42= IRMux.Out={31,rT,rA,0,1232}                            IRMux-Select(S39,S41)
	S43= IRMux.Out=>IR.In                                       Premise(F74)
	S44= IR.In={31,rT,rA,0,1232}                                Path(S42,S43)
	S45= CtrlPC=0                                               Premise(F95)
	S46= CtrlPCInc=1                                            Premise(F96)
	S47= PC[Out]=addr+4                                         PC-Inc(S22,S45,S46)
	S48= CtrlIR=1                                               Premise(F104)
	S49= [IR]={31,rT,rA,0,1232}                                 IR-Write(S44,S48)
	S50= CtrlGPRegs=0                                           Premise(F105)
	S51= GPRegs[rA]=a                                           GPRegs-Hold(S30,S50)
	S52= CtrlXERSO=0                                            Premise(F110)
	S53= XER[SO]=so                                             XER-SO-Hold(S32,S52)

ID	S54= IR.Out11_15=rA                                         IR-Out(S49)
	S55= IR.Out11_15=>GPRegs.RReg1                              Premise(F132)
	S56= GPRegs.RReg1=rA                                        Path(S54,S55)
	S57= GPRegs.Rdata1=a                                        GPRegs-Read(S56,S51)
	S58= GPRegs.Rdata1=>A.In                                    Premise(F134)
	S59= A.In=a                                                 Path(S57,S58)
	S60= CtrlPC=0                                               Premise(F150)
	S61= CtrlPCInc=0                                            Premise(F151)
	S62= PC[Out]=addr+4                                         PC-Hold(S47,S60,S61)
	S63= CtrlIR=0                                               Premise(F159)
	S64= [IR]={31,rT,rA,0,1232}                                 IR-Hold(S49,S63)
	S65= CtrlA=1                                                Premise(F161)
	S66= [A]=a                                                  A-Write(S59,S65)
	S67= CtrlXERSO=0                                            Premise(F165)
	S68= XER[SO]=so                                             XER-SO-Hold(S53,S67)

EX	S69= A.Out=a                                                A-Out(S66)
	S70= XER.SOOut=so                                           XER-SO-Out(S68)
	S71= A.Out=>ALU.A                                           Premise(F190)
	S72= ALU.A=a                                                Path(S69,S71)
	S73= ALU.Out=(-a)                                           ALU(S72)
	S74= ALU.OV=OverFlow((-a))                                  ALU(S72)
	S75= ALU.Out=>ALUOut.In                                     Premise(F193)
	S76= ALUOut.In=(-a)                                         Path(S73,S75)
	S77= ALU.OV=>OVReg.In                                       Premise(F194)
	S78= OVReg.In=OverFlow((-a))                                Path(S74,S77)
	S79= XER.SOOut=>ORGate.A                                    Premise(F195)
	S80= ORGate.A=so                                            Path(S70,S79)
	S81= ALU.OV=>ORGate.B                                       Premise(F196)
	S82= ORGate.B=OverFlow((-a))                                Path(S74,S81)
	S83= ORGate.Out=so|OverFlow((-a))                           ORGate(S80,S82)
	S84= ORGate.Out=>DR1bit.In                                  Premise(F197)
	S85= DR1bit.In=so|OverFlow((-a))                            Path(S83,S84)
	S86= CtrlPC=0                                               Premise(F204)
	S87= CtrlPCInc=0                                            Premise(F205)
	S88= PC[Out]=addr+4                                         PC-Hold(S62,S86,S87)
	S89= CtrlIR=0                                               Premise(F213)
	S90= [IR]={31,rT,rA,0,1232}                                 IR-Hold(S64,S89)
	S91= CtrlALUOut=1                                           Premise(F217)
	S92= [ALUOut]=(-a)                                          ALUOut-Write(S76,S91)
	S93= CtrlOVReg=1                                            Premise(F218)
	S94= [OVReg]=OverFlow((-a))                                 OVReg-Write(S78,S93)
	S95= CtrlDR1bit=1                                           Premise(F222)
	S96= [DR1bit]=so|OverFlow((-a))                             DR1bit-Write(S85,S95)

MEM	S97= CtrlPC=0                                               Premise(F258)
	S98= CtrlPCInc=0                                            Premise(F259)
	S99= PC[Out]=addr+4                                         PC-Hold(S88,S97,S98)
	S100= CtrlIR=0                                              Premise(F267)
	S101= [IR]={31,rT,rA,0,1232}                                IR-Hold(S90,S100)
	S102= CtrlALUOut=0                                          Premise(F271)
	S103= [ALUOut]=(-a)                                         ALUOut-Hold(S92,S102)
	S104= CtrlOVReg=0                                           Premise(F272)
	S105= [OVReg]=OverFlow((-a))                                OVReg-Hold(S94,S104)
	S106= CtrlDR1bit=0                                          Premise(F276)
	S107= [DR1bit]=so|OverFlow((-a))                            DR1bit-Hold(S96,S106)

DMMU1	S108= CtrlPC=0                                              Premise(F312)
	S109= CtrlPCInc=0                                           Premise(F313)
	S110= PC[Out]=addr+4                                        PC-Hold(S99,S108,S109)
	S111= CtrlIR=0                                              Premise(F321)
	S112= [IR]={31,rT,rA,0,1232}                                IR-Hold(S101,S111)
	S113= CtrlALUOut=0                                          Premise(F325)
	S114= [ALUOut]=(-a)                                         ALUOut-Hold(S103,S113)
	S115= CtrlOVReg=0                                           Premise(F326)
	S116= [OVReg]=OverFlow((-a))                                OVReg-Hold(S105,S115)
	S117= CtrlDR1bit=0                                          Premise(F330)
	S118= [DR1bit]=so|OverFlow((-a))                            DR1bit-Hold(S107,S117)

DMMU2	S119= CtrlPC=0                                              Premise(F366)
	S120= CtrlPCInc=0                                           Premise(F367)
	S121= PC[Out]=addr+4                                        PC-Hold(S110,S119,S120)
	S122= CtrlIR=0                                              Premise(F375)
	S123= [IR]={31,rT,rA,0,1232}                                IR-Hold(S112,S122)
	S124= CtrlALUOut=0                                          Premise(F379)
	S125= [ALUOut]=(-a)                                         ALUOut-Hold(S114,S124)
	S126= CtrlOVReg=0                                           Premise(F380)
	S127= [OVReg]=OverFlow((-a))                                OVReg-Hold(S116,S126)
	S128= CtrlDR1bit=0                                          Premise(F384)
	S129= [DR1bit]=so|OverFlow((-a))                            DR1bit-Hold(S118,S128)

WB	S130= IR.Out6_10=rT                                         IR-Out(S123)
	S131= ALUOut.Out=(-a)                                       ALUOut-Out(S125)
	S132= OVReg.Out=OverFlow((-a))                              OVReg-Out(S127)
	S133= DR1bit.Out=so|OverFlow((-a))                          DR1bit-Out(S129)
	S134= IR.Out6_10=>GPRegs.WReg                               Premise(F414)
	S135= GPRegs.WReg=rT                                        Path(S130,S134)
	S136= ALUOut.Out=>GPRegs.WData                              Premise(F415)
	S137= GPRegs.WData=(-a)                                     Path(S131,S136)
	S138= DR1bit.Out=>XER.SOIn                                  Premise(F416)
	S139= XER.SOIn=so|OverFlow((-a))                            Path(S133,S138)
	S140= OVReg.Out=>XER.OVIn                                   Premise(F417)
	S141= XER.OVIn=OverFlow((-a))                               Path(S132,S140)
	S142= CtrlPC=0                                              Premise(F420)
	S143= CtrlPCInc=0                                           Premise(F421)
	S144= PC[Out]=addr+4                                        PC-Hold(S121,S142,S143)
	S145= CtrlGPRegs=1                                          Premise(F430)
	S146= GPRegs[rT]=(-a)                                       GPRegs-Write(S135,S137,S145)
	S147= CtrlXERSO=1                                           Premise(F435)
	S148= XER[SO]=so|OverFlow((-a))                             XER-SO-Write(S139,S147)
	S149= CtrlXEROV=1                                           Premise(F436)
	S150= XER[OV]=OverFlow((-a))                                XER-OV-Write(S141,S149)

POST	S144= PC[Out]=addr+4                                        PC-Hold(S121,S142,S143)
	S146= GPRegs[rT]=(-a)                                       GPRegs-Write(S135,S137,S145)
	S148= XER[SO]=so|OverFlow((-a))                             XER-SO-Write(S139,S147)
	S150= XER[OV]=OverFlow((-a))                                XER-OV-Write(S141,S149)

