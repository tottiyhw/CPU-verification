
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,1232}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F40)
	S15= CtrlPCInc=0                                            Premise(F41)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F42)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F47)
	S20= IMem[{pid,addr}]={31,rT,rA,0,1232}                     IMem-Hold(S2,S19)
	S21= CtrlGPRegs=0                                           Premise(F50)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= CtrlXERSO=0                                            Premise(F55)
	S24= XER[SO]=so                                             XER-SO-Hold(S4,S23)

IMMU	S25= PC.Out=addr                                            PC-Out(S16)
	S26= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S27= PC.Out=>ICache.IEA                                     Premise(F63)
	S28= ICache.IEA=addr                                        Path(S25,S27)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F68)
	S30= IMem.RAddr={pid,addr}                                  Path(S26,S29)
	S31= IMem.Out={31,rT,rA,0,1232}                             IMem-Read(S30,S20)
	S32= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S30,S20)
	S33= IMem.Out=>IRMux.MemData                                Premise(F69)
	S34= IRMux.MemData={31,rT,rA,0,1232}                        Path(S31,S33)
	S35= IRMux.Out={31,rT,rA,0,1232}                            IRMux-Select(S34)
	S36= IRMux.Out=>IR.In                                       Premise(F73)
	S37= IR.In={31,rT,rA,0,1232}                                Path(S35,S36)
	S38= IMem.MEM8WordOut=>ICache.WData                         Premise(F74)
	S39= ICache.WData=IMemGet8Word({pid,addr})                  Path(S32,S38)
	S40= CtrlPC=0                                               Premise(F94)
	S41= CtrlPCInc=1                                            Premise(F95)
	S42= PC[Out]=addr+4                                         PC-Inc(S16,S40,S41)
	S43= CtrlICache=1                                           Premise(F98)
	S44= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S28,S39,S43)
	S45= CtrlIR=1                                               Premise(F103)
	S46= [IR]={31,rT,rA,0,1232}                                 IR-Write(S37,S45)
	S47= CtrlGPRegs=0                                           Premise(F104)
	S48= GPRegs[rA]=a                                           GPRegs-Hold(S22,S47)
	S49= CtrlXERSO=0                                            Premise(F109)
	S50= XER[SO]=so                                             XER-SO-Hold(S24,S49)

ID	S51= IR.Out11_15=rA                                         IR-Out(S46)
	S52= IR.Out11_15=>GPRegs.RReg1                              Premise(F131)
	S53= GPRegs.RReg1=rA                                        Path(S51,S52)
	S54= GPRegs.Rdata1=a                                        GPRegs-Read(S53,S48)
	S55= GPRegs.Rdata1=>A.In                                    Premise(F133)
	S56= A.In=a                                                 Path(S54,S55)
	S57= CtrlPC=0                                               Premise(F149)
	S58= CtrlPCInc=0                                            Premise(F150)
	S59= PC[Out]=addr+4                                         PC-Hold(S42,S57,S58)
	S60= CtrlICache=0                                           Premise(F153)
	S61= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S44,S60)
	S62= CtrlIR=0                                               Premise(F158)
	S63= [IR]={31,rT,rA,0,1232}                                 IR-Hold(S46,S62)
	S64= CtrlA=1                                                Premise(F160)
	S65= [A]=a                                                  A-Write(S56,S64)
	S66= CtrlXERSO=0                                            Premise(F164)
	S67= XER[SO]=so                                             XER-SO-Hold(S50,S66)

EX	S68= A.Out=a                                                A-Out(S65)
	S69= XER.SOOut=so                                           XER-SO-Out(S67)
	S70= A.Out=>ALU.A                                           Premise(F189)
	S71= ALU.A=a                                                Path(S68,S70)
	S72= ALU.Out=(-a)                                           ALU(S71)
	S73= ALU.OV=OverFlow((-a))                                  ALU(S71)
	S74= ALU.Out=>ALUOut.In                                     Premise(F192)
	S75= ALUOut.In=(-a)                                         Path(S72,S74)
	S76= ALU.OV=>OVReg.In                                       Premise(F193)
	S77= OVReg.In=OverFlow((-a))                                Path(S73,S76)
	S78= XER.SOOut=>ORGate.A                                    Premise(F194)
	S79= ORGate.A=so                                            Path(S69,S78)
	S80= ALU.OV=>ORGate.B                                       Premise(F195)
	S81= ORGate.B=OverFlow((-a))                                Path(S73,S80)
	S82= ORGate.Out=so|OverFlow((-a))                           ORGate(S79,S81)
	S83= ORGate.Out=>DR1bit.In                                  Premise(F196)
	S84= DR1bit.In=so|OverFlow((-a))                            Path(S82,S83)
	S85= CtrlPC=0                                               Premise(F203)
	S86= CtrlPCInc=0                                            Premise(F204)
	S87= PC[Out]=addr+4                                         PC-Hold(S59,S85,S86)
	S88= CtrlICache=0                                           Premise(F207)
	S89= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S61,S88)
	S90= CtrlIR=0                                               Premise(F212)
	S91= [IR]={31,rT,rA,0,1232}                                 IR-Hold(S63,S90)
	S92= CtrlALUOut=1                                           Premise(F216)
	S93= [ALUOut]=(-a)                                          ALUOut-Write(S75,S92)
	S94= CtrlOVReg=1                                            Premise(F217)
	S95= [OVReg]=OverFlow((-a))                                 OVReg-Write(S77,S94)
	S96= CtrlDR1bit=1                                           Premise(F221)
	S97= [DR1bit]=so|OverFlow((-a))                             DR1bit-Write(S84,S96)

MEM	S98= CtrlPC=0                                               Premise(F257)
	S99= CtrlPCInc=0                                            Premise(F258)
	S100= PC[Out]=addr+4                                        PC-Hold(S87,S98,S99)
	S101= CtrlICache=0                                          Premise(F261)
	S102= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S89,S101)
	S103= CtrlIR=0                                              Premise(F266)
	S104= [IR]={31,rT,rA,0,1232}                                IR-Hold(S91,S103)
	S105= CtrlALUOut=0                                          Premise(F270)
	S106= [ALUOut]=(-a)                                         ALUOut-Hold(S93,S105)
	S107= CtrlOVReg=0                                           Premise(F271)
	S108= [OVReg]=OverFlow((-a))                                OVReg-Hold(S95,S107)
	S109= CtrlDR1bit=0                                          Premise(F275)
	S110= [DR1bit]=so|OverFlow((-a))                            DR1bit-Hold(S97,S109)

DMMU1	S111= CtrlPC=0                                              Premise(F311)
	S112= CtrlPCInc=0                                           Premise(F312)
	S113= PC[Out]=addr+4                                        PC-Hold(S100,S111,S112)
	S114= CtrlICache=0                                          Premise(F315)
	S115= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S102,S114)
	S116= CtrlIR=0                                              Premise(F320)
	S117= [IR]={31,rT,rA,0,1232}                                IR-Hold(S104,S116)
	S118= CtrlALUOut=0                                          Premise(F324)
	S119= [ALUOut]=(-a)                                         ALUOut-Hold(S106,S118)
	S120= CtrlOVReg=0                                           Premise(F325)
	S121= [OVReg]=OverFlow((-a))                                OVReg-Hold(S108,S120)
	S122= CtrlDR1bit=0                                          Premise(F329)
	S123= [DR1bit]=so|OverFlow((-a))                            DR1bit-Hold(S110,S122)

DMMU2	S124= CtrlPC=0                                              Premise(F365)
	S125= CtrlPCInc=0                                           Premise(F366)
	S126= PC[Out]=addr+4                                        PC-Hold(S113,S124,S125)
	S127= CtrlICache=0                                          Premise(F369)
	S128= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S115,S127)
	S129= CtrlIR=0                                              Premise(F374)
	S130= [IR]={31,rT,rA,0,1232}                                IR-Hold(S117,S129)
	S131= CtrlALUOut=0                                          Premise(F378)
	S132= [ALUOut]=(-a)                                         ALUOut-Hold(S119,S131)
	S133= CtrlOVReg=0                                           Premise(F379)
	S134= [OVReg]=OverFlow((-a))                                OVReg-Hold(S121,S133)
	S135= CtrlDR1bit=0                                          Premise(F383)
	S136= [DR1bit]=so|OverFlow((-a))                            DR1bit-Hold(S123,S135)

WB	S137= IR.Out6_10=rT                                         IR-Out(S130)
	S138= ALUOut.Out=(-a)                                       ALUOut-Out(S132)
	S139= OVReg.Out=OverFlow((-a))                              OVReg-Out(S134)
	S140= DR1bit.Out=so|OverFlow((-a))                          DR1bit-Out(S136)
	S141= IR.Out6_10=>GPRegs.WReg                               Premise(F413)
	S142= GPRegs.WReg=rT                                        Path(S137,S141)
	S143= ALUOut.Out=>GPRegs.WData                              Premise(F414)
	S144= GPRegs.WData=(-a)                                     Path(S138,S143)
	S145= DR1bit.Out=>XER.SOIn                                  Premise(F415)
	S146= XER.SOIn=so|OverFlow((-a))                            Path(S140,S145)
	S147= OVReg.Out=>XER.OVIn                                   Premise(F416)
	S148= XER.OVIn=OverFlow((-a))                               Path(S139,S147)
	S149= CtrlPC=0                                              Premise(F419)
	S150= CtrlPCInc=0                                           Premise(F420)
	S151= PC[Out]=addr+4                                        PC-Hold(S126,S149,S150)
	S152= CtrlICache=0                                          Premise(F423)
	S153= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S128,S152)
	S154= CtrlGPRegs=1                                          Premise(F429)
	S155= GPRegs[rT]=(-a)                                       GPRegs-Write(S142,S144,S154)
	S156= CtrlXERSO=1                                           Premise(F434)
	S157= XER[SO]=so|OverFlow((-a))                             XER-SO-Write(S146,S156)
	S158= CtrlXEROV=1                                           Premise(F435)
	S159= XER[OV]=OverFlow((-a))                                XER-OV-Write(S148,S158)

POST	S151= PC[Out]=addr+4                                        PC-Hold(S126,S149,S150)
	S153= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S128,S152)
	S155= GPRegs[rT]=(-a)                                       GPRegs-Write(S142,S144,S154)
	S157= XER[SO]=so|OverFlow((-a))                             XER-SO-Write(S146,S156)
	S159= XER[OV]=OverFlow((-a))                                XER-OV-Write(S148,S158)

