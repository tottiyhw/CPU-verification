
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,1233}                      Premise(F2)
	S3= ICache[addr]={31,rT,rA,0,1233}                          Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F10)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={31,rT,rA,0,1233}                           ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F11)
	S19= ICacheReg.In={31,rT,rA,0,1233}                         Path(S17,S18)
	S20= CtrlPC=0                                               Premise(F45)
	S21= CtrlPCInc=0                                            Premise(F46)
	S22= PC[Out]=addr                                           PC-Hold(S1,S20,S21)
	S23= CtrlIAddrReg=1                                         Premise(F47)
	S24= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S23)
	S25= CtrlICacheReg=1                                        Premise(F50)
	S26= [ICacheReg]={31,rT,rA,0,1233}                          ICacheReg-Write(S19,S25)
	S27= CtrlIMem=0                                             Premise(F52)
	S28= IMem[{pid,addr}]={31,rT,rA,0,1233}                     IMem-Hold(S2,S27)
	S29= CtrlGPRegs=0                                           Premise(F55)
	S30= GPRegs[rA]=a                                           GPRegs-Hold(S4,S29)
	S31= CtrlXERSO=0                                            Premise(F60)
	S32= XER[SO]=so                                             XER-SO-Hold(S5,S31)

IMMU	S33= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S24)
	S34= ICacheReg.Out={31,rT,rA,0,1233}                        ICacheReg-Out(S26)
	S35= IAddrReg.Out=>IMem.RAddr                               Premise(F78)
	S36= IMem.RAddr={pid,addr}                                  Path(S33,S35)
	S37= IMem.Out={31,rT,rA,0,1233}                             IMem-Read(S36,S28)
	S38= IMem.Out=>IRMux.MemData                                Premise(F79)
	S39= IRMux.MemData={31,rT,rA,0,1233}                        Path(S37,S38)
	S40= ICacheReg.Out=>IRMux.CacheData                         Premise(F80)
	S41= IRMux.CacheData={31,rT,rA,0,1233}                      Path(S34,S40)
	S42= IRMux.Out={31,rT,rA,0,1233}                            IRMux-Select(S39,S41)
	S43= IRMux.Out=>IR.In                                       Premise(F83)
	S44= IR.In={31,rT,rA,0,1233}                                Path(S42,S43)
	S45= CtrlPC=0                                               Premise(F108)
	S46= CtrlPCInc=1                                            Premise(F109)
	S47= PC[Out]=addr+4                                         PC-Inc(S22,S45,S46)
	S48= CtrlIR=1                                               Premise(F117)
	S49= [IR]={31,rT,rA,0,1233}                                 IR-Write(S44,S48)
	S50= CtrlGPRegs=0                                           Premise(F118)
	S51= GPRegs[rA]=a                                           GPRegs-Hold(S30,S50)
	S52= CtrlXERSO=0                                            Premise(F123)
	S53= XER[SO]=so                                             XER-SO-Hold(S32,S52)

ID	S54= IR.Out11_15=rA                                         IR-Out(S49)
	S55= IR.Out11_15=>GPRegs.RReg1                              Premise(F150)
	S56= GPRegs.RReg1=rA                                        Path(S54,S55)
	S57= GPRegs.Rdata1=a                                        GPRegs-Read(S56,S51)
	S58= GPRegs.Rdata1=>A.In                                    Premise(F152)
	S59= A.In=a                                                 Path(S57,S58)
	S60= CtrlPC=0                                               Premise(F172)
	S61= CtrlPCInc=0                                            Premise(F173)
	S62= PC[Out]=addr+4                                         PC-Hold(S47,S60,S61)
	S63= CtrlIR=0                                               Premise(F181)
	S64= [IR]={31,rT,rA,0,1233}                                 IR-Hold(S49,S63)
	S65= CtrlA=1                                                Premise(F183)
	S66= [A]=a                                                  A-Write(S59,S65)
	S67= CtrlXERSO=0                                            Premise(F187)
	S68= XER[SO]=so                                             XER-SO-Hold(S53,S67)

EX	S69= A.Out=a                                                A-Out(S66)
	S70= XER.SOOut=so                                           XER-SO-Out(S68)
	S71= A.Out=>ALU.A                                           Premise(F217)
	S72= ALU.A=a                                                Path(S69,S71)
	S73= ALU.Out=(-a)                                           ALU(S72)
	S74= ALU.CMP=Compare0((-a))                                 ALU(S72)
	S75= ALU.OV=OverFlow((-a))                                  ALU(S72)
	S76= ALU.Out=>ALUOut.In                                     Premise(F220)
	S77= ALUOut.In=(-a)                                         Path(S73,S76)
	S78= ALU.CMP=>DataCmb.A                                     Premise(F221)
	S79= DataCmb.A=Compare0((-a))                               Path(S74,S78)
	S80= ORGate.Out=>DataCmb.B                                  Premise(F222)
	S81= ALU.OV=>OVReg.In                                       Premise(F223)
	S82= OVReg.In=OverFlow((-a))                                Path(S75,S81)
	S83= XER.SOOut=>ORGate.A                                    Premise(F224)
	S84= ORGate.A=so                                            Path(S70,S83)
	S85= ALU.OV=>ORGate.B                                       Premise(F225)
	S86= ORGate.B=OverFlow((-a))                                Path(S75,S85)
	S87= ORGate.Out=so|OverFlow((-a))                           ORGate(S84,S86)
	S88= DataCmb.B=so|OverFlow((-a))                            Path(S87,S80)
	S89= DataCmb.Out={Compare0((-a)),so|OverFlow((-a))}         DataCmb(S79,S88)
	S90= ORGate.Out=>DR1bit.In                                  Premise(F226)
	S91= DR1bit.In=so|OverFlow((-a))                            Path(S87,S90)
	S92= DataCmb.Out=>DR4bit.In                                 Premise(F227)
	S93= DR4bit.In={Compare0((-a)),so|OverFlow((-a))}           Path(S89,S92)
	S94= CtrlPC=0                                               Premise(F235)
	S95= CtrlPCInc=0                                            Premise(F236)
	S96= PC[Out]=addr+4                                         PC-Hold(S62,S94,S95)
	S97= CtrlIR=0                                               Premise(F244)
	S98= [IR]={31,rT,rA,0,1233}                                 IR-Hold(S64,S97)
	S99= CtrlALUOut=1                                           Premise(F248)
	S100= [ALUOut]=(-a)                                         ALUOut-Write(S77,S99)
	S101= CtrlOVReg=1                                           Premise(F249)
	S102= [OVReg]=OverFlow((-a))                                OVReg-Write(S82,S101)
	S103= CtrlDR1bit=1                                          Premise(F253)
	S104= [DR1bit]=so|OverFlow((-a))                            DR1bit-Write(S91,S103)
	S105= CtrlDR4bit=1                                          Premise(F254)
	S106= [DR4bit]={Compare0((-a)),so|OverFlow((-a))}           DR4bit-Write(S93,S105)

MEM	S107= CtrlPC=0                                              Premise(F298)
	S108= CtrlPCInc=0                                           Premise(F299)
	S109= PC[Out]=addr+4                                        PC-Hold(S96,S107,S108)
	S110= CtrlIR=0                                              Premise(F307)
	S111= [IR]={31,rT,rA,0,1233}                                IR-Hold(S98,S110)
	S112= CtrlALUOut=0                                          Premise(F311)
	S113= [ALUOut]=(-a)                                         ALUOut-Hold(S100,S112)
	S114= CtrlOVReg=0                                           Premise(F312)
	S115= [OVReg]=OverFlow((-a))                                OVReg-Hold(S102,S114)
	S116= CtrlDR1bit=0                                          Premise(F316)
	S117= [DR1bit]=so|OverFlow((-a))                            DR1bit-Hold(S104,S116)
	S118= CtrlDR4bit=0                                          Premise(F317)
	S119= [DR4bit]={Compare0((-a)),so|OverFlow((-a))}           DR4bit-Hold(S106,S118)

DMMU1	S120= CtrlPC=0                                              Premise(F361)
	S121= CtrlPCInc=0                                           Premise(F362)
	S122= PC[Out]=addr+4                                        PC-Hold(S109,S120,S121)
	S123= CtrlIR=0                                              Premise(F370)
	S124= [IR]={31,rT,rA,0,1233}                                IR-Hold(S111,S123)
	S125= CtrlALUOut=0                                          Premise(F374)
	S126= [ALUOut]=(-a)                                         ALUOut-Hold(S113,S125)
	S127= CtrlOVReg=0                                           Premise(F375)
	S128= [OVReg]=OverFlow((-a))                                OVReg-Hold(S115,S127)
	S129= CtrlDR1bit=0                                          Premise(F379)
	S130= [DR1bit]=so|OverFlow((-a))                            DR1bit-Hold(S117,S129)
	S131= CtrlDR4bit=0                                          Premise(F380)
	S132= [DR4bit]={Compare0((-a)),so|OverFlow((-a))}           DR4bit-Hold(S119,S131)

DMMU2	S133= CtrlPC=0                                              Premise(F424)
	S134= CtrlPCInc=0                                           Premise(F425)
	S135= PC[Out]=addr+4                                        PC-Hold(S122,S133,S134)
	S136= CtrlIR=0                                              Premise(F433)
	S137= [IR]={31,rT,rA,0,1233}                                IR-Hold(S124,S136)
	S138= CtrlALUOut=0                                          Premise(F437)
	S139= [ALUOut]=(-a)                                         ALUOut-Hold(S126,S138)
	S140= CtrlOVReg=0                                           Premise(F438)
	S141= [OVReg]=OverFlow((-a))                                OVReg-Hold(S128,S140)
	S142= CtrlDR1bit=0                                          Premise(F442)
	S143= [DR1bit]=so|OverFlow((-a))                            DR1bit-Hold(S130,S142)
	S144= CtrlDR4bit=0                                          Premise(F443)
	S145= [DR4bit]={Compare0((-a)),so|OverFlow((-a))}           DR4bit-Hold(S132,S144)

WB	S146= IR.Out6_10=rT                                         IR-Out(S137)
	S147= ALUOut.Out=(-a)                                       ALUOut-Out(S139)
	S148= OVReg.Out=OverFlow((-a))                              OVReg-Out(S141)
	S149= DR1bit.Out=so|OverFlow((-a))                          DR1bit-Out(S143)
	S150= DR4bit.Out={Compare0((-a)),so|OverFlow((-a))}         DR4bit-Out(S145)
	S151= IR.Out6_10=>GPRegs.WReg                               Premise(F480)
	S152= GPRegs.WReg=rT                                        Path(S146,S151)
	S153= ALUOut.Out=>GPRegs.WData                              Premise(F481)
	S154= GPRegs.WData=(-a)                                     Path(S147,S153)
	S155= DR4bit.Out=>CRRegs.CR0In                              Premise(F482)
	S156= CRRegs.CR0In={Compare0((-a)),so|OverFlow((-a))}       Path(S150,S155)
	S157= DR1bit.Out=>XER.SOIn                                  Premise(F483)
	S158= XER.SOIn=so|OverFlow((-a))                            Path(S149,S157)
	S159= OVReg.Out=>XER.OVIn                                   Premise(F484)
	S160= XER.OVIn=OverFlow((-a))                               Path(S148,S159)
	S161= CtrlPC=0                                              Premise(F487)
	S162= CtrlPCInc=0                                           Premise(F488)
	S163= PC[Out]=addr+4                                        PC-Hold(S135,S161,S162)
	S164= CtrlGPRegs=1                                          Premise(F497)
	S165= GPRegs[rT]=(-a)                                       GPRegs-Write(S152,S154,S164)
	S166= CtrlXERSO=1                                           Premise(F502)
	S167= XER[SO]=so|OverFlow((-a))                             XER-SO-Write(S158,S166)
	S168= CtrlXEROV=1                                           Premise(F503)
	S169= XER[OV]=OverFlow((-a))                                XER-OV-Write(S160,S168)
	S170= CtrlCRRegsCR0=1                                       Premise(F508)
	S171= CRRegs[CR0]={Compare0((-a)),so|OverFlow((-a))}        CRRegs-CR0-Write(S156,S170)

POST	S163= PC[Out]=addr+4                                        PC-Hold(S135,S161,S162)
	S165= GPRegs[rT]=(-a)                                       GPRegs-Write(S152,S154,S164)
	S167= XER[SO]=so|OverFlow((-a))                             XER-SO-Write(S158,S166)
	S169= XER[OV]=OverFlow((-a))                                XER-OV-Write(S160,S168)
	S171= CRRegs[CR0]={Compare0((-a)),so|OverFlow((-a))}        CRRegs-CR0-Write(S156,S170)

