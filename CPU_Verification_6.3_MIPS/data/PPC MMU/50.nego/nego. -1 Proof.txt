
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,1233}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F44)
	S15= CtrlPCInc=0                                            Premise(F45)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F46)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F51)
	S20= IMem[{pid,addr}]={31,rT,rA,0,1233}                     IMem-Hold(S2,S19)
	S21= CtrlGPRegs=0                                           Premise(F54)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= CtrlXERSO=0                                            Premise(F59)
	S24= XER[SO]=so                                             XER-SO-Hold(S4,S23)

IMMU	S25= PC.Out=addr                                            PC-Out(S16)
	S26= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S27= PC.Out=>ICache.IEA                                     Premise(F72)
	S28= ICache.IEA=addr                                        Path(S25,S27)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F77)
	S30= IMem.RAddr={pid,addr}                                  Path(S26,S29)
	S31= IMem.Out={31,rT,rA,0,1233}                             IMem-Read(S30,S20)
	S32= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S30,S20)
	S33= IMem.Out=>IRMux.MemData                                Premise(F78)
	S34= IRMux.MemData={31,rT,rA,0,1233}                        Path(S31,S33)
	S35= IRMux.Out={31,rT,rA,0,1233}                            IRMux-Select(S34)
	S36= IRMux.Out=>IR.In                                       Premise(F82)
	S37= IR.In={31,rT,rA,0,1233}                                Path(S35,S36)
	S38= IMem.MEM8WordOut=>ICache.WData                         Premise(F83)
	S39= ICache.WData=IMemGet8Word({pid,addr})                  Path(S32,S38)
	S40= CtrlPC=0                                               Premise(F107)
	S41= CtrlPCInc=1                                            Premise(F108)
	S42= PC[Out]=addr+4                                         PC-Inc(S16,S40,S41)
	S43= CtrlICache=1                                           Premise(F111)
	S44= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S28,S39,S43)
	S45= CtrlIR=1                                               Premise(F116)
	S46= [IR]={31,rT,rA,0,1233}                                 IR-Write(S37,S45)
	S47= CtrlGPRegs=0                                           Premise(F117)
	S48= GPRegs[rA]=a                                           GPRegs-Hold(S22,S47)
	S49= CtrlXERSO=0                                            Premise(F122)
	S50= XER[SO]=so                                             XER-SO-Hold(S24,S49)

ID	S51= IR.Out11_15=rA                                         IR-Out(S46)
	S52= IR.Out11_15=>GPRegs.RReg1                              Premise(F149)
	S53= GPRegs.RReg1=rA                                        Path(S51,S52)
	S54= GPRegs.Rdata1=a                                        GPRegs-Read(S53,S48)
	S55= GPRegs.Rdata1=>A.In                                    Premise(F151)
	S56= A.In=a                                                 Path(S54,S55)
	S57= CtrlPC=0                                               Premise(F171)
	S58= CtrlPCInc=0                                            Premise(F172)
	S59= PC[Out]=addr+4                                         PC-Hold(S42,S57,S58)
	S60= CtrlICache=0                                           Premise(F175)
	S61= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S44,S60)
	S62= CtrlIR=0                                               Premise(F180)
	S63= [IR]={31,rT,rA,0,1233}                                 IR-Hold(S46,S62)
	S64= CtrlA=1                                                Premise(F182)
	S65= [A]=a                                                  A-Write(S56,S64)
	S66= CtrlXERSO=0                                            Premise(F186)
	S67= XER[SO]=so                                             XER-SO-Hold(S50,S66)

EX	S68= A.Out=a                                                A-Out(S65)
	S69= XER.SOOut=so                                           XER-SO-Out(S67)
	S70= A.Out=>ALU.A                                           Premise(F216)
	S71= ALU.A=a                                                Path(S68,S70)
	S72= ALU.Out=(-a)                                           ALU(S71)
	S73= ALU.CMP=Compare0((-a))                                 ALU(S71)
	S74= ALU.OV=OverFlow((-a))                                  ALU(S71)
	S75= ALU.Out=>ALUOut.In                                     Premise(F219)
	S76= ALUOut.In=(-a)                                         Path(S72,S75)
	S77= ALU.CMP=>DataCmb.A                                     Premise(F220)
	S78= DataCmb.A=Compare0((-a))                               Path(S73,S77)
	S79= ORGate.Out=>DataCmb.B                                  Premise(F221)
	S80= ALU.OV=>OVReg.In                                       Premise(F222)
	S81= OVReg.In=OverFlow((-a))                                Path(S74,S80)
	S82= XER.SOOut=>ORGate.A                                    Premise(F223)
	S83= ORGate.A=so                                            Path(S69,S82)
	S84= ALU.OV=>ORGate.B                                       Premise(F224)
	S85= ORGate.B=OverFlow((-a))                                Path(S74,S84)
	S86= ORGate.Out=so|OverFlow((-a))                           ORGate(S83,S85)
	S87= DataCmb.B=so|OverFlow((-a))                            Path(S86,S79)
	S88= DataCmb.Out={Compare0((-a)),so|OverFlow((-a))}         DataCmb(S78,S87)
	S89= ORGate.Out=>DR1bit.In                                  Premise(F225)
	S90= DR1bit.In=so|OverFlow((-a))                            Path(S86,S89)
	S91= DataCmb.Out=>DR4bit.In                                 Premise(F226)
	S92= DR4bit.In={Compare0((-a)),so|OverFlow((-a))}           Path(S88,S91)
	S93= CtrlPC=0                                               Premise(F234)
	S94= CtrlPCInc=0                                            Premise(F235)
	S95= PC[Out]=addr+4                                         PC-Hold(S59,S93,S94)
	S96= CtrlICache=0                                           Premise(F238)
	S97= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S61,S96)
	S98= CtrlIR=0                                               Premise(F243)
	S99= [IR]={31,rT,rA,0,1233}                                 IR-Hold(S63,S98)
	S100= CtrlALUOut=1                                          Premise(F247)
	S101= [ALUOut]=(-a)                                         ALUOut-Write(S76,S100)
	S102= CtrlOVReg=1                                           Premise(F248)
	S103= [OVReg]=OverFlow((-a))                                OVReg-Write(S81,S102)
	S104= CtrlDR1bit=1                                          Premise(F252)
	S105= [DR1bit]=so|OverFlow((-a))                            DR1bit-Write(S90,S104)
	S106= CtrlDR4bit=1                                          Premise(F253)
	S107= [DR4bit]={Compare0((-a)),so|OverFlow((-a))}           DR4bit-Write(S92,S106)

MEM	S108= CtrlPC=0                                              Premise(F297)
	S109= CtrlPCInc=0                                           Premise(F298)
	S110= PC[Out]=addr+4                                        PC-Hold(S95,S108,S109)
	S111= CtrlICache=0                                          Premise(F301)
	S112= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S97,S111)
	S113= CtrlIR=0                                              Premise(F306)
	S114= [IR]={31,rT,rA,0,1233}                                IR-Hold(S99,S113)
	S115= CtrlALUOut=0                                          Premise(F310)
	S116= [ALUOut]=(-a)                                         ALUOut-Hold(S101,S115)
	S117= CtrlOVReg=0                                           Premise(F311)
	S118= [OVReg]=OverFlow((-a))                                OVReg-Hold(S103,S117)
	S119= CtrlDR1bit=0                                          Premise(F315)
	S120= [DR1bit]=so|OverFlow((-a))                            DR1bit-Hold(S105,S119)
	S121= CtrlDR4bit=0                                          Premise(F316)
	S122= [DR4bit]={Compare0((-a)),so|OverFlow((-a))}           DR4bit-Hold(S107,S121)

DMMU1	S123= CtrlPC=0                                              Premise(F360)
	S124= CtrlPCInc=0                                           Premise(F361)
	S125= PC[Out]=addr+4                                        PC-Hold(S110,S123,S124)
	S126= CtrlICache=0                                          Premise(F364)
	S127= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S112,S126)
	S128= CtrlIR=0                                              Premise(F369)
	S129= [IR]={31,rT,rA,0,1233}                                IR-Hold(S114,S128)
	S130= CtrlALUOut=0                                          Premise(F373)
	S131= [ALUOut]=(-a)                                         ALUOut-Hold(S116,S130)
	S132= CtrlOVReg=0                                           Premise(F374)
	S133= [OVReg]=OverFlow((-a))                                OVReg-Hold(S118,S132)
	S134= CtrlDR1bit=0                                          Premise(F378)
	S135= [DR1bit]=so|OverFlow((-a))                            DR1bit-Hold(S120,S134)
	S136= CtrlDR4bit=0                                          Premise(F379)
	S137= [DR4bit]={Compare0((-a)),so|OverFlow((-a))}           DR4bit-Hold(S122,S136)

DMMU2	S138= CtrlPC=0                                              Premise(F423)
	S139= CtrlPCInc=0                                           Premise(F424)
	S140= PC[Out]=addr+4                                        PC-Hold(S125,S138,S139)
	S141= CtrlICache=0                                          Premise(F427)
	S142= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S127,S141)
	S143= CtrlIR=0                                              Premise(F432)
	S144= [IR]={31,rT,rA,0,1233}                                IR-Hold(S129,S143)
	S145= CtrlALUOut=0                                          Premise(F436)
	S146= [ALUOut]=(-a)                                         ALUOut-Hold(S131,S145)
	S147= CtrlOVReg=0                                           Premise(F437)
	S148= [OVReg]=OverFlow((-a))                                OVReg-Hold(S133,S147)
	S149= CtrlDR1bit=0                                          Premise(F441)
	S150= [DR1bit]=so|OverFlow((-a))                            DR1bit-Hold(S135,S149)
	S151= CtrlDR4bit=0                                          Premise(F442)
	S152= [DR4bit]={Compare0((-a)),so|OverFlow((-a))}           DR4bit-Hold(S137,S151)

WB	S153= IR.Out6_10=rT                                         IR-Out(S144)
	S154= ALUOut.Out=(-a)                                       ALUOut-Out(S146)
	S155= OVReg.Out=OverFlow((-a))                              OVReg-Out(S148)
	S156= DR1bit.Out=so|OverFlow((-a))                          DR1bit-Out(S150)
	S157= DR4bit.Out={Compare0((-a)),so|OverFlow((-a))}         DR4bit-Out(S152)
	S158= IR.Out6_10=>GPRegs.WReg                               Premise(F479)
	S159= GPRegs.WReg=rT                                        Path(S153,S158)
	S160= ALUOut.Out=>GPRegs.WData                              Premise(F480)
	S161= GPRegs.WData=(-a)                                     Path(S154,S160)
	S162= DR4bit.Out=>CRRegs.CR0In                              Premise(F481)
	S163= CRRegs.CR0In={Compare0((-a)),so|OverFlow((-a))}       Path(S157,S162)
	S164= DR1bit.Out=>XER.SOIn                                  Premise(F482)
	S165= XER.SOIn=so|OverFlow((-a))                            Path(S156,S164)
	S166= OVReg.Out=>XER.OVIn                                   Premise(F483)
	S167= XER.OVIn=OverFlow((-a))                               Path(S155,S166)
	S168= CtrlPC=0                                              Premise(F486)
	S169= CtrlPCInc=0                                           Premise(F487)
	S170= PC[Out]=addr+4                                        PC-Hold(S140,S168,S169)
	S171= CtrlICache=0                                          Premise(F490)
	S172= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S142,S171)
	S173= CtrlGPRegs=1                                          Premise(F496)
	S174= GPRegs[rT]=(-a)                                       GPRegs-Write(S159,S161,S173)
	S175= CtrlXERSO=1                                           Premise(F501)
	S176= XER[SO]=so|OverFlow((-a))                             XER-SO-Write(S165,S175)
	S177= CtrlXEROV=1                                           Premise(F502)
	S178= XER[OV]=OverFlow((-a))                                XER-OV-Write(S167,S177)
	S179= CtrlCRRegsCR0=1                                       Premise(F507)
	S180= CRRegs[CR0]={Compare0((-a)),so|OverFlow((-a))}        CRRegs-CR0-Write(S163,S179)

POST	S170= PC[Out]=addr+4                                        PC-Hold(S140,S168,S169)
	S172= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S142,S171)
	S174= GPRegs[rT]=(-a)                                       GPRegs-Write(S159,S161,S173)
	S176= XER[SO]=so|OverFlow((-a))                             XER-SO-Write(S165,S175)
	S178= XER[OV]=OverFlow((-a))                                XER-OV-Write(S167,S177)
	S180= CRRegs[CR0]={Compare0((-a)),so|OverFlow((-a))}        CRRegs-CR0-Write(S163,S179)

