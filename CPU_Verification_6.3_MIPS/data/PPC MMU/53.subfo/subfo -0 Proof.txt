
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,1104}                     Premise(F2)
	S3= ICache[addr]={31,rT,rA,rB,1104}                         Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)
	S6= XER[SO]=so                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= PC.Out=>ICache.IEA                                     Premise(F11)
	S17= ICache.IEA=addr                                        Path(S8,S16)
	S18= ICache.Out={31,rT,rA,rB,1104}                          ICache-Search(S17,S3)
	S19= ICache.Out=>ICacheReg.In                               Premise(F12)
	S20= ICacheReg.In={31,rT,rA,rB,1104}                        Path(S18,S19)
	S21= CtrlPC=0                                               Premise(F44)
	S22= CtrlPCInc=0                                            Premise(F45)
	S23= PC[Out]=addr                                           PC-Hold(S1,S21,S22)
	S24= CtrlIAddrReg=1                                         Premise(F46)
	S25= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S24)
	S26= CtrlICacheReg=1                                        Premise(F49)
	S27= [ICacheReg]={31,rT,rA,rB,1104}                         ICacheReg-Write(S20,S26)
	S28= CtrlIMem=0                                             Premise(F51)
	S29= IMem[{pid,addr}]={31,rT,rA,rB,1104}                    IMem-Hold(S2,S28)
	S30= CtrlGPRegs=0                                           Premise(F54)
	S31= GPRegs[rA]=a                                           GPRegs-Hold(S4,S30)
	S32= GPRegs[rB]=b                                           GPRegs-Hold(S5,S30)
	S33= CtrlXERSO=0                                            Premise(F59)
	S34= XER[SO]=so                                             XER-SO-Hold(S6,S33)

IMMU	S35= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S25)
	S36= ICacheReg.Out={31,rT,rA,rB,1104}                       ICacheReg-Out(S27)
	S37= IAddrReg.Out=>IMem.RAddr                               Premise(F72)
	S38= IMem.RAddr={pid,addr}                                  Path(S35,S37)
	S39= IMem.Out={31,rT,rA,rB,1104}                            IMem-Read(S38,S29)
	S40= IMem.Out=>IRMux.MemData                                Premise(F73)
	S41= IRMux.MemData={31,rT,rA,rB,1104}                       Path(S39,S40)
	S42= ICacheReg.Out=>IRMux.CacheData                         Premise(F74)
	S43= IRMux.CacheData={31,rT,rA,rB,1104}                     Path(S36,S42)
	S44= IRMux.Out={31,rT,rA,rB,1104}                           IRMux-Select(S41,S43)
	S45= IRMux.Out=>IR.In                                       Premise(F77)
	S46= IR.In={31,rT,rA,rB,1104}                               Path(S44,S45)
	S47= CtrlPC=0                                               Premise(F100)
	S48= CtrlPCInc=1                                            Premise(F101)
	S49= PC[Out]=addr+4                                         PC-Inc(S23,S47,S48)
	S50= CtrlIR=1                                               Premise(F109)
	S51= [IR]={31,rT,rA,rB,1104}                                IR-Write(S46,S50)
	S52= CtrlGPRegs=0                                           Premise(F110)
	S53= GPRegs[rA]=a                                           GPRegs-Hold(S31,S52)
	S54= GPRegs[rB]=b                                           GPRegs-Hold(S32,S52)
	S55= CtrlXERSO=0                                            Premise(F115)
	S56= XER[SO]=so                                             XER-SO-Hold(S34,S55)

ID	S57= IR.Out11_15=rA                                         IR-Out(S51)
	S58= IR.Out16_20=rB                                         IR-Out(S51)
	S59= IR.Out11_15=>GPRegs.RReg1                              Premise(F137)
	S60= GPRegs.RReg1=rA                                        Path(S57,S59)
	S61= GPRegs.Rdata1=a                                        GPRegs-Read(S60,S53)
	S62= IR.Out16_20=>GPRegs.RReg2                              Premise(F138)
	S63= GPRegs.RReg2=rB                                        Path(S58,S62)
	S64= GPRegs.Rdata2=b                                        GPRegs-Read(S63,S54)
	S65= GPRegs.Rdata1=>A.In                                    Premise(F140)
	S66= A.In=a                                                 Path(S61,S65)
	S67= GPRegs.Rdata2=>B.In                                    Premise(F141)
	S68= B.In=b                                                 Path(S64,S67)
	S69= CtrlPC=0                                               Premise(F156)
	S70= CtrlPCInc=0                                            Premise(F157)
	S71= PC[Out]=addr+4                                         PC-Hold(S49,S69,S70)
	S72= CtrlIR=0                                               Premise(F165)
	S73= [IR]={31,rT,rA,rB,1104}                                IR-Hold(S51,S72)
	S74= CtrlA=1                                                Premise(F167)
	S75= [A]=a                                                  A-Write(S66,S74)
	S76= CtrlB=1                                                Premise(F168)
	S77= [B]=b                                                  B-Write(S68,S76)
	S78= CtrlXERSO=0                                            Premise(F171)
	S79= XER[SO]=so                                             XER-SO-Hold(S56,S78)

EX	S80= A.Out=a                                                A-Out(S75)
	S81= B.Out=b                                                B-Out(S77)
	S82= XER.SOOut=so                                           XER-SO-Out(S79)
	S83= A.Out=>ALU.A                                           Premise(F198)
	S84= ALU.A=a                                                Path(S80,S83)
	S85= B.Out=>ALU.B                                           Premise(F199)
	S86= ALU.B=b                                                Path(S81,S85)
	S87= ALU.Out=b-a                                            ALU(S84,S86)
	S88= ALU.OV=OverFlow(b-a)                                   ALU(S84,S86)
	S89= ALU.Out=>ALUOut.In                                     Premise(F201)
	S90= ALUOut.In=b-a                                          Path(S87,S89)
	S91= ALU.OV=>OVReg.In                                       Premise(F202)
	S92= OVReg.In=OverFlow(b-a)                                 Path(S88,S91)
	S93= XER.SOOut=>ORGate.A                                    Premise(F203)
	S94= ORGate.A=so                                            Path(S82,S93)
	S95= ALU.OV=>ORGate.B                                       Premise(F204)
	S96= ORGate.B=OverFlow(b-a)                                 Path(S88,S95)
	S97= ORGate.Out=so|OverFlow(b-a)                            ORGate(S94,S96)
	S98= ORGate.Out=>DR1bit.In                                  Premise(F205)
	S99= DR1bit.In=so|OverFlow(b-a)                             Path(S97,S98)
	S100= CtrlPC=0                                              Premise(F212)
	S101= CtrlPCInc=0                                           Premise(F213)
	S102= PC[Out]=addr+4                                        PC-Hold(S71,S100,S101)
	S103= CtrlIR=0                                              Premise(F221)
	S104= [IR]={31,rT,rA,rB,1104}                               IR-Hold(S73,S103)
	S105= CtrlALUOut=1                                          Premise(F225)
	S106= [ALUOut]=b-a                                          ALUOut-Write(S90,S105)
	S107= CtrlOVReg=1                                           Premise(F226)
	S108= [OVReg]=OverFlow(b-a)                                 OVReg-Write(S92,S107)
	S109= CtrlDR1bit=1                                          Premise(F230)
	S110= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Write(S99,S109)

MEM	S111= CtrlPC=0                                              Premise(F268)
	S112= CtrlPCInc=0                                           Premise(F269)
	S113= PC[Out]=addr+4                                        PC-Hold(S102,S111,S112)
	S114= CtrlIR=0                                              Premise(F277)
	S115= [IR]={31,rT,rA,rB,1104}                               IR-Hold(S104,S114)
	S116= CtrlALUOut=0                                          Premise(F281)
	S117= [ALUOut]=b-a                                          ALUOut-Hold(S106,S116)
	S118= CtrlOVReg=0                                           Premise(F282)
	S119= [OVReg]=OverFlow(b-a)                                 OVReg-Hold(S108,S118)
	S120= CtrlDR1bit=0                                          Premise(F286)
	S121= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Hold(S110,S120)

DMMU1	S122= CtrlPC=0                                              Premise(F324)
	S123= CtrlPCInc=0                                           Premise(F325)
	S124= PC[Out]=addr+4                                        PC-Hold(S113,S122,S123)
	S125= CtrlIR=0                                              Premise(F333)
	S126= [IR]={31,rT,rA,rB,1104}                               IR-Hold(S115,S125)
	S127= CtrlALUOut=0                                          Premise(F337)
	S128= [ALUOut]=b-a                                          ALUOut-Hold(S117,S127)
	S129= CtrlOVReg=0                                           Premise(F338)
	S130= [OVReg]=OverFlow(b-a)                                 OVReg-Hold(S119,S129)
	S131= CtrlDR1bit=0                                          Premise(F342)
	S132= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Hold(S121,S131)

DMMU2	S133= CtrlPC=0                                              Premise(F380)
	S134= CtrlPCInc=0                                           Premise(F381)
	S135= PC[Out]=addr+4                                        PC-Hold(S124,S133,S134)
	S136= CtrlIR=0                                              Premise(F389)
	S137= [IR]={31,rT,rA,rB,1104}                               IR-Hold(S126,S136)
	S138= CtrlALUOut=0                                          Premise(F393)
	S139= [ALUOut]=b-a                                          ALUOut-Hold(S128,S138)
	S140= CtrlOVReg=0                                           Premise(F394)
	S141= [OVReg]=OverFlow(b-a)                                 OVReg-Hold(S130,S140)
	S142= CtrlDR1bit=0                                          Premise(F398)
	S143= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Hold(S132,S142)

WB	S144= IR.Out6_10=rT                                         IR-Out(S137)
	S145= ALUOut.Out=b-a                                        ALUOut-Out(S139)
	S146= OVReg.Out=OverFlow(b-a)                               OVReg-Out(S141)
	S147= DR1bit.Out=so|OverFlow(b-a)                           DR1bit-Out(S143)
	S148= IR.Out6_10=>GPRegs.WReg                               Premise(F430)
	S149= GPRegs.WReg=rT                                        Path(S144,S148)
	S150= ALUOut.Out=>GPRegs.WData                              Premise(F431)
	S151= GPRegs.WData=b-a                                      Path(S145,S150)
	S152= DR1bit.Out=>XER.SOIn                                  Premise(F432)
	S153= XER.SOIn=so|OverFlow(b-a)                             Path(S147,S152)
	S154= OVReg.Out=>XER.OVIn                                   Premise(F433)
	S155= XER.OVIn=OverFlow(b-a)                                Path(S146,S154)
	S156= CtrlPC=0                                              Premise(F436)
	S157= CtrlPCInc=0                                           Premise(F437)
	S158= PC[Out]=addr+4                                        PC-Hold(S135,S156,S157)
	S159= CtrlGPRegs=1                                          Premise(F446)
	S160= GPRegs[rT]=b-a                                        GPRegs-Write(S149,S151,S159)
	S161= CtrlXERSO=1                                           Premise(F451)
	S162= XER[SO]=so|OverFlow(b-a)                              XER-SO-Write(S153,S161)
	S163= CtrlXEROV=1                                           Premise(F452)
	S164= XER[OV]=OverFlow(b-a)                                 XER-OV-Write(S155,S163)

POST	S158= PC[Out]=addr+4                                        PC-Hold(S135,S156,S157)
	S160= GPRegs[rT]=b-a                                        GPRegs-Write(S149,S151,S159)
	S162= XER[SO]=so|OverFlow(b-a)                              XER-SO-Write(S153,S161)
	S164= XER[OV]=OverFlow(b-a)                                 XER-OV-Write(S155,S163)

