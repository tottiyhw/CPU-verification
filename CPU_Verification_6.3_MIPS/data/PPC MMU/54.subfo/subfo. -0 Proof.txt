
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,1105}                     Premise(F2)
	S3= ICache[addr]={31,rT,rA,rB,1105}                         Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)
	S6= XER[SO]=so                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= PC.Out=>ICache.IEA                                     Premise(F11)
	S17= ICache.IEA=addr                                        Path(S8,S16)
	S18= ICache.Out={31,rT,rA,rB,1105}                          ICache-Search(S17,S3)
	S19= ICache.Out=>ICacheReg.In                               Premise(F12)
	S20= ICacheReg.In={31,rT,rA,rB,1105}                        Path(S18,S19)
	S21= CtrlPC=0                                               Premise(F48)
	S22= CtrlPCInc=0                                            Premise(F49)
	S23= PC[Out]=addr                                           PC-Hold(S1,S21,S22)
	S24= CtrlIAddrReg=1                                         Premise(F50)
	S25= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S24)
	S26= CtrlICacheReg=1                                        Premise(F53)
	S27= [ICacheReg]={31,rT,rA,rB,1105}                         ICacheReg-Write(S20,S26)
	S28= CtrlIMem=0                                             Premise(F55)
	S29= IMem[{pid,addr}]={31,rT,rA,rB,1105}                    IMem-Hold(S2,S28)
	S30= CtrlGPRegs=0                                           Premise(F58)
	S31= GPRegs[rA]=a                                           GPRegs-Hold(S4,S30)
	S32= GPRegs[rB]=b                                           GPRegs-Hold(S5,S30)
	S33= CtrlXERSO=0                                            Premise(F63)
	S34= XER[SO]=so                                             XER-SO-Hold(S6,S33)

IMMU	S35= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S25)
	S36= ICacheReg.Out={31,rT,rA,rB,1105}                       ICacheReg-Out(S27)
	S37= IAddrReg.Out=>IMem.RAddr                               Premise(F81)
	S38= IMem.RAddr={pid,addr}                                  Path(S35,S37)
	S39= IMem.Out={31,rT,rA,rB,1105}                            IMem-Read(S38,S29)
	S40= IMem.Out=>IRMux.MemData                                Premise(F82)
	S41= IRMux.MemData={31,rT,rA,rB,1105}                       Path(S39,S40)
	S42= ICacheReg.Out=>IRMux.CacheData                         Premise(F83)
	S43= IRMux.CacheData={31,rT,rA,rB,1105}                     Path(S36,S42)
	S44= IRMux.Out={31,rT,rA,rB,1105}                           IRMux-Select(S41,S43)
	S45= IRMux.Out=>IR.In                                       Premise(F86)
	S46= IR.In={31,rT,rA,rB,1105}                               Path(S44,S45)
	S47= CtrlPC=0                                               Premise(F113)
	S48= CtrlPCInc=1                                            Premise(F114)
	S49= PC[Out]=addr+4                                         PC-Inc(S23,S47,S48)
	S50= CtrlIR=1                                               Premise(F122)
	S51= [IR]={31,rT,rA,rB,1105}                                IR-Write(S46,S50)
	S52= CtrlGPRegs=0                                           Premise(F123)
	S53= GPRegs[rA]=a                                           GPRegs-Hold(S31,S52)
	S54= GPRegs[rB]=b                                           GPRegs-Hold(S32,S52)
	S55= CtrlXERSO=0                                            Premise(F128)
	S56= XER[SO]=so                                             XER-SO-Hold(S34,S55)

ID	S57= IR.Out11_15=rA                                         IR-Out(S51)
	S58= IR.Out16_20=rB                                         IR-Out(S51)
	S59= IR.Out11_15=>GPRegs.RReg1                              Premise(F155)
	S60= GPRegs.RReg1=rA                                        Path(S57,S59)
	S61= GPRegs.Rdata1=a                                        GPRegs-Read(S60,S53)
	S62= IR.Out16_20=>GPRegs.RReg2                              Premise(F156)
	S63= GPRegs.RReg2=rB                                        Path(S58,S62)
	S64= GPRegs.Rdata2=b                                        GPRegs-Read(S63,S54)
	S65= GPRegs.Rdata1=>A.In                                    Premise(F158)
	S66= A.In=a                                                 Path(S61,S65)
	S67= GPRegs.Rdata2=>B.In                                    Premise(F159)
	S68= B.In=b                                                 Path(S64,S67)
	S69= CtrlPC=0                                               Premise(F178)
	S70= CtrlPCInc=0                                            Premise(F179)
	S71= PC[Out]=addr+4                                         PC-Hold(S49,S69,S70)
	S72= CtrlIR=0                                               Premise(F187)
	S73= [IR]={31,rT,rA,rB,1105}                                IR-Hold(S51,S72)
	S74= CtrlA=1                                                Premise(F189)
	S75= [A]=a                                                  A-Write(S66,S74)
	S76= CtrlB=1                                                Premise(F190)
	S77= [B]=b                                                  B-Write(S68,S76)
	S78= CtrlXERSO=0                                            Premise(F193)
	S79= XER[SO]=so                                             XER-SO-Hold(S56,S78)

EX	S80= A.Out=a                                                A-Out(S75)
	S81= B.Out=b                                                B-Out(S77)
	S82= XER.SOOut=so                                           XER-SO-Out(S79)
	S83= A.Out=>ALU.A                                           Premise(F225)
	S84= ALU.A=a                                                Path(S80,S83)
	S85= B.Out=>ALU.B                                           Premise(F226)
	S86= ALU.B=b                                                Path(S81,S85)
	S87= ALU.Out=b-a                                            ALU(S84,S86)
	S88= ALU.CMP=Compare0(b-a)                                  ALU(S84,S86)
	S89= ALU.OV=OverFlow(b-a)                                   ALU(S84,S86)
	S90= ALU.Out=>ALUOut.In                                     Premise(F228)
	S91= ALUOut.In=b-a                                          Path(S87,S90)
	S92= ALU.CMP=>DataCmb.A                                     Premise(F229)
	S93= DataCmb.A=Compare0(b-a)                                Path(S88,S92)
	S94= ORGate.Out=>DataCmb.B                                  Premise(F230)
	S95= ALU.OV=>OVReg.In                                       Premise(F231)
	S96= OVReg.In=OverFlow(b-a)                                 Path(S89,S95)
	S97= XER.SOOut=>ORGate.A                                    Premise(F232)
	S98= ORGate.A=so                                            Path(S82,S97)
	S99= ALU.OV=>ORGate.B                                       Premise(F233)
	S100= ORGate.B=OverFlow(b-a)                                Path(S89,S99)
	S101= ORGate.Out=so|OverFlow(b-a)                           ORGate(S98,S100)
	S102= DataCmb.B=so|OverFlow(b-a)                            Path(S101,S94)
	S103= DataCmb.Out={Compare0(b-a),so|OverFlow(b-a)}          DataCmb(S93,S102)
	S104= ORGate.Out=>DR1bit.In                                 Premise(F234)
	S105= DR1bit.In=so|OverFlow(b-a)                            Path(S101,S104)
	S106= DataCmb.Out=>DR4bit.In                                Premise(F235)
	S107= DR4bit.In={Compare0(b-a),so|OverFlow(b-a)}            Path(S103,S106)
	S108= CtrlPC=0                                              Premise(F243)
	S109= CtrlPCInc=0                                           Premise(F244)
	S110= PC[Out]=addr+4                                        PC-Hold(S71,S108,S109)
	S111= CtrlIR=0                                              Premise(F252)
	S112= [IR]={31,rT,rA,rB,1105}                               IR-Hold(S73,S111)
	S113= CtrlALUOut=1                                          Premise(F256)
	S114= [ALUOut]=b-a                                          ALUOut-Write(S91,S113)
	S115= CtrlOVReg=1                                           Premise(F257)
	S116= [OVReg]=OverFlow(b-a)                                 OVReg-Write(S96,S115)
	S117= CtrlDR1bit=1                                          Premise(F261)
	S118= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Write(S105,S117)
	S119= CtrlDR4bit=1                                          Premise(F262)
	S120= [DR4bit]={Compare0(b-a),so|OverFlow(b-a)}             DR4bit-Write(S107,S119)

MEM	S121= CtrlPC=0                                              Premise(F308)
	S122= CtrlPCInc=0                                           Premise(F309)
	S123= PC[Out]=addr+4                                        PC-Hold(S110,S121,S122)
	S124= CtrlIR=0                                              Premise(F317)
	S125= [IR]={31,rT,rA,rB,1105}                               IR-Hold(S112,S124)
	S126= CtrlALUOut=0                                          Premise(F321)
	S127= [ALUOut]=b-a                                          ALUOut-Hold(S114,S126)
	S128= CtrlOVReg=0                                           Premise(F322)
	S129= [OVReg]=OverFlow(b-a)                                 OVReg-Hold(S116,S128)
	S130= CtrlDR1bit=0                                          Premise(F326)
	S131= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Hold(S118,S130)
	S132= CtrlDR4bit=0                                          Premise(F327)
	S133= [DR4bit]={Compare0(b-a),so|OverFlow(b-a)}             DR4bit-Hold(S120,S132)

DMMU1	S134= CtrlPC=0                                              Premise(F373)
	S135= CtrlPCInc=0                                           Premise(F374)
	S136= PC[Out]=addr+4                                        PC-Hold(S123,S134,S135)
	S137= CtrlIR=0                                              Premise(F382)
	S138= [IR]={31,rT,rA,rB,1105}                               IR-Hold(S125,S137)
	S139= CtrlALUOut=0                                          Premise(F386)
	S140= [ALUOut]=b-a                                          ALUOut-Hold(S127,S139)
	S141= CtrlOVReg=0                                           Premise(F387)
	S142= [OVReg]=OverFlow(b-a)                                 OVReg-Hold(S129,S141)
	S143= CtrlDR1bit=0                                          Premise(F391)
	S144= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Hold(S131,S143)
	S145= CtrlDR4bit=0                                          Premise(F392)
	S146= [DR4bit]={Compare0(b-a),so|OverFlow(b-a)}             DR4bit-Hold(S133,S145)

DMMU2	S147= CtrlPC=0                                              Premise(F438)
	S148= CtrlPCInc=0                                           Premise(F439)
	S149= PC[Out]=addr+4                                        PC-Hold(S136,S147,S148)
	S150= CtrlIR=0                                              Premise(F447)
	S151= [IR]={31,rT,rA,rB,1105}                               IR-Hold(S138,S150)
	S152= CtrlALUOut=0                                          Premise(F451)
	S153= [ALUOut]=b-a                                          ALUOut-Hold(S140,S152)
	S154= CtrlOVReg=0                                           Premise(F452)
	S155= [OVReg]=OverFlow(b-a)                                 OVReg-Hold(S142,S154)
	S156= CtrlDR1bit=0                                          Premise(F456)
	S157= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Hold(S144,S156)
	S158= CtrlDR4bit=0                                          Premise(F457)
	S159= [DR4bit]={Compare0(b-a),so|OverFlow(b-a)}             DR4bit-Hold(S146,S158)

WB	S160= IR.Out6_10=rT                                         IR-Out(S151)
	S161= ALUOut.Out=b-a                                        ALUOut-Out(S153)
	S162= OVReg.Out=OverFlow(b-a)                               OVReg-Out(S155)
	S163= DR1bit.Out=so|OverFlow(b-a)                           DR1bit-Out(S157)
	S164= DR4bit.Out={Compare0(b-a),so|OverFlow(b-a)}           DR4bit-Out(S159)
	S165= IR.Out6_10=>GPRegs.WReg                               Premise(F496)
	S166= GPRegs.WReg=rT                                        Path(S160,S165)
	S167= ALUOut.Out=>GPRegs.WData                              Premise(F497)
	S168= GPRegs.WData=b-a                                      Path(S161,S167)
	S169= DR4bit.Out=>CRRegs.CR0In                              Premise(F498)
	S170= CRRegs.CR0In={Compare0(b-a),so|OverFlow(b-a)}         Path(S164,S169)
	S171= DR1bit.Out=>XER.SOIn                                  Premise(F499)
	S172= XER.SOIn=so|OverFlow(b-a)                             Path(S163,S171)
	S173= OVReg.Out=>XER.OVIn                                   Premise(F500)
	S174= XER.OVIn=OverFlow(b-a)                                Path(S162,S173)
	S175= CtrlPC=0                                              Premise(F503)
	S176= CtrlPCInc=0                                           Premise(F504)
	S177= PC[Out]=addr+4                                        PC-Hold(S149,S175,S176)
	S178= CtrlGPRegs=1                                          Premise(F513)
	S179= GPRegs[rT]=b-a                                        GPRegs-Write(S166,S168,S178)
	S180= CtrlXERSO=1                                           Premise(F518)
	S181= XER[SO]=so|OverFlow(b-a)                              XER-SO-Write(S172,S180)
	S182= CtrlXEROV=1                                           Premise(F519)
	S183= XER[OV]=OverFlow(b-a)                                 XER-OV-Write(S174,S182)
	S184= CtrlCRRegsCR0=1                                       Premise(F524)
	S185= CRRegs[CR0]={Compare0(b-a),so|OverFlow(b-a)}          CRRegs-CR0-Write(S170,S184)

POST	S177= PC[Out]=addr+4                                        PC-Hold(S149,S175,S176)
	S179= GPRegs[rT]=b-a                                        GPRegs-Write(S166,S168,S178)
	S181= XER[SO]=so|OverFlow(b-a)                              XER-SO-Write(S172,S180)
	S183= XER[OV]=OverFlow(b-a)                                 XER-OV-Write(S174,S182)
	S185= CRRegs[CR0]={Compare0(b-a),so|OverFlow(b-a)}          CRRegs-CR0-Write(S170,S184)

