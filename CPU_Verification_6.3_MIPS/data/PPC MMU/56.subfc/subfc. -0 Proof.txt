
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,17}                       Premise(F2)
	S3= ICache[addr]={31,rT,rA,rB,17}                           Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)
	S6= XER[SO]=so                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= PC.Out=>ICache.IEA                                     Premise(F11)
	S17= ICache.IEA=addr                                        Path(S8,S16)
	S18= ICache.Out={31,rT,rA,rB,17}                            ICache-Search(S17,S3)
	S19= ICache.Out=>ICacheReg.In                               Premise(F12)
	S20= ICacheReg.In={31,rT,rA,rB,17}                          Path(S18,S19)
	S21= CtrlPC=0                                               Premise(F44)
	S22= CtrlPCInc=0                                            Premise(F45)
	S23= PC[Out]=addr                                           PC-Hold(S1,S21,S22)
	S24= CtrlIAddrReg=1                                         Premise(F46)
	S25= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S24)
	S26= CtrlICacheReg=1                                        Premise(F49)
	S27= [ICacheReg]={31,rT,rA,rB,17}                           ICacheReg-Write(S20,S26)
	S28= CtrlIMem=0                                             Premise(F51)
	S29= IMem[{pid,addr}]={31,rT,rA,rB,17}                      IMem-Hold(S2,S28)
	S30= CtrlGPRegs=0                                           Premise(F54)
	S31= GPRegs[rA]=a                                           GPRegs-Hold(S4,S30)
	S32= GPRegs[rB]=b                                           GPRegs-Hold(S5,S30)
	S33= CtrlXERSO=0                                            Premise(F59)
	S34= XER[SO]=so                                             XER-SO-Hold(S6,S33)

IMMU	S35= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S25)
	S36= ICacheReg.Out={31,rT,rA,rB,17}                         ICacheReg-Out(S27)
	S37= IAddrReg.Out=>IMem.RAddr                               Premise(F76)
	S38= IMem.RAddr={pid,addr}                                  Path(S35,S37)
	S39= IMem.Out={31,rT,rA,rB,17}                              IMem-Read(S38,S29)
	S40= IMem.Out=>IRMux.MemData                                Premise(F77)
	S41= IRMux.MemData={31,rT,rA,rB,17}                         Path(S39,S40)
	S42= ICacheReg.Out=>IRMux.CacheData                         Premise(F78)
	S43= IRMux.CacheData={31,rT,rA,rB,17}                       Path(S36,S42)
	S44= IRMux.Out={31,rT,rA,rB,17}                             IRMux-Select(S41,S43)
	S45= IRMux.Out=>IR.In                                       Premise(F81)
	S46= IR.In={31,rT,rA,rB,17}                                 Path(S44,S45)
	S47= CtrlPC=0                                               Premise(F104)
	S48= CtrlPCInc=1                                            Premise(F105)
	S49= PC[Out]=addr+4                                         PC-Inc(S23,S47,S48)
	S50= CtrlIR=1                                               Premise(F113)
	S51= [IR]={31,rT,rA,rB,17}                                  IR-Write(S46,S50)
	S52= CtrlGPRegs=0                                           Premise(F114)
	S53= GPRegs[rA]=a                                           GPRegs-Hold(S31,S52)
	S54= GPRegs[rB]=b                                           GPRegs-Hold(S32,S52)
	S55= CtrlXERSO=0                                            Premise(F119)
	S56= XER[SO]=so                                             XER-SO-Hold(S34,S55)

ID	S57= IR.Out11_15=rA                                         IR-Out(S51)
	S58= IR.Out16_20=rB                                         IR-Out(S51)
	S59= IR.Out11_15=>GPRegs.RReg1                              Premise(F145)
	S60= GPRegs.RReg1=rA                                        Path(S57,S59)
	S61= GPRegs.Rdata1=a                                        GPRegs-Read(S60,S53)
	S62= IR.Out16_20=>GPRegs.RReg2                              Premise(F146)
	S63= GPRegs.RReg2=rB                                        Path(S58,S62)
	S64= GPRegs.Rdata2=b                                        GPRegs-Read(S63,S54)
	S65= GPRegs.Rdata1=>A.In                                    Premise(F148)
	S66= A.In=a                                                 Path(S61,S65)
	S67= GPRegs.Rdata2=>B.In                                    Premise(F149)
	S68= B.In=b                                                 Path(S64,S67)
	S69= CtrlPC=0                                               Premise(F164)
	S70= CtrlPCInc=0                                            Premise(F165)
	S71= PC[Out]=addr+4                                         PC-Hold(S49,S69,S70)
	S72= CtrlIR=0                                               Premise(F173)
	S73= [IR]={31,rT,rA,rB,17}                                  IR-Hold(S51,S72)
	S74= CtrlA=1                                                Premise(F175)
	S75= [A]=a                                                  A-Write(S66,S74)
	S76= CtrlB=1                                                Premise(F176)
	S77= [B]=b                                                  B-Write(S68,S76)
	S78= CtrlXERSO=0                                            Premise(F179)
	S79= XER[SO]=so                                             XER-SO-Hold(S56,S78)

EX	S80= A.Out=a                                                A-Out(S75)
	S81= B.Out=b                                                B-Out(S77)
	S82= XER.SOOut=so                                           XER-SO-Out(S79)
	S83= A.Out=>ALU.A                                           Premise(F210)
	S84= ALU.A=a                                                Path(S80,S83)
	S85= B.Out=>ALU.B                                           Premise(F211)
	S86= ALU.B=b                                                Path(S81,S85)
	S87= ALU.Out=b-a                                            ALU(S84,S86)
	S88= ALU.CMP=Compare0(b-a)                                  ALU(S84,S86)
	S89= ALU.CA=Carry(b-a)                                      ALU(S84,S86)
	S90= ALU.Out=>ALUOut.In                                     Premise(F213)
	S91= ALUOut.In=b-a                                          Path(S87,S90)
	S92= ALU.CA=>CAReg.In                                       Premise(F214)
	S93= CAReg.In=Carry(b-a)                                    Path(S89,S92)
	S94= ALU.CMP=>DataCmb.A                                     Premise(F215)
	S95= DataCmb.A=Compare0(b-a)                                Path(S88,S94)
	S96= XER.SOOut=>DataCmb.B                                   Premise(F216)
	S97= DataCmb.B=so                                           Path(S82,S96)
	S98= DataCmb.Out={Compare0(b-a),so}                         DataCmb(S95,S97)
	S99= DataCmb.Out=>DR4bit.In                                 Premise(F217)
	S100= DR4bit.In={Compare0(b-a),so}                          Path(S98,S99)
	S101= CtrlPC=0                                              Premise(F224)
	S102= CtrlPCInc=0                                           Premise(F225)
	S103= PC[Out]=addr+4                                        PC-Hold(S71,S101,S102)
	S104= CtrlIR=0                                              Premise(F233)
	S105= [IR]={31,rT,rA,rB,17}                                 IR-Hold(S73,S104)
	S106= CtrlALUOut=1                                          Premise(F237)
	S107= [ALUOut]=b-a                                          ALUOut-Write(S91,S106)
	S108= CtrlCAReg=1                                           Premise(F238)
	S109= [CAReg]=Carry(b-a)                                    CAReg-Write(S93,S108)
	S110= CtrlDR4bit=1                                          Premise(F242)
	S111= [DR4bit]={Compare0(b-a),so}                           DR4bit-Write(S100,S110)

MEM	S112= CtrlPC=0                                              Premise(F284)
	S113= CtrlPCInc=0                                           Premise(F285)
	S114= PC[Out]=addr+4                                        PC-Hold(S103,S112,S113)
	S115= CtrlIR=0                                              Premise(F293)
	S116= [IR]={31,rT,rA,rB,17}                                 IR-Hold(S105,S115)
	S117= CtrlALUOut=0                                          Premise(F297)
	S118= [ALUOut]=b-a                                          ALUOut-Hold(S107,S117)
	S119= CtrlCAReg=0                                           Premise(F298)
	S120= [CAReg]=Carry(b-a)                                    CAReg-Hold(S109,S119)
	S121= CtrlDR4bit=0                                          Premise(F302)
	S122= [DR4bit]={Compare0(b-a),so}                           DR4bit-Hold(S111,S121)

DMMU1	S123= CtrlPC=0                                              Premise(F344)
	S124= CtrlPCInc=0                                           Premise(F345)
	S125= PC[Out]=addr+4                                        PC-Hold(S114,S123,S124)
	S126= CtrlIR=0                                              Premise(F353)
	S127= [IR]={31,rT,rA,rB,17}                                 IR-Hold(S116,S126)
	S128= CtrlALUOut=0                                          Premise(F357)
	S129= [ALUOut]=b-a                                          ALUOut-Hold(S118,S128)
	S130= CtrlCAReg=0                                           Premise(F358)
	S131= [CAReg]=Carry(b-a)                                    CAReg-Hold(S120,S130)
	S132= CtrlDR4bit=0                                          Premise(F362)
	S133= [DR4bit]={Compare0(b-a),so}                           DR4bit-Hold(S122,S132)

DMMU2	S134= CtrlPC=0                                              Premise(F404)
	S135= CtrlPCInc=0                                           Premise(F405)
	S136= PC[Out]=addr+4                                        PC-Hold(S125,S134,S135)
	S137= CtrlIR=0                                              Premise(F413)
	S138= [IR]={31,rT,rA,rB,17}                                 IR-Hold(S127,S137)
	S139= CtrlALUOut=0                                          Premise(F417)
	S140= [ALUOut]=b-a                                          ALUOut-Hold(S129,S139)
	S141= CtrlCAReg=0                                           Premise(F418)
	S142= [CAReg]=Carry(b-a)                                    CAReg-Hold(S131,S141)
	S143= CtrlDR4bit=0                                          Premise(F422)
	S144= [DR4bit]={Compare0(b-a),so}                           DR4bit-Hold(S133,S143)

WB	S145= IR.Out6_10=rT                                         IR-Out(S138)
	S146= ALUOut.Out=b-a                                        ALUOut-Out(S140)
	S147= CAReg.Out=Carry(b-a)                                  CAReg-Out(S142)
	S148= DR4bit.Out={Compare0(b-a),so}                         DR4bit-Out(S144)
	S149= IR.Out6_10=>GPRegs.WReg                               Premise(F458)
	S150= GPRegs.WReg=rT                                        Path(S145,S149)
	S151= ALUOut.Out=>GPRegs.WData                              Premise(F459)
	S152= GPRegs.WData=b-a                                      Path(S146,S151)
	S153= DR4bit.Out=>CRRegs.CR0In                              Premise(F460)
	S154= CRRegs.CR0In={Compare0(b-a),so}                       Path(S148,S153)
	S155= CAReg.Out=>XER.CAIn                                   Premise(F461)
	S156= XER.CAIn=Carry(b-a)                                   Path(S147,S155)
	S157= CtrlPC=0                                              Premise(F464)
	S158= CtrlPCInc=0                                           Premise(F465)
	S159= PC[Out]=addr+4                                        PC-Hold(S136,S157,S158)
	S160= CtrlGPRegs=1                                          Premise(F474)
	S161= GPRegs[rT]=b-a                                        GPRegs-Write(S150,S152,S160)
	S162= CtrlXERCA=1                                           Premise(F481)
	S163= XER[CA]=Carry(b-a)                                    XER-CA-Write(S156,S162)
	S164= CtrlCRRegsCR0=1                                       Premise(F484)
	S165= CRRegs[CR0]={Compare0(b-a),so}                        CRRegs-CR0-Write(S154,S164)

POST	S159= PC[Out]=addr+4                                        PC-Hold(S136,S157,S158)
	S161= GPRegs[rT]=b-a                                        GPRegs-Write(S150,S152,S160)
	S163= XER[CA]=Carry(b-a)                                    XER-CA-Write(S156,S162)
	S165= CRRegs[CR0]={Compare0(b-a),so}                        CRRegs-CR0-Write(S154,S164)

