
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,1040}                     Premise(F2)
	S3= ICache[addr]={31,rT,rA,rB,1040}                         Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)
	S6= XER[SO]=so                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= PC.Out=>ICache.IEA                                     Premise(F11)
	S17= ICache.IEA=addr                                        Path(S8,S16)
	S18= ICache.Out={31,rT,rA,rB,1040}                          ICache-Search(S17,S3)
	S19= ICache.Out=>ICacheReg.In                               Premise(F12)
	S20= ICacheReg.In={31,rT,rA,rB,1040}                        Path(S18,S19)
	S21= CtrlPC=0                                               Premise(F46)
	S22= CtrlPCInc=0                                            Premise(F47)
	S23= PC[Out]=addr                                           PC-Hold(S1,S21,S22)
	S24= CtrlIAddrReg=1                                         Premise(F48)
	S25= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S24)
	S26= CtrlICacheReg=1                                        Premise(F51)
	S27= [ICacheReg]={31,rT,rA,rB,1040}                         ICacheReg-Write(S20,S26)
	S28= CtrlIMem=0                                             Premise(F53)
	S29= IMem[{pid,addr}]={31,rT,rA,rB,1040}                    IMem-Hold(S2,S28)
	S30= CtrlGPRegs=0                                           Premise(F56)
	S31= GPRegs[rA]=a                                           GPRegs-Hold(S4,S30)
	S32= GPRegs[rB]=b                                           GPRegs-Hold(S5,S30)
	S33= CtrlXERSO=0                                            Premise(F62)
	S34= XER[SO]=so                                             XER-SO-Hold(S6,S33)

IMMU	S35= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S25)
	S36= ICacheReg.Out={31,rT,rA,rB,1040}                       ICacheReg-Out(S27)
	S37= IAddrReg.Out=>IMem.RAddr                               Premise(F75)
	S38= IMem.RAddr={pid,addr}                                  Path(S35,S37)
	S39= IMem.Out={31,rT,rA,rB,1040}                            IMem-Read(S38,S29)
	S40= IMem.Out=>IRMux.MemData                                Premise(F76)
	S41= IRMux.MemData={31,rT,rA,rB,1040}                       Path(S39,S40)
	S42= ICacheReg.Out=>IRMux.CacheData                         Premise(F77)
	S43= IRMux.CacheData={31,rT,rA,rB,1040}                     Path(S36,S42)
	S44= IRMux.Out={31,rT,rA,rB,1040}                           IRMux-Select(S41,S43)
	S45= IRMux.Out=>IR.In                                       Premise(F80)
	S46= IR.In={31,rT,rA,rB,1040}                               Path(S44,S45)
	S47= CtrlPC=0                                               Premise(F105)
	S48= CtrlPCInc=1                                            Premise(F106)
	S49= PC[Out]=addr+4                                         PC-Inc(S23,S47,S48)
	S50= CtrlIR=1                                               Premise(F114)
	S51= [IR]={31,rT,rA,rB,1040}                                IR-Write(S46,S50)
	S52= CtrlGPRegs=0                                           Premise(F115)
	S53= GPRegs[rA]=a                                           GPRegs-Hold(S31,S52)
	S54= GPRegs[rB]=b                                           GPRegs-Hold(S32,S52)
	S55= CtrlXERSO=0                                            Premise(F121)
	S56= XER[SO]=so                                             XER-SO-Hold(S34,S55)

ID	S57= IR.Out11_15=rA                                         IR-Out(S51)
	S58= IR.Out16_20=rB                                         IR-Out(S51)
	S59= IR.Out11_15=>GPRegs.RReg1                              Premise(F143)
	S60= GPRegs.RReg1=rA                                        Path(S57,S59)
	S61= GPRegs.Rdata1=a                                        GPRegs-Read(S60,S53)
	S62= IR.Out16_20=>GPRegs.RReg2                              Premise(F144)
	S63= GPRegs.RReg2=rB                                        Path(S58,S62)
	S64= GPRegs.Rdata2=b                                        GPRegs-Read(S63,S54)
	S65= GPRegs.Rdata1=>A.In                                    Premise(F146)
	S66= A.In=a                                                 Path(S61,S65)
	S67= GPRegs.Rdata2=>B.In                                    Premise(F147)
	S68= B.In=b                                                 Path(S64,S67)
	S69= CtrlPC=0                                               Premise(F164)
	S70= CtrlPCInc=0                                            Premise(F165)
	S71= PC[Out]=addr+4                                         PC-Hold(S49,S69,S70)
	S72= CtrlIR=0                                               Premise(F173)
	S73= [IR]={31,rT,rA,rB,1040}                                IR-Hold(S51,S72)
	S74= CtrlA=1                                                Premise(F175)
	S75= [A]=a                                                  A-Write(S66,S74)
	S76= CtrlB=1                                                Premise(F176)
	S77= [B]=b                                                  B-Write(S68,S76)
	S78= CtrlXERSO=0                                            Premise(F180)
	S79= XER[SO]=so                                             XER-SO-Hold(S56,S78)

EX	S80= A.Out=a                                                A-Out(S75)
	S81= B.Out=b                                                B-Out(S77)
	S82= XER.SOOut=so                                           XER-SO-Out(S79)
	S83= A.Out=>ALU.A                                           Premise(F207)
	S84= ALU.A=a                                                Path(S80,S83)
	S85= B.Out=>ALU.B                                           Premise(F208)
	S86= ALU.B=b                                                Path(S81,S85)
	S87= ALU.Out=b-a                                            ALU(S84,S86)
	S88= ALU.OV=OverFlow(b-a)                                   ALU(S84,S86)
	S89= ALU.CA=Carry(b-a)                                      ALU(S84,S86)
	S90= ALU.Out=>ALUOut.In                                     Premise(F210)
	S91= ALUOut.In=b-a                                          Path(S87,S90)
	S92= ALU.CA=>CAReg.In                                       Premise(F211)
	S93= CAReg.In=Carry(b-a)                                    Path(S89,S92)
	S94= ALU.OV=>OVReg.In                                       Premise(F212)
	S95= OVReg.In=OverFlow(b-a)                                 Path(S88,S94)
	S96= XER.SOOut=>ORGate.A                                    Premise(F213)
	S97= ORGate.A=so                                            Path(S82,S96)
	S98= ALU.OV=>ORGate.B                                       Premise(F214)
	S99= ORGate.B=OverFlow(b-a)                                 Path(S88,S98)
	S100= ORGate.Out=so|OverFlow(b-a)                           ORGate(S97,S99)
	S101= ORGate.Out=>DR1bit.In                                 Premise(F215)
	S102= DR1bit.In=so|OverFlow(b-a)                            Path(S100,S101)
	S103= CtrlPC=0                                              Premise(F223)
	S104= CtrlPCInc=0                                           Premise(F224)
	S105= PC[Out]=addr+4                                        PC-Hold(S71,S103,S104)
	S106= CtrlIR=0                                              Premise(F232)
	S107= [IR]={31,rT,rA,rB,1040}                               IR-Hold(S73,S106)
	S108= CtrlALUOut=1                                          Premise(F236)
	S109= [ALUOut]=b-a                                          ALUOut-Write(S91,S108)
	S110= CtrlCAReg=1                                           Premise(F237)
	S111= [CAReg]=Carry(b-a)                                    CAReg-Write(S93,S110)
	S112= CtrlOVReg=1                                           Premise(F238)
	S113= [OVReg]=OverFlow(b-a)                                 OVReg-Write(S95,S112)
	S114= CtrlDR1bit=1                                          Premise(F242)
	S115= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Write(S102,S114)

MEM	S116= CtrlPC=0                                              Premise(F282)
	S117= CtrlPCInc=0                                           Premise(F283)
	S118= PC[Out]=addr+4                                        PC-Hold(S105,S116,S117)
	S119= CtrlIR=0                                              Premise(F291)
	S120= [IR]={31,rT,rA,rB,1040}                               IR-Hold(S107,S119)
	S121= CtrlALUOut=0                                          Premise(F295)
	S122= [ALUOut]=b-a                                          ALUOut-Hold(S109,S121)
	S123= CtrlCAReg=0                                           Premise(F296)
	S124= [CAReg]=Carry(b-a)                                    CAReg-Hold(S111,S123)
	S125= CtrlOVReg=0                                           Premise(F297)
	S126= [OVReg]=OverFlow(b-a)                                 OVReg-Hold(S113,S125)
	S127= CtrlDR1bit=0                                          Premise(F301)
	S128= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Hold(S115,S127)

DMMU1	S129= CtrlPC=0                                              Premise(F341)
	S130= CtrlPCInc=0                                           Premise(F342)
	S131= PC[Out]=addr+4                                        PC-Hold(S118,S129,S130)
	S132= CtrlIR=0                                              Premise(F350)
	S133= [IR]={31,rT,rA,rB,1040}                               IR-Hold(S120,S132)
	S134= CtrlALUOut=0                                          Premise(F354)
	S135= [ALUOut]=b-a                                          ALUOut-Hold(S122,S134)
	S136= CtrlCAReg=0                                           Premise(F355)
	S137= [CAReg]=Carry(b-a)                                    CAReg-Hold(S124,S136)
	S138= CtrlOVReg=0                                           Premise(F356)
	S139= [OVReg]=OverFlow(b-a)                                 OVReg-Hold(S126,S138)
	S140= CtrlDR1bit=0                                          Premise(F360)
	S141= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Hold(S128,S140)

DMMU2	S142= CtrlPC=0                                              Premise(F400)
	S143= CtrlPCInc=0                                           Premise(F401)
	S144= PC[Out]=addr+4                                        PC-Hold(S131,S142,S143)
	S145= CtrlIR=0                                              Premise(F409)
	S146= [IR]={31,rT,rA,rB,1040}                               IR-Hold(S133,S145)
	S147= CtrlALUOut=0                                          Premise(F413)
	S148= [ALUOut]=b-a                                          ALUOut-Hold(S135,S147)
	S149= CtrlCAReg=0                                           Premise(F414)
	S150= [CAReg]=Carry(b-a)                                    CAReg-Hold(S137,S149)
	S151= CtrlOVReg=0                                           Premise(F415)
	S152= [OVReg]=OverFlow(b-a)                                 OVReg-Hold(S139,S151)
	S153= CtrlDR1bit=0                                          Premise(F419)
	S154= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Hold(S141,S153)

WB	S155= IR.Out6_10=rT                                         IR-Out(S146)
	S156= ALUOut.Out=b-a                                        ALUOut-Out(S148)
	S157= CAReg.Out=Carry(b-a)                                  CAReg-Out(S150)
	S158= OVReg.Out=OverFlow(b-a)                               OVReg-Out(S152)
	S159= DR1bit.Out=so|OverFlow(b-a)                           DR1bit-Out(S154)
	S160= IR.Out6_10=>GPRegs.WReg                               Premise(F452)
	S161= GPRegs.WReg=rT                                        Path(S155,S160)
	S162= ALUOut.Out=>GPRegs.WData                              Premise(F453)
	S163= GPRegs.WData=b-a                                      Path(S156,S162)
	S164= DR1bit.Out=>XER.SOIn                                  Premise(F454)
	S165= XER.SOIn=so|OverFlow(b-a)                             Path(S159,S164)
	S166= CAReg.Out=>XER.CAIn                                   Premise(F455)
	S167= XER.CAIn=Carry(b-a)                                   Path(S157,S166)
	S168= OVReg.Out=>XER.OVIn                                   Premise(F456)
	S169= XER.OVIn=OverFlow(b-a)                                Path(S158,S168)
	S170= CtrlPC=0                                              Premise(F459)
	S171= CtrlPCInc=0                                           Premise(F460)
	S172= PC[Out]=addr+4                                        PC-Hold(S144,S170,S171)
	S173= CtrlGPRegs=1                                          Premise(F469)
	S174= GPRegs[rT]=b-a                                        GPRegs-Write(S161,S163,S173)
	S175= CtrlXERSO=1                                           Premise(F475)
	S176= XER[SO]=so|OverFlow(b-a)                              XER-SO-Write(S165,S175)
	S177= CtrlXEROV=1                                           Premise(F476)
	S178= XER[OV]=OverFlow(b-a)                                 XER-OV-Write(S169,S177)
	S179= CtrlXERCA=1                                           Premise(F477)
	S180= XER[CA]=Carry(b-a)                                    XER-CA-Write(S167,S179)

POST	S172= PC[Out]=addr+4                                        PC-Hold(S144,S170,S171)
	S174= GPRegs[rT]=b-a                                        GPRegs-Write(S161,S163,S173)
	S176= XER[SO]=so|OverFlow(b-a)                              XER-SO-Write(S165,S175)
	S178= XER[OV]=OverFlow(b-a)                                 XER-OV-Write(S169,S177)
	S180= XER[CA]=Carry(b-a)                                    XER-CA-Write(S167,S179)

