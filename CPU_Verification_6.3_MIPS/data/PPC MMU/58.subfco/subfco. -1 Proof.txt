
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,1041}                     Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F49)
	S16= CtrlPCInc=0                                            Premise(F50)
	S17= PC[Out]=addr                                           PC-Hold(S1,S15,S16)
	S18= CtrlIAddrReg=1                                         Premise(F51)
	S19= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S18)
	S20= CtrlIMem=0                                             Premise(F56)
	S21= IMem[{pid,addr}]={31,rT,rA,rB,1041}                    IMem-Hold(S2,S20)
	S22= CtrlGPRegs=0                                           Premise(F59)
	S23= GPRegs[rA]=a                                           GPRegs-Hold(S3,S22)
	S24= GPRegs[rB]=b                                           GPRegs-Hold(S4,S22)
	S25= CtrlXERSO=0                                            Premise(F65)
	S26= XER[SO]=so                                             XER-SO-Hold(S5,S25)

IMMU	S27= PC.Out=addr                                            PC-Out(S17)
	S28= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S19)
	S29= PC.Out=>ICache.IEA                                     Premise(F78)
	S30= ICache.IEA=addr                                        Path(S27,S29)
	S31= IAddrReg.Out=>IMem.RAddr                               Premise(F83)
	S32= IMem.RAddr={pid,addr}                                  Path(S28,S31)
	S33= IMem.Out={31,rT,rA,rB,1041}                            IMem-Read(S32,S21)
	S34= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S32,S21)
	S35= IMem.Out=>IRMux.MemData                                Premise(F84)
	S36= IRMux.MemData={31,rT,rA,rB,1041}                       Path(S33,S35)
	S37= IRMux.Out={31,rT,rA,rB,1041}                           IRMux-Select(S36)
	S38= IRMux.Out=>IR.In                                       Premise(F88)
	S39= IR.In={31,rT,rA,rB,1041}                               Path(S37,S38)
	S40= IMem.MEM8WordOut=>ICache.WData                         Premise(F89)
	S41= ICache.WData=IMemGet8Word({pid,addr})                  Path(S34,S40)
	S42= CtrlPC=0                                               Premise(F117)
	S43= CtrlPCInc=1                                            Premise(F118)
	S44= PC[Out]=addr+4                                         PC-Inc(S17,S42,S43)
	S45= CtrlICache=1                                           Premise(F121)
	S46= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S30,S41,S45)
	S47= CtrlIR=1                                               Premise(F126)
	S48= [IR]={31,rT,rA,rB,1041}                                IR-Write(S39,S47)
	S49= CtrlGPRegs=0                                           Premise(F127)
	S50= GPRegs[rA]=a                                           GPRegs-Hold(S23,S49)
	S51= GPRegs[rB]=b                                           GPRegs-Hold(S24,S49)
	S52= CtrlXERSO=0                                            Premise(F133)
	S53= XER[SO]=so                                             XER-SO-Hold(S26,S52)

ID	S54= IR.Out11_15=rA                                         IR-Out(S48)
	S55= IR.Out16_20=rB                                         IR-Out(S48)
	S56= IR.Out11_15=>GPRegs.RReg1                              Premise(F160)
	S57= GPRegs.RReg1=rA                                        Path(S54,S56)
	S58= GPRegs.Rdata1=a                                        GPRegs-Read(S57,S50)
	S59= IR.Out16_20=>GPRegs.RReg2                              Premise(F161)
	S60= GPRegs.RReg2=rB                                        Path(S55,S59)
	S61= GPRegs.Rdata2=b                                        GPRegs-Read(S60,S51)
	S62= GPRegs.Rdata1=>A.In                                    Premise(F163)
	S63= A.In=a                                                 Path(S58,S62)
	S64= GPRegs.Rdata2=>B.In                                    Premise(F164)
	S65= B.In=b                                                 Path(S61,S64)
	S66= CtrlPC=0                                               Premise(F185)
	S67= CtrlPCInc=0                                            Premise(F186)
	S68= PC[Out]=addr+4                                         PC-Hold(S44,S66,S67)
	S69= CtrlICache=0                                           Premise(F189)
	S70= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S46,S69)
	S71= CtrlIR=0                                               Premise(F194)
	S72= [IR]={31,rT,rA,rB,1041}                                IR-Hold(S48,S71)
	S73= CtrlA=1                                                Premise(F196)
	S74= [A]=a                                                  A-Write(S63,S73)
	S75= CtrlB=1                                                Premise(F197)
	S76= [B]=b                                                  B-Write(S65,S75)
	S77= CtrlXERSO=0                                            Premise(F201)
	S78= XER[SO]=so                                             XER-SO-Hold(S53,S77)

EX	S79= A.Out=a                                                A-Out(S74)
	S80= B.Out=b                                                B-Out(S76)
	S81= XER.SOOut=so                                           XER-SO-Out(S78)
	S82= A.Out=>ALU.A                                           Premise(F233)
	S83= ALU.A=a                                                Path(S79,S82)
	S84= B.Out=>ALU.B                                           Premise(F234)
	S85= ALU.B=b                                                Path(S80,S84)
	S86= ALU.Out=b-a                                            ALU(S83,S85)
	S87= ALU.CMP=Compare0(b-a)                                  ALU(S83,S85)
	S88= ALU.OV=OverFlow(b-a)                                   ALU(S83,S85)
	S89= ALU.CA=Carry(b-a)                                      ALU(S83,S85)
	S90= ALU.Out=>ALUOut.In                                     Premise(F236)
	S91= ALUOut.In=b-a                                          Path(S86,S90)
	S92= ALU.CA=>CAReg.In                                       Premise(F237)
	S93= CAReg.In=Carry(b-a)                                    Path(S89,S92)
	S94= ALU.CMP=>DataCmb.A                                     Premise(F238)
	S95= DataCmb.A=Compare0(b-a)                                Path(S87,S94)
	S96= ORGate.Out=>DataCmb.B                                  Premise(F239)
	S97= ALU.OV=>OVReg.In                                       Premise(F240)
	S98= OVReg.In=OverFlow(b-a)                                 Path(S88,S97)
	S99= XER.SOOut=>ORGate.A                                    Premise(F241)
	S100= ORGate.A=so                                           Path(S81,S99)
	S101= ALU.OV=>ORGate.B                                      Premise(F242)
	S102= ORGate.B=OverFlow(b-a)                                Path(S88,S101)
	S103= ORGate.Out=so|OverFlow(b-a)                           ORGate(S100,S102)
	S104= DataCmb.B=so|OverFlow(b-a)                            Path(S103,S96)
	S105= DataCmb.Out={Compare0(b-a),so|OverFlow(b-a)}          DataCmb(S95,S104)
	S106= ORGate.Out=>DR1bit.In                                 Premise(F243)
	S107= DR1bit.In=so|OverFlow(b-a)                            Path(S103,S106)
	S108= DataCmb.Out=>DR4bit.In                                Premise(F244)
	S109= DR4bit.In={Compare0(b-a),so|OverFlow(b-a)}            Path(S105,S108)
	S110= CtrlPC=0                                              Premise(F253)
	S111= CtrlPCInc=0                                           Premise(F254)
	S112= PC[Out]=addr+4                                        PC-Hold(S68,S110,S111)
	S113= CtrlICache=0                                          Premise(F257)
	S114= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S70,S113)
	S115= CtrlIR=0                                              Premise(F262)
	S116= [IR]={31,rT,rA,rB,1041}                               IR-Hold(S72,S115)
	S117= CtrlALUOut=1                                          Premise(F266)
	S118= [ALUOut]=b-a                                          ALUOut-Write(S91,S117)
	S119= CtrlCAReg=1                                           Premise(F267)
	S120= [CAReg]=Carry(b-a)                                    CAReg-Write(S93,S119)
	S121= CtrlOVReg=1                                           Premise(F268)
	S122= [OVReg]=OverFlow(b-a)                                 OVReg-Write(S98,S121)
	S123= CtrlDR1bit=1                                          Premise(F272)
	S124= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Write(S107,S123)
	S125= CtrlDR4bit=1                                          Premise(F273)
	S126= [DR4bit]={Compare0(b-a),so|OverFlow(b-a)}             DR4bit-Write(S109,S125)

MEM	S127= CtrlPC=0                                              Premise(F321)
	S128= CtrlPCInc=0                                           Premise(F322)
	S129= PC[Out]=addr+4                                        PC-Hold(S112,S127,S128)
	S130= CtrlICache=0                                          Premise(F325)
	S131= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S114,S130)
	S132= CtrlIR=0                                              Premise(F330)
	S133= [IR]={31,rT,rA,rB,1041}                               IR-Hold(S116,S132)
	S134= CtrlALUOut=0                                          Premise(F334)
	S135= [ALUOut]=b-a                                          ALUOut-Hold(S118,S134)
	S136= CtrlCAReg=0                                           Premise(F335)
	S137= [CAReg]=Carry(b-a)                                    CAReg-Hold(S120,S136)
	S138= CtrlOVReg=0                                           Premise(F336)
	S139= [OVReg]=OverFlow(b-a)                                 OVReg-Hold(S122,S138)
	S140= CtrlDR1bit=0                                          Premise(F340)
	S141= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Hold(S124,S140)
	S142= CtrlDR4bit=0                                          Premise(F341)
	S143= [DR4bit]={Compare0(b-a),so|OverFlow(b-a)}             DR4bit-Hold(S126,S142)

DMMU1	S144= CtrlPC=0                                              Premise(F389)
	S145= CtrlPCInc=0                                           Premise(F390)
	S146= PC[Out]=addr+4                                        PC-Hold(S129,S144,S145)
	S147= CtrlICache=0                                          Premise(F393)
	S148= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S131,S147)
	S149= CtrlIR=0                                              Premise(F398)
	S150= [IR]={31,rT,rA,rB,1041}                               IR-Hold(S133,S149)
	S151= CtrlALUOut=0                                          Premise(F402)
	S152= [ALUOut]=b-a                                          ALUOut-Hold(S135,S151)
	S153= CtrlCAReg=0                                           Premise(F403)
	S154= [CAReg]=Carry(b-a)                                    CAReg-Hold(S137,S153)
	S155= CtrlOVReg=0                                           Premise(F404)
	S156= [OVReg]=OverFlow(b-a)                                 OVReg-Hold(S139,S155)
	S157= CtrlDR1bit=0                                          Premise(F408)
	S158= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Hold(S141,S157)
	S159= CtrlDR4bit=0                                          Premise(F409)
	S160= [DR4bit]={Compare0(b-a),so|OverFlow(b-a)}             DR4bit-Hold(S143,S159)

DMMU2	S161= CtrlPC=0                                              Premise(F457)
	S162= CtrlPCInc=0                                           Premise(F458)
	S163= PC[Out]=addr+4                                        PC-Hold(S146,S161,S162)
	S164= CtrlICache=0                                          Premise(F461)
	S165= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S148,S164)
	S166= CtrlIR=0                                              Premise(F466)
	S167= [IR]={31,rT,rA,rB,1041}                               IR-Hold(S150,S166)
	S168= CtrlALUOut=0                                          Premise(F470)
	S169= [ALUOut]=b-a                                          ALUOut-Hold(S152,S168)
	S170= CtrlCAReg=0                                           Premise(F471)
	S171= [CAReg]=Carry(b-a)                                    CAReg-Hold(S154,S170)
	S172= CtrlOVReg=0                                           Premise(F472)
	S173= [OVReg]=OverFlow(b-a)                                 OVReg-Hold(S156,S172)
	S174= CtrlDR1bit=0                                          Premise(F476)
	S175= [DR1bit]=so|OverFlow(b-a)                             DR1bit-Hold(S158,S174)
	S176= CtrlDR4bit=0                                          Premise(F477)
	S177= [DR4bit]={Compare0(b-a),so|OverFlow(b-a)}             DR4bit-Hold(S160,S176)

WB	S178= IR.Out6_10=rT                                         IR-Out(S167)
	S179= ALUOut.Out=b-a                                        ALUOut-Out(S169)
	S180= CAReg.Out=Carry(b-a)                                  CAReg-Out(S171)
	S181= OVReg.Out=OverFlow(b-a)                               OVReg-Out(S173)
	S182= DR1bit.Out=so|OverFlow(b-a)                           DR1bit-Out(S175)
	S183= DR4bit.Out={Compare0(b-a),so|OverFlow(b-a)}           DR4bit-Out(S177)
	S184= IR.Out6_10=>GPRegs.WReg                               Premise(F517)
	S185= GPRegs.WReg=rT                                        Path(S178,S184)
	S186= ALUOut.Out=>GPRegs.WData                              Premise(F518)
	S187= GPRegs.WData=b-a                                      Path(S179,S186)
	S188= DR4bit.Out=>CRRegs.CR0In                              Premise(F519)
	S189= CRRegs.CR0In={Compare0(b-a),so|OverFlow(b-a)}         Path(S183,S188)
	S190= DR1bit.Out=>XER.SOIn                                  Premise(F520)
	S191= XER.SOIn=so|OverFlow(b-a)                             Path(S182,S190)
	S192= CAReg.Out=>XER.CAIn                                   Premise(F521)
	S193= XER.CAIn=Carry(b-a)                                   Path(S180,S192)
	S194= OVReg.Out=>XER.OVIn                                   Premise(F522)
	S195= XER.OVIn=OverFlow(b-a)                                Path(S181,S194)
	S196= CtrlPC=0                                              Premise(F525)
	S197= CtrlPCInc=0                                           Premise(F526)
	S198= PC[Out]=addr+4                                        PC-Hold(S163,S196,S197)
	S199= CtrlICache=0                                          Premise(F529)
	S200= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S165,S199)
	S201= CtrlGPRegs=1                                          Premise(F535)
	S202= GPRegs[rT]=b-a                                        GPRegs-Write(S185,S187,S201)
	S203= CtrlXERSO=1                                           Premise(F541)
	S204= XER[SO]=so|OverFlow(b-a)                              XER-SO-Write(S191,S203)
	S205= CtrlXEROV=1                                           Premise(F542)
	S206= XER[OV]=OverFlow(b-a)                                 XER-OV-Write(S195,S205)
	S207= CtrlXERCA=1                                           Premise(F543)
	S208= XER[CA]=Carry(b-a)                                    XER-CA-Write(S193,S207)
	S209= CtrlCRRegsCR0=1                                       Premise(F547)
	S210= CRRegs[CR0]={Compare0(b-a),so|OverFlow(b-a)}          CRRegs-CR0-Write(S189,S209)

POST	S198= PC[Out]=addr+4                                        PC-Hold(S163,S196,S197)
	S200= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S165,S199)
	S202= GPRegs[rT]=b-a                                        GPRegs-Write(S185,S187,S201)
	S204= XER[SO]=so|OverFlow(b-a)                              XER-SO-Write(S191,S203)
	S206= XER[OV]=OverFlow(b-a)                                 XER-OV-Write(S195,S205)
	S208= XER[CA]=Carry(b-a)                                    XER-CA-Write(S193,S207)
	S210= CRRegs[CR0]={Compare0(b-a),so|OverFlow(b-a)}          CRRegs-CR0-Write(S189,S209)

