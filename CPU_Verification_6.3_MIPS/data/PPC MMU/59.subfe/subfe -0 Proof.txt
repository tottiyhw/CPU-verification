
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,272}                      Premise(F2)
	S3= ICache[addr]={31,rT,rA,rB,272}                          Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)
	S6= XER[CA]=ca                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= PC.Out=>ICache.IEA                                     Premise(F11)
	S17= ICache.IEA=addr                                        Path(S8,S16)
	S18= ICache.Out={31,rT,rA,rB,272}                           ICache-Search(S17,S3)
	S19= ICache.Out=>ICacheReg.In                               Premise(F12)
	S20= ICacheReg.In={31,rT,rA,rB,272}                         Path(S18,S19)
	S21= CtrlPC=0                                               Premise(F41)
	S22= CtrlPCInc=0                                            Premise(F42)
	S23= PC[Out]=addr                                           PC-Hold(S1,S21,S22)
	S24= CtrlIAddrReg=1                                         Premise(F43)
	S25= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S24)
	S26= CtrlICacheReg=1                                        Premise(F46)
	S27= [ICacheReg]={31,rT,rA,rB,272}                          ICacheReg-Write(S20,S26)
	S28= CtrlIMem=0                                             Premise(F48)
	S29= IMem[{pid,addr}]={31,rT,rA,rB,272}                     IMem-Hold(S2,S28)
	S30= CtrlGPRegs=0                                           Premise(F51)
	S31= GPRegs[rA]=a                                           GPRegs-Hold(S4,S30)
	S32= GPRegs[rB]=b                                           GPRegs-Hold(S5,S30)
	S33= CtrlXERCA=0                                            Premise(F56)
	S34= XER[CA]=ca                                             XER-CA-Hold(S6,S33)

IMMU	S35= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S25)
	S36= ICacheReg.Out={31,rT,rA,rB,272}                        ICacheReg-Out(S27)
	S37= IAddrReg.Out=>IMem.RAddr                               Premise(F68)
	S38= IMem.RAddr={pid,addr}                                  Path(S35,S37)
	S39= IMem.Out={31,rT,rA,rB,272}                             IMem-Read(S38,S29)
	S40= IMem.Out=>IRMux.MemData                                Premise(F69)
	S41= IRMux.MemData={31,rT,rA,rB,272}                        Path(S39,S40)
	S42= ICacheReg.Out=>IRMux.CacheData                         Premise(F70)
	S43= IRMux.CacheData={31,rT,rA,rB,272}                      Path(S36,S42)
	S44= IRMux.Out={31,rT,rA,rB,272}                            IRMux-Select(S41,S43)
	S45= IRMux.Out=>IR.In                                       Premise(F73)
	S46= IR.In={31,rT,rA,rB,272}                                Path(S44,S45)
	S47= CtrlPC=0                                               Premise(F93)
	S48= CtrlPCInc=1                                            Premise(F94)
	S49= PC[Out]=addr+4                                         PC-Inc(S23,S47,S48)
	S50= CtrlIR=1                                               Premise(F102)
	S51= [IR]={31,rT,rA,rB,272}                                 IR-Write(S46,S50)
	S52= CtrlGPRegs=0                                           Premise(F103)
	S53= GPRegs[rA]=a                                           GPRegs-Hold(S31,S52)
	S54= GPRegs[rB]=b                                           GPRegs-Hold(S32,S52)
	S55= CtrlXERCA=0                                            Premise(F108)
	S56= XER[CA]=ca                                             XER-CA-Hold(S34,S55)

ID	S57= IR.Out11_15=rA                                         IR-Out(S51)
	S58= IR.Out16_20=rB                                         IR-Out(S51)
	S59= IR.Out11_15=>GPRegs.RReg1                              Premise(F129)
	S60= GPRegs.RReg1=rA                                        Path(S57,S59)
	S61= GPRegs.Rdata1=a                                        GPRegs-Read(S60,S53)
	S62= IR.Out16_20=>GPRegs.RReg2                              Premise(F130)
	S63= GPRegs.RReg2=rB                                        Path(S58,S62)
	S64= GPRegs.Rdata2=b                                        GPRegs-Read(S63,S54)
	S65= GPRegs.Rdata1=>A.In                                    Premise(F132)
	S66= A.In=a                                                 Path(S61,S65)
	S67= GPRegs.Rdata2=>B.In                                    Premise(F133)
	S68= B.In=b                                                 Path(S64,S67)
	S69= CtrlPC=0                                               Premise(F145)
	S70= CtrlPCInc=0                                            Premise(F146)
	S71= PC[Out]=addr+4                                         PC-Hold(S49,S69,S70)
	S72= CtrlIR=0                                               Premise(F154)
	S73= [IR]={31,rT,rA,rB,272}                                 IR-Hold(S51,S72)
	S74= CtrlA=1                                                Premise(F156)
	S75= [A]=a                                                  A-Write(S66,S74)
	S76= CtrlB=1                                                Premise(F157)
	S77= [B]=b                                                  B-Write(S68,S76)
	S78= CtrlXERCA=0                                            Premise(F160)
	S79= XER[CA]=ca                                             XER-CA-Hold(S56,S78)

EX	S80= A.Out=a                                                A-Out(S75)
	S81= B.Out=b                                                B-Out(S77)
	S82= XER.CAOut=ca                                           XER-CA-Out(S79)
	S83= A.Out=>ALU.A                                           Premise(F186)
	S84= ALU.A=a                                                Path(S80,S83)
	S85= B.Out=>ALU.B                                           Premise(F187)
	S86= ALU.B=b                                                Path(S81,S85)
	S87= XER.CAOut=>ALU.CAIn                                    Premise(F188)
	S88= ALU.CAIn=ca                                            Path(S82,S87)
	S89= ALU.Out=b-a+ca                                         ALU(S84,S86,S88)
	S90= ALU.CA=Carry(b-a+ca)                                   ALU(S84,S86,S88)
	S91= ALU.Out=>ALUOut.In                                     Premise(F190)
	S92= ALUOut.In=b-a+ca                                       Path(S89,S91)
	S93= ALU.CA=>CAReg.In                                       Premise(F191)
	S94= CAReg.In=Carry(b-a+ca)                                 Path(S90,S93)
	S95= CtrlPC=0                                               Premise(F197)
	S96= CtrlPCInc=0                                            Premise(F198)
	S97= PC[Out]=addr+4                                         PC-Hold(S71,S95,S96)
	S98= CtrlIR=0                                               Premise(F206)
	S99= [IR]={31,rT,rA,rB,272}                                 IR-Hold(S73,S98)
	S100= CtrlALUOut=1                                          Premise(F213)
	S101= [ALUOut]=b-a+ca                                       ALUOut-Write(S92,S100)
	S102= CtrlCAReg=1                                           Premise(F214)
	S103= [CAReg]=Carry(b-a+ca)                                 CAReg-Write(S94,S102)

MEM	S104= CtrlPC=0                                              Premise(F249)
	S105= CtrlPCInc=0                                           Premise(F250)
	S106= PC[Out]=addr+4                                        PC-Hold(S97,S104,S105)
	S107= CtrlIR=0                                              Premise(F258)
	S108= [IR]={31,rT,rA,rB,272}                                IR-Hold(S99,S107)
	S109= CtrlALUOut=0                                          Premise(F265)
	S110= [ALUOut]=b-a+ca                                       ALUOut-Hold(S101,S109)
	S111= CtrlCAReg=0                                           Premise(F266)
	S112= [CAReg]=Carry(b-a+ca)                                 CAReg-Hold(S103,S111)

DMMU1	S113= CtrlPC=0                                              Premise(F301)
	S114= CtrlPCInc=0                                           Premise(F302)
	S115= PC[Out]=addr+4                                        PC-Hold(S106,S113,S114)
	S116= CtrlIR=0                                              Premise(F310)
	S117= [IR]={31,rT,rA,rB,272}                                IR-Hold(S108,S116)
	S118= CtrlALUOut=0                                          Premise(F317)
	S119= [ALUOut]=b-a+ca                                       ALUOut-Hold(S110,S118)
	S120= CtrlCAReg=0                                           Premise(F318)
	S121= [CAReg]=Carry(b-a+ca)                                 CAReg-Hold(S112,S120)

DMMU2	S122= CtrlPC=0                                              Premise(F353)
	S123= CtrlPCInc=0                                           Premise(F354)
	S124= PC[Out]=addr+4                                        PC-Hold(S115,S122,S123)
	S125= CtrlIR=0                                              Premise(F362)
	S126= [IR]={31,rT,rA,rB,272}                                IR-Hold(S117,S125)
	S127= CtrlALUOut=0                                          Premise(F369)
	S128= [ALUOut]=b-a+ca                                       ALUOut-Hold(S119,S127)
	S129= CtrlCAReg=0                                           Premise(F370)
	S130= [CAReg]=Carry(b-a+ca)                                 CAReg-Hold(S121,S129)

WB	S131= IR.Out6_10=rT                                         IR-Out(S126)
	S132= ALUOut.Out=b-a+ca                                     ALUOut-Out(S128)
	S133= CAReg.Out=Carry(b-a+ca)                               CAReg-Out(S130)
	S134= IR.Out6_10=>GPRegs.WReg                               Premise(F400)
	S135= GPRegs.WReg=rT                                        Path(S131,S134)
	S136= ALUOut.Out=>GPRegs.WData                              Premise(F401)
	S137= GPRegs.WData=b-a+ca                                   Path(S132,S136)
	S138= CAReg.Out=>XER.CAIn                                   Premise(F402)
	S139= XER.CAIn=Carry(b-a+ca)                                Path(S133,S138)
	S140= CtrlPC=0                                              Premise(F405)
	S141= CtrlPCInc=0                                           Premise(F406)
	S142= PC[Out]=addr+4                                        PC-Hold(S124,S140,S141)
	S143= CtrlGPRegs=1                                          Premise(F415)
	S144= GPRegs[rT]=b-a+ca                                     GPRegs-Write(S135,S137,S143)
	S145= CtrlXERCA=1                                           Premise(F420)
	S146= XER[CA]=Carry(b-a+ca)                                 XER-CA-Write(S139,S145)

POST	S142= PC[Out]=addr+4                                        PC-Hold(S124,S140,S141)
	S144= GPRegs[rT]=b-a+ca                                     GPRegs-Write(S135,S137,S143)
	S146= XER[CA]=Carry(b-a+ca)                                 XER-CA-Write(S139,S145)

