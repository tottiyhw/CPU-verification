
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,1296}                     Premise(F2)
	S3= ICache[addr]={31,rT,rA,rB,1296}                         Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)
	S6= XER[CA]=ca                                              Premise(F6)
	S7= XER[SO]=so                                              Premise(F7)

IF	S8= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S9= PC.Out=addr                                             PC-Out(S1)
	S10= PIDReg.Out=>IMMU.PID                                   Premise(F8)
	S11= IMMU.PID=pid                                           Path(S8,S10)
	S12= PC.Out=>IMMU.IEA                                       Premise(F9)
	S13= IMMU.IEA=addr                                          Path(S9,S12)
	S14= IMMU.Addr={pid,addr}                                   IMMU-Search(S11,S13)
	S15= IMMU.Addr=>IAddrReg.In                                 Premise(F10)
	S16= IAddrReg.In={pid,addr}                                 Path(S14,S15)
	S17= PC.Out=>ICache.IEA                                     Premise(F12)
	S18= ICache.IEA=addr                                        Path(S9,S17)
	S19= ICache.Out={31,rT,rA,rB,1296}                          ICache-Search(S18,S3)
	S20= ICache.Out=>ICacheReg.In                               Premise(F13)
	S21= ICacheReg.In={31,rT,rA,rB,1296}                        Path(S19,S20)
	S22= CtrlPC=0                                               Premise(F48)
	S23= CtrlPCInc=0                                            Premise(F49)
	S24= PC[Out]=addr                                           PC-Hold(S1,S22,S23)
	S25= CtrlIAddrReg=1                                         Premise(F50)
	S26= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S16,S25)
	S27= CtrlICacheReg=1                                        Premise(F53)
	S28= [ICacheReg]={31,rT,rA,rB,1296}                         ICacheReg-Write(S21,S27)
	S29= CtrlIMem=0                                             Premise(F55)
	S30= IMem[{pid,addr}]={31,rT,rA,rB,1296}                    IMem-Hold(S2,S29)
	S31= CtrlGPRegs=0                                           Premise(F58)
	S32= GPRegs[rA]=a                                           GPRegs-Hold(S4,S31)
	S33= GPRegs[rB]=b                                           GPRegs-Hold(S5,S31)
	S34= CtrlXERSO=0                                            Premise(F61)
	S35= XER[SO]=so                                             XER-SO-Hold(S7,S34)
	S36= CtrlXERCA=0                                            Premise(F63)
	S37= XER[CA]=ca                                             XER-CA-Hold(S6,S36)

IMMU	S38= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S26)
	S39= ICacheReg.Out={31,rT,rA,rB,1296}                       ICacheReg-Out(S28)
	S40= IAddrReg.Out=>IMem.RAddr                               Premise(F77)
	S41= IMem.RAddr={pid,addr}                                  Path(S38,S40)
	S42= IMem.Out={31,rT,rA,rB,1296}                            IMem-Read(S41,S30)
	S43= IMem.Out=>IRMux.MemData                                Premise(F78)
	S44= IRMux.MemData={31,rT,rA,rB,1296}                       Path(S42,S43)
	S45= ICacheReg.Out=>IRMux.CacheData                         Premise(F79)
	S46= IRMux.CacheData={31,rT,rA,rB,1296}                     Path(S39,S45)
	S47= IRMux.Out={31,rT,rA,rB,1296}                           IRMux-Select(S44,S46)
	S48= IRMux.Out=>IR.In                                       Premise(F82)
	S49= IR.In={31,rT,rA,rB,1296}                               Path(S47,S48)
	S50= CtrlPC=0                                               Premise(F108)
	S51= CtrlPCInc=1                                            Premise(F109)
	S52= PC[Out]=addr+4                                         PC-Inc(S24,S50,S51)
	S53= CtrlIR=1                                               Premise(F117)
	S54= [IR]={31,rT,rA,rB,1296}                                IR-Write(S49,S53)
	S55= CtrlGPRegs=0                                           Premise(F118)
	S56= GPRegs[rA]=a                                           GPRegs-Hold(S32,S55)
	S57= GPRegs[rB]=b                                           GPRegs-Hold(S33,S55)
	S58= CtrlXERSO=0                                            Premise(F121)
	S59= XER[SO]=so                                             XER-SO-Hold(S35,S58)
	S60= CtrlXERCA=0                                            Premise(F123)
	S61= XER[CA]=ca                                             XER-CA-Hold(S37,S60)

ID	S62= IR.Out11_15=rA                                         IR-Out(S54)
	S63= IR.Out16_20=rB                                         IR-Out(S54)
	S64= IR.Out11_15=>GPRegs.RReg1                              Premise(F146)
	S65= GPRegs.RReg1=rA                                        Path(S62,S64)
	S66= GPRegs.Rdata1=a                                        GPRegs-Read(S65,S56)
	S67= IR.Out16_20=>GPRegs.RReg2                              Premise(F147)
	S68= GPRegs.RReg2=rB                                        Path(S63,S67)
	S69= GPRegs.Rdata2=b                                        GPRegs-Read(S68,S57)
	S70= GPRegs.Rdata1=>A.In                                    Premise(F149)
	S71= A.In=a                                                 Path(S66,S70)
	S72= GPRegs.Rdata2=>B.In                                    Premise(F150)
	S73= B.In=b                                                 Path(S69,S72)
	S74= CtrlPC=0                                               Premise(F168)
	S75= CtrlPCInc=0                                            Premise(F169)
	S76= PC[Out]=addr+4                                         PC-Hold(S52,S74,S75)
	S77= CtrlIR=0                                               Premise(F177)
	S78= [IR]={31,rT,rA,rB,1296}                                IR-Hold(S54,S77)
	S79= CtrlA=1                                                Premise(F179)
	S80= [A]=a                                                  A-Write(S71,S79)
	S81= CtrlB=1                                                Premise(F180)
	S82= [B]=b                                                  B-Write(S73,S81)
	S83= CtrlXERSO=0                                            Premise(F181)
	S84= XER[SO]=so                                             XER-SO-Hold(S59,S83)
	S85= CtrlXERCA=0                                            Premise(F183)
	S86= XER[CA]=ca                                             XER-CA-Hold(S61,S85)

EX	S87= A.Out=a                                                A-Out(S80)
	S88= B.Out=b                                                B-Out(S82)
	S89= XER.SOOut=so                                           XER-SO-Out(S84)
	S90= XER.CAOut=ca                                           XER-CA-Out(S86)
	S91= A.Out=>ALU.A                                           Premise(F211)
	S92= ALU.A=a                                                Path(S87,S91)
	S93= B.Out=>ALU.B                                           Premise(F212)
	S94= ALU.B=b                                                Path(S88,S93)
	S95= XER.CAOut=>ALU.CAIn                                    Premise(F213)
	S96= ALU.CAIn=ca                                            Path(S90,S95)
	S97= ALU.Out=b-a+ca                                         ALU(S92,S94,S96)
	S98= ALU.OV=OverFlow(b-a+ca)                                ALU(S92,S94,S96)
	S99= ALU.CA=Carry(b-a+ca)                                   ALU(S92,S94,S96)
	S100= ALU.Out=>ALUOut.In                                    Premise(F215)
	S101= ALUOut.In=b-a+ca                                      Path(S97,S100)
	S102= ALU.CA=>CAReg.In                                      Premise(F216)
	S103= CAReg.In=Carry(b-a+ca)                                Path(S99,S102)
	S104= ALU.OV=>OVReg.In                                      Premise(F217)
	S105= OVReg.In=OverFlow(b-a+ca)                             Path(S98,S104)
	S106= XER.SOOut=>ORGate.A                                   Premise(F218)
	S107= ORGate.A=so                                           Path(S89,S106)
	S108= ALU.OV=>ORGate.B                                      Premise(F219)
	S109= ORGate.B=OverFlow(b-a+ca)                             Path(S98,S108)
	S110= ORGate.Out=so|OverFlow(b-a+ca)                        ORGate(S107,S109)
	S111= ORGate.Out=>DR1bit.In                                 Premise(F220)
	S112= DR1bit.In=so|OverFlow(b-a+ca)                         Path(S110,S111)
	S113= CtrlPC=0                                              Premise(F228)
	S114= CtrlPCInc=0                                           Premise(F229)
	S115= PC[Out]=addr+4                                        PC-Hold(S76,S113,S114)
	S116= CtrlIR=0                                              Premise(F237)
	S117= [IR]={31,rT,rA,rB,1296}                               IR-Hold(S78,S116)
	S118= CtrlALUOut=1                                          Premise(F244)
	S119= [ALUOut]=b-a+ca                                       ALUOut-Write(S101,S118)
	S120= CtrlCAReg=1                                           Premise(F245)
	S121= [CAReg]=Carry(b-a+ca)                                 CAReg-Write(S103,S120)
	S122= CtrlOVReg=1                                           Premise(F246)
	S123= [OVReg]=OverFlow(b-a+ca)                              OVReg-Write(S105,S122)
	S124= CtrlDR1bit=1                                          Premise(F247)
	S125= [DR1bit]=so|OverFlow(b-a+ca)                          DR1bit-Write(S112,S124)

MEM	S126= CtrlPC=0                                              Premise(F288)
	S127= CtrlPCInc=0                                           Premise(F289)
	S128= PC[Out]=addr+4                                        PC-Hold(S115,S126,S127)
	S129= CtrlIR=0                                              Premise(F297)
	S130= [IR]={31,rT,rA,rB,1296}                               IR-Hold(S117,S129)
	S131= CtrlALUOut=0                                          Premise(F304)
	S132= [ALUOut]=b-a+ca                                       ALUOut-Hold(S119,S131)
	S133= CtrlCAReg=0                                           Premise(F305)
	S134= [CAReg]=Carry(b-a+ca)                                 CAReg-Hold(S121,S133)
	S135= CtrlOVReg=0                                           Premise(F306)
	S136= [OVReg]=OverFlow(b-a+ca)                              OVReg-Hold(S123,S135)
	S137= CtrlDR1bit=0                                          Premise(F307)
	S138= [DR1bit]=so|OverFlow(b-a+ca)                          DR1bit-Hold(S125,S137)

DMMU1	S139= CtrlPC=0                                              Premise(F348)
	S140= CtrlPCInc=0                                           Premise(F349)
	S141= PC[Out]=addr+4                                        PC-Hold(S128,S139,S140)
	S142= CtrlIR=0                                              Premise(F357)
	S143= [IR]={31,rT,rA,rB,1296}                               IR-Hold(S130,S142)
	S144= CtrlALUOut=0                                          Premise(F364)
	S145= [ALUOut]=b-a+ca                                       ALUOut-Hold(S132,S144)
	S146= CtrlCAReg=0                                           Premise(F365)
	S147= [CAReg]=Carry(b-a+ca)                                 CAReg-Hold(S134,S146)
	S148= CtrlOVReg=0                                           Premise(F366)
	S149= [OVReg]=OverFlow(b-a+ca)                              OVReg-Hold(S136,S148)
	S150= CtrlDR1bit=0                                          Premise(F367)
	S151= [DR1bit]=so|OverFlow(b-a+ca)                          DR1bit-Hold(S138,S150)

DMMU2	S152= CtrlPC=0                                              Premise(F408)
	S153= CtrlPCInc=0                                           Premise(F409)
	S154= PC[Out]=addr+4                                        PC-Hold(S141,S152,S153)
	S155= CtrlIR=0                                              Premise(F417)
	S156= [IR]={31,rT,rA,rB,1296}                               IR-Hold(S143,S155)
	S157= CtrlALUOut=0                                          Premise(F424)
	S158= [ALUOut]=b-a+ca                                       ALUOut-Hold(S145,S157)
	S159= CtrlCAReg=0                                           Premise(F425)
	S160= [CAReg]=Carry(b-a+ca)                                 CAReg-Hold(S147,S159)
	S161= CtrlOVReg=0                                           Premise(F426)
	S162= [OVReg]=OverFlow(b-a+ca)                              OVReg-Hold(S149,S161)
	S163= CtrlDR1bit=0                                          Premise(F427)
	S164= [DR1bit]=so|OverFlow(b-a+ca)                          DR1bit-Hold(S151,S163)

WB	S165= IR.Out6_10=rT                                         IR-Out(S156)
	S166= ALUOut.Out=b-a+ca                                     ALUOut-Out(S158)
	S167= CAReg.Out=Carry(b-a+ca)                               CAReg-Out(S160)
	S168= OVReg.Out=OverFlow(b-a+ca)                            OVReg-Out(S162)
	S169= DR1bit.Out=so|OverFlow(b-a+ca)                        DR1bit-Out(S164)
	S170= IR.Out6_10=>GPRegs.WReg                               Premise(F461)
	S171= GPRegs.WReg=rT                                        Path(S165,S170)
	S172= ALUOut.Out=>GPRegs.WData                              Premise(F462)
	S173= GPRegs.WData=b-a+ca                                   Path(S166,S172)
	S174= DR1bit.Out=>XER.SOIn                                  Premise(F463)
	S175= XER.SOIn=so|OverFlow(b-a+ca)                          Path(S169,S174)
	S176= CAReg.Out=>XER.CAIn                                   Premise(F464)
	S177= XER.CAIn=Carry(b-a+ca)                                Path(S167,S176)
	S178= OVReg.Out=>XER.OVIn                                   Premise(F465)
	S179= XER.OVIn=OverFlow(b-a+ca)                             Path(S168,S178)
	S180= CtrlPC=0                                              Premise(F468)
	S181= CtrlPCInc=0                                           Premise(F469)
	S182= PC[Out]=addr+4                                        PC-Hold(S154,S180,S181)
	S183= CtrlGPRegs=1                                          Premise(F478)
	S184= GPRegs[rT]=b-a+ca                                     GPRegs-Write(S171,S173,S183)
	S185= CtrlXERSO=1                                           Premise(F481)
	S186= XER[SO]=so|OverFlow(b-a+ca)                           XER-SO-Write(S175,S185)
	S187= CtrlXEROV=1                                           Premise(F482)
	S188= XER[OV]=OverFlow(b-a+ca)                              XER-OV-Write(S179,S187)
	S189= CtrlXERCA=1                                           Premise(F483)
	S190= XER[CA]=Carry(b-a+ca)                                 XER-CA-Write(S177,S189)

POST	S182= PC[Out]=addr+4                                        PC-Hold(S154,S180,S181)
	S184= GPRegs[rT]=b-a+ca                                     GPRegs-Write(S171,S173,S183)
	S186= XER[SO]=so|OverFlow(b-a+ca)                           XER-SO-Write(S175,S185)
	S188= XER[OV]=OverFlow(b-a+ca)                              XER-OV-Write(S179,S187)
	S190= XER[CA]=Carry(b-a+ca)                                 XER-CA-Write(S177,S189)

