
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rD,rA,rB,1297}                     Premise(F2)
	S3= ICache[addr]={31,rD,rA,rB,1297}                         Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)
	S6= XER[CA]=ca                                              Premise(F6)
	S7= XER[SO]=so                                              Premise(F7)

IF	S8= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S9= PC.Out=addr                                             PC-Out(S1)
	S10= PIDReg.Out=>IMMU.PID                                   Premise(F8)
	S11= IMMU.PID=pid                                           Path(S8,S10)
	S12= PC.Out=>IMMU.IEA                                       Premise(F9)
	S13= IMMU.IEA=addr                                          Path(S9,S12)
	S14= IMMU.Addr={pid,addr}                                   IMMU-Search(S11,S13)
	S15= IMMU.Addr=>IAddrReg.In                                 Premise(F10)
	S16= IAddrReg.In={pid,addr}                                 Path(S14,S15)
	S17= PC.Out=>ICache.IEA                                     Premise(F12)
	S18= ICache.IEA=addr                                        Path(S9,S17)
	S19= ICache.Out={31,rD,rA,rB,1297}                          ICache-Search(S18,S3)
	S20= ICache.Out=>ICacheReg.In                               Premise(F13)
	S21= ICacheReg.In={31,rD,rA,rB,1297}                        Path(S19,S20)
	S22= CtrlPC=0                                               Premise(F52)
	S23= CtrlPCInc=0                                            Premise(F53)
	S24= PC[Out]=addr                                           PC-Hold(S1,S22,S23)
	S25= CtrlIAddrReg=1                                         Premise(F54)
	S26= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S16,S25)
	S27= CtrlICacheReg=1                                        Premise(F57)
	S28= [ICacheReg]={31,rD,rA,rB,1297}                         ICacheReg-Write(S21,S27)
	S29= CtrlIMem=0                                             Premise(F59)
	S30= IMem[{pid,addr}]={31,rD,rA,rB,1297}                    IMem-Hold(S2,S29)
	S31= CtrlGPRegs=0                                           Premise(F62)
	S32= GPRegs[rA]=a                                           GPRegs-Hold(S4,S31)
	S33= GPRegs[rB]=b                                           GPRegs-Hold(S5,S31)
	S34= CtrlXERSO=0                                            Premise(F65)
	S35= XER[SO]=so                                             XER-SO-Hold(S7,S34)
	S36= CtrlXERCA=0                                            Premise(F67)
	S37= XER[CA]=ca                                             XER-CA-Hold(S6,S36)

IMMU	S38= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S26)
	S39= ICacheReg.Out={31,rD,rA,rB,1297}                       ICacheReg-Out(S28)
	S40= IAddrReg.Out=>IMem.RAddr                               Premise(F86)
	S41= IMem.RAddr={pid,addr}                                  Path(S38,S40)
	S42= IMem.Out={31,rD,rA,rB,1297}                            IMem-Read(S41,S30)
	S43= IMem.Out=>IRMux.MemData                                Premise(F87)
	S44= IRMux.MemData={31,rD,rA,rB,1297}                       Path(S42,S43)
	S45= ICacheReg.Out=>IRMux.CacheData                         Premise(F88)
	S46= IRMux.CacheData={31,rD,rA,rB,1297}                     Path(S39,S45)
	S47= IRMux.Out={31,rD,rA,rB,1297}                           IRMux-Select(S44,S46)
	S48= IRMux.Out=>IR.In                                       Premise(F91)
	S49= IR.In={31,rD,rA,rB,1297}                               Path(S47,S48)
	S50= CtrlPC=0                                               Premise(F121)
	S51= CtrlPCInc=1                                            Premise(F122)
	S52= PC[Out]=addr+4                                         PC-Inc(S24,S50,S51)
	S53= CtrlIR=1                                               Premise(F130)
	S54= [IR]={31,rD,rA,rB,1297}                                IR-Write(S49,S53)
	S55= CtrlGPRegs=0                                           Premise(F131)
	S56= GPRegs[rA]=a                                           GPRegs-Hold(S32,S55)
	S57= GPRegs[rB]=b                                           GPRegs-Hold(S33,S55)
	S58= CtrlXERSO=0                                            Premise(F134)
	S59= XER[SO]=so                                             XER-SO-Hold(S35,S58)
	S60= CtrlXERCA=0                                            Premise(F136)
	S61= XER[CA]=ca                                             XER-CA-Hold(S37,S60)

ID	S62= IR.Out11_15=rA                                         IR-Out(S54)
	S63= IR.Out16_20=rB                                         IR-Out(S54)
	S64= IR.Out11_15=>GPRegs.RReg1                              Premise(F164)
	S65= GPRegs.RReg1=rA                                        Path(S62,S64)
	S66= GPRegs.Rdata1=a                                        GPRegs-Read(S65,S56)
	S67= IR.Out16_20=>GPRegs.RReg2                              Premise(F165)
	S68= GPRegs.RReg2=rB                                        Path(S63,S67)
	S69= GPRegs.Rdata2=b                                        GPRegs-Read(S68,S57)
	S70= GPRegs.Rdata1=>A.In                                    Premise(F167)
	S71= A.In=a                                                 Path(S66,S70)
	S72= GPRegs.Rdata2=>B.In                                    Premise(F168)
	S73= B.In=b                                                 Path(S69,S72)
	S74= CtrlPC=0                                               Premise(F190)
	S75= CtrlPCInc=0                                            Premise(F191)
	S76= PC[Out]=addr+4                                         PC-Hold(S52,S74,S75)
	S77= CtrlIR=0                                               Premise(F199)
	S78= [IR]={31,rD,rA,rB,1297}                                IR-Hold(S54,S77)
	S79= CtrlA=1                                                Premise(F201)
	S80= [A]=a                                                  A-Write(S71,S79)
	S81= CtrlB=1                                                Premise(F202)
	S82= [B]=b                                                  B-Write(S73,S81)
	S83= CtrlXERSO=0                                            Premise(F203)
	S84= XER[SO]=so                                             XER-SO-Hold(S59,S83)
	S85= CtrlXERCA=0                                            Premise(F205)
	S86= XER[CA]=ca                                             XER-CA-Hold(S61,S85)

EX	S87= A.Out=a                                                A-Out(S80)
	S88= B.Out=b                                                B-Out(S82)
	S89= XER.SOOut=so                                           XER-SO-Out(S84)
	S90= XER.CAOut=ca                                           XER-CA-Out(S86)
	S91= A.Out=>ALU.A                                           Premise(F238)
	S92= ALU.A=a                                                Path(S87,S91)
	S93= B.Out=>ALU.B                                           Premise(F239)
	S94= ALU.B=b                                                Path(S88,S93)
	S95= XER.CAOut=>ALU.CAIn                                    Premise(F240)
	S96= ALU.CAIn=ca                                            Path(S90,S95)
	S97= ALU.Out=b-a+ca                                         ALU(S92,S94,S96)
	S98= ALU.CMP=Compare0(b-a+ca)                               ALU(S92,S94,S96)
	S99= ALU.OV=OverFlow(b-a+ca)                                ALU(S92,S94,S96)
	S100= ALU.CA=Carry(b-a+ca)                                  ALU(S92,S94,S96)
	S101= ALU.Out=>ALUOut.In                                    Premise(F242)
	S102= ALUOut.In=b-a+ca                                      Path(S97,S101)
	S103= ALU.CA=>CAReg.In                                      Premise(F243)
	S104= CAReg.In=Carry(b-a+ca)                                Path(S100,S103)
	S105= ALU.CMP=>DataCmb.A                                    Premise(F244)
	S106= DataCmb.A=Compare0(b-a+ca)                            Path(S98,S105)
	S107= ORGate.Out=>DataCmb.B                                 Premise(F245)
	S108= ALU.OV=>OVReg.In                                      Premise(F246)
	S109= OVReg.In=OverFlow(b-a+ca)                             Path(S99,S108)
	S110= XER.SOOut=>ORGate.A                                   Premise(F247)
	S111= ORGate.A=so                                           Path(S89,S110)
	S112= ALU.OV=>ORGate.B                                      Premise(F248)
	S113= ORGate.B=OverFlow(b-a+ca)                             Path(S99,S112)
	S114= ORGate.Out=so|OverFlow(b-a+ca)                        ORGate(S111,S113)
	S115= DataCmb.B=so|OverFlow(b-a+ca)                         Path(S114,S107)
	S116= DataCmb.Out={Compare0(b-a+ca),so|OverFlow(b-a+ca)}    DataCmb(S106,S115)
	S117= ORGate.Out=>DR1bit.In                                 Premise(F249)
	S118= DR1bit.In=so|OverFlow(b-a+ca)                         Path(S114,S117)
	S119= DataCmb.Out=>DR4bit.In                                Premise(F250)
	S120= DR4bit.In={Compare0(b-a+ca),so|OverFlow(b-a+ca)}      Path(S116,S119)
	S121= CtrlPC=0                                              Premise(F259)
	S122= CtrlPCInc=0                                           Premise(F260)
	S123= PC[Out]=addr+4                                        PC-Hold(S76,S121,S122)
	S124= CtrlIR=0                                              Premise(F268)
	S125= [IR]={31,rD,rA,rB,1297}                               IR-Hold(S78,S124)
	S126= CtrlALUOut=1                                          Premise(F275)
	S127= [ALUOut]=b-a+ca                                       ALUOut-Write(S102,S126)
	S128= CtrlCAReg=1                                           Premise(F276)
	S129= [CAReg]=Carry(b-a+ca)                                 CAReg-Write(S104,S128)
	S130= CtrlOVReg=1                                           Premise(F277)
	S131= [OVReg]=OverFlow(b-a+ca)                              OVReg-Write(S109,S130)
	S132= CtrlDR1bit=1                                          Premise(F278)
	S133= [DR1bit]=so|OverFlow(b-a+ca)                          DR1bit-Write(S118,S132)
	S134= CtrlDR4bit=1                                          Premise(F279)
	S135= [DR4bit]={Compare0(b-a+ca),so|OverFlow(b-a+ca)}       DR4bit-Write(S120,S134)

MEM	S136= CtrlPC=0                                              Premise(F328)
	S137= CtrlPCInc=0                                           Premise(F329)
	S138= PC[Out]=addr+4                                        PC-Hold(S123,S136,S137)
	S139= CtrlIR=0                                              Premise(F337)
	S140= [IR]={31,rD,rA,rB,1297}                               IR-Hold(S125,S139)
	S141= CtrlALUOut=0                                          Premise(F344)
	S142= [ALUOut]=b-a+ca                                       ALUOut-Hold(S127,S141)
	S143= CtrlCAReg=0                                           Premise(F345)
	S144= [CAReg]=Carry(b-a+ca)                                 CAReg-Hold(S129,S143)
	S145= CtrlOVReg=0                                           Premise(F346)
	S146= [OVReg]=OverFlow(b-a+ca)                              OVReg-Hold(S131,S145)
	S147= CtrlDR1bit=0                                          Premise(F347)
	S148= [DR1bit]=so|OverFlow(b-a+ca)                          DR1bit-Hold(S133,S147)
	S149= CtrlDR4bit=0                                          Premise(F348)
	S150= [DR4bit]={Compare0(b-a+ca),so|OverFlow(b-a+ca)}       DR4bit-Hold(S135,S149)

DMMU1	S151= CtrlPC=0                                              Premise(F397)
	S152= CtrlPCInc=0                                           Premise(F398)
	S153= PC[Out]=addr+4                                        PC-Hold(S138,S151,S152)
	S154= CtrlIR=0                                              Premise(F406)
	S155= [IR]={31,rD,rA,rB,1297}                               IR-Hold(S140,S154)
	S156= CtrlALUOut=0                                          Premise(F413)
	S157= [ALUOut]=b-a+ca                                       ALUOut-Hold(S142,S156)
	S158= CtrlCAReg=0                                           Premise(F414)
	S159= [CAReg]=Carry(b-a+ca)                                 CAReg-Hold(S144,S158)
	S160= CtrlOVReg=0                                           Premise(F415)
	S161= [OVReg]=OverFlow(b-a+ca)                              OVReg-Hold(S146,S160)
	S162= CtrlDR1bit=0                                          Premise(F416)
	S163= [DR1bit]=so|OverFlow(b-a+ca)                          DR1bit-Hold(S148,S162)
	S164= CtrlDR4bit=0                                          Premise(F417)
	S165= [DR4bit]={Compare0(b-a+ca),so|OverFlow(b-a+ca)}       DR4bit-Hold(S150,S164)

DMMU2	S166= CtrlPC=0                                              Premise(F466)
	S167= CtrlPCInc=0                                           Premise(F467)
	S168= PC[Out]=addr+4                                        PC-Hold(S153,S166,S167)
	S169= CtrlIR=0                                              Premise(F475)
	S170= [IR]={31,rD,rA,rB,1297}                               IR-Hold(S155,S169)
	S171= CtrlALUOut=0                                          Premise(F482)
	S172= [ALUOut]=b-a+ca                                       ALUOut-Hold(S157,S171)
	S173= CtrlCAReg=0                                           Premise(F483)
	S174= [CAReg]=Carry(b-a+ca)                                 CAReg-Hold(S159,S173)
	S175= CtrlOVReg=0                                           Premise(F484)
	S176= [OVReg]=OverFlow(b-a+ca)                              OVReg-Hold(S161,S175)
	S177= CtrlDR1bit=0                                          Premise(F485)
	S178= [DR1bit]=so|OverFlow(b-a+ca)                          DR1bit-Hold(S163,S177)
	S179= CtrlDR4bit=0                                          Premise(F486)
	S180= [DR4bit]={Compare0(b-a+ca),so|OverFlow(b-a+ca)}       DR4bit-Hold(S165,S179)

WB	S181= IR.Out6_10=rD                                         IR-Out(S170)
	S182= ALUOut.Out=b-a+ca                                     ALUOut-Out(S172)
	S183= CAReg.Out=Carry(b-a+ca)                               CAReg-Out(S174)
	S184= OVReg.Out=OverFlow(b-a+ca)                            OVReg-Out(S176)
	S185= DR1bit.Out=so|OverFlow(b-a+ca)                        DR1bit-Out(S178)
	S186= DR4bit.Out={Compare0(b-a+ca),so|OverFlow(b-a+ca)}     DR4bit-Out(S180)
	S187= IR.Out6_10=>GPRegs.WReg                               Premise(F527)
	S188= GPRegs.WReg=rD                                        Path(S181,S187)
	S189= ALUOut.Out=>GPRegs.WData                              Premise(F528)
	S190= GPRegs.WData=b-a+ca                                   Path(S182,S189)
	S191= DR4bit.Out=>CRRegs.CR0In                              Premise(F529)
	S192= CRRegs.CR0In={Compare0(b-a+ca),so|OverFlow(b-a+ca)}   Path(S186,S191)
	S193= DR1bit.Out=>XER.SOIn                                  Premise(F530)
	S194= XER.SOIn=so|OverFlow(b-a+ca)                          Path(S185,S193)
	S195= CAReg.Out=>XER.CAIn                                   Premise(F531)
	S196= XER.CAIn=Carry(b-a+ca)                                Path(S183,S195)
	S197= OVReg.Out=>XER.OVIn                                   Premise(F532)
	S198= XER.OVIn=OverFlow(b-a+ca)                             Path(S184,S197)
	S199= CtrlPC=0                                              Premise(F535)
	S200= CtrlPCInc=0                                           Premise(F536)
	S201= PC[Out]=addr+4                                        PC-Hold(S168,S199,S200)
	S202= CtrlGPRegs=1                                          Premise(F545)
	S203= GPRegs[rD]=b-a+ca                                     GPRegs-Write(S188,S190,S202)
	S204= CtrlXERSO=1                                           Premise(F548)
	S205= XER[SO]=so|OverFlow(b-a+ca)                           XER-SO-Write(S194,S204)
	S206= CtrlXEROV=1                                           Premise(F549)
	S207= XER[OV]=OverFlow(b-a+ca)                              XER-OV-Write(S198,S206)
	S208= CtrlXERCA=1                                           Premise(F550)
	S209= XER[CA]=Carry(b-a+ca)                                 XER-CA-Write(S196,S208)
	S210= CtrlCRRegsCR0=1                                       Premise(F557)
	S211= CRRegs[CR0]={Compare0(b-a+ca),so|OverFlow(b-a+ca)}    CRRegs-CR0-Write(S192,S210)

POST	S201= PC[Out]=addr+4                                        PC-Hold(S168,S199,S200)
	S203= GPRegs[rD]=b-a+ca                                     GPRegs-Write(S188,S190,S202)
	S205= XER[SO]=so|OverFlow(b-a+ca)                           XER-SO-Write(S194,S204)
	S207= XER[OV]=OverFlow(b-a+ca)                              XER-OV-Write(S198,S206)
	S209= XER[CA]=Carry(b-a+ca)                                 XER-CA-Write(S196,S208)
	S211= CRRegs[CR0]={Compare0(b-a+ca),so|OverFlow(b-a+ca)}    CRRegs-CR0-Write(S192,S210)

