
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rD,rA,rB,1297}                     Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[CA]=ca                                              Premise(F5)
	S6= XER[SO]=so                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= CtrlPC=0                                               Premise(F51)
	S17= CtrlPCInc=0                                            Premise(F52)
	S18= PC[Out]=addr                                           PC-Hold(S1,S16,S17)
	S19= CtrlIAddrReg=1                                         Premise(F53)
	S20= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S19)
	S21= CtrlIMem=0                                             Premise(F58)
	S22= IMem[{pid,addr}]={31,rD,rA,rB,1297}                    IMem-Hold(S2,S21)
	S23= CtrlGPRegs=0                                           Premise(F61)
	S24= GPRegs[rA]=a                                           GPRegs-Hold(S3,S23)
	S25= GPRegs[rB]=b                                           GPRegs-Hold(S4,S23)
	S26= CtrlXERSO=0                                            Premise(F64)
	S27= XER[SO]=so                                             XER-SO-Hold(S6,S26)
	S28= CtrlXERCA=0                                            Premise(F66)
	S29= XER[CA]=ca                                             XER-CA-Hold(S5,S28)

IMMU	S30= PC.Out=addr                                            PC-Out(S18)
	S31= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S20)
	S32= PC.Out=>ICache.IEA                                     Premise(F80)
	S33= ICache.IEA=addr                                        Path(S30,S32)
	S34= IAddrReg.Out=>IMem.RAddr                               Premise(F85)
	S35= IMem.RAddr={pid,addr}                                  Path(S31,S34)
	S36= IMem.Out={31,rD,rA,rB,1297}                            IMem-Read(S35,S22)
	S37= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S35,S22)
	S38= IMem.Out=>IRMux.MemData                                Premise(F86)
	S39= IRMux.MemData={31,rD,rA,rB,1297}                       Path(S36,S38)
	S40= IRMux.Out={31,rD,rA,rB,1297}                           IRMux-Select(S39)
	S41= IRMux.Out=>IR.In                                       Premise(F90)
	S42= IR.In={31,rD,rA,rB,1297}                               Path(S40,S41)
	S43= IMem.MEM8WordOut=>ICache.WData                         Premise(F91)
	S44= ICache.WData=IMemGet8Word({pid,addr})                  Path(S37,S43)
	S45= CtrlPC=0                                               Premise(F120)
	S46= CtrlPCInc=1                                            Premise(F121)
	S47= PC[Out]=addr+4                                         PC-Inc(S18,S45,S46)
	S48= CtrlICache=1                                           Premise(F124)
	S49= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S33,S44,S48)
	S50= CtrlIR=1                                               Premise(F129)
	S51= [IR]={31,rD,rA,rB,1297}                                IR-Write(S42,S50)
	S52= CtrlGPRegs=0                                           Premise(F130)
	S53= GPRegs[rA]=a                                           GPRegs-Hold(S24,S52)
	S54= GPRegs[rB]=b                                           GPRegs-Hold(S25,S52)
	S55= CtrlXERSO=0                                            Premise(F133)
	S56= XER[SO]=so                                             XER-SO-Hold(S27,S55)
	S57= CtrlXERCA=0                                            Premise(F135)
	S58= XER[CA]=ca                                             XER-CA-Hold(S29,S57)

ID	S59= IR.Out11_15=rA                                         IR-Out(S51)
	S60= IR.Out16_20=rB                                         IR-Out(S51)
	S61= IR.Out11_15=>GPRegs.RReg1                              Premise(F163)
	S62= GPRegs.RReg1=rA                                        Path(S59,S61)
	S63= GPRegs.Rdata1=a                                        GPRegs-Read(S62,S53)
	S64= IR.Out16_20=>GPRegs.RReg2                              Premise(F164)
	S65= GPRegs.RReg2=rB                                        Path(S60,S64)
	S66= GPRegs.Rdata2=b                                        GPRegs-Read(S65,S54)
	S67= GPRegs.Rdata1=>A.In                                    Premise(F166)
	S68= A.In=a                                                 Path(S63,S67)
	S69= GPRegs.Rdata2=>B.In                                    Premise(F167)
	S70= B.In=b                                                 Path(S66,S69)
	S71= CtrlPC=0                                               Premise(F189)
	S72= CtrlPCInc=0                                            Premise(F190)
	S73= PC[Out]=addr+4                                         PC-Hold(S47,S71,S72)
	S74= CtrlICache=0                                           Premise(F193)
	S75= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S49,S74)
	S76= CtrlIR=0                                               Premise(F198)
	S77= [IR]={31,rD,rA,rB,1297}                                IR-Hold(S51,S76)
	S78= CtrlA=1                                                Premise(F200)
	S79= [A]=a                                                  A-Write(S68,S78)
	S80= CtrlB=1                                                Premise(F201)
	S81= [B]=b                                                  B-Write(S70,S80)
	S82= CtrlXERSO=0                                            Premise(F202)
	S83= XER[SO]=so                                             XER-SO-Hold(S56,S82)
	S84= CtrlXERCA=0                                            Premise(F204)
	S85= XER[CA]=ca                                             XER-CA-Hold(S58,S84)

EX	S86= A.Out=a                                                A-Out(S79)
	S87= B.Out=b                                                B-Out(S81)
	S88= XER.SOOut=so                                           XER-SO-Out(S83)
	S89= XER.CAOut=ca                                           XER-CA-Out(S85)
	S90= A.Out=>ALU.A                                           Premise(F237)
	S91= ALU.A=a                                                Path(S86,S90)
	S92= B.Out=>ALU.B                                           Premise(F238)
	S93= ALU.B=b                                                Path(S87,S92)
	S94= XER.CAOut=>ALU.CAIn                                    Premise(F239)
	S95= ALU.CAIn=ca                                            Path(S89,S94)
	S96= ALU.Out=b-a+ca                                         ALU(S91,S93,S95)
	S97= ALU.CMP=Compare0(b-a+ca)                               ALU(S91,S93,S95)
	S98= ALU.OV=OverFlow(b-a+ca)                                ALU(S91,S93,S95)
	S99= ALU.CA=Carry(b-a+ca)                                   ALU(S91,S93,S95)
	S100= ALU.Out=>ALUOut.In                                    Premise(F241)
	S101= ALUOut.In=b-a+ca                                      Path(S96,S100)
	S102= ALU.CA=>CAReg.In                                      Premise(F242)
	S103= CAReg.In=Carry(b-a+ca)                                Path(S99,S102)
	S104= ALU.CMP=>DataCmb.A                                    Premise(F243)
	S105= DataCmb.A=Compare0(b-a+ca)                            Path(S97,S104)
	S106= ORGate.Out=>DataCmb.B                                 Premise(F244)
	S107= ALU.OV=>OVReg.In                                      Premise(F245)
	S108= OVReg.In=OverFlow(b-a+ca)                             Path(S98,S107)
	S109= XER.SOOut=>ORGate.A                                   Premise(F246)
	S110= ORGate.A=so                                           Path(S88,S109)
	S111= ALU.OV=>ORGate.B                                      Premise(F247)
	S112= ORGate.B=OverFlow(b-a+ca)                             Path(S98,S111)
	S113= ORGate.Out=so|OverFlow(b-a+ca)                        ORGate(S110,S112)
	S114= DataCmb.B=so|OverFlow(b-a+ca)                         Path(S113,S106)
	S115= DataCmb.Out={Compare0(b-a+ca),so|OverFlow(b-a+ca)}    DataCmb(S105,S114)
	S116= ORGate.Out=>DR1bit.In                                 Premise(F248)
	S117= DR1bit.In=so|OverFlow(b-a+ca)                         Path(S113,S116)
	S118= DataCmb.Out=>DR4bit.In                                Premise(F249)
	S119= DR4bit.In={Compare0(b-a+ca),so|OverFlow(b-a+ca)}      Path(S115,S118)
	S120= CtrlPC=0                                              Premise(F258)
	S121= CtrlPCInc=0                                           Premise(F259)
	S122= PC[Out]=addr+4                                        PC-Hold(S73,S120,S121)
	S123= CtrlICache=0                                          Premise(F262)
	S124= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S75,S123)
	S125= CtrlIR=0                                              Premise(F267)
	S126= [IR]={31,rD,rA,rB,1297}                               IR-Hold(S77,S125)
	S127= CtrlALUOut=1                                          Premise(F274)
	S128= [ALUOut]=b-a+ca                                       ALUOut-Write(S101,S127)
	S129= CtrlCAReg=1                                           Premise(F275)
	S130= [CAReg]=Carry(b-a+ca)                                 CAReg-Write(S103,S129)
	S131= CtrlOVReg=1                                           Premise(F276)
	S132= [OVReg]=OverFlow(b-a+ca)                              OVReg-Write(S108,S131)
	S133= CtrlDR1bit=1                                          Premise(F277)
	S134= [DR1bit]=so|OverFlow(b-a+ca)                          DR1bit-Write(S117,S133)
	S135= CtrlDR4bit=1                                          Premise(F278)
	S136= [DR4bit]={Compare0(b-a+ca),so|OverFlow(b-a+ca)}       DR4bit-Write(S119,S135)

MEM	S137= CtrlPC=0                                              Premise(F327)
	S138= CtrlPCInc=0                                           Premise(F328)
	S139= PC[Out]=addr+4                                        PC-Hold(S122,S137,S138)
	S140= CtrlICache=0                                          Premise(F331)
	S141= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S124,S140)
	S142= CtrlIR=0                                              Premise(F336)
	S143= [IR]={31,rD,rA,rB,1297}                               IR-Hold(S126,S142)
	S144= CtrlALUOut=0                                          Premise(F343)
	S145= [ALUOut]=b-a+ca                                       ALUOut-Hold(S128,S144)
	S146= CtrlCAReg=0                                           Premise(F344)
	S147= [CAReg]=Carry(b-a+ca)                                 CAReg-Hold(S130,S146)
	S148= CtrlOVReg=0                                           Premise(F345)
	S149= [OVReg]=OverFlow(b-a+ca)                              OVReg-Hold(S132,S148)
	S150= CtrlDR1bit=0                                          Premise(F346)
	S151= [DR1bit]=so|OverFlow(b-a+ca)                          DR1bit-Hold(S134,S150)
	S152= CtrlDR4bit=0                                          Premise(F347)
	S153= [DR4bit]={Compare0(b-a+ca),so|OverFlow(b-a+ca)}       DR4bit-Hold(S136,S152)

DMMU1	S154= CtrlPC=0                                              Premise(F396)
	S155= CtrlPCInc=0                                           Premise(F397)
	S156= PC[Out]=addr+4                                        PC-Hold(S139,S154,S155)
	S157= CtrlICache=0                                          Premise(F400)
	S158= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S141,S157)
	S159= CtrlIR=0                                              Premise(F405)
	S160= [IR]={31,rD,rA,rB,1297}                               IR-Hold(S143,S159)
	S161= CtrlALUOut=0                                          Premise(F412)
	S162= [ALUOut]=b-a+ca                                       ALUOut-Hold(S145,S161)
	S163= CtrlCAReg=0                                           Premise(F413)
	S164= [CAReg]=Carry(b-a+ca)                                 CAReg-Hold(S147,S163)
	S165= CtrlOVReg=0                                           Premise(F414)
	S166= [OVReg]=OverFlow(b-a+ca)                              OVReg-Hold(S149,S165)
	S167= CtrlDR1bit=0                                          Premise(F415)
	S168= [DR1bit]=so|OverFlow(b-a+ca)                          DR1bit-Hold(S151,S167)
	S169= CtrlDR4bit=0                                          Premise(F416)
	S170= [DR4bit]={Compare0(b-a+ca),so|OverFlow(b-a+ca)}       DR4bit-Hold(S153,S169)

DMMU2	S171= CtrlPC=0                                              Premise(F465)
	S172= CtrlPCInc=0                                           Premise(F466)
	S173= PC[Out]=addr+4                                        PC-Hold(S156,S171,S172)
	S174= CtrlICache=0                                          Premise(F469)
	S175= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S158,S174)
	S176= CtrlIR=0                                              Premise(F474)
	S177= [IR]={31,rD,rA,rB,1297}                               IR-Hold(S160,S176)
	S178= CtrlALUOut=0                                          Premise(F481)
	S179= [ALUOut]=b-a+ca                                       ALUOut-Hold(S162,S178)
	S180= CtrlCAReg=0                                           Premise(F482)
	S181= [CAReg]=Carry(b-a+ca)                                 CAReg-Hold(S164,S180)
	S182= CtrlOVReg=0                                           Premise(F483)
	S183= [OVReg]=OverFlow(b-a+ca)                              OVReg-Hold(S166,S182)
	S184= CtrlDR1bit=0                                          Premise(F484)
	S185= [DR1bit]=so|OverFlow(b-a+ca)                          DR1bit-Hold(S168,S184)
	S186= CtrlDR4bit=0                                          Premise(F485)
	S187= [DR4bit]={Compare0(b-a+ca),so|OverFlow(b-a+ca)}       DR4bit-Hold(S170,S186)

WB	S188= IR.Out6_10=rD                                         IR-Out(S177)
	S189= ALUOut.Out=b-a+ca                                     ALUOut-Out(S179)
	S190= CAReg.Out=Carry(b-a+ca)                               CAReg-Out(S181)
	S191= OVReg.Out=OverFlow(b-a+ca)                            OVReg-Out(S183)
	S192= DR1bit.Out=so|OverFlow(b-a+ca)                        DR1bit-Out(S185)
	S193= DR4bit.Out={Compare0(b-a+ca),so|OverFlow(b-a+ca)}     DR4bit-Out(S187)
	S194= IR.Out6_10=>GPRegs.WReg                               Premise(F526)
	S195= GPRegs.WReg=rD                                        Path(S188,S194)
	S196= ALUOut.Out=>GPRegs.WData                              Premise(F527)
	S197= GPRegs.WData=b-a+ca                                   Path(S189,S196)
	S198= DR4bit.Out=>CRRegs.CR0In                              Premise(F528)
	S199= CRRegs.CR0In={Compare0(b-a+ca),so|OverFlow(b-a+ca)}   Path(S193,S198)
	S200= DR1bit.Out=>XER.SOIn                                  Premise(F529)
	S201= XER.SOIn=so|OverFlow(b-a+ca)                          Path(S192,S200)
	S202= CAReg.Out=>XER.CAIn                                   Premise(F530)
	S203= XER.CAIn=Carry(b-a+ca)                                Path(S190,S202)
	S204= OVReg.Out=>XER.OVIn                                   Premise(F531)
	S205= XER.OVIn=OverFlow(b-a+ca)                             Path(S191,S204)
	S206= CtrlPC=0                                              Premise(F534)
	S207= CtrlPCInc=0                                           Premise(F535)
	S208= PC[Out]=addr+4                                        PC-Hold(S173,S206,S207)
	S209= CtrlICache=0                                          Premise(F538)
	S210= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S175,S209)
	S211= CtrlGPRegs=1                                          Premise(F544)
	S212= GPRegs[rD]=b-a+ca                                     GPRegs-Write(S195,S197,S211)
	S213= CtrlXERSO=1                                           Premise(F547)
	S214= XER[SO]=so|OverFlow(b-a+ca)                           XER-SO-Write(S201,S213)
	S215= CtrlXEROV=1                                           Premise(F548)
	S216= XER[OV]=OverFlow(b-a+ca)                              XER-OV-Write(S205,S215)
	S217= CtrlXERCA=1                                           Premise(F549)
	S218= XER[CA]=Carry(b-a+ca)                                 XER-CA-Write(S203,S217)
	S219= CtrlCRRegsCR0=1                                       Premise(F556)
	S220= CRRegs[CR0]={Compare0(b-a+ca),so|OverFlow(b-a+ca)}    CRRegs-CR0-Write(S199,S219)

POST	S208= PC[Out]=addr+4                                        PC-Hold(S173,S206,S207)
	S210= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S175,S209)
	S212= GPRegs[rD]=b-a+ca                                     GPRegs-Write(S195,S197,S211)
	S214= XER[SO]=so|OverFlow(b-a+ca)                           XER-SO-Write(S201,S213)
	S216= XER[OV]=OverFlow(b-a+ca)                              XER-OV-Write(S205,S215)
	S218= XER[CA]=Carry(b-a+ca)                                 XER-CA-Write(S203,S217)
	S220= CRRegs[CR0]={Compare0(b-a+ca),so|OverFlow(b-a+ca)}    CRRegs-CR0-Write(S199,S219)

