
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,464}                       Premise(F2)
	S3= ICache[addr]={31,rT,rA,0,464}                           Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= XER[CA]=ca                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F10)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={31,rT,rA,0,464}                            ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F11)
	S19= ICacheReg.In={31,rT,rA,0,464}                          Path(S17,S18)
	S20= CtrlPC=0                                               Premise(F38)
	S21= CtrlPCInc=0                                            Premise(F39)
	S22= PC[Out]=addr                                           PC-Hold(S1,S20,S21)
	S23= CtrlIAddrReg=1                                         Premise(F40)
	S24= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S23)
	S25= CtrlICacheReg=1                                        Premise(F43)
	S26= [ICacheReg]={31,rT,rA,0,464}                           ICacheReg-Write(S19,S25)
	S27= CtrlIMem=0                                             Premise(F45)
	S28= IMem[{pid,addr}]={31,rT,rA,0,464}                      IMem-Hold(S2,S27)
	S29= CtrlGPRegs=0                                           Premise(F48)
	S30= GPRegs[rA]=a                                           GPRegs-Hold(S4,S29)
	S31= CtrlXERCA=0                                            Premise(F53)
	S32= XER[CA]=ca                                             XER-CA-Hold(S5,S31)

IMMU	S33= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S24)
	S34= ICacheReg.Out={31,rT,rA,0,464}                         ICacheReg-Out(S26)
	S35= IAddrReg.Out=>IMem.RAddr                               Premise(F65)
	S36= IMem.RAddr={pid,addr}                                  Path(S33,S35)
	S37= IMem.Out={31,rT,rA,0,464}                              IMem-Read(S36,S28)
	S38= IMem.Out=>IRMux.MemData                                Premise(F66)
	S39= IRMux.MemData={31,rT,rA,0,464}                         Path(S37,S38)
	S40= ICacheReg.Out=>IRMux.CacheData                         Premise(F67)
	S41= IRMux.CacheData={31,rT,rA,0,464}                       Path(S34,S40)
	S42= IRMux.Out={31,rT,rA,0,464}                             IRMux-Select(S39,S41)
	S43= IRMux.Out=>IR.In                                       Premise(F70)
	S44= IR.In={31,rT,rA,0,464}                                 Path(S42,S43)
	S45= CtrlPC=0                                               Premise(F88)
	S46= CtrlPCInc=1                                            Premise(F89)
	S47= PC[Out]=addr+4                                         PC-Inc(S22,S45,S46)
	S48= CtrlIR=1                                               Premise(F97)
	S49= [IR]={31,rT,rA,0,464}                                  IR-Write(S44,S48)
	S50= CtrlGPRegs=0                                           Premise(F98)
	S51= GPRegs[rA]=a                                           GPRegs-Hold(S30,S50)
	S52= CtrlXERCA=0                                            Premise(F103)
	S53= XER[CA]=ca                                             XER-CA-Hold(S32,S52)

ID	S54= IR.Out11_15=rA                                         IR-Out(S49)
	S55= IR.Out11_15=>GPRegs.RReg1                              Premise(F124)
	S56= GPRegs.RReg1=rA                                        Path(S54,S55)
	S57= GPRegs.Rdata1=a                                        GPRegs-Read(S56,S51)
	S58= GPRegs.Rdata1=>A.In                                    Premise(F126)
	S59= A.In=a                                                 Path(S57,S58)
	S60= B.In=32'hFFFFFFFF                                      Premise(F127)
	S61= CtrlPC=0                                               Premise(F139)
	S62= CtrlPCInc=0                                            Premise(F140)
	S63= PC[Out]=addr+4                                         PC-Hold(S47,S61,S62)
	S64= CtrlIR=0                                               Premise(F148)
	S65= [IR]={31,rT,rA,0,464}                                  IR-Hold(S49,S64)
	S66= CtrlA=1                                                Premise(F150)
	S67= [A]=a                                                  A-Write(S59,S66)
	S68= CtrlB=1                                                Premise(F151)
	S69= [B]=32'hFFFFFFFF                                       B-Write(S60,S68)
	S70= CtrlXERCA=0                                            Premise(F154)
	S71= XER[CA]=ca                                             XER-CA-Hold(S53,S70)

EX	S72= A.Out=a                                                A-Out(S67)
	S73= B.Out=32'hFFFFFFFF                                     B-Out(S69)
	S74= XER.CAOut=ca                                           XER-CA-Out(S71)
	S75= A.Out=>ALU.A                                           Premise(F178)
	S76= ALU.A=a                                                Path(S72,S75)
	S77= B.Out=>ALU.B                                           Premise(F179)
	S78= ALU.B=32'hFFFFFFFF                                     Path(S73,S77)
	S79= XER.CAOut=>ALU.CAIn                                    Premise(F180)
	S80= ALU.CAIn=ca                                            Path(S74,S79)
	S81= ALU.Out=32'hFFFFFFFF-a+ca                              ALU(S76,S78,S80)
	S82= ALU.CA=Carry(32'hFFFFFFFF-a+ca)                        ALU(S76,S78,S80)
	S83= ALU.Out=>ALUOut.In                                     Premise(F182)
	S84= ALUOut.In=32'hFFFFFFFF-a+ca                            Path(S81,S83)
	S85= ALU.CA=>CAReg.In                                       Premise(F183)
	S86= CAReg.In=Carry(32'hFFFFFFFF-a+ca)                      Path(S82,S85)
	S87= CtrlPC=0                                               Premise(F189)
	S88= CtrlPCInc=0                                            Premise(F190)
	S89= PC[Out]=addr+4                                         PC-Hold(S63,S87,S88)
	S90= CtrlIR=0                                               Premise(F198)
	S91= [IR]={31,rT,rA,0,464}                                  IR-Hold(S65,S90)
	S92= CtrlALUOut=1                                           Premise(F205)
	S93= [ALUOut]=32'hFFFFFFFF-a+ca                             ALUOut-Write(S84,S92)
	S94= CtrlCAReg=1                                            Premise(F206)
	S95= [CAReg]=Carry(32'hFFFFFFFF-a+ca)                       CAReg-Write(S86,S94)

MEM	S96= CtrlPC=0                                               Premise(F239)
	S97= CtrlPCInc=0                                            Premise(F240)
	S98= PC[Out]=addr+4                                         PC-Hold(S89,S96,S97)
	S99= CtrlIR=0                                               Premise(F248)
	S100= [IR]={31,rT,rA,0,464}                                 IR-Hold(S91,S99)
	S101= CtrlALUOut=0                                          Premise(F255)
	S102= [ALUOut]=32'hFFFFFFFF-a+ca                            ALUOut-Hold(S93,S101)
	S103= CtrlCAReg=0                                           Premise(F256)
	S104= [CAReg]=Carry(32'hFFFFFFFF-a+ca)                      CAReg-Hold(S95,S103)

DMMU1	S105= CtrlPC=0                                              Premise(F289)
	S106= CtrlPCInc=0                                           Premise(F290)
	S107= PC[Out]=addr+4                                        PC-Hold(S98,S105,S106)
	S108= CtrlIR=0                                              Premise(F298)
	S109= [IR]={31,rT,rA,0,464}                                 IR-Hold(S100,S108)
	S110= CtrlALUOut=0                                          Premise(F305)
	S111= [ALUOut]=32'hFFFFFFFF-a+ca                            ALUOut-Hold(S102,S110)
	S112= CtrlCAReg=0                                           Premise(F306)
	S113= [CAReg]=Carry(32'hFFFFFFFF-a+ca)                      CAReg-Hold(S104,S112)

DMMU2	S114= CtrlPC=0                                              Premise(F339)
	S115= CtrlPCInc=0                                           Premise(F340)
	S116= PC[Out]=addr+4                                        PC-Hold(S107,S114,S115)
	S117= CtrlIR=0                                              Premise(F348)
	S118= [IR]={31,rT,rA,0,464}                                 IR-Hold(S109,S117)
	S119= CtrlALUOut=0                                          Premise(F355)
	S120= [ALUOut]=32'hFFFFFFFF-a+ca                            ALUOut-Hold(S111,S119)
	S121= CtrlCAReg=0                                           Premise(F356)
	S122= [CAReg]=Carry(32'hFFFFFFFF-a+ca)                      CAReg-Hold(S113,S121)

WB	S123= IR.Out6_10=rT                                         IR-Out(S118)
	S124= ALUOut.Out=32'hFFFFFFFF-a+ca                          ALUOut-Out(S120)
	S125= CAReg.Out=Carry(32'hFFFFFFFF-a+ca)                    CAReg-Out(S122)
	S126= IR.Out6_10=>GPRegs.WReg                               Premise(F384)
	S127= GPRegs.WReg=rT                                        Path(S123,S126)
	S128= ALUOut.Out=>GPRegs.WData                              Premise(F385)
	S129= GPRegs.WData=32'hFFFFFFFF-a+ca                        Path(S124,S128)
	S130= CAReg.Out=>XER.CAIn                                   Premise(F386)
	S131= XER.CAIn=Carry(32'hFFFFFFFF-a+ca)                     Path(S125,S130)
	S132= CtrlPC=0                                              Premise(F389)
	S133= CtrlPCInc=0                                           Premise(F390)
	S134= PC[Out]=addr+4                                        PC-Hold(S116,S132,S133)
	S135= CtrlGPRegs=1                                          Premise(F399)
	S136= GPRegs[rT]=32'hFFFFFFFF-a+ca                          GPRegs-Write(S127,S129,S135)
	S137= CtrlXERCA=1                                           Premise(F404)
	S138= XER[CA]=Carry(32'hFFFFFFFF-a+ca)                      XER-CA-Write(S131,S137)

POST	S134= PC[Out]=addr+4                                        PC-Hold(S116,S132,S133)
	S136= GPRegs[rT]=32'hFFFFFFFF-a+ca                          GPRegs-Write(S127,S129,S135)
	S138= XER[CA]=Carry(32'hFFFFFFFF-a+ca)                      XER-CA-Write(S131,S137)

