
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,1489}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[CA]=ca                                              Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F48)
	S16= CtrlPCInc=0                                            Premise(F49)
	S17= PC[Out]=addr                                           PC-Hold(S1,S15,S16)
	S18= CtrlIAddrReg=1                                         Premise(F50)
	S19= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S18)
	S20= CtrlIMem=0                                             Premise(F55)
	S21= IMem[{pid,addr}]={31,rT,rA,0,1489}                     IMem-Hold(S2,S20)
	S22= CtrlGPRegs=0                                           Premise(F58)
	S23= GPRegs[rA]=a                                           GPRegs-Hold(S3,S22)
	S24= CtrlXERSO=0                                            Premise(F61)
	S25= XER[SO]=so                                             XER-SO-Hold(S5,S24)
	S26= CtrlXERCA=0                                            Premise(F63)
	S27= XER[CA]=ca                                             XER-CA-Hold(S4,S26)

IMMU	S28= PC.Out=addr                                            PC-Out(S17)
	S29= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S19)
	S30= PC.Out=>ICache.IEA                                     Premise(F77)
	S31= ICache.IEA=addr                                        Path(S28,S30)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F82)
	S33= IMem.RAddr={pid,addr}                                  Path(S29,S32)
	S34= IMem.Out={31,rT,rA,0,1489}                             IMem-Read(S33,S21)
	S35= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S33,S21)
	S36= IMem.Out=>IRMux.MemData                                Premise(F83)
	S37= IRMux.MemData={31,rT,rA,0,1489}                        Path(S34,S36)
	S38= IRMux.Out={31,rT,rA,0,1489}                            IRMux-Select(S37)
	S39= IRMux.Out=>IR.In                                       Premise(F87)
	S40= IR.In={31,rT,rA,0,1489}                                Path(S38,S39)
	S41= IMem.MEM8WordOut=>ICache.WData                         Premise(F88)
	S42= ICache.WData=IMemGet8Word({pid,addr})                  Path(S35,S41)
	S43= CtrlPC=0                                               Premise(F115)
	S44= CtrlPCInc=1                                            Premise(F116)
	S45= PC[Out]=addr+4                                         PC-Inc(S17,S43,S44)
	S46= CtrlICache=1                                           Premise(F119)
	S47= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S31,S42,S46)
	S48= CtrlIR=1                                               Premise(F124)
	S49= [IR]={31,rT,rA,0,1489}                                 IR-Write(S40,S48)
	S50= CtrlGPRegs=0                                           Premise(F125)
	S51= GPRegs[rA]=a                                           GPRegs-Hold(S23,S50)
	S52= CtrlXERSO=0                                            Premise(F128)
	S53= XER[SO]=so                                             XER-SO-Hold(S25,S52)
	S54= CtrlXERCA=0                                            Premise(F130)
	S55= XER[CA]=ca                                             XER-CA-Hold(S27,S54)

ID	S56= IR.Out11_15=rA                                         IR-Out(S49)
	S57= IR.Out11_15=>GPRegs.RReg1                              Premise(F158)
	S58= GPRegs.RReg1=rA                                        Path(S56,S57)
	S59= GPRegs.Rdata1=a                                        GPRegs-Read(S58,S51)
	S60= GPRegs.Rdata1=>A.In                                    Premise(F160)
	S61= A.In=a                                                 Path(S59,S60)
	S62= B.In=32'hFFFFFFFF                                      Premise(F161)
	S63= CtrlPC=0                                               Premise(F183)
	S64= CtrlPCInc=0                                            Premise(F184)
	S65= PC[Out]=addr+4                                         PC-Hold(S45,S63,S64)
	S66= CtrlICache=0                                           Premise(F187)
	S67= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S47,S66)
	S68= CtrlIR=0                                               Premise(F192)
	S69= [IR]={31,rT,rA,0,1489}                                 IR-Hold(S49,S68)
	S70= CtrlA=1                                                Premise(F194)
	S71= [A]=a                                                  A-Write(S61,S70)
	S72= CtrlB=1                                                Premise(F195)
	S73= [B]=32'hFFFFFFFF                                       B-Write(S62,S72)
	S74= CtrlXERSO=0                                            Premise(F196)
	S75= XER[SO]=so                                             XER-SO-Hold(S53,S74)
	S76= CtrlXERCA=0                                            Premise(F198)
	S77= XER[CA]=ca                                             XER-CA-Hold(S55,S76)

EX	S78= A.Out=a                                                A-Out(S71)
	S79= B.Out=32'hFFFFFFFF                                     B-Out(S73)
	S80= XER.SOOut=so                                           XER-SO-Out(S75)
	S81= XER.CAOut=ca                                           XER-CA-Out(S77)
	S82= A.Out=>ALU.A                                           Premise(F229)
	S83= ALU.A=a                                                Path(S78,S82)
	S84= B.Out=>ALU.B                                           Premise(F230)
	S85= ALU.B=32'hFFFFFFFF                                     Path(S79,S84)
	S86= XER.CAOut=>ALU.CAIn                                    Premise(F231)
	S87= ALU.CAIn=ca                                            Path(S81,S86)
	S88= ALU.Out=32'hFFFFFFFF-a+ca                              ALU(S83,S85,S87)
	S89= ALU.CMP=Compare0(32'hFFFFFFFF-a+ca)                    ALU(S83,S85,S87)
	S90= ALU.OV=OverFlow(32'hFFFFFFFF-a+ca)                     ALU(S83,S85,S87)
	S91= ALU.CA=Carry(32'hFFFFFFFF-a+ca)                        ALU(S83,S85,S87)
	S92= ALU.Out=>ALUOut.In                                     Premise(F233)
	S93= ALUOut.In=32'hFFFFFFFF-a+ca                            Path(S88,S92)
	S94= ALU.CA=>CAReg.In                                       Premise(F234)
	S95= CAReg.In=Carry(32'hFFFFFFFF-a+ca)                      Path(S91,S94)
	S96= ALU.CMP=>DataCmb.A                                     Premise(F235)
	S97= DataCmb.A=Compare0(32'hFFFFFFFF-a+ca)                  Path(S89,S96)
	S98= ORGate.Out=>DataCmb.B                                  Premise(F236)
	S99= ALU.OV=>OVReg.In                                       Premise(F237)
	S100= OVReg.In=OverFlow(32'hFFFFFFFF-a+ca)                  Path(S90,S99)
	S101= XER.SOOut=>ORGate.A                                   Premise(F238)
	S102= ORGate.A=so                                           Path(S80,S101)
	S103= ALU.OV=>ORGate.B                                      Premise(F239)
	S104= ORGate.B=OverFlow(32'hFFFFFFFF-a+ca)                  Path(S90,S103)
	S105= ORGate.Out=so|OverFlow(32'hFFFFFFFF-a+ca)             ORGate(S102,S104)
	S106= DataCmb.B=so|OverFlow(32'hFFFFFFFF-a+ca)              Path(S105,S98)
	S107= DataCmb.Out={Compare0(32'hFFFFFFFF-a+ca),so|OverFlow(32'hFFFFFFFF-a+ca)}DataCmb(S97,S106)
	S108= ORGate.Out=>DR1bit.In                                 Premise(F240)
	S109= DR1bit.In=so|OverFlow(32'hFFFFFFFF-a+ca)              Path(S105,S108)
	S110= DataCmb.Out=>DR4bit.In                                Premise(F241)
	S111= DR4bit.In={Compare0(32'hFFFFFFFF-a+ca),so|OverFlow(32'hFFFFFFFF-a+ca)}Path(S107,S110)
	S112= CtrlPC=0                                              Premise(F250)
	S113= CtrlPCInc=0                                           Premise(F251)
	S114= PC[Out]=addr+4                                        PC-Hold(S65,S112,S113)
	S115= CtrlICache=0                                          Premise(F254)
	S116= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S67,S115)
	S117= CtrlIR=0                                              Premise(F259)
	S118= [IR]={31,rT,rA,0,1489}                                IR-Hold(S69,S117)
	S119= CtrlALUOut=1                                          Premise(F266)
	S120= [ALUOut]=32'hFFFFFFFF-a+ca                            ALUOut-Write(S93,S119)
	S121= CtrlCAReg=1                                           Premise(F267)
	S122= [CAReg]=Carry(32'hFFFFFFFF-a+ca)                      CAReg-Write(S95,S121)
	S123= CtrlOVReg=1                                           Premise(F268)
	S124= [OVReg]=OverFlow(32'hFFFFFFFF-a+ca)                   OVReg-Write(S100,S123)
	S125= CtrlDR1bit=1                                          Premise(F269)
	S126= [DR1bit]=so|OverFlow(32'hFFFFFFFF-a+ca)               DR1bit-Write(S109,S125)
	S127= CtrlDR4bit=1                                          Premise(F270)
	S128= [DR4bit]={Compare0(32'hFFFFFFFF-a+ca),so|OverFlow(32'hFFFFFFFF-a+ca)}DR4bit-Write(S111,S127)

MEM	S129= CtrlPC=0                                              Premise(F317)
	S130= CtrlPCInc=0                                           Premise(F318)
	S131= PC[Out]=addr+4                                        PC-Hold(S114,S129,S130)
	S132= CtrlICache=0                                          Premise(F321)
	S133= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S116,S132)
	S134= CtrlIR=0                                              Premise(F326)
	S135= [IR]={31,rT,rA,0,1489}                                IR-Hold(S118,S134)
	S136= CtrlALUOut=0                                          Premise(F333)
	S137= [ALUOut]=32'hFFFFFFFF-a+ca                            ALUOut-Hold(S120,S136)
	S138= CtrlCAReg=0                                           Premise(F334)
	S139= [CAReg]=Carry(32'hFFFFFFFF-a+ca)                      CAReg-Hold(S122,S138)
	S140= CtrlOVReg=0                                           Premise(F335)
	S141= [OVReg]=OverFlow(32'hFFFFFFFF-a+ca)                   OVReg-Hold(S124,S140)
	S142= CtrlDR1bit=0                                          Premise(F336)
	S143= [DR1bit]=so|OverFlow(32'hFFFFFFFF-a+ca)               DR1bit-Hold(S126,S142)
	S144= CtrlDR4bit=0                                          Premise(F337)
	S145= [DR4bit]={Compare0(32'hFFFFFFFF-a+ca),so|OverFlow(32'hFFFFFFFF-a+ca)}DR4bit-Hold(S128,S144)

DMMU1	S146= CtrlPC=0                                              Premise(F384)
	S147= CtrlPCInc=0                                           Premise(F385)
	S148= PC[Out]=addr+4                                        PC-Hold(S131,S146,S147)
	S149= CtrlICache=0                                          Premise(F388)
	S150= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S133,S149)
	S151= CtrlIR=0                                              Premise(F393)
	S152= [IR]={31,rT,rA,0,1489}                                IR-Hold(S135,S151)
	S153= CtrlALUOut=0                                          Premise(F400)
	S154= [ALUOut]=32'hFFFFFFFF-a+ca                            ALUOut-Hold(S137,S153)
	S155= CtrlCAReg=0                                           Premise(F401)
	S156= [CAReg]=Carry(32'hFFFFFFFF-a+ca)                      CAReg-Hold(S139,S155)
	S157= CtrlOVReg=0                                           Premise(F402)
	S158= [OVReg]=OverFlow(32'hFFFFFFFF-a+ca)                   OVReg-Hold(S141,S157)
	S159= CtrlDR1bit=0                                          Premise(F403)
	S160= [DR1bit]=so|OverFlow(32'hFFFFFFFF-a+ca)               DR1bit-Hold(S143,S159)
	S161= CtrlDR4bit=0                                          Premise(F404)
	S162= [DR4bit]={Compare0(32'hFFFFFFFF-a+ca),so|OverFlow(32'hFFFFFFFF-a+ca)}DR4bit-Hold(S145,S161)

DMMU2	S163= CtrlPC=0                                              Premise(F451)
	S164= CtrlPCInc=0                                           Premise(F452)
	S165= PC[Out]=addr+4                                        PC-Hold(S148,S163,S164)
	S166= CtrlICache=0                                          Premise(F455)
	S167= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S150,S166)
	S168= CtrlIR=0                                              Premise(F460)
	S169= [IR]={31,rT,rA,0,1489}                                IR-Hold(S152,S168)
	S170= CtrlALUOut=0                                          Premise(F467)
	S171= [ALUOut]=32'hFFFFFFFF-a+ca                            ALUOut-Hold(S154,S170)
	S172= CtrlCAReg=0                                           Premise(F468)
	S173= [CAReg]=Carry(32'hFFFFFFFF-a+ca)                      CAReg-Hold(S156,S172)
	S174= CtrlOVReg=0                                           Premise(F469)
	S175= [OVReg]=OverFlow(32'hFFFFFFFF-a+ca)                   OVReg-Hold(S158,S174)
	S176= CtrlDR1bit=0                                          Premise(F470)
	S177= [DR1bit]=so|OverFlow(32'hFFFFFFFF-a+ca)               DR1bit-Hold(S160,S176)
	S178= CtrlDR4bit=0                                          Premise(F471)
	S179= [DR4bit]={Compare0(32'hFFFFFFFF-a+ca),so|OverFlow(32'hFFFFFFFF-a+ca)}DR4bit-Hold(S162,S178)

WB	S180= IR.Out6_10=rT                                         IR-Out(S169)
	S181= ALUOut.Out=32'hFFFFFFFF-a+ca                          ALUOut-Out(S171)
	S182= CAReg.Out=Carry(32'hFFFFFFFF-a+ca)                    CAReg-Out(S173)
	S183= OVReg.Out=OverFlow(32'hFFFFFFFF-a+ca)                 OVReg-Out(S175)
	S184= DR1bit.Out=so|OverFlow(32'hFFFFFFFF-a+ca)             DR1bit-Out(S177)
	S185= DR4bit.Out={Compare0(32'hFFFFFFFF-a+ca),so|OverFlow(32'hFFFFFFFF-a+ca)}DR4bit-Out(S179)
	S186= IR.Out6_10=>GPRegs.WReg                               Premise(F510)
	S187= GPRegs.WReg=rT                                        Path(S180,S186)
	S188= ALUOut.Out=>GPRegs.WData                              Premise(F511)
	S189= GPRegs.WData=32'hFFFFFFFF-a+ca                        Path(S181,S188)
	S190= DR4bit.Out=>CRRegs.CR0In                              Premise(F512)
	S191= CRRegs.CR0In={Compare0(32'hFFFFFFFF-a+ca),so|OverFlow(32'hFFFFFFFF-a+ca)}Path(S185,S190)
	S192= DR1bit.Out=>XER.SOIn                                  Premise(F513)
	S193= XER.SOIn=so|OverFlow(32'hFFFFFFFF-a+ca)               Path(S184,S192)
	S194= CAReg.Out=>XER.CAIn                                   Premise(F514)
	S195= XER.CAIn=Carry(32'hFFFFFFFF-a+ca)                     Path(S182,S194)
	S196= OVReg.Out=>XER.OVIn                                   Premise(F515)
	S197= XER.OVIn=OverFlow(32'hFFFFFFFF-a+ca)                  Path(S183,S196)
	S198= CtrlPC=0                                              Premise(F518)
	S199= CtrlPCInc=0                                           Premise(F519)
	S200= PC[Out]=addr+4                                        PC-Hold(S165,S198,S199)
	S201= CtrlICache=0                                          Premise(F522)
	S202= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S167,S201)
	S203= CtrlGPRegs=1                                          Premise(F528)
	S204= GPRegs[rT]=32'hFFFFFFFF-a+ca                          GPRegs-Write(S187,S189,S203)
	S205= CtrlXERSO=1                                           Premise(F531)
	S206= XER[SO]=so|OverFlow(32'hFFFFFFFF-a+ca)                XER-SO-Write(S193,S205)
	S207= CtrlXEROV=1                                           Premise(F532)
	S208= XER[OV]=OverFlow(32'hFFFFFFFF-a+ca)                   XER-OV-Write(S197,S207)
	S209= CtrlXERCA=1                                           Premise(F533)
	S210= XER[CA]=Carry(32'hFFFFFFFF-a+ca)                      XER-CA-Write(S195,S209)
	S211= CtrlCRRegsCR0=1                                       Premise(F540)
	S212= CRRegs[CR0]={Compare0(32'hFFFFFFFF-a+ca),so|OverFlow(32'hFFFFFFFF-a+ca)}CRRegs-CR0-Write(S191,S211)

POST	S200= PC[Out]=addr+4                                        PC-Hold(S165,S198,S199)
	S202= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S167,S201)
	S204= GPRegs[rT]=32'hFFFFFFFF-a+ca                          GPRegs-Write(S187,S189,S203)
	S206= XER[SO]=so|OverFlow(32'hFFFFFFFF-a+ca)                XER-SO-Write(S193,S205)
	S208= XER[OV]=OverFlow(32'hFFFFFFFF-a+ca)                   XER-OV-Write(S197,S207)
	S210= XER[CA]=Carry(32'hFFFFFFFF-a+ca)                      XER-CA-Write(S195,S209)
	S212= CRRegs[CR0]={Compare0(32'hFFFFFFFF-a+ca),so|OverFlow(32'hFFFFFFFF-a+ca)}CRRegs-CR0-Write(S191,S211)

