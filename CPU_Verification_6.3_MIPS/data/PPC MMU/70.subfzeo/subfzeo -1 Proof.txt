
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,1424}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[CA]=ca                                              Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F44)
	S16= CtrlPCInc=0                                            Premise(F45)
	S17= PC[Out]=addr                                           PC-Hold(S1,S15,S16)
	S18= CtrlIAddrReg=1                                         Premise(F46)
	S19= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S18)
	S20= CtrlIMem=0                                             Premise(F51)
	S21= IMem[{pid,addr}]={31,rT,rA,0,1424}                     IMem-Hold(S2,S20)
	S22= CtrlGPRegs=0                                           Premise(F54)
	S23= GPRegs[rA]=a                                           GPRegs-Hold(S3,S22)
	S24= CtrlXERSO=0                                            Premise(F57)
	S25= XER[SO]=so                                             XER-SO-Hold(S5,S24)
	S26= CtrlXERCA=0                                            Premise(F59)
	S27= XER[CA]=ca                                             XER-CA-Hold(S4,S26)

IMMU	S28= PC.Out=addr                                            PC-Out(S17)
	S29= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S19)
	S30= PC.Out=>ICache.IEA                                     Premise(F68)
	S31= ICache.IEA=addr                                        Path(S28,S30)
	S32= IAddrReg.Out=>IMem.RAddr                               Premise(F73)
	S33= IMem.RAddr={pid,addr}                                  Path(S29,S32)
	S34= IMem.Out={31,rT,rA,0,1424}                             IMem-Read(S33,S21)
	S35= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S33,S21)
	S36= IMem.Out=>IRMux.MemData                                Premise(F74)
	S37= IRMux.MemData={31,rT,rA,0,1424}                        Path(S34,S36)
	S38= IRMux.Out={31,rT,rA,0,1424}                            IRMux-Select(S37)
	S39= IRMux.Out=>IR.In                                       Premise(F78)
	S40= IR.In={31,rT,rA,0,1424}                                Path(S38,S39)
	S41= IMem.MEM8WordOut=>ICache.WData                         Premise(F79)
	S42= ICache.WData=IMemGet8Word({pid,addr})                  Path(S35,S41)
	S43= CtrlPC=0                                               Premise(F102)
	S44= CtrlPCInc=1                                            Premise(F103)
	S45= PC[Out]=addr+4                                         PC-Inc(S17,S43,S44)
	S46= CtrlICache=1                                           Premise(F106)
	S47= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S31,S42,S46)
	S48= CtrlIR=1                                               Premise(F111)
	S49= [IR]={31,rT,rA,0,1424}                                 IR-Write(S40,S48)
	S50= CtrlGPRegs=0                                           Premise(F112)
	S51= GPRegs[rA]=a                                           GPRegs-Hold(S23,S50)
	S52= CtrlXERSO=0                                            Premise(F115)
	S53= XER[SO]=so                                             XER-SO-Hold(S25,S52)
	S54= CtrlXERCA=0                                            Premise(F117)
	S55= XER[CA]=ca                                             XER-CA-Hold(S27,S54)

ID	S56= IR.Out11_15=rA                                         IR-Out(S49)
	S57= IR.Out11_15=>GPRegs.RReg1                              Premise(F140)
	S58= GPRegs.RReg1=rA                                        Path(S56,S57)
	S59= GPRegs.Rdata1=a                                        GPRegs-Read(S58,S51)
	S60= GPRegs.Rdata1=>A.In                                    Premise(F142)
	S61= A.In=a                                                 Path(S59,S60)
	S62= B.In=32'b0                                             Premise(F143)
	S63= CtrlPC=0                                               Premise(F161)
	S64= CtrlPCInc=0                                            Premise(F162)
	S65= PC[Out]=addr+4                                         PC-Hold(S45,S63,S64)
	S66= CtrlICache=0                                           Premise(F165)
	S67= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S47,S66)
	S68= CtrlIR=0                                               Premise(F170)
	S69= [IR]={31,rT,rA,0,1424}                                 IR-Hold(S49,S68)
	S70= CtrlA=1                                                Premise(F172)
	S71= [A]=a                                                  A-Write(S61,S70)
	S72= CtrlB=1                                                Premise(F173)
	S73= [B]=32'b0                                              B-Write(S62,S72)
	S74= CtrlXERSO=0                                            Premise(F174)
	S75= XER[SO]=so                                             XER-SO-Hold(S53,S74)
	S76= CtrlXERCA=0                                            Premise(F176)
	S77= XER[CA]=ca                                             XER-CA-Hold(S55,S76)

EX	S78= A.Out=a                                                A-Out(S71)
	S79= B.Out=32'b0                                            B-Out(S73)
	S80= XER.SOOut=so                                           XER-SO-Out(S75)
	S81= XER.CAOut=ca                                           XER-CA-Out(S77)
	S82= A.Out=>ALU.A                                           Premise(F202)
	S83= ALU.A=a                                                Path(S78,S82)
	S84= B.Out=>ALU.B                                           Premise(F203)
	S85= ALU.B=32'b0                                            Path(S79,S84)
	S86= XER.CAOut=>ALU.CAIn                                    Premise(F204)
	S87= ALU.CAIn=ca                                            Path(S81,S86)
	S88= ALU.Out=32'b0-a+ca                                     ALU(S83,S85,S87)
	S89= ALU.OV=OverFlow(32'b0-a+ca)                            ALU(S83,S85,S87)
	S90= ALU.CA=Carry(32'b0-a+ca)                               ALU(S83,S85,S87)
	S91= ALU.Out=>ALUOut.In                                     Premise(F206)
	S92= ALUOut.In=32'b0-a+ca                                   Path(S88,S91)
	S93= ALU.CA=>CAReg.In                                       Premise(F207)
	S94= CAReg.In=Carry(32'b0-a+ca)                             Path(S90,S93)
	S95= ALU.OV=>OVReg.In                                       Premise(F208)
	S96= OVReg.In=OverFlow(32'b0-a+ca)                          Path(S89,S95)
	S97= XER.SOOut=>ORGate.A                                    Premise(F209)
	S98= ORGate.A=so                                            Path(S80,S97)
	S99= ALU.OV=>ORGate.B                                       Premise(F210)
	S100= ORGate.B=OverFlow(32'b0-a+ca)                         Path(S89,S99)
	S101= ORGate.Out=so|OverFlow(32'b0-a+ca)                    ORGate(S98,S100)
	S102= ORGate.Out=>DR1bit.In                                 Premise(F211)
	S103= DR1bit.In=so|OverFlow(32'b0-a+ca)                     Path(S101,S102)
	S104= CtrlPC=0                                              Premise(F219)
	S105= CtrlPCInc=0                                           Premise(F220)
	S106= PC[Out]=addr+4                                        PC-Hold(S65,S104,S105)
	S107= CtrlICache=0                                          Premise(F223)
	S108= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S67,S107)
	S109= CtrlIR=0                                              Premise(F228)
	S110= [IR]={31,rT,rA,0,1424}                                IR-Hold(S69,S109)
	S111= CtrlALUOut=1                                          Premise(F235)
	S112= [ALUOut]=32'b0-a+ca                                   ALUOut-Write(S92,S111)
	S113= CtrlCAReg=1                                           Premise(F236)
	S114= [CAReg]=Carry(32'b0-a+ca)                             CAReg-Write(S94,S113)
	S115= CtrlOVReg=1                                           Premise(F237)
	S116= [OVReg]=OverFlow(32'b0-a+ca)                          OVReg-Write(S96,S115)
	S117= CtrlDR1bit=1                                          Premise(F238)
	S118= [DR1bit]=so|OverFlow(32'b0-a+ca)                      DR1bit-Write(S103,S117)

MEM	S119= CtrlPC=0                                              Premise(F277)
	S120= CtrlPCInc=0                                           Premise(F278)
	S121= PC[Out]=addr+4                                        PC-Hold(S106,S119,S120)
	S122= CtrlICache=0                                          Premise(F281)
	S123= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S108,S122)
	S124= CtrlIR=0                                              Premise(F286)
	S125= [IR]={31,rT,rA,0,1424}                                IR-Hold(S110,S124)
	S126= CtrlALUOut=0                                          Premise(F293)
	S127= [ALUOut]=32'b0-a+ca                                   ALUOut-Hold(S112,S126)
	S128= CtrlCAReg=0                                           Premise(F294)
	S129= [CAReg]=Carry(32'b0-a+ca)                             CAReg-Hold(S114,S128)
	S130= CtrlOVReg=0                                           Premise(F295)
	S131= [OVReg]=OverFlow(32'b0-a+ca)                          OVReg-Hold(S116,S130)
	S132= CtrlDR1bit=0                                          Premise(F296)
	S133= [DR1bit]=so|OverFlow(32'b0-a+ca)                      DR1bit-Hold(S118,S132)

DMMU1	S134= CtrlPC=0                                              Premise(F335)
	S135= CtrlPCInc=0                                           Premise(F336)
	S136= PC[Out]=addr+4                                        PC-Hold(S121,S134,S135)
	S137= CtrlICache=0                                          Premise(F339)
	S138= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S123,S137)
	S139= CtrlIR=0                                              Premise(F344)
	S140= [IR]={31,rT,rA,0,1424}                                IR-Hold(S125,S139)
	S141= CtrlALUOut=0                                          Premise(F351)
	S142= [ALUOut]=32'b0-a+ca                                   ALUOut-Hold(S127,S141)
	S143= CtrlCAReg=0                                           Premise(F352)
	S144= [CAReg]=Carry(32'b0-a+ca)                             CAReg-Hold(S129,S143)
	S145= CtrlOVReg=0                                           Premise(F353)
	S146= [OVReg]=OverFlow(32'b0-a+ca)                          OVReg-Hold(S131,S145)
	S147= CtrlDR1bit=0                                          Premise(F354)
	S148= [DR1bit]=so|OverFlow(32'b0-a+ca)                      DR1bit-Hold(S133,S147)

DMMU2	S149= CtrlPC=0                                              Premise(F393)
	S150= CtrlPCInc=0                                           Premise(F394)
	S151= PC[Out]=addr+4                                        PC-Hold(S136,S149,S150)
	S152= CtrlICache=0                                          Premise(F397)
	S153= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S138,S152)
	S154= CtrlIR=0                                              Premise(F402)
	S155= [IR]={31,rT,rA,0,1424}                                IR-Hold(S140,S154)
	S156= CtrlALUOut=0                                          Premise(F409)
	S157= [ALUOut]=32'b0-a+ca                                   ALUOut-Hold(S142,S156)
	S158= CtrlCAReg=0                                           Premise(F410)
	S159= [CAReg]=Carry(32'b0-a+ca)                             CAReg-Hold(S144,S158)
	S160= CtrlOVReg=0                                           Premise(F411)
	S161= [OVReg]=OverFlow(32'b0-a+ca)                          OVReg-Hold(S146,S160)
	S162= CtrlDR1bit=0                                          Premise(F412)
	S163= [DR1bit]=so|OverFlow(32'b0-a+ca)                      DR1bit-Hold(S148,S162)

WB	S164= IR.Out6_10=rT                                         IR-Out(S155)
	S165= ALUOut.Out=32'b0-a+ca                                 ALUOut-Out(S157)
	S166= CAReg.Out=Carry(32'b0-a+ca)                           CAReg-Out(S159)
	S167= OVReg.Out=OverFlow(32'b0-a+ca)                        OVReg-Out(S161)
	S168= DR1bit.Out=so|OverFlow(32'b0-a+ca)                    DR1bit-Out(S163)
	S169= IR.Out6_10=>GPRegs.WReg                               Premise(F444)
	S170= GPRegs.WReg=rT                                        Path(S164,S169)
	S171= ALUOut.Out=>GPRegs.WData                              Premise(F445)
	S172= GPRegs.WData=32'b0-a+ca                               Path(S165,S171)
	S173= DR1bit.Out=>XER.SOIn                                  Premise(F446)
	S174= XER.SOIn=so|OverFlow(32'b0-a+ca)                      Path(S168,S173)
	S175= CAReg.Out=>XER.CAIn                                   Premise(F447)
	S176= XER.CAIn=Carry(32'b0-a+ca)                            Path(S166,S175)
	S177= OVReg.Out=>XER.OVIn                                   Premise(F448)
	S178= XER.OVIn=OverFlow(32'b0-a+ca)                         Path(S167,S177)
	S179= CtrlPC=0                                              Premise(F451)
	S180= CtrlPCInc=0                                           Premise(F452)
	S181= PC[Out]=addr+4                                        PC-Hold(S151,S179,S180)
	S182= CtrlICache=0                                          Premise(F455)
	S183= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S153,S182)
	S184= CtrlGPRegs=1                                          Premise(F461)
	S185= GPRegs[rT]=32'b0-a+ca                                 GPRegs-Write(S170,S172,S184)
	S186= CtrlXERSO=1                                           Premise(F464)
	S187= XER[SO]=so|OverFlow(32'b0-a+ca)                       XER-SO-Write(S174,S186)
	S188= CtrlXEROV=1                                           Premise(F465)
	S189= XER[OV]=OverFlow(32'b0-a+ca)                          XER-OV-Write(S178,S188)
	S190= CtrlXERCA=1                                           Premise(F466)
	S191= XER[CA]=Carry(32'b0-a+ca)                             XER-CA-Write(S176,S190)

POST	S181= PC[Out]=addr+4                                        PC-Hold(S151,S179,S180)
	S183= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S153,S182)
	S185= GPRegs[rT]=32'b0-a+ca                                 GPRegs-Write(S170,S172,S184)
	S187= XER[SO]=so|OverFlow(32'b0-a+ca)                       XER-SO-Write(S174,S186)
	S189= XER[OV]=OverFlow(32'b0-a+ca)                          XER-OV-Write(S178,S188)
	S191= XER[CA]=Carry(32'b0-a+ca)                             XER-CA-Write(S176,S190)

