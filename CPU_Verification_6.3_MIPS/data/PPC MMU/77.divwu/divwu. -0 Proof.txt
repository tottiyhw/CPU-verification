
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,919}                      Premise(F2)
	S3= ICache[addr]={31,rT,rA,rB,919}                          Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= GPRegs[rB]=b                                            Premise(F5)
	S6= XER[SO]=so                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.Out=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMMU.PID                                    Premise(F7)
	S10= IMMU.PID=pid                                           Path(S7,S9)
	S11= PC.Out=>IMMU.IEA                                       Premise(F8)
	S12= IMMU.IEA=addr                                          Path(S8,S11)
	S13= IMMU.Addr={pid,addr}                                   IMMU-Search(S10,S12)
	S14= IMMU.Addr=>IAddrReg.In                                 Premise(F9)
	S15= IAddrReg.In={pid,addr}                                 Path(S13,S14)
	S16= PC.Out=>ICache.IEA                                     Premise(F11)
	S17= ICache.IEA=addr                                        Path(S8,S16)
	S18= ICache.Out={31,rT,rA,rB,919}                           ICache-Search(S17,S3)
	S19= ICache.Out=>ICacheReg.In                               Premise(F12)
	S20= ICacheReg.In={31,rT,rA,rB,919}                         Path(S18,S19)
	S21= CtrlPC=0                                               Premise(F42)
	S22= CtrlPCInc=0                                            Premise(F43)
	S23= PC[Out]=addr                                           PC-Hold(S1,S21,S22)
	S24= CtrlIAddrReg=1                                         Premise(F44)
	S25= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S15,S24)
	S26= CtrlICacheReg=1                                        Premise(F47)
	S27= [ICacheReg]={31,rT,rA,rB,919}                          ICacheReg-Write(S20,S26)
	S28= CtrlIMem=0                                             Premise(F49)
	S29= IMem[{pid,addr}]={31,rT,rA,rB,919}                     IMem-Hold(S2,S28)
	S30= CtrlGPRegs=0                                           Premise(F52)
	S31= GPRegs[rA]=a                                           GPRegs-Hold(S4,S30)
	S32= GPRegs[rB]=b                                           GPRegs-Hold(S5,S30)
	S33= CtrlXERSO=0                                            Premise(F56)
	S34= XER[SO]=so                                             XER-SO-Hold(S6,S33)

IMMU	S35= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S25)
	S36= ICacheReg.Out={31,rT,rA,rB,919}                        ICacheReg-Out(S27)
	S37= IAddrReg.Out=>IMem.RAddr                               Premise(F73)
	S38= IMem.RAddr={pid,addr}                                  Path(S35,S37)
	S39= IMem.Out={31,rT,rA,rB,919}                             IMem-Read(S38,S29)
	S40= IMem.Out=>IRMux.MemData                                Premise(F74)
	S41= IRMux.MemData={31,rT,rA,rB,919}                        Path(S39,S40)
	S42= ICacheReg.Out=>IRMux.CacheData                         Premise(F75)
	S43= IRMux.CacheData={31,rT,rA,rB,919}                      Path(S36,S42)
	S44= IRMux.Out={31,rT,rA,rB,919}                            IRMux-Select(S41,S43)
	S45= IRMux.Out=>IR.In                                       Premise(F78)
	S46= IR.In={31,rT,rA,rB,919}                                Path(S44,S45)
	S47= CtrlPC=0                                               Premise(F99)
	S48= CtrlPCInc=1                                            Premise(F100)
	S49= PC[Out]=addr+4                                         PC-Inc(S23,S47,S48)
	S50= CtrlIR=1                                               Premise(F108)
	S51= [IR]={31,rT,rA,rB,919}                                 IR-Write(S46,S50)
	S52= CtrlGPRegs=0                                           Premise(F109)
	S53= GPRegs[rA]=a                                           GPRegs-Hold(S31,S52)
	S54= GPRegs[rB]=b                                           GPRegs-Hold(S32,S52)
	S55= CtrlXERSO=0                                            Premise(F113)
	S56= XER[SO]=so                                             XER-SO-Hold(S34,S55)

ID	S57= IR.Out11_15=rA                                         IR-Out(S51)
	S58= IR.Out16_20=rB                                         IR-Out(S51)
	S59= IR.Out11_15=>GPRegs.RReg1                              Premise(F139)
	S60= GPRegs.RReg1=rA                                        Path(S57,S59)
	S61= GPRegs.Rdata1=a                                        GPRegs-Read(S60,S53)
	S62= IR.Out16_20=>GPRegs.RReg2                              Premise(F140)
	S63= GPRegs.RReg2=rB                                        Path(S58,S62)
	S64= GPRegs.Rdata2=b                                        GPRegs-Read(S63,S54)
	S65= GPRegs.Rdata1=>A.In                                    Premise(F142)
	S66= A.In=a                                                 Path(S61,S65)
	S67= GPRegs.Rdata2=>B.In                                    Premise(F143)
	S68= B.In=b                                                 Path(S64,S67)
	S69= CtrlPC=0                                               Premise(F156)
	S70= CtrlPCInc=0                                            Premise(F157)
	S71= PC[Out]=addr+4                                         PC-Hold(S49,S69,S70)
	S72= CtrlIR=0                                               Premise(F165)
	S73= [IR]={31,rT,rA,rB,919}                                 IR-Hold(S51,S72)
	S74= CtrlA=1                                                Premise(F167)
	S75= [A]=a                                                  A-Write(S66,S74)
	S76= CtrlB=1                                                Premise(F168)
	S77= [B]=b                                                  B-Write(S68,S76)
	S78= CtrlXERSO=0                                            Premise(F170)
	S79= XER[SO]=so                                             XER-SO-Hold(S56,S78)

EX	S80= A.Out=a                                                A-Out(S75)
	S81= B.Out=b                                                B-Out(S77)
	S82= XER.SOOut=so                                           XER-SO-Out(S79)
	S83= A.Out=>MDU.A                                           Premise(F201)
	S84= MDU.A=a                                                Path(S80,S83)
	S85= B.Out=>MDU.B                                           Premise(F202)
	S86= MDU.B=b                                                Path(S81,S85)
	S87= MDU.Out0_31=a/b                                        MDU(S84,S86)
	S88= MDU.CMP=Compare0(a/b)                                  MDU(S84,S86)
	S89= MDU.Out0_31=>MDUOut.In                                 Premise(F204)
	S90= MDUOut.In=a/b                                          Path(S87,S89)
	S91= MDU.CMP=>DataCmb.A                                     Premise(F205)
	S92= DataCmb.A=Compare0(a/b)                                Path(S88,S91)
	S93= XER.SOOut=>DataCmb.B                                   Premise(F206)
	S94= DataCmb.B=so                                           Path(S82,S93)
	S95= DataCmb.Out={Compare0(a/b),so}                         DataCmb(S92,S94)
	S96= DataCmb.Out=>DR4bit.In                                 Premise(F207)
	S97= DR4bit.In={Compare0(a/b),so}                           Path(S95,S96)
	S98= CtrlPC=0                                               Premise(F213)
	S99= CtrlPCInc=0                                            Premise(F214)
	S100= PC[Out]=addr+4                                        PC-Hold(S71,S98,S99)
	S101= CtrlIR=0                                              Premise(F222)
	S102= [IR]={31,rT,rA,rB,919}                                IR-Hold(S73,S101)
	S103= CtrlMDUOut=1                                          Premise(F226)
	S104= [MDUOut]=a/b                                          MDUOut-Write(S90,S103)
	S105= CtrlDR4bit=1                                          Premise(F230)
	S106= [DR4bit]={Compare0(a/b),so}                           DR4bit-Write(S97,S105)

MEM	S107= CtrlPC=0                                              Premise(F270)
	S108= CtrlPCInc=0                                           Premise(F271)
	S109= PC[Out]=addr+4                                        PC-Hold(S100,S107,S108)
	S110= CtrlIR=0                                              Premise(F279)
	S111= [IR]={31,rT,rA,rB,919}                                IR-Hold(S102,S110)
	S112= CtrlMDUOut=0                                          Premise(F283)
	S113= [MDUOut]=a/b                                          MDUOut-Hold(S104,S112)
	S114= CtrlDR4bit=0                                          Premise(F287)
	S115= [DR4bit]={Compare0(a/b),so}                           DR4bit-Hold(S106,S114)

DMMU1	S116= CtrlPC=0                                              Premise(F327)
	S117= CtrlPCInc=0                                           Premise(F328)
	S118= PC[Out]=addr+4                                        PC-Hold(S109,S116,S117)
	S119= CtrlIR=0                                              Premise(F336)
	S120= [IR]={31,rT,rA,rB,919}                                IR-Hold(S111,S119)
	S121= CtrlMDUOut=0                                          Premise(F340)
	S122= [MDUOut]=a/b                                          MDUOut-Hold(S113,S121)
	S123= CtrlDR4bit=0                                          Premise(F344)
	S124= [DR4bit]={Compare0(a/b),so}                           DR4bit-Hold(S115,S123)

DMMU2	S125= CtrlPC=0                                              Premise(F384)
	S126= CtrlPCInc=0                                           Premise(F385)
	S127= PC[Out]=addr+4                                        PC-Hold(S118,S125,S126)
	S128= CtrlIR=0                                              Premise(F393)
	S129= [IR]={31,rT,rA,rB,919}                                IR-Hold(S120,S128)
	S130= CtrlMDUOut=0                                          Premise(F397)
	S131= [MDUOut]=a/b                                          MDUOut-Hold(S122,S130)
	S132= CtrlDR4bit=0                                          Premise(F401)
	S133= [DR4bit]={Compare0(a/b),so}                           DR4bit-Hold(S124,S132)

WB	S134= IR.Out6_10=rT                                         IR-Out(S129)
	S135= MDUOut.Out=a/b                                        MDUOut-Out(S131)
	S136= DR4bit.Out={Compare0(a/b),so}                         DR4bit-Out(S133)
	S137= IR.Out6_10=>GPRegs.WReg                               Premise(F436)
	S138= GPRegs.WReg=rT                                        Path(S134,S137)
	S139= MDUOut.Out=>GPRegs.WData                              Premise(F437)
	S140= GPRegs.WData=a/b                                      Path(S135,S139)
	S141= DR4bit.Out=>CRRegs.CR0In                              Premise(F438)
	S142= CRRegs.CR0In={Compare0(a/b),so}                       Path(S136,S141)
	S143= CtrlPC=0                                              Premise(F441)
	S144= CtrlPCInc=0                                           Premise(F442)
	S145= PC[Out]=addr+4                                        PC-Hold(S127,S143,S144)
	S146= CtrlGPRegs=1                                          Premise(F451)
	S147= GPRegs[rT]=a/b                                        GPRegs-Write(S138,S140,S146)
	S148= CtrlCRRegsCR0=1                                       Premise(F460)
	S149= CRRegs[CR0]={Compare0(a/b),so}                        CRRegs-CR0-Write(S142,S148)

POST	S145= PC[Out]=addr+4                                        PC-Hold(S127,S143,S144)
	S147= GPRegs[rT]=a/b                                        GPRegs-Write(S138,S140,S146)
	S149= CRRegs[CR0]={Compare0(a/b),so}                        CRRegs-CR0-Write(S142,S148)

