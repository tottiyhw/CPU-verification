
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,1943}                     Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F47)
	S16= CtrlPCInc=0                                            Premise(F48)
	S17= PC[Out]=addr                                           PC-Hold(S1,S15,S16)
	S18= CtrlIAddrReg=1                                         Premise(F49)
	S19= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S18)
	S20= CtrlIMem=0                                             Premise(F54)
	S21= IMem[{pid,addr}]={31,rT,rA,rB,1943}                    IMem-Hold(S2,S20)
	S22= CtrlGPRegs=0                                           Premise(F57)
	S23= GPRegs[rA]=a                                           GPRegs-Hold(S3,S22)
	S24= GPRegs[rB]=b                                           GPRegs-Hold(S4,S22)
	S25= CtrlXERSO=0                                            Premise(F61)
	S26= XER[SO]=so                                             XER-SO-Hold(S5,S25)

IMMU	S27= PC.Out=addr                                            PC-Out(S17)
	S28= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S19)
	S29= PC.Out=>ICache.IEA                                     Premise(F75)
	S30= ICache.IEA=addr                                        Path(S27,S29)
	S31= IAddrReg.Out=>IMem.RAddr                               Premise(F80)
	S32= IMem.RAddr={pid,addr}                                  Path(S28,S31)
	S33= IMem.Out={31,rT,rA,rB,1943}                            IMem-Read(S32,S21)
	S34= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S32,S21)
	S35= IMem.Out=>IRMux.MemData                                Premise(F81)
	S36= IRMux.MemData={31,rT,rA,rB,1943}                       Path(S33,S35)
	S37= IRMux.Out={31,rT,rA,rB,1943}                           IRMux-Select(S36)
	S38= IRMux.Out=>IR.In                                       Premise(F85)
	S39= IR.In={31,rT,rA,rB,1943}                               Path(S37,S38)
	S40= IMem.MEM8WordOut=>ICache.WData                         Premise(F86)
	S41= ICache.WData=IMemGet8Word({pid,addr})                  Path(S34,S40)
	S42= CtrlPC=0                                               Premise(F112)
	S43= CtrlPCInc=1                                            Premise(F113)
	S44= PC[Out]=addr+4                                         PC-Inc(S17,S42,S43)
	S45= CtrlICache=1                                           Premise(F116)
	S46= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S30,S41,S45)
	S47= CtrlIR=1                                               Premise(F121)
	S48= [IR]={31,rT,rA,rB,1943}                                IR-Write(S39,S47)
	S49= CtrlGPRegs=0                                           Premise(F122)
	S50= GPRegs[rA]=a                                           GPRegs-Hold(S23,S49)
	S51= GPRegs[rB]=b                                           GPRegs-Hold(S24,S49)
	S52= CtrlXERSO=0                                            Premise(F126)
	S53= XER[SO]=so                                             XER-SO-Hold(S26,S52)

ID	S54= IR.Out11_15=rA                                         IR-Out(S48)
	S55= IR.Out16_20=rB                                         IR-Out(S48)
	S56= IR.Out11_15=>GPRegs.RReg1                              Premise(F154)
	S57= GPRegs.RReg1=rA                                        Path(S54,S56)
	S58= GPRegs.Rdata1=a                                        GPRegs-Read(S57,S50)
	S59= IR.Out16_20=>GPRegs.RReg2                              Premise(F155)
	S60= GPRegs.RReg2=rB                                        Path(S55,S59)
	S61= GPRegs.Rdata2=b                                        GPRegs-Read(S60,S51)
	S62= GPRegs.Rdata1=>A.In                                    Premise(F157)
	S63= A.In=a                                                 Path(S58,S62)
	S64= GPRegs.Rdata2=>B.In                                    Premise(F158)
	S65= B.In=b                                                 Path(S61,S64)
	S66= CtrlPC=0                                               Premise(F177)
	S67= CtrlPCInc=0                                            Premise(F178)
	S68= PC[Out]=addr+4                                         PC-Hold(S44,S66,S67)
	S69= CtrlICache=0                                           Premise(F181)
	S70= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S46,S69)
	S71= CtrlIR=0                                               Premise(F186)
	S72= [IR]={31,rT,rA,rB,1943}                                IR-Hold(S48,S71)
	S73= CtrlA=1                                                Premise(F188)
	S74= [A]=a                                                  A-Write(S63,S73)
	S75= CtrlB=1                                                Premise(F189)
	S76= [B]=b                                                  B-Write(S65,S75)
	S77= CtrlXERSO=0                                            Premise(F191)
	S78= XER[SO]=so                                             XER-SO-Hold(S53,S77)

EX	S79= A.Out=a                                                A-Out(S74)
	S80= B.Out=b                                                B-Out(S76)
	S81= XER.SOOut=so                                           XER-SO-Out(S78)
	S82= A.Out=>MDU.A                                           Premise(F224)
	S83= MDU.A=a                                                Path(S79,S82)
	S84= B.Out=>MDU.B                                           Premise(F225)
	S85= MDU.B=b                                                Path(S80,S84)
	S86= MDU.Out0_31=a/b                                        MDU(S83,S85)
	S87= MDU.CMP=Compare0(a/b)                                  MDU(S83,S85)
	S88= MDU.OV=OverFlow(a/b)                                   MDU(S83,S85)
	S89= MDU.Out0_31=>MDUOut.In                                 Premise(F227)
	S90= MDUOut.In=a/b                                          Path(S86,S89)
	S91= XER.SOOut=>ORGate.A                                    Premise(F228)
	S92= ORGate.A=so                                            Path(S81,S91)
	S93= MDU.OV=>ORGate.B                                       Premise(F229)
	S94= ORGate.B=OverFlow(a/b)                                 Path(S88,S93)
	S95= ORGate.Out=so|OverFlow(a/b)                            ORGate(S92,S94)
	S96= MDU.OV=>OVReg.In                                       Premise(F230)
	S97= OVReg.In=OverFlow(a/b)                                 Path(S88,S96)
	S98= MDU.CMP=>DataCmb.A                                     Premise(F231)
	S99= DataCmb.A=Compare0(a/b)                                Path(S87,S98)
	S100= ORGate.Out=>DataCmb.B                                 Premise(F232)
	S101= DataCmb.B=so|OverFlow(a/b)                            Path(S95,S100)
	S102= DataCmb.Out={Compare0(a/b),so|OverFlow(a/b)}          DataCmb(S99,S101)
	S103= ORGate.Out=>DR1bit.In                                 Premise(F233)
	S104= DR1bit.In=so|OverFlow(a/b)                            Path(S95,S103)
	S105= DataCmb.Out=>DR4bit.In                                Premise(F234)
	S106= DR4bit.In={Compare0(a/b),so|OverFlow(a/b)}            Path(S102,S105)
	S107= CtrlPC=0                                              Premise(F242)
	S108= CtrlPCInc=0                                           Premise(F243)
	S109= PC[Out]=addr+4                                        PC-Hold(S68,S107,S108)
	S110= CtrlICache=0                                          Premise(F246)
	S111= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S70,S110)
	S112= CtrlIR=0                                              Premise(F251)
	S113= [IR]={31,rT,rA,rB,1943}                               IR-Hold(S72,S112)
	S114= CtrlMDUOut=1                                          Premise(F255)
	S115= [MDUOut]=a/b                                          MDUOut-Write(S90,S114)
	S116= CtrlOVReg=1                                           Premise(F259)
	S117= [OVReg]=OverFlow(a/b)                                 OVReg-Write(S97,S116)
	S118= CtrlDR1bit=1                                          Premise(F260)
	S119= [DR1bit]=so|OverFlow(a/b)                             DR1bit-Write(S104,S118)
	S120= CtrlDR4bit=1                                          Premise(F261)
	S121= [DR4bit]={Compare0(a/b),so|OverFlow(a/b)}             DR4bit-Write(S106,S120)

MEM	S122= CtrlPC=0                                              Premise(F307)
	S123= CtrlPCInc=0                                           Premise(F308)
	S124= PC[Out]=addr+4                                        PC-Hold(S109,S122,S123)
	S125= CtrlICache=0                                          Premise(F311)
	S126= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S111,S125)
	S127= CtrlIR=0                                              Premise(F316)
	S128= [IR]={31,rT,rA,rB,1943}                               IR-Hold(S113,S127)
	S129= CtrlMDUOut=0                                          Premise(F320)
	S130= [MDUOut]=a/b                                          MDUOut-Hold(S115,S129)
	S131= CtrlOVReg=0                                           Premise(F324)
	S132= [OVReg]=OverFlow(a/b)                                 OVReg-Hold(S117,S131)
	S133= CtrlDR1bit=0                                          Premise(F325)
	S134= [DR1bit]=so|OverFlow(a/b)                             DR1bit-Hold(S119,S133)
	S135= CtrlDR4bit=0                                          Premise(F326)
	S136= [DR4bit]={Compare0(a/b),so|OverFlow(a/b)}             DR4bit-Hold(S121,S135)

DMMU1	S137= CtrlPC=0                                              Premise(F372)
	S138= CtrlPCInc=0                                           Premise(F373)
	S139= PC[Out]=addr+4                                        PC-Hold(S124,S137,S138)
	S140= CtrlICache=0                                          Premise(F376)
	S141= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S126,S140)
	S142= CtrlIR=0                                              Premise(F381)
	S143= [IR]={31,rT,rA,rB,1943}                               IR-Hold(S128,S142)
	S144= CtrlMDUOut=0                                          Premise(F385)
	S145= [MDUOut]=a/b                                          MDUOut-Hold(S130,S144)
	S146= CtrlOVReg=0                                           Premise(F389)
	S147= [OVReg]=OverFlow(a/b)                                 OVReg-Hold(S132,S146)
	S148= CtrlDR1bit=0                                          Premise(F390)
	S149= [DR1bit]=so|OverFlow(a/b)                             DR1bit-Hold(S134,S148)
	S150= CtrlDR4bit=0                                          Premise(F391)
	S151= [DR4bit]={Compare0(a/b),so|OverFlow(a/b)}             DR4bit-Hold(S136,S150)

DMMU2	S152= CtrlPC=0                                              Premise(F437)
	S153= CtrlPCInc=0                                           Premise(F438)
	S154= PC[Out]=addr+4                                        PC-Hold(S139,S152,S153)
	S155= CtrlICache=0                                          Premise(F441)
	S156= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S141,S155)
	S157= CtrlIR=0                                              Premise(F446)
	S158= [IR]={31,rT,rA,rB,1943}                               IR-Hold(S143,S157)
	S159= CtrlMDUOut=0                                          Premise(F450)
	S160= [MDUOut]=a/b                                          MDUOut-Hold(S145,S159)
	S161= CtrlOVReg=0                                           Premise(F454)
	S162= [OVReg]=OverFlow(a/b)                                 OVReg-Hold(S147,S161)
	S163= CtrlDR1bit=0                                          Premise(F455)
	S164= [DR1bit]=so|OverFlow(a/b)                             DR1bit-Hold(S149,S163)
	S165= CtrlDR4bit=0                                          Premise(F456)
	S166= [DR4bit]={Compare0(a/b),so|OverFlow(a/b)}             DR4bit-Hold(S151,S165)

WB	S167= IR.Out6_10=rT                                         IR-Out(S158)
	S168= MDUOut.Out=a/b                                        MDUOut-Out(S160)
	S169= OVReg.Out=OverFlow(a/b)                               OVReg-Out(S162)
	S170= DR1bit.Out=so|OverFlow(a/b)                           DR1bit-Out(S164)
	S171= DR4bit.Out={Compare0(a/b),so|OverFlow(a/b)}           DR4bit-Out(S166)
	S172= IR.Out6_10=>GPRegs.WReg                               Premise(F495)
	S173= GPRegs.WReg=rT                                        Path(S167,S172)
	S174= MDUOut.Out=>GPRegs.WData                              Premise(F496)
	S175= GPRegs.WData=a/b                                      Path(S168,S174)
	S176= DR4bit.Out=>CRRegs.CR0In                              Premise(F497)
	S177= CRRegs.CR0In={Compare0(a/b),so|OverFlow(a/b)}         Path(S171,S176)
	S178= DR1bit.Out=>XER.SOIn                                  Premise(F498)
	S179= XER.SOIn=so|OverFlow(a/b)                             Path(S170,S178)
	S180= OVReg.Out=>XER.OVIn                                   Premise(F499)
	S181= XER.OVIn=OverFlow(a/b)                                Path(S169,S180)
	S182= CtrlPC=0                                              Premise(F502)
	S183= CtrlPCInc=0                                           Premise(F503)
	S184= PC[Out]=addr+4                                        PC-Hold(S154,S182,S183)
	S185= CtrlICache=0                                          Premise(F506)
	S186= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S156,S185)
	S187= CtrlGPRegs=1                                          Premise(F512)
	S188= GPRegs[rT]=a/b                                        GPRegs-Write(S173,S175,S187)
	S189= CtrlXERSO=1                                           Premise(F516)
	S190= XER[SO]=so|OverFlow(a/b)                              XER-SO-Write(S179,S189)
	S191= CtrlXEROV=1                                           Premise(F517)
	S192= XER[OV]=OverFlow(a/b)                                 XER-OV-Write(S181,S191)
	S193= CtrlCRRegsCR0=1                                       Premise(F523)
	S194= CRRegs[CR0]={Compare0(a/b),so|OverFlow(a/b)}          CRRegs-CR0-Write(S177,S193)

POST	S184= PC[Out]=addr+4                                        PC-Hold(S154,S182,S183)
	S186= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S156,S185)
	S188= GPRegs[rT]=a/b                                        GPRegs-Write(S173,S175,S187)
	S190= XER[SO]=so|OverFlow(a/b)                              XER-SO-Write(S179,S189)
	S192= XER[OV]=OverFlow(a/b)                                 XER-OV-Write(S181,S191)
	S194= CRRegs[CR0]={Compare0(a/b),so|OverFlow(a/b)}          CRRegs-CR0-Write(S177,S193)

