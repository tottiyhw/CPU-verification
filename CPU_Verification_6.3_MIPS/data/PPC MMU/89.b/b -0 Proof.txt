
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={18,LI,0,0}                            Premise(F2)
	S3= ICache[addr]={18,LI,0,0}                                Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.Out=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMMU.PID                                    Premise(F4)
	S7= IMMU.PID=pid                                            Path(S4,S6)
	S8= PC.Out=>IMMU.IEA                                        Premise(F5)
	S9= IMMU.IEA=addr                                           Path(S5,S8)
	S10= IMMU.Addr={pid,addr}                                   IMMU-Search(S7,S9)
	S11= IMMU.Addr=>IAddrReg.In                                 Premise(F6)
	S12= IAddrReg.In={pid,addr}                                 Path(S10,S11)
	S13= PC.Out=>ICache.IEA                                     Premise(F8)
	S14= ICache.IEA=addr                                        Path(S5,S13)
	S15= ICache.Out={18,LI,0,0}                                 ICache-Search(S14,S3)
	S16= ICache.Out=>ICacheReg.In                               Premise(F9)
	S17= ICacheReg.In={18,LI,0,0}                               Path(S15,S16)
	S18= CtrlPC=0                                               Premise(F36)
	S19= CtrlPCInc=0                                            Premise(F37)
	S20= PC[Out]=addr                                           PC-Hold(S1,S18,S19)
	S21= CtrlIAddrReg=1                                         Premise(F38)
	S22= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S12,S21)
	S23= CtrlICacheReg=1                                        Premise(F41)
	S24= [ICacheReg]={18,LI,0,0}                                ICacheReg-Write(S17,S23)
	S25= CtrlIMem=0                                             Premise(F43)
	S26= IMem[{pid,addr}]={18,LI,0,0}                           IMem-Hold(S2,S25)

IMMU	S27= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S22)
	S28= ICacheReg.Out={18,LI,0,0}                              ICacheReg-Out(S24)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F59)
	S30= IMem.RAddr={pid,addr}                                  Path(S27,S29)
	S31= IMem.Out={18,LI,0,0}                                   IMem-Read(S30,S26)
	S32= IMem.Out=>IRMux.MemData                                Premise(F60)
	S33= IRMux.MemData={18,LI,0,0}                              Path(S31,S32)
	S34= ICacheReg.Out=>IRMux.CacheData                         Premise(F61)
	S35= IRMux.CacheData={18,LI,0,0}                            Path(S28,S34)
	S36= IRMux.Out={18,LI,0,0}                                  IRMux-Select(S33,S35)
	S37= IRMux.Out=>IR.In                                       Premise(F64)
	S38= IR.In={18,LI,0,0}                                      Path(S36,S37)
	S39= CtrlPC=0                                               Premise(F82)
	S40= CtrlPCInc=1                                            Premise(F83)
	S41= PC[CIA]=addr                                           PC-Inc(S20,S39,S40)
	S42= CtrlIR=1                                               Premise(F91)
	S43= [IR]={18,LI,0,0}                                       IR-Write(S38,S42)

ID	S44= PC.CIA=addr                                            PC-Out(S41)
	S45= IR.Out6_29=LI                                          IR-Out(S43)
	S46= IR.Out6_29=>Addr24Ext.In                               Premise(F116)
	S47= Addr24Ext.In=LI                                        Path(S45,S46)
	S48= Addr24Ext.Out={6{LI[0]},LI,2'b0}                       Addr24Ext-EXT(S47)
	S49= Addr24Ext.Out=>A.In                                    Premise(F117)
	S50= A.In={6{LI[0]},LI,2'b0}                                Path(S48,S49)
	S51= PC.CIA=>BaseAddrSel.PC                                 Premise(F119)
	S52= BaseAddrSel.PC=addr                                    Path(S44,S51)
	S53= BaseAddrSel.Out=addr                                   BaseAddrSel(S52)
	S54= BaseAddrSel.Out=>B.In                                  Premise(F120)
	S55= B.In=addr                                              Path(S53,S54)
	S56= CtrlA=1                                                Premise(F139)
	S57= [A]={6{LI[0]},LI,2'b0}                                 A-Write(S50,S56)
	S58= CtrlB=1                                                Premise(F140)
	S59= [B]=addr                                               B-Write(S55,S58)

EX	S60= A.Out={6{LI[0]},LI,2'b0}                               A-Out(S57)
	S61= B.Out=addr                                             B-Out(S59)
	S62= A.Out=>ALU.A                                           Premise(F167)
	S63= ALU.A={6{LI[0]},LI,2'b0}                               Path(S60,S62)
	S64= B.Out=>ALU.B                                           Premise(F168)
	S65= ALU.B=addr                                             Path(S61,S64)
	S66= ALU.Out={6{LI[0]},LI,2'b0}+addr                        ALU(S63,S65)
	S67= ALU.Out=>ALUOut.In                                     Premise(F170)
	S68= ALUOut.In={6{LI[0]},LI,2'b0}+addr                      Path(S66,S67)
	S69= CtrlALUOut=1                                           Premise(F187)
	S70= [ALUOut]={6{LI[0]},LI,2'b0}+addr                       ALUOut-Write(S68,S69)

MEM	S71= ALUOut.Out={6{LI[0]},LI,2'b0}+addr                     ALUOut-Out(S70)
	S72= ALUOut.Out=>PC.In                                      Premise(F217)
	S73= PC.In={6{LI[0]},LI,2'b0}+addr                          Path(S71,S72)
	S74= CtrlPC=1                                               Premise(F220)
	S75= CtrlPCInc=0                                            Premise(F221)
	S76= PC[Out]={6{LI[0]},LI,2'b0}+addr                        PC-Write(S73,S74,S75)

DMMU1	S77= CtrlPC=0                                               Premise(F266)
	S78= CtrlPCInc=0                                            Premise(F267)
	S79= PC[Out]={6{LI[0]},LI,2'b0}+addr                        PC-Hold(S76,S77,S78)

DMMU2	S80= CtrlPC=0                                               Premise(F312)
	S81= CtrlPCInc=0                                            Premise(F313)
	S82= PC[Out]={6{LI[0]},LI,2'b0}+addr                        PC-Hold(S79,S80,S81)

WB	S83= CtrlPC=0                                               Premise(F358)
	S84= CtrlPCInc=0                                            Premise(F359)
	S85= PC[Out]={6{LI[0]},LI,2'b0}+addr                        PC-Hold(S82,S83,S84)

POST	S85= PC[Out]={6{LI[0]},LI,2'b0}+addr                        PC-Hold(S82,S83,S84)

