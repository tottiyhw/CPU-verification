
----------------------------------- FullProof -----------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            Premise(F2)

IF	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F3)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F4)
	S0= IMMU.IEA=addr                                           Path(S0,S0)
	S0= IMMU.Addr={pid,addr}                                    IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr)                              IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F5)
	S0= IAddrReg.In={pid,addr}                                  Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F6)
	S0= IMMUHitReg.In=IMMUHit(pid,addr)                         Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F7)
	S0= ICache.IEA=addr                                         Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr)                              ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F8)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F9)
	S0= ICacheHitReg.In=ICacheHit(addr)                         Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F10)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F11)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F12)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F13)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F14)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F15)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F16)
	S0= IRMux.Out=>IR.In                                        Premise(F17)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F18)
	S0= PC.Out=>ICache.IEA                                      Premise(F19)
	S0= IR.Out0_5=>CU.Op                                        Premise(F20)
	S0= IR.Out31=>CU.LK                                         Premise(F21)
	S0= PC.Out=>LR.In                                           Premise(F22)
	S0= LR.In=addr                                              Path(S0,S0)
	S0= IR.Out6_29=>Addr24Ext.In                                Premise(F23)
	S0= Addr24Ext.Out=>A.In                                     Premise(F24)
	S0= IR.Out30=>BaseAddrSel.Sel                               Premise(F25)
	S0= PC.CIA=>BaseAddrSel.PC                                  Premise(F26)
	S0= BaseAddrSel.Out=>B.In                                   Premise(F27)
	S0= A.Out=>ALU.A                                            Premise(F28)
	S0= B.Out=>ALU.B                                            Premise(F29)
	S0= CU.Func=>ALU.Func                                       Premise(F30)
	S0= ALU.Out=>ALUOut.In                                      Premise(F31)
	S0= ALUOut.Out=>PC.In                                       Premise(F32)
	S0= CtrlPIDReg=0                                            Premise(F33)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F34)
	S0= CtrlPC=0                                                Premise(F35)
	S0= CtrlPCInc=0                                             Premise(F36)
	S0= PC[Out]=addr                                            PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=1                                          Premise(F37)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Write(S0,S0)
	S0= CtrlIMMUHitReg=1                                        Premise(F38)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Write(S0,S0)
	S0= CtrlICache=0                                            Premise(F39)
	S0= CtrlICacheReg=1                                         Premise(F40)
	S0= CtrlICacheHitReg=1                                      Premise(F41)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Write(S0,S0)
	S0= CtrlIMem=0                                              Premise(F42)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F43)
	S0= CtrlIR=0                                                Premise(F44)
	S0= CtrlLR=0                                                Premise(F45)
	S0= CtrlA=0                                                 Premise(F46)
	S0= CtrlB=0                                                 Premise(F47)
	S0= CtrlALUOut=0                                            Premise(F48)

IMMU	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.Out=addr                                             PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F49)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F50)
	S0= IMMU.IEA=addr                                           Path(S0,S0)
	S0= IMMU.Addr={pid,addr}                                    IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr)                              IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F51)
	S0= IAddrReg.In={pid,addr}                                  Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F52)
	S0= IMMUHitReg.In=IMMUHit(pid,addr)                         Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F53)
	S0= ICache.IEA=addr                                         Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr)                              ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F54)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F55)
	S0= ICacheHitReg.In=ICacheHit(addr)                         Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F56)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F57)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F58)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={18,LI,0,0}                                    IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F59)
	S0= IRMux.MemData={18,LI,0,0}                               Path(S0,S0)
	S0= IRMux.Out={18,LI,0,0}                                   IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F60)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F61)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F62)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F63)
	S0= IR.In={18,LI,0,0}                                       Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F64)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F65)
	S0= IR.Out0_5=>CU.Op                                        Premise(F66)
	S0= IR.Out31=>CU.LK                                         Premise(F67)
	S0= PC.Out=>LR.In                                           Premise(F68)
	S0= LR.In=addr                                              Path(S0,S0)
	S0= IR.Out6_29=>Addr24Ext.In                                Premise(F69)
	S0= Addr24Ext.Out=>A.In                                     Premise(F70)
	S0= IR.Out30=>BaseAddrSel.Sel                               Premise(F71)
	S0= PC.CIA=>BaseAddrSel.PC                                  Premise(F72)
	S0= BaseAddrSel.Out=>B.In                                   Premise(F73)
	S0= A.Out=>ALU.A                                            Premise(F74)
	S0= B.Out=>ALU.B                                            Premise(F75)
	S0= CU.Func=>ALU.Func                                       Premise(F76)
	S0= ALU.Out=>ALUOut.In                                      Premise(F77)
	S0= ALUOut.Out=>PC.In                                       Premise(F78)
	S0= CtrlPIDReg=0                                            Premise(F79)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F80)
	S0= CtrlPC=0                                                Premise(F81)
	S0= CtrlPCInc=1                                             Premise(F82)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F83)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F84)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=1                                            Premise(F85)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Write(S0,S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F86)
	S0= CtrlICacheHitReg=0                                      Premise(F87)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F88)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F89)
	S0= CtrlIR=1                                                Premise(F90)
	S0= [IR]={18,LI,0,0}                                        IR-Write(S0,S0)
	S0= CtrlLR=0                                                Premise(F91)
	S0= CtrlA=0                                                 Premise(F92)
	S0= CtrlB=0                                                 Premise(F93)
	S0= CtrlALUOut=0                                            Premise(F94)

ID	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=18                                            IR-Out(S0)
	S0= IR.Out6_29=LI                                           IR-Out(S0)
	S0= IR.Out30=0                                              IR-Out(S0)
	S0= IR.Out31=0                                              IR-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F95)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F96)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F97)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F98)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F99)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F100)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F101)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F102)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F103)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F104)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={18,LI,0,0}                                    IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F105)
	S0= IRMux.MemData={18,LI,0,0}                               Path(S0,S0)
	S0= IRMux.Out={18,LI,0,0}                                   IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F106)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F107)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F108)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F109)
	S0= IR.In={18,LI,0,0}                                       Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F110)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F111)
	S0= IR.Out0_5=>CU.Op                                        Premise(F112)
	S0= CU.Op=18                                                Path(S0,S0)
	S0= IR.Out31=>CU.LK                                         Premise(F113)
	S0= CU.LK=0                                                 Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= PC.Out=>LR.In                                           Premise(F114)
	S0= LR.In=addr+4                                            Path(S0,S0)
	S0= IR.Out6_29=>Addr24Ext.In                                Premise(F115)
	S0= Addr24Ext.In=LI                                         Path(S0,S0)
	S0= Addr24Ext.Out={6{LI[0]},LI,2'b0}                        Addr24Ext-EXT(S0)
	S0= Addr24Ext.Out=>A.In                                     Premise(F116)
	S0= A.In={6{LI[0]},LI,2'b0}                                 Path(S0,S0)
	S0= IR.Out30=>BaseAddrSel.Sel                               Premise(F117)
	S0= BaseAddrSel.Sel=0                                       Path(S0,S0)
	S0= PC.CIA=>BaseAddrSel.PC                                  Premise(F118)
	S0= BaseAddrSel.PC=addr                                     Path(S0,S0)
	S0= BaseAddrSel.Out=addr                                    BaseAddrSel(S0)
	S0= BaseAddrSel.Out=>B.In                                   Premise(F119)
	S0= B.In=addr                                               Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F120)
	S0= B.Out=>ALU.B                                            Premise(F121)
	S0= CU.Func=>ALU.Func                                       Premise(F122)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F123)
	S0= ALUOut.Out=>PC.In                                       Premise(F124)
	S0= CtrlPIDReg=0                                            Premise(F125)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F126)
	S0= CtrlPC=0                                                Premise(F127)
	S0= CtrlPCInc=0                                             Premise(F128)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F129)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F130)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F131)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F132)
	S0= CtrlICacheHitReg=0                                      Premise(F133)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F134)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F135)
	S0= CtrlIR=0                                                Premise(F136)
	S0= [IR]={18,LI,0,0}                                        IR-Hold(S0,S0)
	S0= CtrlLR=1                                                Premise(F137)
	S0= [LR]=addr+4                                             LR-Write(S0,S0)
	S0= CtrlA=1                                                 Premise(F138)
	S0= [A]={6{LI[0]},LI,2'b0}                                  A-Write(S0,S0)
	S0= CtrlB=1                                                 Premise(F139)
	S0= [B]=addr                                                B-Write(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F140)

EX	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=18                                            IR-Out(S0)
	S0= IR.Out6_29=LI                                           IR-Out(S0)
	S0= IR.Out30=0                                              IR-Out(S0)
	S0= IR.Out31=0                                              IR-Out(S0)
	S0= LR.Out=addr+4                                           LR-Out(S0)
	S0= LR.Out26_31=addr+4[26:31]                               LR-Out(S0)
	S0= LR.Out30_31=addr+4[30:31]                               LR-Out(S0)
	S0= A.Out={6{LI[0]},LI,2'b0}                                A-Out(S0)
	S0= A.Out26_31={6{LI[0]},LI,2'b0}[26:31]                    A-Out(S0)
	S0= A.Out30_31={6{LI[0]},LI,2'b0}[30:31]                    A-Out(S0)
	S0= B.Out=addr                                              B-Out(S0)
	S0= B.Out26_31=addr[26:31]                                  B-Out(S0)
	S0= B.Out30_31=addr[30:31]                                  B-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F141)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F142)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F143)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F144)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F145)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F146)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F147)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F148)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F149)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F150)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={18,LI,0,0}                                    IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F151)
	S0= IRMux.MemData={18,LI,0,0}                               Path(S0,S0)
	S0= IRMux.Out={18,LI,0,0}                                   IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F152)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F153)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F154)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F155)
	S0= IR.In={18,LI,0,0}                                       Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F156)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F157)
	S0= IR.Out0_5=>CU.Op                                        Premise(F158)
	S0= CU.Op=18                                                Path(S0,S0)
	S0= IR.Out31=>CU.LK                                         Premise(F159)
	S0= CU.LK=0                                                 Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= PC.Out=>LR.In                                           Premise(F160)
	S0= LR.In=addr+4                                            Path(S0,S0)
	S0= IR.Out6_29=>Addr24Ext.In                                Premise(F161)
	S0= Addr24Ext.In=LI                                         Path(S0,S0)
	S0= Addr24Ext.Out={6{LI[0]},LI,2'b0}                        Addr24Ext-EXT(S0)
	S0= Addr24Ext.Out=>A.In                                     Premise(F162)
	S0= A.In={6{LI[0]},LI,2'b0}                                 Path(S0,S0)
	S0= IR.Out30=>BaseAddrSel.Sel                               Premise(F163)
	S0= BaseAddrSel.Sel=0                                       Path(S0,S0)
	S0= PC.CIA=>BaseAddrSel.PC                                  Premise(F164)
	S0= BaseAddrSel.PC=addr                                     Path(S0,S0)
	S0= BaseAddrSel.Out=addr                                    BaseAddrSel(S0)
	S0= BaseAddrSel.Out=>B.In                                   Premise(F165)
	S0= B.In=addr                                               Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F166)
	S0= ALU.A={6{LI[0]},LI,2'b0}                                Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F167)
	S0= ALU.B=addr                                              Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F168)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out={6{LI[0]},LI,2'b0}+addr                         ALU(S0,S0)
	S0= ALU.CMP=Compare0({6{LI[0]},LI,2'b0}+addr)               ALU(S0,S0)
	S0= ALU.OV=OverFlow({6{LI[0]},LI,2'b0}+addr)                ALU(S0,S0)
	S0= ALU.CA=Carry({6{LI[0]},LI,2'b0}+addr)                   ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F169)
	S0= ALUOut.In={6{LI[0]},LI,2'b0}+addr                       Path(S0,S0)
	S0= ALUOut.Out=>PC.In                                       Premise(F170)
	S0= CtrlPIDReg=0                                            Premise(F171)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F172)
	S0= CtrlPC=0                                                Premise(F173)
	S0= CtrlPCInc=0                                             Premise(F174)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F175)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F176)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F177)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F178)
	S0= CtrlICacheHitReg=0                                      Premise(F179)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F180)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F181)
	S0= CtrlIR=0                                                Premise(F182)
	S0= [IR]={18,LI,0,0}                                        IR-Hold(S0,S0)
	S0= CtrlLR=0                                                Premise(F183)
	S0= [LR]=addr+4                                             LR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F184)
	S0= [A]={6{LI[0]},LI,2'b0}                                  A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F185)
	S0= [B]=addr                                                B-Hold(S0,S0)
	S0= CtrlALUOut=1                                            Premise(F186)
	S0= [ALUOut]={6{LI[0]},LI,2'b0}+addr                        ALUOut-Write(S0,S0)

MEM	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out=addr+4                                           PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=18                                            IR-Out(S0)
	S0= IR.Out6_29=LI                                           IR-Out(S0)
	S0= IR.Out30=0                                              IR-Out(S0)
	S0= IR.Out31=0                                              IR-Out(S0)
	S0= LR.Out=addr+4                                           LR-Out(S0)
	S0= LR.Out26_31=addr+4[26:31]                               LR-Out(S0)
	S0= LR.Out30_31=addr+4[30:31]                               LR-Out(S0)
	S0= A.Out={6{LI[0]},LI,2'b0}                                A-Out(S0)
	S0= A.Out26_31={6{LI[0]},LI,2'b0}[26:31]                    A-Out(S0)
	S0= A.Out30_31={6{LI[0]},LI,2'b0}[30:31]                    A-Out(S0)
	S0= B.Out=addr                                              B-Out(S0)
	S0= B.Out26_31=addr[26:31]                                  B-Out(S0)
	S0= B.Out30_31=addr[30:31]                                  B-Out(S0)
	S0= ALUOut.Out={6{LI[0]},LI,2'b0}+addr                      ALUOut-Out(S0)
	S0= ALUOut.Out26_31={6{LI[0]},LI,2'b0}+addr[26:31]          ALUOut-Out(S0)
	S0= ALUOut.Out30_31={6{LI[0]},LI,2'b0}+addr[30:31]          ALUOut-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F187)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F188)
	S0= IMMU.IEA=addr+4                                         Path(S0,S0)
	S0= IMMU.Addr={pid,addr+4}                                  IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,addr+4)                            IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F189)
	S0= IAddrReg.In={pid,addr+4}                                Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F190)
	S0= IMMUHitReg.In=IMMUHit(pid,addr+4)                       Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F191)
	S0= ICache.IEA=addr+4                                       Path(S0,S0)
	S0= ICache.Hit=ICacheHit(addr+4)                            ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F192)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F193)
	S0= ICacheHitReg.In=ICacheHit(addr+4)                       Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F194)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F195)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F196)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={18,LI,0,0}                                    IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F197)
	S0= IRMux.MemData={18,LI,0,0}                               Path(S0,S0)
	S0= IRMux.Out={18,LI,0,0}                                   IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F198)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F199)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F200)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F201)
	S0= IR.In={18,LI,0,0}                                       Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F202)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F203)
	S0= IR.Out0_5=>CU.Op                                        Premise(F204)
	S0= CU.Op=18                                                Path(S0,S0)
	S0= IR.Out31=>CU.LK                                         Premise(F205)
	S0= CU.LK=0                                                 Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= PC.Out=>LR.In                                           Premise(F206)
	S0= LR.In=addr+4                                            Path(S0,S0)
	S0= IR.Out6_29=>Addr24Ext.In                                Premise(F207)
	S0= Addr24Ext.In=LI                                         Path(S0,S0)
	S0= Addr24Ext.Out={6{LI[0]},LI,2'b0}                        Addr24Ext-EXT(S0)
	S0= Addr24Ext.Out=>A.In                                     Premise(F208)
	S0= A.In={6{LI[0]},LI,2'b0}                                 Path(S0,S0)
	S0= IR.Out30=>BaseAddrSel.Sel                               Premise(F209)
	S0= BaseAddrSel.Sel=0                                       Path(S0,S0)
	S0= PC.CIA=>BaseAddrSel.PC                                  Premise(F210)
	S0= BaseAddrSel.PC=addr                                     Path(S0,S0)
	S0= BaseAddrSel.Out=addr                                    BaseAddrSel(S0)
	S0= BaseAddrSel.Out=>B.In                                   Premise(F211)
	S0= B.In=addr                                               Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F212)
	S0= ALU.A={6{LI[0]},LI,2'b0}                                Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F213)
	S0= ALU.B=addr                                              Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F214)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out={6{LI[0]},LI,2'b0}+addr                         ALU(S0,S0)
	S0= ALU.CMP=Compare0({6{LI[0]},LI,2'b0}+addr)               ALU(S0,S0)
	S0= ALU.OV=OverFlow({6{LI[0]},LI,2'b0}+addr)                ALU(S0,S0)
	S0= ALU.CA=Carry({6{LI[0]},LI,2'b0}+addr)                   ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F215)
	S0= ALUOut.In={6{LI[0]},LI,2'b0}+addr                       Path(S0,S0)
	S0= ALUOut.Out=>PC.In                                       Premise(F216)
	S0= PC.In={6{LI[0]},LI,2'b0}+addr                           Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F217)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F218)
	S0= CtrlPC=1                                                Premise(F219)
	S0= CtrlPCInc=0                                             Premise(F220)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]={6{LI[0]},LI,2'b0}+addr                         PC-Write(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F221)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F222)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F223)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F224)
	S0= CtrlICacheHitReg=0                                      Premise(F225)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F226)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F227)
	S0= CtrlIR=0                                                Premise(F228)
	S0= [IR]={18,LI,0,0}                                        IR-Hold(S0,S0)
	S0= CtrlLR=0                                                Premise(F229)
	S0= [LR]=addr+4                                             LR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F230)
	S0= [A]={6{LI[0]},LI,2'b0}                                  A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F231)
	S0= [B]=addr                                                B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F232)
	S0= [ALUOut]={6{LI[0]},LI,2'b0}+addr                        ALUOut-Hold(S0,S0)

DMMU1	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out={6{LI[0]},LI,2'b0}+addr                          PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=18                                            IR-Out(S0)
	S0= IR.Out6_29=LI                                           IR-Out(S0)
	S0= IR.Out30=0                                              IR-Out(S0)
	S0= IR.Out31=0                                              IR-Out(S0)
	S0= LR.Out=addr+4                                           LR-Out(S0)
	S0= LR.Out26_31=addr+4[26:31]                               LR-Out(S0)
	S0= LR.Out30_31=addr+4[30:31]                               LR-Out(S0)
	S0= A.Out={6{LI[0]},LI,2'b0}                                A-Out(S0)
	S0= A.Out26_31={6{LI[0]},LI,2'b0}[26:31]                    A-Out(S0)
	S0= A.Out30_31={6{LI[0]},LI,2'b0}[30:31]                    A-Out(S0)
	S0= B.Out=addr                                              B-Out(S0)
	S0= B.Out26_31=addr[26:31]                                  B-Out(S0)
	S0= B.Out30_31=addr[30:31]                                  B-Out(S0)
	S0= ALUOut.Out={6{LI[0]},LI,2'b0}+addr                      ALUOut-Out(S0)
	S0= ALUOut.Out26_31={6{LI[0]},LI,2'b0}+addr[26:31]          ALUOut-Out(S0)
	S0= ALUOut.Out30_31={6{LI[0]},LI,2'b0}+addr[30:31]          ALUOut-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F233)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F234)
	S0= IMMU.IEA={6{LI[0]},LI,2'b0}+addr                        Path(S0,S0)
	S0= IMMU.Addr={pid,{6{LI[0]},LI,2'b0}+addr}                 IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,{6{LI[0]},LI,2'b0}+addr)           IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F235)
	S0= IAddrReg.In={pid,{6{LI[0]},LI,2'b0}+addr}               Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F236)
	S0= IMMUHitReg.In=IMMUHit(pid,{6{LI[0]},LI,2'b0}+addr)      Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F237)
	S0= ICache.IEA={6{LI[0]},LI,2'b0}+addr                      Path(S0,S0)
	S0= ICache.Hit=ICacheHit({6{LI[0]},LI,2'b0}+addr)           ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F238)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F239)
	S0= ICacheHitReg.In=ICacheHit({6{LI[0]},LI,2'b0}+addr)      Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F240)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F241)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F242)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={18,LI,0,0}                                    IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F243)
	S0= IRMux.MemData={18,LI,0,0}                               Path(S0,S0)
	S0= IRMux.Out={18,LI,0,0}                                   IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F244)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F245)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F246)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F247)
	S0= IR.In={18,LI,0,0}                                       Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F248)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F249)
	S0= IR.Out0_5=>CU.Op                                        Premise(F250)
	S0= CU.Op=18                                                Path(S0,S0)
	S0= IR.Out31=>CU.LK                                         Premise(F251)
	S0= CU.LK=0                                                 Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= PC.Out=>LR.In                                           Premise(F252)
	S0= LR.In={6{LI[0]},LI,2'b0}+addr                           Path(S0,S0)
	S0= IR.Out6_29=>Addr24Ext.In                                Premise(F253)
	S0= Addr24Ext.In=LI                                         Path(S0,S0)
	S0= Addr24Ext.Out={6{LI[0]},LI,2'b0}                        Addr24Ext-EXT(S0)
	S0= Addr24Ext.Out=>A.In                                     Premise(F254)
	S0= A.In={6{LI[0]},LI,2'b0}                                 Path(S0,S0)
	S0= IR.Out30=>BaseAddrSel.Sel                               Premise(F255)
	S0= BaseAddrSel.Sel=0                                       Path(S0,S0)
	S0= PC.CIA=>BaseAddrSel.PC                                  Premise(F256)
	S0= BaseAddrSel.PC=addr                                     Path(S0,S0)
	S0= BaseAddrSel.Out=addr                                    BaseAddrSel(S0)
	S0= BaseAddrSel.Out=>B.In                                   Premise(F257)
	S0= B.In=addr                                               Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F258)
	S0= ALU.A={6{LI[0]},LI,2'b0}                                Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F259)
	S0= ALU.B=addr                                              Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F260)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out={6{LI[0]},LI,2'b0}+addr                         ALU(S0,S0)
	S0= ALU.CMP=Compare0({6{LI[0]},LI,2'b0}+addr)               ALU(S0,S0)
	S0= ALU.OV=OverFlow({6{LI[0]},LI,2'b0}+addr)                ALU(S0,S0)
	S0= ALU.CA=Carry({6{LI[0]},LI,2'b0}+addr)                   ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F261)
	S0= ALUOut.In={6{LI[0]},LI,2'b0}+addr                       Path(S0,S0)
	S0= ALUOut.Out=>PC.In                                       Premise(F262)
	S0= PC.In={6{LI[0]},LI,2'b0}+addr                           Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F263)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F264)
	S0= CtrlPC=0                                                Premise(F265)
	S0= CtrlPCInc=0                                             Premise(F266)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]={6{LI[0]},LI,2'b0}+addr                         PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F267)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F268)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F269)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F270)
	S0= CtrlICacheHitReg=0                                      Premise(F271)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F272)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F273)
	S0= CtrlIR=0                                                Premise(F274)
	S0= [IR]={18,LI,0,0}                                        IR-Hold(S0,S0)
	S0= CtrlLR=0                                                Premise(F275)
	S0= [LR]=addr+4                                             LR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F276)
	S0= [A]={6{LI[0]},LI,2'b0}                                  A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F277)
	S0= [B]=addr                                                B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F278)
	S0= [ALUOut]={6{LI[0]},LI,2'b0}+addr                        ALUOut-Hold(S0,S0)

DMMU2	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out={6{LI[0]},LI,2'b0}+addr                          PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=18                                            IR-Out(S0)
	S0= IR.Out6_29=LI                                           IR-Out(S0)
	S0= IR.Out30=0                                              IR-Out(S0)
	S0= IR.Out31=0                                              IR-Out(S0)
	S0= LR.Out=addr+4                                           LR-Out(S0)
	S0= LR.Out26_31=addr+4[26:31]                               LR-Out(S0)
	S0= LR.Out30_31=addr+4[30:31]                               LR-Out(S0)
	S0= A.Out={6{LI[0]},LI,2'b0}                                A-Out(S0)
	S0= A.Out26_31={6{LI[0]},LI,2'b0}[26:31]                    A-Out(S0)
	S0= A.Out30_31={6{LI[0]},LI,2'b0}[30:31]                    A-Out(S0)
	S0= B.Out=addr                                              B-Out(S0)
	S0= B.Out26_31=addr[26:31]                                  B-Out(S0)
	S0= B.Out30_31=addr[30:31]                                  B-Out(S0)
	S0= ALUOut.Out={6{LI[0]},LI,2'b0}+addr                      ALUOut-Out(S0)
	S0= ALUOut.Out26_31={6{LI[0]},LI,2'b0}+addr[26:31]          ALUOut-Out(S0)
	S0= ALUOut.Out30_31={6{LI[0]},LI,2'b0}+addr[30:31]          ALUOut-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F279)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F280)
	S0= IMMU.IEA={6{LI[0]},LI,2'b0}+addr                        Path(S0,S0)
	S0= IMMU.Addr={pid,{6{LI[0]},LI,2'b0}+addr}                 IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,{6{LI[0]},LI,2'b0}+addr)           IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F281)
	S0= IAddrReg.In={pid,{6{LI[0]},LI,2'b0}+addr}               Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F282)
	S0= IMMUHitReg.In=IMMUHit(pid,{6{LI[0]},LI,2'b0}+addr)      Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F283)
	S0= ICache.IEA={6{LI[0]},LI,2'b0}+addr                      Path(S0,S0)
	S0= ICache.Hit=ICacheHit({6{LI[0]},LI,2'b0}+addr)           ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F284)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F285)
	S0= ICacheHitReg.In=ICacheHit({6{LI[0]},LI,2'b0}+addr)      Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F286)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F287)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F288)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={18,LI,0,0}                                    IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F289)
	S0= IRMux.MemData={18,LI,0,0}                               Path(S0,S0)
	S0= IRMux.Out={18,LI,0,0}                                   IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F290)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F291)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F292)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F293)
	S0= IR.In={18,LI,0,0}                                       Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F294)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F295)
	S0= IR.Out0_5=>CU.Op                                        Premise(F296)
	S0= CU.Op=18                                                Path(S0,S0)
	S0= IR.Out31=>CU.LK                                         Premise(F297)
	S0= CU.LK=0                                                 Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= PC.Out=>LR.In                                           Premise(F298)
	S0= LR.In={6{LI[0]},LI,2'b0}+addr                           Path(S0,S0)
	S0= IR.Out6_29=>Addr24Ext.In                                Premise(F299)
	S0= Addr24Ext.In=LI                                         Path(S0,S0)
	S0= Addr24Ext.Out={6{LI[0]},LI,2'b0}                        Addr24Ext-EXT(S0)
	S0= Addr24Ext.Out=>A.In                                     Premise(F300)
	S0= A.In={6{LI[0]},LI,2'b0}                                 Path(S0,S0)
	S0= IR.Out30=>BaseAddrSel.Sel                               Premise(F301)
	S0= BaseAddrSel.Sel=0                                       Path(S0,S0)
	S0= PC.CIA=>BaseAddrSel.PC                                  Premise(F302)
	S0= BaseAddrSel.PC=addr                                     Path(S0,S0)
	S0= BaseAddrSel.Out=addr                                    BaseAddrSel(S0)
	S0= BaseAddrSel.Out=>B.In                                   Premise(F303)
	S0= B.In=addr                                               Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F304)
	S0= ALU.A={6{LI[0]},LI,2'b0}                                Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F305)
	S0= ALU.B=addr                                              Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F306)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out={6{LI[0]},LI,2'b0}+addr                         ALU(S0,S0)
	S0= ALU.CMP=Compare0({6{LI[0]},LI,2'b0}+addr)               ALU(S0,S0)
	S0= ALU.OV=OverFlow({6{LI[0]},LI,2'b0}+addr)                ALU(S0,S0)
	S0= ALU.CA=Carry({6{LI[0]},LI,2'b0}+addr)                   ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F307)
	S0= ALUOut.In={6{LI[0]},LI,2'b0}+addr                       Path(S0,S0)
	S0= ALUOut.Out=>PC.In                                       Premise(F308)
	S0= PC.In={6{LI[0]},LI,2'b0}+addr                           Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F309)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F310)
	S0= CtrlPC=0                                                Premise(F311)
	S0= CtrlPCInc=0                                             Premise(F312)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]={6{LI[0]},LI,2'b0}+addr                         PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F313)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F314)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F315)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F316)
	S0= CtrlICacheHitReg=0                                      Premise(F317)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F318)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F319)
	S0= CtrlIR=0                                                Premise(F320)
	S0= [IR]={18,LI,0,0}                                        IR-Hold(S0,S0)
	S0= CtrlLR=0                                                Premise(F321)
	S0= [LR]=addr+4                                             LR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F322)
	S0= [A]={6{LI[0]},LI,2'b0}                                  A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F323)
	S0= [B]=addr                                                B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F324)
	S0= [ALUOut]={6{LI[0]},LI,2'b0}+addr                        ALUOut-Hold(S0,S0)

WB	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out26_31=pid[26:31]                              PIDReg-Out(S0)
	S0= PIDReg.Out30_31=pid[30:31]                              PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.Out={6{LI[0]},LI,2'b0}+addr                          PC-Out(S0)
	S0= IAddrReg.Out={pid,addr}                                 IAddrReg-Out(S0)
	S0= IAddrReg.Out26_31={pid,addr}[26:31]                     IAddrReg-Out(S0)
	S0= IAddrReg.Out30_31={pid,addr}[30:31]                     IAddrReg-Out(S0)
	S0= IMMUHitReg.Out=IMMUHit(pid,addr)                        IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out26_31=IMMUHit(pid,addr)[26:31]            IMMUHitReg-Out(S0)
	S0= IMMUHitReg.Out30_31=IMMUHit(pid,addr)[30:31]            IMMUHitReg-Out(S0)
	S0= ICacheHitReg.Out=ICacheHit(addr)                        ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out26_31=ICacheHit(addr)[26:31]            ICacheHitReg-Out(S0)
	S0= ICacheHitReg.Out30_31=ICacheHit(addr)[30:31]            ICacheHitReg-Out(S0)
	S0= IR.Out0_5=18                                            IR-Out(S0)
	S0= IR.Out6_29=LI                                           IR-Out(S0)
	S0= IR.Out30=0                                              IR-Out(S0)
	S0= IR.Out31=0                                              IR-Out(S0)
	S0= LR.Out=addr+4                                           LR-Out(S0)
	S0= LR.Out26_31=addr+4[26:31]                               LR-Out(S0)
	S0= LR.Out30_31=addr+4[30:31]                               LR-Out(S0)
	S0= A.Out={6{LI[0]},LI,2'b0}                                A-Out(S0)
	S0= A.Out26_31={6{LI[0]},LI,2'b0}[26:31]                    A-Out(S0)
	S0= A.Out30_31={6{LI[0]},LI,2'b0}[30:31]                    A-Out(S0)
	S0= B.Out=addr                                              B-Out(S0)
	S0= B.Out26_31=addr[26:31]                                  B-Out(S0)
	S0= B.Out30_31=addr[30:31]                                  B-Out(S0)
	S0= ALUOut.Out={6{LI[0]},LI,2'b0}+addr                      ALUOut-Out(S0)
	S0= ALUOut.Out26_31={6{LI[0]},LI,2'b0}+addr[26:31]          ALUOut-Out(S0)
	S0= ALUOut.Out30_31={6{LI[0]},LI,2'b0}+addr[30:31]          ALUOut-Out(S0)
	S0= PIDReg.Out=>IMMU.PID                                    Premise(F325)
	S0= IMMU.PID=pid                                            Path(S0,S0)
	S0= PC.Out=>IMMU.IEA                                        Premise(F326)
	S0= IMMU.IEA={6{LI[0]},LI,2'b0}+addr                        Path(S0,S0)
	S0= IMMU.Addr={pid,{6{LI[0]},LI,2'b0}+addr}                 IMMU-Search(S0,S0)
	S0= IMMU.Hit=IMMUHit(pid,{6{LI[0]},LI,2'b0}+addr)           IMMU-Search(S0,S0)
	S0= IMMU.Addr=>IAddrReg.In                                  Premise(F327)
	S0= IAddrReg.In={pid,{6{LI[0]},LI,2'b0}+addr}               Path(S0,S0)
	S0= IMMU.Hit=>IMMUHitReg.In                                 Premise(F328)
	S0= IMMUHitReg.In=IMMUHit(pid,{6{LI[0]},LI,2'b0}+addr)      Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F329)
	S0= ICache.IEA={6{LI[0]},LI,2'b0}+addr                      Path(S0,S0)
	S0= ICache.Hit=ICacheHit({6{LI[0]},LI,2'b0}+addr)           ICache-Search(S0)
	S0= ICache.Out=>ICacheReg.In                                Premise(F330)
	S0= ICache.Hit=>ICacheHitReg.In                             Premise(F331)
	S0= ICacheHitReg.In=ICacheHit({6{LI[0]},LI,2'b0}+addr)      Path(S0,S0)
	S0= IMMUHitReg.Out=>CU.IMemHit                              Premise(F332)
	S0= CU.IMemHit=IMMUHit(pid,addr)                            Path(S0,S0)
	S0= ICacheHitReg.Out=>CU.ICacheHit                          Premise(F333)
	S0= CU.ICacheHit=ICacheHit(addr)                            Path(S0,S0)
	S0= IAddrReg.Out=>IMem.RAddr                                Premise(F334)
	S0= IMem.RAddr={pid,addr}                                   Path(S0,S0)
	S0= IMem.Out={18,LI,0,0}                                    IMem-Read(S0,S0)
	S0= IMem.MEM8WordOut=IMemGet8Word({pid,addr})               IMem-Read(S0,S0)
	S0= IMem.Out=>IRMux.MemData                                 Premise(F335)
	S0= IRMux.MemData={18,LI,0,0}                               Path(S0,S0)
	S0= IRMux.Out={18,LI,0,0}                                   IRMux-Select(S0)
	S0= ICacheReg.Out=>IRMux.CacheData                          Premise(F336)
	S0= IMMUHitReg.Out=>IRMux.MemSel                            Premise(F337)
	S0= IRMux.MemSel=IMMUHit(pid,addr)                          Path(S0,S0)
	S0= ICacheHitReg.Out=>IRMux.CacheSel                        Premise(F338)
	S0= IRMux.CacheSel=ICacheHit(addr)                          Path(S0,S0)
	S0= IRMux.Out=>IR.In                                        Premise(F339)
	S0= IR.In={18,LI,0,0}                                       Path(S0,S0)
	S0= IMem.MEM8WordOut=>ICache.WData                          Premise(F340)
	S0= ICache.WData=IMemGet8Word({pid,addr})                   Path(S0,S0)
	S0= PC.Out=>ICache.IEA                                      Premise(F341)
	S0= IR.Out0_5=>CU.Op                                        Premise(F342)
	S0= CU.Op=18                                                Path(S0,S0)
	S0= IR.Out31=>CU.LK                                         Premise(F343)
	S0= CU.LK=0                                                 Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= PC.Out=>LR.In                                           Premise(F344)
	S0= LR.In={6{LI[0]},LI,2'b0}+addr                           Path(S0,S0)
	S0= IR.Out6_29=>Addr24Ext.In                                Premise(F345)
	S0= Addr24Ext.In=LI                                         Path(S0,S0)
	S0= Addr24Ext.Out={6{LI[0]},LI,2'b0}                        Addr24Ext-EXT(S0)
	S0= Addr24Ext.Out=>A.In                                     Premise(F346)
	S0= A.In={6{LI[0]},LI,2'b0}                                 Path(S0,S0)
	S0= IR.Out30=>BaseAddrSel.Sel                               Premise(F347)
	S0= BaseAddrSel.Sel=0                                       Path(S0,S0)
	S0= PC.CIA=>BaseAddrSel.PC                                  Premise(F348)
	S0= BaseAddrSel.PC=addr                                     Path(S0,S0)
	S0= BaseAddrSel.Out=addr                                    BaseAddrSel(S0)
	S0= BaseAddrSel.Out=>B.In                                   Premise(F349)
	S0= B.In=addr                                               Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F350)
	S0= ALU.A={6{LI[0]},LI,2'b0}                                Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F351)
	S0= ALU.B=addr                                              Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F352)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out={6{LI[0]},LI,2'b0}+addr                         ALU(S0,S0)
	S0= ALU.CMP=Compare0({6{LI[0]},LI,2'b0}+addr)               ALU(S0,S0)
	S0= ALU.OV=OverFlow({6{LI[0]},LI,2'b0}+addr)                ALU(S0,S0)
	S0= ALU.CA=Carry({6{LI[0]},LI,2'b0}+addr)                   ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F353)
	S0= ALUOut.In={6{LI[0]},LI,2'b0}+addr                       Path(S0,S0)
	S0= ALUOut.Out=>PC.In                                       Premise(F354)
	S0= PC.In={6{LI[0]},LI,2'b0}+addr                           Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F355)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMMU=0                                              Premise(F356)
	S0= CtrlPC=0                                                Premise(F357)
	S0= CtrlPCInc=0                                             Premise(F358)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]={6{LI[0]},LI,2'b0}+addr                         PC-Hold(S0,S0,S0)
	S0= CtrlIAddrReg=0                                          Premise(F359)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= CtrlIMMUHitReg=0                                        Premise(F360)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= CtrlICache=0                                            Premise(F361)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= CtrlICacheReg=0                                         Premise(F362)
	S0= CtrlICacheHitReg=0                                      Premise(F363)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F364)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= CtrlIRMux=0                                             Premise(F365)
	S0= CtrlIR=0                                                Premise(F366)
	S0= [IR]={18,LI,0,0}                                        IR-Hold(S0,S0)
	S0= CtrlLR=0                                                Premise(F367)
	S0= [LR]=addr+4                                             LR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F368)
	S0= [A]={6{LI[0]},LI,2'b0}                                  A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F369)
	S0= [B]=addr                                                B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F370)
	S0= [ALUOut]={6{LI[0]},LI,2'b0}+addr                        ALUOut-Hold(S0,S0)

POST	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]={6{LI[0]},LI,2'b0}+addr                         PC-Hold(S0,S0,S0)
	S0= [IAddrReg]={pid,addr}                                   IAddrReg-Hold(S0,S0)
	S0= [IMMUHitReg]=IMMUHit(pid,addr)                          IMMUHitReg-Hold(S0,S0)
	S0= ICache[line_addr]=IMemGet8Word({pid,addr})              ICache-Hold(S0,S0)
	S0= [ICacheHitReg]=ICacheHit(addr)                          ICacheHitReg-Hold(S0,S0)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= [IR]={18,LI,0,0}                                        IR-Hold(S0,S0)
	S0= [LR]=addr+4                                             LR-Hold(S0,S0)
	S0= [A]={6{LI[0]},LI,2'b0}                                  A-Hold(S0,S0)
	S0= [B]=addr                                                B-Hold(S0,S0)
	S0= [ALUOut]={6{LI[0]},LI,2'b0}+addr                        ALUOut-Hold(S0,S0)

