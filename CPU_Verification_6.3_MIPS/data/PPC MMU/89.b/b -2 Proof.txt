
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={18,LI,0,0}                            Premise(F2)

IF	S3= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S4= PC.Out=addr                                             PC-Out(S1)
	S5= PIDReg.Out=>IMMU.PID                                    Premise(F3)
	S6= IMMU.PID=pid                                            Path(S3,S5)
	S7= PC.Out=>IMMU.IEA                                        Premise(F4)
	S8= IMMU.IEA=addr                                           Path(S4,S7)
	S9= IMMU.Addr={pid,addr}                                    IMMU-Search(S6,S8)
	S10= IMMU.Addr=>IAddrReg.In                                 Premise(F5)
	S11= IAddrReg.In={pid,addr}                                 Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F35)
	S13= CtrlPCInc=0                                            Premise(F36)
	S14= PC[Out]=addr                                           PC-Hold(S1,S12,S13)
	S15= CtrlIAddrReg=1                                         Premise(F37)
	S16= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S11,S15)
	S17= CtrlIMem=0                                             Premise(F42)
	S18= IMem[{pid,addr}]={18,LI,0,0}                           IMem-Hold(S2,S17)

IMMU	S19= PC.Out=addr                                            PC-Out(S14)
	S20= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S16)
	S21= PC.Out=>ICache.IEA                                     Premise(F53)
	S22= ICache.IEA=addr                                        Path(S19,S21)
	S23= IAddrReg.Out=>IMem.RAddr                               Premise(F58)
	S24= IMem.RAddr={pid,addr}                                  Path(S20,S23)
	S25= IMem.Out={18,LI,0,0}                                   IMem-Read(S24,S18)
	S26= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S24,S18)
	S27= IMem.Out=>IRMux.MemData                                Premise(F59)
	S28= IRMux.MemData={18,LI,0,0}                              Path(S25,S27)
	S29= IRMux.Out={18,LI,0,0}                                  IRMux-Select(S28)
	S30= IRMux.Out=>IR.In                                       Premise(F63)
	S31= IR.In={18,LI,0,0}                                      Path(S29,S30)
	S32= IMem.MEM8WordOut=>ICache.WData                         Premise(F64)
	S33= ICache.WData=IMemGet8Word({pid,addr})                  Path(S26,S32)
	S34= CtrlPC=0                                               Premise(F81)
	S35= CtrlPCInc=1                                            Premise(F82)
	S36= PC[CIA]=addr                                           PC-Inc(S14,S34,S35)
	S37= CtrlICache=1                                           Premise(F85)
	S38= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S22,S33,S37)
	S39= CtrlIR=1                                               Premise(F90)
	S40= [IR]={18,LI,0,0}                                       IR-Write(S31,S39)

ID	S41= PC.CIA=addr                                            PC-Out(S36)
	S42= IR.Out6_29=LI                                          IR-Out(S40)
	S43= IR.Out6_29=>Addr24Ext.In                               Premise(F115)
	S44= Addr24Ext.In=LI                                        Path(S42,S43)
	S45= Addr24Ext.Out={6{LI[0]},LI,2'b0}                       Addr24Ext-EXT(S44)
	S46= Addr24Ext.Out=>A.In                                    Premise(F116)
	S47= A.In={6{LI[0]},LI,2'b0}                                Path(S45,S46)
	S48= PC.CIA=>BaseAddrSel.PC                                 Premise(F118)
	S49= BaseAddrSel.PC=addr                                    Path(S41,S48)
	S50= BaseAddrSel.Out=addr                                   BaseAddrSel(S49)
	S51= BaseAddrSel.Out=>B.In                                  Premise(F119)
	S52= B.In=addr                                              Path(S50,S51)
	S53= CtrlICache=0                                           Premise(F131)
	S54= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S38,S53)
	S55= CtrlA=1                                                Premise(F138)
	S56= [A]={6{LI[0]},LI,2'b0}                                 A-Write(S47,S55)
	S57= CtrlB=1                                                Premise(F139)
	S58= [B]=addr                                               B-Write(S52,S57)

EX	S59= A.Out={6{LI[0]},LI,2'b0}                               A-Out(S56)
	S60= B.Out=addr                                             B-Out(S58)
	S61= A.Out=>ALU.A                                           Premise(F166)
	S62= ALU.A={6{LI[0]},LI,2'b0}                               Path(S59,S61)
	S63= B.Out=>ALU.B                                           Premise(F167)
	S64= ALU.B=addr                                             Path(S60,S63)
	S65= ALU.Out={6{LI[0]},LI,2'b0}+addr                        ALU(S62,S64)
	S66= ALU.Out=>ALUOut.In                                     Premise(F169)
	S67= ALUOut.In={6{LI[0]},LI,2'b0}+addr                      Path(S65,S66)
	S68= CtrlICache=0                                           Premise(F177)
	S69= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S54,S68)
	S70= CtrlALUOut=1                                           Premise(F186)
	S71= [ALUOut]={6{LI[0]},LI,2'b0}+addr                       ALUOut-Write(S67,S70)

MEM	S72= ALUOut.Out={6{LI[0]},LI,2'b0}+addr                     ALUOut-Out(S71)
	S73= ALUOut.Out=>PC.In                                      Premise(F216)
	S74= PC.In={6{LI[0]},LI,2'b0}+addr                          Path(S72,S73)
	S75= CtrlPC=1                                               Premise(F219)
	S76= CtrlPCInc=0                                            Premise(F220)
	S77= PC[Out]={6{LI[0]},LI,2'b0}+addr                        PC-Write(S74,S75,S76)
	S78= CtrlICache=0                                           Premise(F223)
	S79= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S69,S78)

DMMU1	S80= CtrlPC=0                                               Premise(F265)
	S81= CtrlPCInc=0                                            Premise(F266)
	S82= PC[Out]={6{LI[0]},LI,2'b0}+addr                        PC-Hold(S77,S80,S81)
	S83= CtrlICache=0                                           Premise(F269)
	S84= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S79,S83)

DMMU2	S85= CtrlPC=0                                               Premise(F311)
	S86= CtrlPCInc=0                                            Premise(F312)
	S87= PC[Out]={6{LI[0]},LI,2'b0}+addr                        PC-Hold(S82,S85,S86)
	S88= CtrlICache=0                                           Premise(F315)
	S89= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S84,S88)

WB	S90= CtrlPC=0                                               Premise(F357)
	S91= CtrlPCInc=0                                            Premise(F358)
	S92= PC[Out]={6{LI[0]},LI,2'b0}+addr                        PC-Hold(S87,S90,S91)
	S93= CtrlICache=0                                           Premise(F361)
	S94= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S89,S93)

POST	S92= PC[Out]={6{LI[0]},LI,2'b0}+addr                        PC-Hold(S87,S90,S91)
	S94= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S89,S93)

