
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={11,BF,0,rA,SIMM}                      Premise(F2)
	S3= ICache[addr]={11,BF,0,rA,SIMM}                          Premise(F3)
	S4= GPRegs[rA]=a                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= PC.Out=>ICache.IEA                                     Premise(F10)
	S16= ICache.IEA=addr                                        Path(S7,S15)
	S17= ICache.Out={11,BF,0,rA,SIMM}                           ICache-Search(S16,S3)
	S18= ICache.Out=>ICacheReg.In                               Premise(F11)
	S19= ICacheReg.In={11,BF,0,rA,SIMM}                         Path(S17,S18)
	S20= CtrlPC=0                                               Premise(F38)
	S21= CtrlPCInc=0                                            Premise(F39)
	S22= PC[Out]=addr                                           PC-Hold(S1,S20,S21)
	S23= CtrlIAddrReg=1                                         Premise(F40)
	S24= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S23)
	S25= CtrlICacheReg=1                                        Premise(F43)
	S26= [ICacheReg]={11,BF,0,rA,SIMM}                          ICacheReg-Write(S19,S25)
	S27= CtrlIMem=0                                             Premise(F45)
	S28= IMem[{pid,addr}]={11,BF,0,rA,SIMM}                     IMem-Hold(S2,S27)
	S29= CtrlGPRegs=0                                           Premise(F48)
	S30= GPRegs[rA]=a                                           GPRegs-Hold(S4,S29)
	S31= CtrlXERSO=0                                            Premise(F51)
	S32= XER[SO]=so                                             XER-SO-Hold(S5,S31)

IMMU	S33= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S24)
	S34= ICacheReg.Out={11,BF,0,rA,SIMM}                        ICacheReg-Out(S26)
	S35= IAddrReg.Out=>IMem.RAddr                               Premise(F68)
	S36= IMem.RAddr={pid,addr}                                  Path(S33,S35)
	S37= IMem.Out={11,BF,0,rA,SIMM}                             IMem-Read(S36,S28)
	S38= IMem.Out=>IRMux.MemData                                Premise(F69)
	S39= IRMux.MemData={11,BF,0,rA,SIMM}                        Path(S37,S38)
	S40= ICacheReg.Out=>IRMux.CacheData                         Premise(F70)
	S41= IRMux.CacheData={11,BF,0,rA,SIMM}                      Path(S34,S40)
	S42= IRMux.Out={11,BF,0,rA,SIMM}                            IRMux-Select(S39,S41)
	S43= IRMux.Out=>IR.In                                       Premise(F73)
	S44= IR.In={11,BF,0,rA,SIMM}                                Path(S42,S43)
	S45= CtrlPC=0                                               Premise(F91)
	S46= CtrlPCInc=1                                            Premise(F92)
	S47= PC[Out]=addr+4                                         PC-Inc(S22,S45,S46)
	S48= CtrlIR=1                                               Premise(F100)
	S49= [IR]={11,BF,0,rA,SIMM}                                 IR-Write(S44,S48)
	S50= CtrlGPRegs=0                                           Premise(F101)
	S51= GPRegs[rA]=a                                           GPRegs-Hold(S30,S50)
	S52= CtrlXERSO=0                                            Premise(F104)
	S53= XER[SO]=so                                             XER-SO-Hold(S32,S52)

ID	S54= IR.Out11_15=rA                                         IR-Out(S49)
	S55= IR.Out16_31=SIMM                                       IR-Out(S49)
	S56= IR.Out11_15=>GPRegs.RReg1                              Premise(F130)
	S57= GPRegs.RReg1=rA                                        Path(S54,S56)
	S58= GPRegs.Rdata1=a                                        GPRegs-Read(S57,S51)
	S59= IR.Out16_31=>IMMEXT.In                                 Premise(F131)
	S60= IMMEXT.In=SIMM                                         Path(S55,S59)
	S61= IMMEXT.Out={16{SIMM[0]},SIMM}                          IMMEXT(S60)
	S62= GPRegs.Rdata1=>A.In                                    Premise(F132)
	S63= A.In=a                                                 Path(S58,S62)
	S64= IMMEXT.Out=>B.In                                       Premise(F133)
	S65= B.In={16{SIMM[0]},SIMM}                                Path(S61,S64)
	S66= CtrlPC=0                                               Premise(F144)
	S67= CtrlPCInc=0                                            Premise(F145)
	S68= PC[Out]=addr+4                                         PC-Hold(S47,S66,S67)
	S69= CtrlIR=0                                               Premise(F153)
	S70= [IR]={11,BF,0,rA,SIMM}                                 IR-Hold(S49,S69)
	S71= CtrlA=1                                                Premise(F155)
	S72= [A]=a                                                  A-Write(S63,S71)
	S73= CtrlB=1                                                Premise(F156)
	S74= [B]={16{SIMM[0]},SIMM}                                 B-Write(S65,S73)
	S75= CtrlXERSO=0                                            Premise(F157)
	S76= XER[SO]=so                                             XER-SO-Hold(S53,S75)

EX	S77= A.Out=a                                                A-Out(S72)
	S78= B.Out={16{SIMM[0]},SIMM}                               B-Out(S74)
	S79= XER.SOOut=so                                           XER-SO-Out(S76)
	S80= A.Out=>CMPU.A                                          Premise(F187)
	S81= CMPU.A=a                                               Path(S77,S80)
	S82= B.Out=>CMPU.B                                          Premise(F188)
	S83= CMPU.B={16{SIMM[0]},SIMM}                              Path(S78,S82)
	S84= CMPU.Out=CompareS(a,{16{SIMM[0]},SIMM})                CMPU-CMPS(S81,S83)
	S85= CMPU.Out=>DataCmb.A                                    Premise(F190)
	S86= DataCmb.A=CompareS(a,{16{SIMM[0]},SIMM})               Path(S84,S85)
	S87= XER.SOOut=>DataCmb.B                                   Premise(F191)
	S88= DataCmb.B=so                                           Path(S79,S87)
	S89= DataCmb.Out={CompareS(a,{16{SIMM[0]},SIMM}),so}        DataCmb(S86,S88)
	S90= DataCmb.Out=>DR4bit.In                                 Premise(F192)
	S91= DR4bit.In={CompareS(a,{16{SIMM[0]},SIMM}),so}          Path(S89,S90)
	S92= CtrlPC=0                                               Premise(F197)
	S93= CtrlPCInc=0                                            Premise(F198)
	S94= PC[Out]=addr+4                                         PC-Hold(S68,S92,S93)
	S95= CtrlIR=0                                               Premise(F206)
	S96= [IR]={11,BF,0,rA,SIMM}                                 IR-Hold(S70,S95)
	S97= CtrlDR4bit=1                                           Premise(F213)
	S98= [DR4bit]={CompareS(a,{16{SIMM[0]},SIMM}),so}           DR4bit-Write(S91,S97)

MEM	S99= CtrlPC=0                                               Premise(F250)
	S100= CtrlPCInc=0                                           Premise(F251)
	S101= PC[Out]=addr+4                                        PC-Hold(S94,S99,S100)
	S102= CtrlIR=0                                              Premise(F259)
	S103= [IR]={11,BF,0,rA,SIMM}                                IR-Hold(S96,S102)
	S104= CtrlDR4bit=0                                          Premise(F266)
	S105= [DR4bit]={CompareS(a,{16{SIMM[0]},SIMM}),so}          DR4bit-Hold(S98,S104)

DMMU1	S106= CtrlPC=0                                              Premise(F303)
	S107= CtrlPCInc=0                                           Premise(F304)
	S108= PC[Out]=addr+4                                        PC-Hold(S101,S106,S107)
	S109= CtrlIR=0                                              Premise(F312)
	S110= [IR]={11,BF,0,rA,SIMM}                                IR-Hold(S103,S109)
	S111= CtrlDR4bit=0                                          Premise(F319)
	S112= [DR4bit]={CompareS(a,{16{SIMM[0]},SIMM}),so}          DR4bit-Hold(S105,S111)

DMMU2	S113= CtrlPC=0                                              Premise(F356)
	S114= CtrlPCInc=0                                           Premise(F357)
	S115= PC[Out]=addr+4                                        PC-Hold(S108,S113,S114)
	S116= CtrlIR=0                                              Premise(F365)
	S117= [IR]={11,BF,0,rA,SIMM}                                IR-Hold(S110,S116)
	S118= CtrlDR4bit=0                                          Premise(F372)
	S119= [DR4bit]={CompareS(a,{16{SIMM[0]},SIMM}),so}          DR4bit-Hold(S112,S118)

WB	S120= IR.Out6_8=BF                                          IR-Out(S117)
	S121= DR4bit.Out={CompareS(a,{16{SIMM[0]},SIMM}),so}        DR4bit-Out(S119)
	S122= DR4bit.Out=>CRRegs.W4bitData                          Premise(F405)
	S123= CRRegs.W4bitData={CompareS(a,{16{SIMM[0]},SIMM}),so}  Path(S121,S122)
	S124= IR.Out6_8=>CRRegs.W4bitReg                            Premise(F406)
	S125= CRRegs.W4bitReg=BF                                    Path(S120,S124)
	S126= CtrlPC=0                                              Premise(F409)
	S127= CtrlPCInc=0                                           Premise(F410)
	S128= PC[Out]=addr+4                                        PC-Hold(S115,S126,S127)
	S129= CtrlCRRegsW4bitRegs=1                                 Premise(F428)
	S130= CRRegs[BF]={CompareS(a,{16{SIMM[0]},SIMM}),so}        CRRegs-Write(S125,S123,S129)

POST	S128= PC[Out]=addr+4                                        PC-Hold(S115,S126,S127)
	S130= CRRegs[BF]={CompareS(a,{16{SIMM[0]},SIMM}),so}        CRRegs-Write(S125,S123,S129)

