
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,BF,0,rA,rB,64}                     Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.Out=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMMU.PID                                    Premise(F6)
	S9= IMMU.PID=pid                                            Path(S6,S8)
	S10= PC.Out=>IMMU.IEA                                       Premise(F7)
	S11= IMMU.IEA=addr                                          Path(S7,S10)
	S12= IMMU.Addr={pid,addr}                                   IMMU-Search(S9,S11)
	S13= IMMU.Addr=>IAddrReg.In                                 Premise(F8)
	S14= IAddrReg.In={pid,addr}                                 Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F39)
	S16= CtrlPCInc=0                                            Premise(F40)
	S17= PC[Out]=addr                                           PC-Hold(S1,S15,S16)
	S18= CtrlIAddrReg=1                                         Premise(F41)
	S19= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S14,S18)
	S20= CtrlIMem=0                                             Premise(F46)
	S21= IMem[{pid,addr}]={31,BF,0,rA,rB,64}                    IMem-Hold(S2,S20)
	S22= CtrlGPRegs=0                                           Premise(F49)
	S23= GPRegs[rA]=a                                           GPRegs-Hold(S3,S22)
	S24= GPRegs[rB]=b                                           GPRegs-Hold(S4,S22)
	S25= CtrlXERSO=0                                            Premise(F52)
	S26= XER[SO]=so                                             XER-SO-Hold(S5,S25)

IMMU	S27= PC.Out=addr                                            PC-Out(S17)
	S28= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S19)
	S29= PC.Out=>ICache.IEA                                     Premise(F64)
	S30= ICache.IEA=addr                                        Path(S27,S29)
	S31= IAddrReg.Out=>IMem.RAddr                               Premise(F69)
	S32= IMem.RAddr={pid,addr}                                  Path(S28,S31)
	S33= IMem.Out={31,BF,0,rA,rB,64}                            IMem-Read(S32,S21)
	S34= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S32,S21)
	S35= IMem.Out=>IRMux.MemData                                Premise(F70)
	S36= IRMux.MemData={31,BF,0,rA,rB,64}                       Path(S33,S35)
	S37= IRMux.Out={31,BF,0,rA,rB,64}                           IRMux-Select(S36)
	S38= IRMux.Out=>IR.In                                       Premise(F74)
	S39= IR.In={31,BF,0,rA,rB,64}                               Path(S37,S38)
	S40= IMem.MEM8WordOut=>ICache.WData                         Premise(F75)
	S41= ICache.WData=IMemGet8Word({pid,addr})                  Path(S34,S40)
	S42= CtrlPC=0                                               Premise(F93)
	S43= CtrlPCInc=1                                            Premise(F94)
	S44= PC[Out]=addr+4                                         PC-Inc(S17,S42,S43)
	S45= CtrlICache=1                                           Premise(F97)
	S46= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S30,S41,S45)
	S47= CtrlIR=1                                               Premise(F102)
	S48= [IR]={31,BF,0,rA,rB,64}                                IR-Write(S39,S47)
	S49= CtrlGPRegs=0                                           Premise(F103)
	S50= GPRegs[rA]=a                                           GPRegs-Hold(S23,S49)
	S51= GPRegs[rB]=b                                           GPRegs-Hold(S24,S49)
	S52= CtrlXERSO=0                                            Premise(F106)
	S53= XER[SO]=so                                             XER-SO-Hold(S26,S52)

ID	S54= IR.Out11_15=rA                                         IR-Out(S48)
	S55= IR.Out16_20=rB                                         IR-Out(S48)
	S56= IR.Out11_15=>GPRegs.RReg1                              Premise(F132)
	S57= GPRegs.RReg1=rA                                        Path(S54,S56)
	S58= GPRegs.Rdata1=a                                        GPRegs-Read(S57,S50)
	S59= IR.Out16_20=>GPRegs.RReg2                              Premise(F133)
	S60= GPRegs.RReg2=rB                                        Path(S55,S59)
	S61= GPRegs.Rdata2=b                                        GPRegs-Read(S60,S51)
	S62= GPRegs.Rdata1=>A.In                                    Premise(F135)
	S63= A.In=a                                                 Path(S58,S62)
	S64= GPRegs.Rdata2=>B.In                                    Premise(F136)
	S65= B.In=b                                                 Path(S61,S64)
	S66= CtrlPC=0                                               Premise(F147)
	S67= CtrlPCInc=0                                            Premise(F148)
	S68= PC[Out]=addr+4                                         PC-Hold(S44,S66,S67)
	S69= CtrlICache=0                                           Premise(F151)
	S70= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S46,S69)
	S71= CtrlIR=0                                               Premise(F156)
	S72= [IR]={31,BF,0,rA,rB,64}                                IR-Hold(S48,S71)
	S73= CtrlA=1                                                Premise(F158)
	S74= [A]=a                                                  A-Write(S63,S73)
	S75= CtrlB=1                                                Premise(F159)
	S76= [B]=b                                                  B-Write(S65,S75)
	S77= CtrlXERSO=0                                            Premise(F160)
	S78= XER[SO]=so                                             XER-SO-Hold(S53,S77)

EX	S79= A.Out=a                                                A-Out(S74)
	S80= B.Out=b                                                B-Out(S76)
	S81= XER.SOOut=so                                           XER-SO-Out(S78)
	S82= A.Out=>CMPU.A                                          Premise(F191)
	S83= CMPU.A=a                                               Path(S79,S82)
	S84= B.Out=>CMPU.B                                          Premise(F192)
	S85= CMPU.B=b                                               Path(S80,S84)
	S86= CMPU.Out=CompareU(a,b)                                 CMPU-CMPU(S83,S85)
	S87= CMPU.Out=>DataCmb.A                                    Premise(F194)
	S88= DataCmb.A=CompareU(a,b)                                Path(S86,S87)
	S89= XER.SOOut=>DataCmb.B                                   Premise(F195)
	S90= DataCmb.B=so                                           Path(S81,S89)
	S91= DataCmb.Out={CompareU(a,b),so}                         DataCmb(S88,S90)
	S92= DataCmb.Out=>DR4bit.In                                 Premise(F196)
	S93= DR4bit.In={CompareU(a,b),so}                           Path(S91,S92)
	S94= CtrlPC=0                                               Premise(F201)
	S95= CtrlPCInc=0                                            Premise(F202)
	S96= PC[Out]=addr+4                                         PC-Hold(S68,S94,S95)
	S97= CtrlICache=0                                           Premise(F205)
	S98= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S70,S97)
	S99= CtrlIR=0                                               Premise(F210)
	S100= [IR]={31,BF,0,rA,rB,64}                               IR-Hold(S72,S99)
	S101= CtrlDR4bit=1                                          Premise(F217)
	S102= [DR4bit]={CompareU(a,b),so}                           DR4bit-Write(S93,S101)

MEM	S103= CtrlPC=0                                              Premise(F255)
	S104= CtrlPCInc=0                                           Premise(F256)
	S105= PC[Out]=addr+4                                        PC-Hold(S96,S103,S104)
	S106= CtrlICache=0                                          Premise(F259)
	S107= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S98,S106)
	S108= CtrlIR=0                                              Premise(F264)
	S109= [IR]={31,BF,0,rA,rB,64}                               IR-Hold(S100,S108)
	S110= CtrlDR4bit=0                                          Premise(F271)
	S111= [DR4bit]={CompareU(a,b),so}                           DR4bit-Hold(S102,S110)

DMMU1	S112= CtrlPC=0                                              Premise(F309)
	S113= CtrlPCInc=0                                           Premise(F310)
	S114= PC[Out]=addr+4                                        PC-Hold(S105,S112,S113)
	S115= CtrlICache=0                                          Premise(F313)
	S116= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S107,S115)
	S117= CtrlIR=0                                              Premise(F318)
	S118= [IR]={31,BF,0,rA,rB,64}                               IR-Hold(S109,S117)
	S119= CtrlDR4bit=0                                          Premise(F325)
	S120= [DR4bit]={CompareU(a,b),so}                           DR4bit-Hold(S111,S119)

DMMU2	S121= CtrlPC=0                                              Premise(F363)
	S122= CtrlPCInc=0                                           Premise(F364)
	S123= PC[Out]=addr+4                                        PC-Hold(S114,S121,S122)
	S124= CtrlICache=0                                          Premise(F367)
	S125= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S116,S124)
	S126= CtrlIR=0                                              Premise(F372)
	S127= [IR]={31,BF,0,rA,rB,64}                               IR-Hold(S118,S126)
	S128= CtrlDR4bit=0                                          Premise(F379)
	S129= [DR4bit]={CompareU(a,b),so}                           DR4bit-Hold(S120,S128)

WB	S130= IR.Out6_8=BF                                          IR-Out(S127)
	S131= DR4bit.Out={CompareU(a,b),so}                         DR4bit-Out(S129)
	S132= DR4bit.Out=>CRRegs.W4bitData                          Premise(F413)
	S133= CRRegs.W4bitData={CompareU(a,b),so}                   Path(S131,S132)
	S134= IR.Out6_8=>CRRegs.W4bitReg                            Premise(F414)
	S135= CRRegs.W4bitReg=BF                                    Path(S130,S134)
	S136= CtrlPC=0                                              Premise(F417)
	S137= CtrlPCInc=0                                           Premise(F418)
	S138= PC[Out]=addr+4                                        PC-Hold(S123,S136,S137)
	S139= CtrlICache=0                                          Premise(F421)
	S140= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S125,S139)
	S141= CtrlCRRegsW4bitRegs=1                                 Premise(F436)
	S142= CRRegs[BF]={CompareU(a,b),so}                         CRRegs-Write(S135,S133,S141)

POST	S138= PC[Out]=addr+4                                        PC-Hold(S123,S136,S137)
	S140= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S125,S139)
	S142= CRRegs[BF]={CompareU(a,b),so}                         CRRegs-Write(S135,S133,S141)

