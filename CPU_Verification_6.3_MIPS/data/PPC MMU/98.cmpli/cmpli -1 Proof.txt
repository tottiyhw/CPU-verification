
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={10,BF,0,rA,UIMM}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.Out=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMMU.PID                                    Premise(F5)
	S8= IMMU.PID=pid                                            Path(S5,S7)
	S9= PC.Out=>IMMU.IEA                                        Premise(F6)
	S10= IMMU.IEA=addr                                          Path(S6,S9)
	S11= IMMU.Addr={pid,addr}                                   IMMU-Search(S8,S10)
	S12= IMMU.Addr=>IAddrReg.In                                 Premise(F7)
	S13= IAddrReg.In={pid,addr}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F37)
	S15= CtrlPCInc=0                                            Premise(F38)
	S16= PC[Out]=addr                                           PC-Hold(S1,S14,S15)
	S17= CtrlIAddrReg=1                                         Premise(F39)
	S18= [IAddrReg]={pid,addr}                                  IAddrReg-Write(S13,S17)
	S19= CtrlIMem=0                                             Premise(F44)
	S20= IMem[{pid,addr}]={10,BF,0,rA,UIMM}                     IMem-Hold(S2,S19)
	S21= CtrlGPRegs=0                                           Premise(F47)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= CtrlXERSO=0                                            Premise(F50)
	S24= XER[SO]=so                                             XER-SO-Hold(S4,S23)

IMMU	S25= PC.Out=addr                                            PC-Out(S16)
	S26= IAddrReg.Out={pid,addr}                                IAddrReg-Out(S18)
	S27= PC.Out=>ICache.IEA                                     Premise(F62)
	S28= ICache.IEA=addr                                        Path(S25,S27)
	S29= IAddrReg.Out=>IMem.RAddr                               Premise(F67)
	S30= IMem.RAddr={pid,addr}                                  Path(S26,S29)
	S31= IMem.Out={10,BF,0,rA,UIMM}                             IMem-Read(S30,S20)
	S32= IMem.MEM8WordOut=IMemGet8Word({pid,addr})              IMem-Read(S30,S20)
	S33= IMem.Out=>IRMux.MemData                                Premise(F68)
	S34= IRMux.MemData={10,BF,0,rA,UIMM}                        Path(S31,S33)
	S35= IRMux.Out={10,BF,0,rA,UIMM}                            IRMux-Select(S34)
	S36= IRMux.Out=>IR.In                                       Premise(F72)
	S37= IR.In={10,BF,0,rA,UIMM}                                Path(S35,S36)
	S38= IMem.MEM8WordOut=>ICache.WData                         Premise(F73)
	S39= ICache.WData=IMemGet8Word({pid,addr})                  Path(S32,S38)
	S40= CtrlPC=0                                               Premise(F90)
	S41= CtrlPCInc=1                                            Premise(F91)
	S42= PC[Out]=addr+4                                         PC-Inc(S16,S40,S41)
	S43= CtrlICache=1                                           Premise(F94)
	S44= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Write(S28,S39,S43)
	S45= CtrlIR=1                                               Premise(F99)
	S46= [IR]={10,BF,0,rA,UIMM}                                 IR-Write(S37,S45)
	S47= CtrlGPRegs=0                                           Premise(F100)
	S48= GPRegs[rA]=a                                           GPRegs-Hold(S22,S47)
	S49= CtrlXERSO=0                                            Premise(F103)
	S50= XER[SO]=so                                             XER-SO-Hold(S24,S49)

ID	S51= IR.Out11_15=rA                                         IR-Out(S46)
	S52= IR.Out16_31=UIMM                                       IR-Out(S46)
	S53= IR.Out11_15=>GPRegs.RReg1                              Premise(F129)
	S54= GPRegs.RReg1=rA                                        Path(S51,S53)
	S55= GPRegs.Rdata1=a                                        GPRegs-Read(S54,S48)
	S56= IR.Out16_31=>LIMMEXT.In                                Premise(F130)
	S57= LIMMEXT.In=UIMM                                        Path(S52,S56)
	S58= LIMMEXT.Out={16'b0,UIMM}                               LIMMEXT(S57)
	S59= GPRegs.Rdata1=>A.In                                    Premise(F131)
	S60= A.In=a                                                 Path(S55,S59)
	S61= LIMMEXT.Out=>B.In                                      Premise(F132)
	S62= B.In={16'b0,UIMM}                                      Path(S58,S61)
	S63= CtrlPC=0                                               Premise(F143)
	S64= CtrlPCInc=0                                            Premise(F144)
	S65= PC[Out]=addr+4                                         PC-Hold(S42,S63,S64)
	S66= CtrlICache=0                                           Premise(F147)
	S67= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S44,S66)
	S68= CtrlIR=0                                               Premise(F152)
	S69= [IR]={10,BF,0,rA,UIMM}                                 IR-Hold(S46,S68)
	S70= CtrlA=1                                                Premise(F154)
	S71= [A]=a                                                  A-Write(S60,S70)
	S72= CtrlB=1                                                Premise(F155)
	S73= [B]={16'b0,UIMM}                                       B-Write(S62,S72)
	S74= CtrlXERSO=0                                            Premise(F156)
	S75= XER[SO]=so                                             XER-SO-Hold(S50,S74)

EX	S76= A.Out=a                                                A-Out(S71)
	S77= B.Out={16'b0,UIMM}                                     B-Out(S73)
	S78= XER.SOOut=so                                           XER-SO-Out(S75)
	S79= A.Out=>CMPU.A                                          Premise(F186)
	S80= CMPU.A=a                                               Path(S76,S79)
	S81= B.Out=>CMPU.B                                          Premise(F187)
	S82= CMPU.B={16'b0,UIMM}                                    Path(S77,S81)
	S83= CMPU.Out=CompareU(a,{16'b0,UIMM})                      CMPU-CMPU(S80,S82)
	S84= CMPU.Out=>DataCmb.A                                    Premise(F189)
	S85= DataCmb.A=CompareU(a,{16'b0,UIMM})                     Path(S83,S84)
	S86= XER.SOOut=>DataCmb.B                                   Premise(F190)
	S87= DataCmb.B=so                                           Path(S78,S86)
	S88= DataCmb.Out={CompareU(a,{16'b0,UIMM}),so}              DataCmb(S85,S87)
	S89= DataCmb.Out=>DR4bit.In                                 Premise(F191)
	S90= DR4bit.In={CompareU(a,{16'b0,UIMM}),so}                Path(S88,S89)
	S91= CtrlPC=0                                               Premise(F196)
	S92= CtrlPCInc=0                                            Premise(F197)
	S93= PC[Out]=addr+4                                         PC-Hold(S65,S91,S92)
	S94= CtrlICache=0                                           Premise(F200)
	S95= ICache[line_addr]=IMemGet8Word({pid,addr})             ICache-Hold(S67,S94)
	S96= CtrlIR=0                                               Premise(F205)
	S97= [IR]={10,BF,0,rA,UIMM}                                 IR-Hold(S69,S96)
	S98= CtrlDR4bit=1                                           Premise(F212)
	S99= [DR4bit]={CompareU(a,{16'b0,UIMM}),so}                 DR4bit-Write(S90,S98)

MEM	S100= CtrlPC=0                                              Premise(F249)
	S101= CtrlPCInc=0                                           Premise(F250)
	S102= PC[Out]=addr+4                                        PC-Hold(S93,S100,S101)
	S103= CtrlICache=0                                          Premise(F253)
	S104= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S95,S103)
	S105= CtrlIR=0                                              Premise(F258)
	S106= [IR]={10,BF,0,rA,UIMM}                                IR-Hold(S97,S105)
	S107= CtrlDR4bit=0                                          Premise(F265)
	S108= [DR4bit]={CompareU(a,{16'b0,UIMM}),so}                DR4bit-Hold(S99,S107)

DMMU1	S109= CtrlPC=0                                              Premise(F302)
	S110= CtrlPCInc=0                                           Premise(F303)
	S111= PC[Out]=addr+4                                        PC-Hold(S102,S109,S110)
	S112= CtrlICache=0                                          Premise(F306)
	S113= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S104,S112)
	S114= CtrlIR=0                                              Premise(F311)
	S115= [IR]={10,BF,0,rA,UIMM}                                IR-Hold(S106,S114)
	S116= CtrlDR4bit=0                                          Premise(F318)
	S117= [DR4bit]={CompareU(a,{16'b0,UIMM}),so}                DR4bit-Hold(S108,S116)

DMMU2	S118= CtrlPC=0                                              Premise(F355)
	S119= CtrlPCInc=0                                           Premise(F356)
	S120= PC[Out]=addr+4                                        PC-Hold(S111,S118,S119)
	S121= CtrlICache=0                                          Premise(F359)
	S122= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S113,S121)
	S123= CtrlIR=0                                              Premise(F364)
	S124= [IR]={10,BF,0,rA,UIMM}                                IR-Hold(S115,S123)
	S125= CtrlDR4bit=0                                          Premise(F371)
	S126= [DR4bit]={CompareU(a,{16'b0,UIMM}),so}                DR4bit-Hold(S117,S125)

WB	S127= IR.Out6_8=BF                                          IR-Out(S124)
	S128= DR4bit.Out={CompareU(a,{16'b0,UIMM}),so}              DR4bit-Out(S126)
	S129= DR4bit.Out=>CRRegs.W4bitData                          Premise(F404)
	S130= CRRegs.W4bitData={CompareU(a,{16'b0,UIMM}),so}        Path(S128,S129)
	S131= IR.Out6_8=>CRRegs.W4bitReg                            Premise(F405)
	S132= CRRegs.W4bitReg=BF                                    Path(S127,S131)
	S133= CtrlPC=0                                              Premise(F408)
	S134= CtrlPCInc=0                                           Premise(F409)
	S135= PC[Out]=addr+4                                        PC-Hold(S120,S133,S134)
	S136= CtrlICache=0                                          Premise(F412)
	S137= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S122,S136)
	S138= CtrlCRRegsW4bitRegs=1                                 Premise(F427)
	S139= CRRegs[BF]={CompareU(a,{16'b0,UIMM}),so}              CRRegs-Write(S132,S130,S138)

POST	S135= PC[Out]=addr+4                                        PC-Hold(S120,S133,S134)
	S137= ICache[line_addr]=IMemGet8Word({pid,addr})            ICache-Hold(S122,S136)
	S139= CRRegs[BF]={CompareU(a,{16'b0,UIMM}),so}              CRRegs-Write(S132,S130,S138)

