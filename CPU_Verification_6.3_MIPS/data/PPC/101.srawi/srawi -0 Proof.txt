
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,SH,1648}                     Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.NIA=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMem.PID                                    Premise(F4)
	S7= IMem.PID=pid                                            Path(S4,S6)
	S8= PC.NIA=>IMem.Addr                                       Premise(F5)
	S9= IMem.Addr=addr                                          Path(S5,S8)
	S10= IMem.RData={31,rS,rA,SH,1648}                          IMem-Read(S7,S9,S2)
	S11= IMem.RData=>IR.In                                      Premise(F6)
	S12= IR.In={31,rS,rA,SH,1648}                               Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F22)
	S14= CtrlPCInc=1                                            Premise(F23)
	S15= PC[Out]=addr+4                                         PC-Inc(S1,S13,S14)
	S16= CtrlIR=1                                               Premise(F24)
	S17= [IR]={31,rS,rA,SH,1648}                                IR-Write(S12,S16)
	S18= CtrlGPRegs=0                                           Premise(F25)
	S19= GPRegs[rA]=a                                           GPRegs-Hold(S3,S18)

ID	S20= IR.Out11_15=rA                                         IR-Out(S17)
	S21= IR.Out16_20=SH                                         IR-Out(S17)
	S22= IR.Out11_15=>GPRegs.RReg1                              Premise(F37)
	S23= GPRegs.RReg1=rA                                        Path(S20,S22)
	S24= GPRegs.RData1=a                                        GPRegs-Read(S23,S19)
	S25= IR.Out16_20=>ShamtReg.In5bit                           Premise(F38)
	S26= ShamtReg.In5bit=SH                                     Path(S21,S25)
	S27= GPRegs.RData1=>A.In                                    Premise(F40)
	S28= A.In=a                                                 Path(S24,S27)
	S29= CtrlPC=0                                               Premise(F51)
	S30= CtrlPCInc=0                                            Premise(F52)
	S31= PC[Out]=addr+4                                         PC-Hold(S15,S29,S30)
	S32= CtrlIR=0                                               Premise(F53)
	S33= [IR]={31,rS,rA,SH,1648}                                IR-Hold(S17,S32)
	S34= CtrlShamtReg=1                                         Premise(F55)
	S35= [ShamtReg]=SH                                          ShamtReg-Write(S26,S34)
	S36= CtrlA=1                                                Premise(F56)
	S37= [A]=a                                                  A-Write(S28,S36)

EX	S38= ShamtReg.Out=SH                                        ShamtReg-Out(S35)
	S39= A.Out=a                                                A-Out(S37)
	S40= A.Out=>SU.Data                                         Premise(F70)
	S41= SU.Data=a                                              Path(S39,S40)
	S42= ShamtReg.Out=>SU.Shamt                                 Premise(F71)
	S43= SU.Shamt=SH                                            Path(S38,S42)
	S44= SU.Out=a>>SH                                           SU(S41,S43)
	S45= SU.CA=Carry(a>>SH)                                     SU(S41,S43)
	S46= SU.Out=>ALUOut.In                                      Premise(F73)
	S47= ALUOut.In=a>>SH                                        Path(S44,S46)
	S48= SU.CA=>CAReg.In                                        Premise(F74)
	S49= CAReg.In=Carry(a>>SH)                                  Path(S45,S48)
	S50= CtrlPC=0                                               Premise(F80)
	S51= CtrlPCInc=0                                            Premise(F81)
	S52= PC[Out]=addr+4                                         PC-Hold(S31,S50,S51)
	S53= CtrlIR=0                                               Premise(F82)
	S54= [IR]={31,rS,rA,SH,1648}                                IR-Hold(S33,S53)
	S55= CtrlALUOut=1                                           Premise(F86)
	S56= [ALUOut]=a>>SH                                         ALUOut-Write(S47,S55)
	S57= CtrlCAReg=1                                            Premise(F87)
	S58= [CAReg]=Carry(a>>SH)                                   CAReg-Write(S49,S57)

MEM	S59= CtrlPC=0                                               Premise(F109)
	S60= CtrlPCInc=0                                            Premise(F110)
	S61= PC[Out]=addr+4                                         PC-Hold(S52,S59,S60)
	S62= CtrlIR=0                                               Premise(F111)
	S63= [IR]={31,rS,rA,SH,1648}                                IR-Hold(S54,S62)
	S64= CtrlALUOut=0                                           Premise(F115)
	S65= [ALUOut]=a>>SH                                         ALUOut-Hold(S56,S64)
	S66= CtrlCAReg=0                                            Premise(F116)
	S67= [CAReg]=Carry(a>>SH)                                   CAReg-Hold(S58,S66)

WB	S68= IR.Out6_10=rS                                          IR-Out(S63)
	S69= ALUOut.Out=a>>SH                                       ALUOut-Out(S65)
	S70= CAReg.Out=Carry(a>>SH)                                 CAReg-Out(S67)
	S71= IR.Out6_10=>GPRegs.WReg                                Premise(F133)
	S72= GPRegs.WReg=rS                                         Path(S68,S71)
	S73= ALUOut.Out=>GPRegs.WData                               Premise(F134)
	S74= GPRegs.WData=a>>SH                                     Path(S69,S73)
	S75= CAReg.Out=>XER.CAIn                                    Premise(F135)
	S76= XER.CAIn=Carry(a>>SH)                                  Path(S70,S75)
	S77= CtrlPC=0                                               Premise(F138)
	S78= CtrlPCInc=0                                            Premise(F139)
	S79= PC[Out]=addr+4                                         PC-Hold(S61,S77,S78)
	S80= CtrlGPRegs=1                                           Premise(F141)
	S81= GPRegs[rS]=a>>SH                                       GPRegs-Write(S72,S74,S80)
	S82= CtrlXERCA=1                                            Premise(F148)
	S83= XER[CA]=Carry(a>>SH)                                   XER-CA-Write(S76,S82)

POST	S79= PC[Out]=addr+4                                         PC-Hold(S61,S77,S78)
	S81= GPRegs[rS]=a>>SH                                       GPRegs-Write(S72,S74,S80)
	S83= XER[CA]=Carry(a>>SH)                                   XER-CA-Write(S76,S82)

