
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,SH,1649}                     Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.NIA=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMem.PID                                    Premise(F5)
	S8= IMem.PID=pid                                            Path(S5,S7)
	S9= PC.NIA=>IMem.Addr                                       Premise(F6)
	S10= IMem.Addr=addr                                         Path(S6,S9)
	S11= IMem.RData={31,rS,rA,SH,1649}                          IMem-Read(S8,S10,S2)
	S12= IMem.RData=>IR.In                                      Premise(F7)
	S13= IR.In={31,rS,rA,SH,1649}                               Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F27)
	S15= CtrlPCInc=1                                            Premise(F28)
	S16= PC[Out]=addr+4                                         PC-Inc(S1,S14,S15)
	S17= CtrlIR=1                                               Premise(F29)
	S18= [IR]={31,rS,rA,SH,1649}                                IR-Write(S13,S17)
	S19= CtrlGPRegs=0                                           Premise(F30)
	S20= GPRegs[rA]=a                                           GPRegs-Hold(S3,S19)
	S21= CtrlXERSO=0                                            Premise(F34)
	S22= XER[SO]=so                                             XER-SO-Hold(S4,S21)

ID	S23= IR.Out11_15=rA                                         IR-Out(S18)
	S24= IR.Out16_20=SH                                         IR-Out(S18)
	S25= IR.Out11_15=>GPRegs.RReg1                              Premise(F47)
	S26= GPRegs.RReg1=rA                                        Path(S23,S25)
	S27= GPRegs.RData1=a                                        GPRegs-Read(S26,S20)
	S28= IR.Out16_20=>ShamtReg.In5bit                           Premise(F48)
	S29= ShamtReg.In5bit=SH                                     Path(S24,S28)
	S30= GPRegs.RData1=>A.In                                    Premise(F50)
	S31= A.In=a                                                 Path(S27,S30)
	S32= CtrlPC=0                                               Premise(F65)
	S33= CtrlPCInc=0                                            Premise(F66)
	S34= PC[Out]=addr+4                                         PC-Hold(S16,S32,S33)
	S35= CtrlIR=0                                               Premise(F67)
	S36= [IR]={31,rS,rA,SH,1649}                                IR-Hold(S18,S35)
	S37= CtrlShamtReg=1                                         Premise(F69)
	S38= [ShamtReg]=SH                                          ShamtReg-Write(S29,S37)
	S39= CtrlA=1                                                Premise(F70)
	S40= [A]=a                                                  A-Write(S31,S39)
	S41= CtrlXERSO=0                                            Premise(F72)
	S42= XER[SO]=so                                             XER-SO-Hold(S22,S41)

EX	S43= ShamtReg.Out=SH                                        ShamtReg-Out(S38)
	S44= A.Out=a                                                A-Out(S40)
	S45= XER.SOOut=so                                           XER-SO-Out(S42)
	S46= A.Out=>SU.Data                                         Premise(F89)
	S47= SU.Data=a                                              Path(S44,S46)
	S48= ShamtReg.Out=>SU.Shamt                                 Premise(F90)
	S49= SU.Shamt=SH                                            Path(S43,S48)
	S50= SU.Out=a>>SH                                           SU(S47,S49)
	S51= SU.CMP=Compare0(a>>SH)                                 SU(S47,S49)
	S52= SU.CA=Carry(a>>SH)                                     SU(S47,S49)
	S53= SU.Out=>ALUOut.In                                      Premise(F92)
	S54= ALUOut.In=a>>SH                                        Path(S50,S53)
	S55= SU.CMP=>DataCmb.A                                      Premise(F93)
	S56= DataCmb.A=Compare0(a>>SH)                              Path(S51,S55)
	S57= XER.SOOut=>DataCmb.B                                   Premise(F94)
	S58= DataCmb.B=so                                           Path(S45,S57)
	S59= DataCmb.Out={Compare0(a>>SH),so}                       DataCmb(S56,S58)
	S60= DataCmb.Out=>DR4bit.In                                 Premise(F95)
	S61= DR4bit.In={Compare0(a>>SH),so}                         Path(S59,S60)
	S62= SU.CA=>CAReg.In                                        Premise(F96)
	S63= CAReg.In=Carry(a>>SH)                                  Path(S52,S62)
	S64= CtrlPC=0                                               Premise(F103)
	S65= CtrlPCInc=0                                            Premise(F104)
	S66= PC[Out]=addr+4                                         PC-Hold(S34,S64,S65)
	S67= CtrlIR=0                                               Premise(F105)
	S68= [IR]={31,rS,rA,SH,1649}                                IR-Hold(S36,S67)
	S69= CtrlALUOut=1                                           Premise(F109)
	S70= [ALUOut]=a>>SH                                         ALUOut-Write(S54,S69)
	S71= CtrlDR4bit=1                                           Premise(F113)
	S72= [DR4bit]={Compare0(a>>SH),so}                          DR4bit-Write(S61,S71)
	S73= CtrlCAReg=1                                            Premise(F114)
	S74= [CAReg]=Carry(a>>SH)                                   CAReg-Write(S63,S73)

MEM	S75= CtrlPC=0                                               Premise(F141)
	S76= CtrlPCInc=0                                            Premise(F142)
	S77= PC[Out]=addr+4                                         PC-Hold(S66,S75,S76)
	S78= CtrlIR=0                                               Premise(F143)
	S79= [IR]={31,rS,rA,SH,1649}                                IR-Hold(S68,S78)
	S80= CtrlALUOut=0                                           Premise(F147)
	S81= [ALUOut]=a>>SH                                         ALUOut-Hold(S70,S80)
	S82= CtrlDR4bit=0                                           Premise(F151)
	S83= [DR4bit]={Compare0(a>>SH),so}                          DR4bit-Hold(S72,S82)
	S84= CtrlCAReg=0                                            Premise(F152)
	S85= [CAReg]=Carry(a>>SH)                                   CAReg-Hold(S74,S84)

WB	S86= IR.Out6_10=rS                                          IR-Out(S79)
	S87= ALUOut.Out=a>>SH                                       ALUOut-Out(S81)
	S88= DR4bit.Out={Compare0(a>>SH),so}                        DR4bit-Out(S83)
	S89= CAReg.Out=Carry(a>>SH)                                 CAReg-Out(S85)
	S90= IR.Out6_10=>GPRegs.WReg                                Premise(F173)
	S91= GPRegs.WReg=rS                                         Path(S86,S90)
	S92= ALUOut.Out=>GPRegs.WData                               Premise(F174)
	S93= GPRegs.WData=a>>SH                                     Path(S87,S92)
	S94= DR4bit.Out=>CRRegs.CR0In                               Premise(F175)
	S95= CRRegs.CR0In={Compare0(a>>SH),so}                      Path(S88,S94)
	S96= CAReg.Out=>XER.CAIn                                    Premise(F176)
	S97= XER.CAIn=Carry(a>>SH)                                  Path(S89,S96)
	S98= CtrlPC=0                                               Premise(F179)
	S99= CtrlPCInc=0                                            Premise(F180)
	S100= PC[Out]=addr+4                                        PC-Hold(S77,S98,S99)
	S101= CtrlGPRegs=1                                          Premise(F182)
	S102= GPRegs[rS]=a>>SH                                      GPRegs-Write(S91,S93,S101)
	S103= CtrlXERCA=1                                           Premise(F188)
	S104= XER[CA]=Carry(a>>SH)                                  XER-CA-Write(S97,S103)
	S105= CtrlCRRegsCR0=1                                       Premise(F192)
	S106= CRRegs[CR0]={Compare0(a>>SH),so}                      CRRegs-CR0-Write(S95,S105)

POST	S100= PC[Out]=addr+4                                        PC-Hold(S77,S98,S99)
	S102= GPRegs[rS]=a>>SH                                      GPRegs-Write(S91,S93,S101)
	S104= XER[CA]=Carry(a>>SH)                                  XER-CA-Write(S97,S103)
	S106= CRRegs[CR0]={Compare0(a>>SH),so}                      CRRegs-CR0-Write(S95,S105)

