
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={35,rT,rA,d}                           Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.NIA=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMem.PID                                    Premise(F5)
	S7= IMem.PID=pid                                            Path(S4,S6)
	S8= PC.NIA=>IMem.Addr                                       Premise(F6)
	S9= IMem.Addr=addr                                          Path(S5,S8)
	S10= IMem.RData={35,rT,rA,d}                                IMem-Read(S7,S9,S2)
	S11= IMem.RData=>IR.In                                      Premise(F7)
	S12= IR.In={35,rT,rA,d}                                     Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F28)
	S14= CtrlPCInc=1                                            Premise(F29)
	S15= PC[Out]=addr+4                                         PC-Inc(S1,S13,S14)
	S16= CtrlIR=1                                               Premise(F30)
	S17= [IR]={35,rT,rA,d}                                      IR-Write(S12,S16)
	S18= CtrlGPRegs=0                                           Premise(F31)
	S19= GPRegs[rA]=a                                           GPRegs-Hold(S3,S18)

ID	S20= IR.Out11_15=rA                                         IR-Out(S17)
	S21= IR.Out16_31=d                                          IR-Out(S17)
	S22= IR.Out11_15=>GPRegs.RReg1                              Premise(F42)
	S23= GPRegs.RReg1=rA                                        Path(S20,S22)
	S24= GPRegs.RData1=a                                        GPRegs-Read(S23,S19)
	S25= GPRegs.RData1=>A.In                                    Premise(F43)
	S26= A.In=a                                                 Path(S24,S25)
	S27= IR.Out16_31=>IMMEXT.In                                 Premise(F44)
	S28= IMMEXT.In=d                                            Path(S21,S27)
	S29= IMMEXT.Out={16{d[15]},d}                               IMMEXT(S28)
	S30= IMMEXT.Out=>B.In                                       Premise(F45)
	S31= B.In={16{d[15]},d}                                     Path(S29,S30)
	S32= CtrlPC=0                                               Premise(F61)
	S33= CtrlPCInc=0                                            Premise(F62)
	S34= PC[Out]=addr+4                                         PC-Hold(S15,S32,S33)
	S35= CtrlIR=0                                               Premise(F63)
	S36= [IR]={35,rT,rA,d}                                      IR-Hold(S17,S35)
	S37= CtrlA=1                                                Premise(F65)
	S38= [A]=a                                                  A-Write(S26,S37)
	S39= CtrlB=1                                                Premise(F66)
	S40= [B]={16{d[15]},d}                                      B-Write(S31,S39)

EX	S41= A.Out=a                                                A-Out(S38)
	S42= B.Out={16{d[15]},d}                                    B-Out(S40)
	S43= A.Out=>ALU.A                                           Premise(F79)
	S44= ALU.A=a                                                Path(S41,S43)
	S45= B.Out=>ALU.B                                           Premise(F80)
	S46= ALU.B={16{d[15]},d}                                    Path(S42,S45)
	S47= ALU.Out=a+{16{d[15]},d}                                ALU(S44,S46)
	S48= ALU.Out=>ALUOut.In                                     Premise(F82)
	S49= ALUOut.In=a+{16{d[15]},d}                              Path(S47,S48)
	S50= CtrlPC=0                                               Premise(F94)
	S51= CtrlPCInc=0                                            Premise(F95)
	S52= PC[Out]=addr+4                                         PC-Hold(S34,S50,S51)
	S53= CtrlIR=0                                               Premise(F96)
	S54= [IR]={35,rT,rA,d}                                      IR-Hold(S36,S53)
	S55= CtrlALUOut=1                                           Premise(F100)
	S56= [ALUOut]=a+{16{d[15]},d}                               ALUOut-Write(S49,S55)

MEM	S57= CtrlPC=0                                               Premise(F127)
	S58= CtrlPCInc=0                                            Premise(F128)
	S59= PC[Out]=addr+4                                         PC-Hold(S52,S57,S58)
	S60= CtrlIR=0                                               Premise(F129)
	S61= [IR]={35,rT,rA,d}                                      IR-Hold(S54,S60)
	S62= CtrlALUOut=0                                           Premise(F133)
	S63= [ALUOut]=a+{16{d[15]},d}                               ALUOut-Hold(S56,S62)

WB	S64= IR.Out6_10=rT                                          IR-Out(S61)
	S65= IR.Out11_15=rA                                         IR-Out(S61)
	S66= ALUOut.Out=a+{16{d[15]},d}                             ALUOut-Out(S63)
	S67= MemDataSel.Out={0,B1}                                  MemDataSel()
	S68= MemDataSel.Out=>GPRegs.WData                           Premise(F154)
	S69= GPRegs.WData={0,B1}                                    Path(S67,S68)
	S70= IR.Out6_10=>GPRegs.WReg                                Premise(F155)
	S71= GPRegs.WReg=rT                                         Path(S64,S70)
	S72= ALUOut.Out=>GPRegs.WBData                              Premise(F156)
	S73= GPRegs.WBData=a+{16{d[15]},d}                          Path(S66,S72)
	S74= IR.Out11_15=>GPRegs.WBReg                              Premise(F157)
	S75= GPRegs.WBReg=rA                                        Path(S65,S74)
	S76= CtrlPC=0                                               Premise(F160)
	S77= CtrlPCInc=0                                            Premise(F161)
	S78= PC[Out]=addr+4                                         PC-Hold(S59,S76,S77)
	S79= CtrlGPRegs=1                                           Premise(F163)
	S80= GPRegs[rT]={0,B1}                                      GPRegs-Write(S71,S69,S79)
	S81= GPRegs[rA]=a+{16{d[15]},d}                             GPRegs-Write(S75,S73,S79)

POST	S78= PC[Out]=addr+4                                         PC-Hold(S59,S76,S77)
	S80= GPRegs[rT]={0,B1}                                      GPRegs-Write(S71,S69,S79)
	S81= GPRegs[rA]=a+{16{d[15]},d}                             GPRegs-Write(S75,S73,S79)

