
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,622}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.NIA=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S8= IMem.PID=pid                                            Path(S5,S7)
	S9= PC.NIA=>IMem.Addr                                       Premise(F7)
	S10= IMem.Addr=addr                                         Path(S6,S9)
	S11= IMem.RData={31,rT,rA,rB,622}                           IMem-Read(S8,S10,S2)
	S12= IMem.RData=>IR.In                                      Premise(F8)
	S13= IR.In={31,rT,rA,rB,622}                                Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F30)
	S15= CtrlPCInc=1                                            Premise(F31)
	S16= PC[Out]=addr+4                                         PC-Inc(S1,S14,S15)
	S17= CtrlIR=1                                               Premise(F32)
	S18= [IR]={31,rT,rA,rB,622}                                 IR-Write(S13,S17)
	S19= CtrlGPRegs=0                                           Premise(F33)
	S20= GPRegs[rA]=a                                           GPRegs-Hold(S3,S19)
	S21= GPRegs[rB]=b                                           GPRegs-Hold(S4,S19)

ID	S22= IR.Out11_15=rA                                         IR-Out(S18)
	S23= IR.Out16_20=rB                                         IR-Out(S18)
	S24= IR.Out11_15=>GPRegs.RReg1                              Premise(F44)
	S25= GPRegs.RReg1=rA                                        Path(S22,S24)
	S26= GPRegs.RData1=a                                        GPRegs-Read(S25,S20)
	S27= IR.Out16_20=>GPRegs.RReg2                              Premise(F45)
	S28= GPRegs.RReg2=rB                                        Path(S23,S27)
	S29= GPRegs.RData2=b                                        GPRegs-Read(S28,S21)
	S30= GPRegs.RData1=>A.In                                    Premise(F47)
	S31= A.In=a                                                 Path(S26,S30)
	S32= GPRegs.RData2=>B.In                                    Premise(F48)
	S33= B.In=b                                                 Path(S29,S32)
	S34= CtrlPC=0                                               Premise(F64)
	S35= CtrlPCInc=0                                            Premise(F65)
	S36= PC[Out]=addr+4                                         PC-Hold(S16,S34,S35)
	S37= CtrlIR=0                                               Premise(F66)
	S38= [IR]={31,rT,rA,rB,622}                                 IR-Hold(S18,S37)
	S39= CtrlA=1                                                Premise(F68)
	S40= [A]=a                                                  A-Write(S31,S39)
	S41= CtrlB=1                                                Premise(F69)
	S42= [B]=b                                                  B-Write(S33,S41)

EX	S43= A.Out=a                                                A-Out(S40)
	S44= B.Out=b                                                B-Out(S42)
	S45= A.Out=>ALU.A                                           Premise(F83)
	S46= ALU.A=a                                                Path(S43,S45)
	S47= B.Out=>ALU.B                                           Premise(F84)
	S48= ALU.B=b                                                Path(S44,S47)
	S49= ALU.Out=a+b                                            ALU(S46,S48)
	S50= ALU.Out=>ALUOut.In                                     Premise(F86)
	S51= ALUOut.In=a+b                                          Path(S49,S50)
	S52= CtrlPC=0                                               Premise(F98)
	S53= CtrlPCInc=0                                            Premise(F99)
	S54= PC[Out]=addr+4                                         PC-Hold(S36,S52,S53)
	S55= CtrlIR=0                                               Premise(F100)
	S56= [IR]={31,rT,rA,rB,622}                                 IR-Hold(S38,S55)
	S57= CtrlALUOut=1                                           Premise(F104)
	S58= [ALUOut]=a+b                                           ALUOut-Write(S51,S57)

MEM	S59= CtrlPC=0                                               Premise(F132)
	S60= CtrlPCInc=0                                            Premise(F133)
	S61= PC[Out]=addr+4                                         PC-Hold(S54,S59,S60)
	S62= CtrlIR=0                                               Premise(F134)
	S63= [IR]={31,rT,rA,rB,622}                                 IR-Hold(S56,S62)
	S64= CtrlALUOut=0                                           Premise(F138)
	S65= [ALUOut]=a+b                                           ALUOut-Hold(S58,S64)

WB	S66= IR.Out6_10=rT                                          IR-Out(S63)
	S67= IR.Out11_15=rA                                         IR-Out(S63)
	S68= ALUOut.Out=a+b                                         ALUOut-Out(S65)
	S69= MemDataSel.Out={0,B1,B2}                               MemDataSel()
	S70= MemDataSel.Out=>GPRegs.WData                           Premise(F160)
	S71= GPRegs.WData={0,B1,B2}                                 Path(S69,S70)
	S72= IR.Out6_10=>GPRegs.WReg                                Premise(F161)
	S73= GPRegs.WReg=rT                                         Path(S66,S72)
	S74= ALUOut.Out=>GPRegs.WBData                              Premise(F162)
	S75= GPRegs.WBData=a+b                                      Path(S68,S74)
	S76= IR.Out11_15=>GPRegs.WBReg                              Premise(F163)
	S77= GPRegs.WBReg=rA                                        Path(S67,S76)
	S78= CtrlPC=0                                               Premise(F166)
	S79= CtrlPCInc=0                                            Premise(F167)
	S80= PC[Out]=addr+4                                         PC-Hold(S61,S78,S79)
	S81= CtrlGPRegs=1                                           Premise(F169)
	S82= GPRegs[rT]={0,B1,B2}                                   GPRegs-Write(S73,S71,S81)
	S83= GPRegs[rA]=a+b                                         GPRegs-Write(S77,S75,S81)

POST	S80= PC[Out]=addr+4                                         PC-Hold(S61,S78,S79)
	S82= GPRegs[rT]={0,B1,B2}                                   GPRegs-Write(S73,S71,S81)
	S83= GPRegs[rA]=a+b                                         GPRegs-Write(S77,S75,S81)

