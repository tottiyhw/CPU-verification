
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,rB,430}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.NIA=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S8= IMem.PID=pid                                            Path(S5,S7)
	S9= PC.NIA=>IMem.Addr                                       Premise(F7)
	S10= IMem.Addr=addr                                         Path(S6,S9)
	S11= IMem.RData={31,rS,rA,rB,430}                           IMem-Read(S8,S10,S2)
	S12= IMem.RData=>IR.In                                      Premise(F8)
	S13= IR.In={31,rS,rA,rB,430}                                Path(S11,S12)
	S14= CtrlPIDReg=0                                           Premise(F30)
	S15= [PIDReg]=pid                                           PIDReg-Hold(S0,S14)
	S16= CtrlPC=0                                               Premise(F32)
	S17= CtrlPCInc=1                                            Premise(F33)
	S18= PC[Out]=addr+4                                         PC-Inc(S1,S16,S17)
	S19= CtrlIR=1                                               Premise(F34)
	S20= [IR]={31,rS,rA,rB,430}                                 IR-Write(S13,S19)
	S21= CtrlGPRegs=0                                           Premise(F35)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= GPRegs[rB]=b                                           GPRegs-Hold(S4,S21)

ID	S24= IR.Out11_15=rA                                         IR-Out(S20)
	S25= IR.Out16_20=rB                                         IR-Out(S20)
	S26= IR.Out11_15=>GPRegs.RReg1                              Premise(F46)
	S27= GPRegs.RReg1=rA                                        Path(S24,S26)
	S28= GPRegs.RData1=a                                        GPRegs-Read(S27,S22)
	S29= IR.Out11_15=>AddrSelMux.Sel                            Premise(F47)
	S30= AddrSelMux.Sel=rA                                      Path(S24,S29)
	S31= GPRegs.RData1=>AddrSelMux.Data                         Premise(F48)
	S32= AddrSelMux.Data=a                                      Path(S28,S31)
	S33= AddrSelMux.Out=AddrSel(rA,a)                           AddrSelMux(S30,S32)
	S34= AddrSelMux.Out=>A.In                                   Premise(F49)
	S35= A.In=AddrSel(rA,a)                                     Path(S33,S34)
	S36= IR.Out16_20=>GPRegs.RReg2                              Premise(F50)
	S37= GPRegs.RReg2=rB                                        Path(S25,S36)
	S38= GPRegs.RData2=b                                        GPRegs-Read(S37,S23)
	S39= GPRegs.RData2=>B.In                                    Premise(F51)
	S40= B.In=b                                                 Path(S38,S39)
	S41= CtrlPIDReg=0                                           Premise(F66)
	S42= [PIDReg]=pid                                           PIDReg-Hold(S15,S41)
	S43= CtrlPC=0                                               Premise(F68)
	S44= CtrlPCInc=0                                            Premise(F69)
	S45= PC[Out]=addr+4                                         PC-Hold(S18,S43,S44)
	S46= CtrlA=1                                                Premise(F72)
	S47= [A]=AddrSel(rA,a)                                      A-Write(S35,S46)
	S48= CtrlB=1                                                Premise(F73)
	S49= [B]=b                                                  B-Write(S40,S48)

EX	S50= A.Out=AddrSel(rA,a)                                    A-Out(S47)
	S51= B.Out=b                                                B-Out(S49)
	S52= A.Out=>ALU.A                                           Premise(F89)
	S53= ALU.A=AddrSel(rA,a)                                    Path(S50,S52)
	S54= B.Out=>ALU.B                                           Premise(F90)
	S55= ALU.B=b                                                Path(S51,S54)
	S56= ALU.Out=AddrSel(rA,a)+b                                ALU(S53,S55)
	S57= ALU.Out=>ALUOut.In                                     Premise(F92)
	S58= ALUOut.In=AddrSel(rA,a)+b                              Path(S56,S57)
	S59= MemDataSel.Out={0,B4}                                  MemDataSel()
	S60= MemDataSel.Out=>DR.In                                  Premise(F96)
	S61= DR.In={0,B4}                                           Path(S59,S60)
	S62= CtrlPIDReg=0                                           Premise(F102)
	S63= [PIDReg]=pid                                           PIDReg-Hold(S42,S62)
	S64= CtrlPC=0                                               Premise(F104)
	S65= CtrlPCInc=0                                            Premise(F105)
	S66= PC[Out]=addr+4                                         PC-Hold(S45,S64,S65)
	S67= CtrlALUOut=1                                           Premise(F110)
	S68= [ALUOut]=AddrSel(rA,a)+b                               ALUOut-Write(S58,S67)
	S69= CtrlDR=1                                               Premise(F111)
	S70= [DR]={0,B4}                                            DR-Write(S61,S69)

MEM	S71= PIDReg.Out=pid                                         PIDReg-Out(S63)
	S72= ALUOut.Out=AddrSel(rA,a)+b                             ALUOut-Out(S68)
	S73= DR.Out={0,B4}                                          DR-Out(S70)
	S74= PIDReg.Out=>DMem.PID                                   Premise(F133)
	S75= DMem.PID=pid                                           Path(S71,S74)
	S76= ALUOut.Out=>DMem.WAddr                                 Premise(F134)
	S77= DMem.WAddr=AddrSel(rA,a)+b                             Path(S72,S76)
	S78= DR.Out=>DMem.WData                                     Premise(F135)
	S79= DMem.WData={0,B4}                                      Path(S73,S78)
	S80= CtrlPC=0                                               Premise(F140)
	S81= CtrlPCInc=0                                            Premise(F141)
	S82= PC[Out]=addr+4                                         PC-Hold(S66,S80,S81)
	S83= CtrlDMem=1                                             Premise(F148)
	S84= DMem[{pid,AddrSel(rA,a)+b}]={0,B4}                     DMem-Write(S75,S77,S79,S83)

WB	S85= CtrlPC=0                                               Premise(F176)
	S86= CtrlPCInc=0                                            Premise(F177)
	S87= PC[Out]=addr+4                                         PC-Hold(S82,S85,S86)
	S88= CtrlDMem=0                                             Premise(F184)
	S89= DMem[{pid,AddrSel(rA,a)+b}]={0,B4}                     DMem-Hold(S84,S88)

POST	S87= PC[Out]=addr+4                                         PC-Hold(S82,S85,S86)
	S89= DMem[{pid,AddrSel(rA,a)+b}]={0,B4}                     DMem-Hold(S84,S88)

