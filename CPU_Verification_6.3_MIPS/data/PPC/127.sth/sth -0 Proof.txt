
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={44,rS,rA,d}                           Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.NIA=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMem.PID                                    Premise(F5)
	S7= IMem.PID=pid                                            Path(S4,S6)
	S8= PC.NIA=>IMem.Addr                                       Premise(F6)
	S9= IMem.Addr=addr                                          Path(S5,S8)
	S10= IMem.RData={44,rS,rA,d}                                IMem-Read(S7,S9,S2)
	S11= IMem.RData=>IR.In                                      Premise(F7)
	S12= IR.In={44,rS,rA,d}                                     Path(S10,S11)
	S13= CtrlPIDReg=0                                           Premise(F26)
	S14= [PIDReg]=pid                                           PIDReg-Hold(S0,S13)
	S15= CtrlPC=0                                               Premise(F28)
	S16= CtrlPCInc=1                                            Premise(F29)
	S17= PC[Out]=addr+4                                         PC-Inc(S1,S15,S16)
	S18= CtrlIR=1                                               Premise(F30)
	S19= [IR]={44,rS,rA,d}                                      IR-Write(S12,S18)
	S20= CtrlGPRegs=0                                           Premise(F31)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)

ID	S22= IR.Out11_15=rA                                         IR-Out(S19)
	S23= IR.Out16_31=d                                          IR-Out(S19)
	S24= IR.Out11_15=>GPRegs.RReg1                              Premise(F42)
	S25= GPRegs.RReg1=rA                                        Path(S22,S24)
	S26= GPRegs.RData1=a                                        GPRegs-Read(S25,S21)
	S27= IR.Out11_15=>AddrSelMux.Sel                            Premise(F43)
	S28= AddrSelMux.Sel=rA                                      Path(S22,S27)
	S29= GPRegs.RData1=>AddrSelMux.Data                         Premise(F44)
	S30= AddrSelMux.Data=a                                      Path(S26,S29)
	S31= AddrSelMux.Out=AddrSel(rA,a)                           AddrSelMux(S28,S30)
	S32= AddrSelMux.Out=>A.In                                   Premise(F45)
	S33= A.In=AddrSel(rA,a)                                     Path(S31,S32)
	S34= IR.Out16_31=>IMMEXT.In                                 Premise(F46)
	S35= IMMEXT.In=d                                            Path(S23,S34)
	S36= IMMEXT.Out={16{d[15]},d}                               IMMEXT(S35)
	S37= IMMEXT.Out=>B.In                                       Premise(F47)
	S38= B.In={16{d[15]},d}                                     Path(S36,S37)
	S39= MemDataSel.Out={0,B3,B4}                               MemDataSel()
	S40= MemDataSel.Out=>DR.In                                  Premise(F51)
	S41= DR.In={0,B3,B4}                                        Path(S39,S40)
	S42= CtrlPIDReg=0                                           Premise(F59)
	S43= [PIDReg]=pid                                           PIDReg-Hold(S14,S42)
	S44= CtrlPC=0                                               Premise(F61)
	S45= CtrlPCInc=0                                            Premise(F62)
	S46= PC[Out]=addr+4                                         PC-Hold(S17,S44,S45)
	S47= CtrlA=1                                                Premise(F65)
	S48= [A]=AddrSel(rA,a)                                      A-Write(S33,S47)
	S49= CtrlB=1                                                Premise(F66)
	S50= [B]={16{d[15]},d}                                      B-Write(S38,S49)
	S51= CtrlDR=1                                               Premise(F67)
	S52= [DR]={0,B3,B4}                                         DR-Write(S41,S51)

EX	S53= A.Out=AddrSel(rA,a)                                    A-Out(S48)
	S54= B.Out={16{d[15]},d}                                    B-Out(S50)
	S55= A.Out=>ALU.A                                           Premise(F85)
	S56= ALU.A=AddrSel(rA,a)                                    Path(S53,S55)
	S57= B.Out=>ALU.B                                           Premise(F86)
	S58= ALU.B={16{d[15]},d}                                    Path(S54,S57)
	S59= ALU.Out=AddrSel(rA,a)+{16{d[15]},d}                    ALU(S56,S58)
	S60= ALU.Out=>ALUOut.In                                     Premise(F88)
	S61= ALUOut.In=AddrSel(rA,a)+{16{d[15]},d}                  Path(S59,S60)
	S62= CtrlPIDReg=0                                           Premise(F92)
	S63= [PIDReg]=pid                                           PIDReg-Hold(S43,S62)
	S64= CtrlPC=0                                               Premise(F94)
	S65= CtrlPCInc=0                                            Premise(F95)
	S66= PC[Out]=addr+4                                         PC-Hold(S46,S64,S65)
	S67= CtrlDR=0                                               Premise(F100)
	S68= [DR]={0,B3,B4}                                         DR-Hold(S52,S67)
	S69= CtrlALUOut=1                                           Premise(F101)
	S70= [ALUOut]=AddrSel(rA,a)+{16{d[15]},d}                   ALUOut-Write(S61,S69)

MEM	S71= PIDReg.Out=pid                                         PIDReg-Out(S63)
	S72= DR.Out={0,B3,B4}                                       DR-Out(S68)
	S73= ALUOut.Out=AddrSel(rA,a)+{16{d[15]},d}                 ALUOut-Out(S70)
	S74= PIDReg.Out=>DMem.PID                                   Premise(F122)
	S75= DMem.PID=pid                                           Path(S71,S74)
	S76= ALUOut.Out=>DMem.WAddr                                 Premise(F123)
	S77= DMem.WAddr=AddrSel(rA,a)+{16{d[15]},d}                 Path(S73,S76)
	S78= DR.Out=>DMem.WData                                     Premise(F124)
	S79= DMem.WData={0,B3,B4}                                   Path(S72,S78)
	S80= CtrlPC=0                                               Premise(F127)
	S81= CtrlPCInc=0                                            Premise(F128)
	S82= PC[Out]=addr+4                                         PC-Hold(S66,S80,S81)
	S83= CtrlDMem=1                                             Premise(F135)
	S84= DMem[{pid,AddrSel(rA,a)+{16{d[15]},d}}]={0,B3,B4}      DMem-Write(S75,S77,S79,S83)

WB	S85= CtrlPC=0                                               Premise(F160)
	S86= CtrlPCInc=0                                            Premise(F161)
	S87= PC[Out]=addr+4                                         PC-Hold(S82,S85,S86)
	S88= CtrlDMem=0                                             Premise(F168)
	S89= DMem[{pid,AddrSel(rA,a)+{16{d[15]},d}}]={0,B3,B4}      DMem-Hold(S84,S88)

POST	S87= PC[Out]=addr+4                                         PC-Hold(S82,S85,S86)
	S89= DMem[{pid,AddrSel(rA,a)+{16{d[15]},d}}]={0,B3,B4}      DMem-Hold(S84,S88)

