
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={37,rS,rA,d}                           Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.NIA=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMem.PID                                    Premise(F5)
	S7= IMem.PID=pid                                            Path(S4,S6)
	S8= PC.NIA=>IMem.Addr                                       Premise(F6)
	S9= IMem.Addr=addr                                          Path(S5,S8)
	S10= IMem.RData={37,rS,rA,d}                                IMem-Read(S7,S9,S2)
	S11= IMem.RData=>IR.In                                      Premise(F7)
	S12= IR.In={37,rS,rA,d}                                     Path(S10,S11)
	S13= CtrlPIDReg=0                                           Premise(F26)
	S14= [PIDReg]=pid                                           PIDReg-Hold(S0,S13)
	S15= CtrlPC=0                                               Premise(F28)
	S16= CtrlPCInc=1                                            Premise(F29)
	S17= PC[Out]=addr+4                                         PC-Inc(S1,S15,S16)
	S18= CtrlIR=1                                               Premise(F30)
	S19= [IR]={37,rS,rA,d}                                      IR-Write(S12,S18)
	S20= CtrlGPRegs=0                                           Premise(F31)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)

ID	S22= IR.Out11_15=rA                                         IR-Out(S19)
	S23= IR.Out16_31=d                                          IR-Out(S19)
	S24= IR.Out11_15=>GPRegs.RReg1                              Premise(F42)
	S25= GPRegs.RReg1=rA                                        Path(S22,S24)
	S26= GPRegs.RData1=a                                        GPRegs-Read(S25,S21)
	S27= GPRegs.RData1=>A.In                                    Premise(F43)
	S28= A.In=a                                                 Path(S26,S27)
	S29= IR.Out16_31=>IMMEXT.In                                 Premise(F44)
	S30= IMMEXT.In=d                                            Path(S23,S29)
	S31= IMMEXT.Out={16{d[15]},d}                               IMMEXT(S30)
	S32= IMMEXT.Out=>B.In                                       Premise(F45)
	S33= B.In={16{d[15]},d}                                     Path(S31,S32)
	S34= MemDataSel.Out={B1,B2,B3,B4}                           MemDataSel()
	S35= MemDataSel.Out=>DR.In                                  Premise(F49)
	S36= DR.In={B1,B2,B3,B4}                                    Path(S34,S35)
	S37= CtrlPIDReg=0                                           Premise(F59)
	S38= [PIDReg]=pid                                           PIDReg-Hold(S14,S37)
	S39= CtrlPC=0                                               Premise(F61)
	S40= CtrlPCInc=0                                            Premise(F62)
	S41= PC[Out]=addr+4                                         PC-Hold(S17,S39,S40)
	S42= CtrlIR=0                                               Premise(F63)
	S43= [IR]={37,rS,rA,d}                                      IR-Hold(S19,S42)
	S44= CtrlA=1                                                Premise(F65)
	S45= [A]=a                                                  A-Write(S28,S44)
	S46= CtrlB=1                                                Premise(F66)
	S47= [B]={16{d[15]},d}                                      B-Write(S33,S46)
	S48= CtrlDR=1                                               Premise(F67)
	S49= [DR]={B1,B2,B3,B4}                                     DR-Write(S36,S48)

EX	S50= A.Out=a                                                A-Out(S45)
	S51= B.Out={16{d[15]},d}                                    B-Out(S47)
	S52= A.Out=>ALU.A                                           Premise(F83)
	S53= ALU.A=a                                                Path(S50,S52)
	S54= B.Out=>ALU.B                                           Premise(F84)
	S55= ALU.B={16{d[15]},d}                                    Path(S51,S54)
	S56= ALU.Out=a+{16{d[15]},d}                                ALU(S53,S55)
	S57= ALU.Out=>ALUOut.In                                     Premise(F86)
	S58= ALUOut.In=a+{16{d[15]},d}                              Path(S56,S57)
	S59= CtrlPIDReg=0                                           Premise(F92)
	S60= [PIDReg]=pid                                           PIDReg-Hold(S38,S59)
	S61= CtrlPC=0                                               Premise(F94)
	S62= CtrlPCInc=0                                            Premise(F95)
	S63= PC[Out]=addr+4                                         PC-Hold(S41,S61,S62)
	S64= CtrlIR=0                                               Premise(F96)
	S65= [IR]={37,rS,rA,d}                                      IR-Hold(S43,S64)
	S66= CtrlDR=0                                               Premise(F100)
	S67= [DR]={B1,B2,B3,B4}                                     DR-Hold(S49,S66)
	S68= CtrlALUOut=1                                           Premise(F101)
	S69= [ALUOut]=a+{16{d[15]},d}                               ALUOut-Write(S58,S68)

MEM	S70= PIDReg.Out=pid                                         PIDReg-Out(S60)
	S71= DR.Out={B1,B2,B3,B4}                                   DR-Out(S67)
	S72= ALUOut.Out=a+{16{d[15]},d}                             ALUOut-Out(S69)
	S73= PIDReg.Out=>DMem.PID                                   Premise(F120)
	S74= DMem.PID=pid                                           Path(S70,S73)
	S75= ALUOut.Out=>DMem.WAddr                                 Premise(F121)
	S76= DMem.WAddr=a+{16{d[15]},d}                             Path(S72,S75)
	S77= DR.Out=>DMem.WData                                     Premise(F122)
	S78= DMem.WData={B1,B2,B3,B4}                               Path(S71,S77)
	S79= CtrlPC=0                                               Premise(F127)
	S80= CtrlPCInc=0                                            Premise(F128)
	S81= PC[Out]=addr+4                                         PC-Hold(S63,S79,S80)
	S82= CtrlIR=0                                               Premise(F129)
	S83= [IR]={37,rS,rA,d}                                      IR-Hold(S65,S82)
	S84= CtrlALUOut=0                                           Premise(F134)
	S85= [ALUOut]=a+{16{d[15]},d}                               ALUOut-Hold(S69,S84)
	S86= CtrlDMem=1                                             Premise(F135)
	S87= DMem[{pid,a+{16{d[15]},d}}]={B1,B2,B3,B4}              DMem-Write(S74,S76,S78,S86)

WB	S88= IR.Out11_15=rA                                         IR-Out(S83)
	S89= ALUOut.Out=a+{16{d[15]},d}                             ALUOut-Out(S85)
	S90= ALUOut.Out=>GPRegs.WData                               Premise(F156)
	S91= GPRegs.WData=a+{16{d[15]},d}                           Path(S89,S90)
	S92= IR.Out11_15=>GPRegs.WReg                               Premise(F157)
	S93= GPRegs.WReg=rA                                         Path(S88,S92)
	S94= CtrlPC=0                                               Premise(F160)
	S95= CtrlPCInc=0                                            Premise(F161)
	S96= PC[Out]=addr+4                                         PC-Hold(S81,S94,S95)
	S97= CtrlGPRegs=1                                           Premise(F163)
	S98= GPRegs[rA]=a+{16{d[15]},d}                             GPRegs-Write(S93,S91,S97)
	S99= CtrlDMem=0                                             Premise(F168)
	S100= DMem[{pid,a+{16{d[15]},d}}]={B1,B2,B3,B4}             DMem-Hold(S87,S99)

POST	S96= PC[Out]=addr+4                                         PC-Hold(S81,S94,S95)
	S98= GPRegs[rA]=a+{16{d[15]},d}                             GPRegs-Write(S93,S91,S97)
	S100= DMem[{pid,a+{16{d[15]},d}}]={B1,B2,B3,B4}             DMem-Hold(S87,S99)

