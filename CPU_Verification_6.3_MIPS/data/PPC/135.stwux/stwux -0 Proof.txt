
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rS,rA,rB,366}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.NIA=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S8= IMem.PID=pid                                            Path(S5,S7)
	S9= PC.NIA=>IMem.Addr                                       Premise(F7)
	S10= IMem.Addr=addr                                         Path(S6,S9)
	S11= IMem.RData={31,rS,rA,rB,366}                           IMem-Read(S8,S10,S2)
	S12= IMem.RData=>IR.In                                      Premise(F8)
	S13= IR.In={31,rS,rA,rB,366}                                Path(S11,S12)
	S14= CtrlPIDReg=0                                           Premise(F28)
	S15= [PIDReg]=pid                                           PIDReg-Hold(S0,S14)
	S16= CtrlPC=0                                               Premise(F30)
	S17= CtrlPCInc=1                                            Premise(F31)
	S18= PC[Out]=addr+4                                         PC-Inc(S1,S16,S17)
	S19= CtrlIR=1                                               Premise(F32)
	S20= [IR]={31,rS,rA,rB,366}                                 IR-Write(S13,S19)
	S21= CtrlGPRegs=0                                           Premise(F33)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= GPRegs[rB]=b                                           GPRegs-Hold(S4,S21)

ID	S24= IR.Out11_15=rA                                         IR-Out(S20)
	S25= IR.Out16_20=rB                                         IR-Out(S20)
	S26= IR.Out11_15=>GPRegs.RReg1                              Premise(F44)
	S27= GPRegs.RReg1=rA                                        Path(S24,S26)
	S28= GPRegs.RData1=a                                        GPRegs-Read(S27,S22)
	S29= GPRegs.RData1=>A.In                                    Premise(F45)
	S30= A.In=a                                                 Path(S28,S29)
	S31= IR.Out16_20=>GPRegs.RReg2                              Premise(F46)
	S32= GPRegs.RReg2=rB                                        Path(S25,S31)
	S33= GPRegs.RData2=b                                        GPRegs-Read(S32,S23)
	S34= GPRegs.RData2=>B.In                                    Premise(F47)
	S35= B.In=b                                                 Path(S33,S34)
	S36= CtrlPIDReg=0                                           Premise(F62)
	S37= [PIDReg]=pid                                           PIDReg-Hold(S15,S36)
	S38= CtrlPC=0                                               Premise(F64)
	S39= CtrlPCInc=0                                            Premise(F65)
	S40= PC[Out]=addr+4                                         PC-Hold(S18,S38,S39)
	S41= CtrlIR=0                                               Premise(F66)
	S42= [IR]={31,rS,rA,rB,366}                                 IR-Hold(S20,S41)
	S43= CtrlA=1                                                Premise(F68)
	S44= [A]=a                                                  A-Write(S30,S43)
	S45= CtrlB=1                                                Premise(F69)
	S46= [B]=b                                                  B-Write(S35,S45)

EX	S47= A.Out=a                                                A-Out(S44)
	S48= B.Out=b                                                B-Out(S46)
	S49= A.Out=>ALU.A                                           Premise(F83)
	S50= ALU.A=a                                                Path(S47,S49)
	S51= B.Out=>ALU.B                                           Premise(F84)
	S52= ALU.B=b                                                Path(S48,S51)
	S53= ALU.Out=a+b                                            ALU(S50,S52)
	S54= ALU.Out=>ALUOut.In                                     Premise(F86)
	S55= ALUOut.In=a+b                                          Path(S53,S54)
	S56= MemDataSel.Out={B1,B2,B3,B4}                           MemDataSel()
	S57= MemDataSel.Out=>DR.In                                  Premise(F90)
	S58= DR.In={B1,B2,B3,B4}                                    Path(S56,S57)
	S59= CtrlPIDReg=0                                           Premise(F96)
	S60= [PIDReg]=pid                                           PIDReg-Hold(S37,S59)
	S61= CtrlPC=0                                               Premise(F98)
	S62= CtrlPCInc=0                                            Premise(F99)
	S63= PC[Out]=addr+4                                         PC-Hold(S40,S61,S62)
	S64= CtrlIR=0                                               Premise(F100)
	S65= [IR]={31,rS,rA,rB,366}                                 IR-Hold(S42,S64)
	S66= CtrlALUOut=1                                           Premise(F104)
	S67= [ALUOut]=a+b                                           ALUOut-Write(S55,S66)
	S68= CtrlDR=1                                               Premise(F105)
	S69= [DR]={B1,B2,B3,B4}                                     DR-Write(S58,S68)

MEM	S70= PIDReg.Out=pid                                         PIDReg-Out(S60)
	S71= ALUOut.Out=a+b                                         ALUOut-Out(S67)
	S72= DR.Out={B1,B2,B3,B4}                                   DR-Out(S69)
	S73= PIDReg.Out=>DMem.PID                                   Premise(F125)
	S74= DMem.PID=pid                                           Path(S70,S73)
	S75= ALUOut.Out=>DMem.WAddr                                 Premise(F126)
	S76= DMem.WAddr=a+b                                         Path(S71,S75)
	S77= DR.Out=>DMem.WData                                     Premise(F127)
	S78= DMem.WData={B1,B2,B3,B4}                               Path(S72,S77)
	S79= CtrlPC=0                                               Premise(F132)
	S80= CtrlPCInc=0                                            Premise(F133)
	S81= PC[Out]=addr+4                                         PC-Hold(S63,S79,S80)
	S82= CtrlIR=0                                               Premise(F134)
	S83= [IR]={31,rS,rA,rB,366}                                 IR-Hold(S65,S82)
	S84= CtrlALUOut=0                                           Premise(F138)
	S85= [ALUOut]=a+b                                           ALUOut-Hold(S67,S84)
	S86= CtrlDMem=1                                             Premise(F140)
	S87= DMem[{pid,a+b}]={B1,B2,B3,B4}                          DMem-Write(S74,S76,S78,S86)

WB	S88= IR.Out11_15=rA                                         IR-Out(S83)
	S89= ALUOut.Out=a+b                                         ALUOut-Out(S85)
	S90= ALUOut.Out=>GPRegs.WData                               Premise(F162)
	S91= GPRegs.WData=a+b                                       Path(S89,S90)
	S92= IR.Out11_15=>GPRegs.WReg                               Premise(F163)
	S93= GPRegs.WReg=rA                                         Path(S88,S92)
	S94= CtrlPC=0                                               Premise(F166)
	S95= CtrlPCInc=0                                            Premise(F167)
	S96= PC[Out]=addr+4                                         PC-Hold(S81,S94,S95)
	S97= CtrlGPRegs=1                                           Premise(F169)
	S98= GPRegs[rA]=a+b                                         GPRegs-Write(S93,S91,S97)
	S99= CtrlDMem=0                                             Premise(F174)
	S100= DMem[{pid,a+b}]={B1,B2,B3,B4}                         DMem-Hold(S87,S99)

POST	S96= PC[Out]=addr+4                                         PC-Hold(S81,S94,S95)
	S98= GPRegs[rA]=a+b                                         GPRegs-Write(S93,S91,S97)
	S100= DMem[{pid,a+b}]={B1,B2,B3,B4}                         DMem-Hold(S87,S99)

