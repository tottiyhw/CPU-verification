
----------------------------------- FullProof -----------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={31,rS,rA,rB,302}                      Premise(F2)
	S0= GPRegs[rA]=a                                            Premise(F3)
	S0= GPRegs[rB]=b                                            Premise(F4)
	S0= GPRegs[rS]={B1,B2,B3,B4}                                Premise(F5)

IF	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.NIA=addr                                             PC-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F7)
	S0= IMem.Addr=addr                                          Path(S0,S0)
	S0= IMem.RData={31,rS,rA,rB,302}                            IMem-Read(S0,S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F8)
	S0= IR.In={31,rS,rA,rB,302}                                 Path(S0,S0)
	S0= IR.Out0_5=>CU.Op                                        Premise(F9)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F10)
	S0= IR.Out11_15=>AddrSelMux.Sel                             Premise(F11)
	S0= GPRegs.RData1=>AddrSelMux.Data                          Premise(F12)
	S0= AddrSelMux.Out=>A.In                                    Premise(F13)
	S0= IR.Out16_20=>GPRegs.RReg2                               Premise(F14)
	S0= GPRegs.RData2=>B.In                                     Premise(F15)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F16)
	S0= A.Out=>ALU.A                                            Premise(F17)
	S0= B.Out=>ALU.B                                            Premise(F18)
	S0= CU.Func=>ALU.Func                                       Premise(F19)
	S0= ALU.Out=>ALUOut.In                                      Premise(F20)
	S0= IR.Out6_10=>GPRegs.RReg3                                Premise(F21)
	S0= GPRegs.RData3=>MemDataSel.Data                          Premise(F22)
	S0= CU.MemDataSelFunc=>MemDataSel.Func                      Premise(F23)
	S0= MemDataSel.Out=>DR.In                                   Premise(F24)
	S0= PIDReg.Out=>DMem.PID                                    Premise(F25)
	S0= DMem.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMem.WAddr                                  Premise(F26)
	S0= DR.Out=>DMem.WData                                      Premise(F27)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F28)
	S0= IR.Out11_15=>GPRegs.WReg                                Premise(F29)
	S0= CtrlPIDReg=0                                            Premise(F30)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F31)
	S0= IMem[{pid,addr}]={31,rS,rA,rB,302}                      IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F32)
	S0= CtrlPCInc=1                                             Premise(F33)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIR=1                                                Premise(F34)
	S0= [IR]={31,rS,rA,rB,302}                                  IR-Write(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F35)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= GPRegs[rB]=b                                            GPRegs-Hold(S0,S0)
	S0= GPRegs[rS]={B1,B2,B3,B4}                                GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F36)
	S0= CtrlB=0                                                 Premise(F37)
	S0= CtrlALUOut=0                                            Premise(F38)
	S0= CtrlDR=0                                                Premise(F39)
	S0= CtrlDMem=0                                              Premise(F40)
	S0= CtrlDMem8Word=0                                         Premise(F41)

ID	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rS                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=rB                                          IR-Out(S0)
	S0= IR.Out21_31=302                                         IR-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F42)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F43)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F44)
	S0= IR.Out0_5=>CU.Op                                        Premise(F45)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F46)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.RData1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out11_15=>AddrSelMux.Sel                             Premise(F47)
	S0= AddrSelMux.Sel=rA                                       Path(S0,S0)
	S0= GPRegs.RData1=>AddrSelMux.Data                          Premise(F48)
	S0= AddrSelMux.Data=a                                       Path(S0,S0)
	S0= AddrSelMux.Out=AddrSel(rA,a)                            AddrSelMux(S0,S0)
	S0= AddrSelMux.Out=>A.In                                    Premise(F49)
	S0= A.In=AddrSel(rA,a)                                      Path(S0,S0)
	S0= IR.Out16_20=>GPRegs.RReg2                               Premise(F50)
	S0= GPRegs.RReg2=rB                                         Path(S0,S0)
	S0= GPRegs.RData2=b                                         GPRegs-Read(S0,S0)
	S0= GPRegs.RData2=>B.In                                     Premise(F51)
	S0= B.In=b                                                  Path(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F52)
	S0= CU.IRFunc=302                                           Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= CU.MemDataSelFunc=mds_stw                               CU(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F53)
	S0= B.Out=>ALU.B                                            Premise(F54)
	S0= CU.Func=>ALU.Func                                       Premise(F55)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F56)
	S0= IR.Out6_10=>GPRegs.RReg3                                Premise(F57)
	S0= GPRegs.RReg3=rS                                         Path(S0,S0)
	S0= GPRegs.RData3={B1,B2,B3,B4}                             GPRegs-Read(S0,S0)
	S0= GPRegs.RData3=>MemDataSel.Data                          Premise(F58)
	S0= MemDataSel.Data={B1,B2,B3,B4}                           Path(S0,S0)
	S0= CU.MemDataSelFunc=>MemDataSel.Func                      Premise(F59)
	S0= MemDataSel.Func=mds_stw                                 Path(S0,S0)
	S0= MemDataSel.Out={B1,B2,B3,B4}                            MemDataSel()
	S0= MemDataSel.Out=>DR.In                                   Premise(F60)
	S0= DR.In={B1,B2,B3,B4}                                     Path(S0,S0)
	S0= PIDReg.Out=>DMem.PID                                    Premise(F61)
	S0= DMem.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMem.WAddr                                  Premise(F62)
	S0= DR.Out=>DMem.WData                                      Premise(F63)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F64)
	S0= IR.Out11_15=>GPRegs.WReg                                Premise(F65)
	S0= GPRegs.WReg=rA                                          Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F66)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F67)
	S0= IMem[{pid,addr}]={31,rS,rA,rB,302}                      IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F68)
	S0= CtrlPCInc=0                                             Premise(F69)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F70)
	S0= [IR]={31,rS,rA,rB,302}                                  IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F71)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= GPRegs[rB]=b                                            GPRegs-Hold(S0,S0)
	S0= GPRegs[rS]={B1,B2,B3,B4}                                GPRegs-Hold(S0,S0)
	S0= CtrlA=1                                                 Premise(F72)
	S0= [A]=AddrSel(rA,a)                                       A-Write(S0,S0)
	S0= CtrlB=1                                                 Premise(F73)
	S0= [B]=b                                                   B-Write(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F74)
	S0= CtrlDR=0                                                Premise(F75)
	S0= CtrlDMem=0                                              Premise(F76)
	S0= CtrlDMem8Word=0                                         Premise(F77)

EX	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rS                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=rB                                          IR-Out(S0)
	S0= IR.Out21_31=302                                         IR-Out(S0)
	S0= A.Out=AddrSel(rA,a)                                     A-Out(S0)
	S0= A.Out1_0={AddrSel(rA,a)}[1:0]                           A-Out(S0)
	S0= A.Out4_0={AddrSel(rA,a)}[4:0]                           A-Out(S0)
	S0= B.Out=b                                                 B-Out(S0)
	S0= B.Out1_0={b}[1:0]                                       B-Out(S0)
	S0= B.Out4_0={b}[4:0]                                       B-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F78)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F79)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F80)
	S0= IR.Out0_5=>CU.Op                                        Premise(F81)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F82)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.RData1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out11_15=>AddrSelMux.Sel                             Premise(F83)
	S0= AddrSelMux.Sel=rA                                       Path(S0,S0)
	S0= GPRegs.RData1=>AddrSelMux.Data                          Premise(F84)
	S0= AddrSelMux.Data=a                                       Path(S0,S0)
	S0= AddrSelMux.Out=AddrSel(rA,a)                            AddrSelMux(S0,S0)
	S0= AddrSelMux.Out=>A.In                                    Premise(F85)
	S0= A.In=AddrSel(rA,a)                                      Path(S0,S0)
	S0= IR.Out16_20=>GPRegs.RReg2                               Premise(F86)
	S0= GPRegs.RReg2=rB                                         Path(S0,S0)
	S0= GPRegs.RData2=b                                         GPRegs-Read(S0,S0)
	S0= GPRegs.RData2=>B.In                                     Premise(F87)
	S0= B.In=b                                                  Path(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F88)
	S0= CU.IRFunc=302                                           Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= CU.MemDataSelFunc=mds_stw                               CU(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F89)
	S0= ALU.A=AddrSel(rA,a)                                     Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F90)
	S0= ALU.B=b                                                 Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F91)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=AddrSel(rA,a)+b                                 ALU(S0,S0)
	S0= ALU.CMP=Compare0(AddrSel(rA,a)+b)                       ALU(S0,S0)
	S0= ALU.OV=OverFlow(AddrSel(rA,a)+b)                        ALU(S0,S0)
	S0= ALU.CA=Carry(AddrSel(rA,a)+b)                           ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F92)
	S0= ALUOut.In=AddrSel(rA,a)+b                               Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.RReg3                                Premise(F93)
	S0= GPRegs.RReg3=rS                                         Path(S0,S0)
	S0= GPRegs.RData3={B1,B2,B3,B4}                             GPRegs-Read(S0,S0)
	S0= GPRegs.RData3=>MemDataSel.Data                          Premise(F94)
	S0= MemDataSel.Data={B1,B2,B3,B4}                           Path(S0,S0)
	S0= CU.MemDataSelFunc=>MemDataSel.Func                      Premise(F95)
	S0= MemDataSel.Func=mds_stw                                 Path(S0,S0)
	S0= MemDataSel.Out={B1,B2,B3,B4}                            MemDataSel()
	S0= MemDataSel.Out=>DR.In                                   Premise(F96)
	S0= DR.In={B1,B2,B3,B4}                                     Path(S0,S0)
	S0= PIDReg.Out=>DMem.PID                                    Premise(F97)
	S0= DMem.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMem.WAddr                                  Premise(F98)
	S0= DR.Out=>DMem.WData                                      Premise(F99)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F100)
	S0= IR.Out11_15=>GPRegs.WReg                                Premise(F101)
	S0= GPRegs.WReg=rA                                          Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F102)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F103)
	S0= IMem[{pid,addr}]={31,rS,rA,rB,302}                      IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F104)
	S0= CtrlPCInc=0                                             Premise(F105)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F106)
	S0= [IR]={31,rS,rA,rB,302}                                  IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F107)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= GPRegs[rB]=b                                            GPRegs-Hold(S0,S0)
	S0= GPRegs[rS]={B1,B2,B3,B4}                                GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F108)
	S0= [A]=AddrSel(rA,a)                                       A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F109)
	S0= [B]=b                                                   B-Hold(S0,S0)
	S0= CtrlALUOut=1                                            Premise(F110)
	S0= [ALUOut]=AddrSel(rA,a)+b                                ALUOut-Write(S0,S0)
	S0= CtrlDR=1                                                Premise(F111)
	S0= [DR]={B1,B2,B3,B4}                                      DR-Write(S0,S0)
	S0= CtrlDMem=0                                              Premise(F112)
	S0= CtrlDMem8Word=0                                         Premise(F113)

MEM	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rS                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=rB                                          IR-Out(S0)
	S0= IR.Out21_31=302                                         IR-Out(S0)
	S0= A.Out=AddrSel(rA,a)                                     A-Out(S0)
	S0= A.Out1_0={AddrSel(rA,a)}[1:0]                           A-Out(S0)
	S0= A.Out4_0={AddrSel(rA,a)}[4:0]                           A-Out(S0)
	S0= B.Out=b                                                 B-Out(S0)
	S0= B.Out1_0={b}[1:0]                                       B-Out(S0)
	S0= B.Out4_0={b}[4:0]                                       B-Out(S0)
	S0= ALUOut.Out=AddrSel(rA,a)+b                              ALUOut-Out(S0)
	S0= ALUOut.Out1_0={AddrSel(rA,a)+b}[1:0]                    ALUOut-Out(S0)
	S0= ALUOut.Out4_0={AddrSel(rA,a)+b}[4:0]                    ALUOut-Out(S0)
	S0= DR.Out={B1,B2,B3,B4}                                    DR-Out(S0)
	S0= DR.Out1_0={{B1,B2,B3,B4}}[1:0]                          DR-Out(S0)
	S0= DR.Out4_0={{B1,B2,B3,B4}}[4:0]                          DR-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F114)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F115)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F116)
	S0= IR.Out0_5=>CU.Op                                        Premise(F117)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F118)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.RData1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out11_15=>AddrSelMux.Sel                             Premise(F119)
	S0= AddrSelMux.Sel=rA                                       Path(S0,S0)
	S0= GPRegs.RData1=>AddrSelMux.Data                          Premise(F120)
	S0= AddrSelMux.Data=a                                       Path(S0,S0)
	S0= AddrSelMux.Out=AddrSel(rA,a)                            AddrSelMux(S0,S0)
	S0= AddrSelMux.Out=>A.In                                    Premise(F121)
	S0= A.In=AddrSel(rA,a)                                      Path(S0,S0)
	S0= IR.Out16_20=>GPRegs.RReg2                               Premise(F122)
	S0= GPRegs.RReg2=rB                                         Path(S0,S0)
	S0= GPRegs.RData2=b                                         GPRegs-Read(S0,S0)
	S0= GPRegs.RData2=>B.In                                     Premise(F123)
	S0= B.In=b                                                  Path(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F124)
	S0= CU.IRFunc=302                                           Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= CU.MemDataSelFunc=mds_stw                               CU(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F125)
	S0= ALU.A=AddrSel(rA,a)                                     Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F126)
	S0= ALU.B=b                                                 Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F127)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=AddrSel(rA,a)+b                                 ALU(S0,S0)
	S0= ALU.CMP=Compare0(AddrSel(rA,a)+b)                       ALU(S0,S0)
	S0= ALU.OV=OverFlow(AddrSel(rA,a)+b)                        ALU(S0,S0)
	S0= ALU.CA=Carry(AddrSel(rA,a)+b)                           ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F128)
	S0= ALUOut.In=AddrSel(rA,a)+b                               Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.RReg3                                Premise(F129)
	S0= GPRegs.RReg3=rS                                         Path(S0,S0)
	S0= GPRegs.RData3={B1,B2,B3,B4}                             GPRegs-Read(S0,S0)
	S0= GPRegs.RData3=>MemDataSel.Data                          Premise(F130)
	S0= MemDataSel.Data={B1,B2,B3,B4}                           Path(S0,S0)
	S0= CU.MemDataSelFunc=>MemDataSel.Func                      Premise(F131)
	S0= MemDataSel.Func=mds_stw                                 Path(S0,S0)
	S0= MemDataSel.Out={B1,B2,B3,B4}                            MemDataSel()
	S0= MemDataSel.Out=>DR.In                                   Premise(F132)
	S0= DR.In={B1,B2,B3,B4}                                     Path(S0,S0)
	S0= PIDReg.Out=>DMem.PID                                    Premise(F133)
	S0= DMem.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMem.WAddr                                  Premise(F134)
	S0= DMem.WAddr=AddrSel(rA,a)+b                              Path(S0,S0)
	S0= DR.Out=>DMem.WData                                      Premise(F135)
	S0= DMem.WData={B1,B2,B3,B4}                                Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F136)
	S0= GPRegs.WData=AddrSel(rA,a)+b                            Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.WReg                                Premise(F137)
	S0= GPRegs.WReg=rA                                          Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F138)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F139)
	S0= IMem[{pid,addr}]={31,rS,rA,rB,302}                      IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F140)
	S0= CtrlPCInc=0                                             Premise(F141)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F142)
	S0= [IR]={31,rS,rA,rB,302}                                  IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F143)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= GPRegs[rB]=b                                            GPRegs-Hold(S0,S0)
	S0= GPRegs[rS]={B1,B2,B3,B4}                                GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F144)
	S0= [A]=AddrSel(rA,a)                                       A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F145)
	S0= [B]=b                                                   B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F146)
	S0= [ALUOut]=AddrSel(rA,a)+b                                ALUOut-Hold(S0,S0)
	S0= CtrlDR=0                                                Premise(F147)
	S0= [DR]={B1,B2,B3,B4}                                      DR-Hold(S0,S0)
	S0= CtrlDMem=1                                              Premise(F148)
	S0= DMem[{pid,AddrSel(rA,a)+b}]={B1,B2,B3,B4}               DMem-Write(S0,S0,S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F149)

WB	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rS                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=rB                                          IR-Out(S0)
	S0= IR.Out21_31=302                                         IR-Out(S0)
	S0= A.Out=AddrSel(rA,a)                                     A-Out(S0)
	S0= A.Out1_0={AddrSel(rA,a)}[1:0]                           A-Out(S0)
	S0= A.Out4_0={AddrSel(rA,a)}[4:0]                           A-Out(S0)
	S0= B.Out=b                                                 B-Out(S0)
	S0= B.Out1_0={b}[1:0]                                       B-Out(S0)
	S0= B.Out4_0={b}[4:0]                                       B-Out(S0)
	S0= ALUOut.Out=AddrSel(rA,a)+b                              ALUOut-Out(S0)
	S0= ALUOut.Out1_0={AddrSel(rA,a)+b}[1:0]                    ALUOut-Out(S0)
	S0= ALUOut.Out4_0={AddrSel(rA,a)+b}[4:0]                    ALUOut-Out(S0)
	S0= DR.Out={B1,B2,B3,B4}                                    DR-Out(S0)
	S0= DR.Out1_0={{B1,B2,B3,B4}}[1:0]                          DR-Out(S0)
	S0= DR.Out4_0={{B1,B2,B3,B4}}[4:0]                          DR-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F150)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F151)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F152)
	S0= IR.Out0_5=>CU.Op                                        Premise(F153)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F154)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.RData1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out11_15=>AddrSelMux.Sel                             Premise(F155)
	S0= AddrSelMux.Sel=rA                                       Path(S0,S0)
	S0= GPRegs.RData1=>AddrSelMux.Data                          Premise(F156)
	S0= AddrSelMux.Data=a                                       Path(S0,S0)
	S0= AddrSelMux.Out=AddrSel(rA,a)                            AddrSelMux(S0,S0)
	S0= AddrSelMux.Out=>A.In                                    Premise(F157)
	S0= A.In=AddrSel(rA,a)                                      Path(S0,S0)
	S0= IR.Out16_20=>GPRegs.RReg2                               Premise(F158)
	S0= GPRegs.RReg2=rB                                         Path(S0,S0)
	S0= GPRegs.RData2=b                                         GPRegs-Read(S0,S0)
	S0= GPRegs.RData2=>B.In                                     Premise(F159)
	S0= B.In=b                                                  Path(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F160)
	S0= CU.IRFunc=302                                           Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0)
	S0= CU.MemDataSelFunc=mds_stw                               CU(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F161)
	S0= ALU.A=AddrSel(rA,a)                                     Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F162)
	S0= ALU.B=b                                                 Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F163)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=AddrSel(rA,a)+b                                 ALU(S0,S0)
	S0= ALU.CMP=Compare0(AddrSel(rA,a)+b)                       ALU(S0,S0)
	S0= ALU.OV=OverFlow(AddrSel(rA,a)+b)                        ALU(S0,S0)
	S0= ALU.CA=Carry(AddrSel(rA,a)+b)                           ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F164)
	S0= ALUOut.In=AddrSel(rA,a)+b                               Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.RReg3                                Premise(F165)
	S0= GPRegs.RReg3=rS                                         Path(S0,S0)
	S0= GPRegs.RData3={B1,B2,B3,B4}                             GPRegs-Read(S0,S0)
	S0= GPRegs.RData3=>MemDataSel.Data                          Premise(F166)
	S0= MemDataSel.Data={B1,B2,B3,B4}                           Path(S0,S0)
	S0= CU.MemDataSelFunc=>MemDataSel.Func                      Premise(F167)
	S0= MemDataSel.Func=mds_stw                                 Path(S0,S0)
	S0= MemDataSel.Out={B1,B2,B3,B4}                            MemDataSel()
	S0= MemDataSel.Out=>DR.In                                   Premise(F168)
	S0= DR.In={B1,B2,B3,B4}                                     Path(S0,S0)
	S0= PIDReg.Out=>DMem.PID                                    Premise(F169)
	S0= DMem.PID=pid                                            Path(S0,S0)
	S0= ALUOut.Out=>DMem.WAddr                                  Premise(F170)
	S0= DMem.WAddr=AddrSel(rA,a)+b                              Path(S0,S0)
	S0= DR.Out=>DMem.WData                                      Premise(F171)
	S0= DMem.WData={B1,B2,B3,B4}                                Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F172)
	S0= GPRegs.WData=AddrSel(rA,a)+b                            Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.WReg                                Premise(F173)
	S0= GPRegs.WReg=rA                                          Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F174)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F175)
	S0= IMem[{pid,addr}]={31,rS,rA,rB,302}                      IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F176)
	S0= CtrlPCInc=0                                             Premise(F177)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F178)
	S0= [IR]={31,rS,rA,rB,302}                                  IR-Hold(S0,S0)
	S0= CtrlGPRegs=1                                            Premise(F179)
	S0= GPRegs[rA]=AddrSel(rA,a)+b                              GPRegs-Write(S0,S0,S0)
	S0= CtrlA=0                                                 Premise(F180)
	S0= [A]=AddrSel(rA,a)                                       A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F181)
	S0= [B]=b                                                   B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F182)
	S0= [ALUOut]=AddrSel(rA,a)+b                                ALUOut-Hold(S0,S0)
	S0= CtrlDR=0                                                Premise(F183)
	S0= [DR]={B1,B2,B3,B4}                                      DR-Hold(S0,S0)
	S0= CtrlDMem=0                                              Premise(F184)
	S0= DMem[{pid,AddrSel(rA,a)+b}]={B1,B2,B3,B4}               DMem-Hold(S0,S0)
	S0= CtrlDMem8Word=0                                         Premise(F185)

POST	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= IMem[{pid,addr}]={31,rS,rA,rB,302}                      IMem-Hold(S0,S0)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= [IR]={31,rS,rA,rB,302}                                  IR-Hold(S0,S0)
	S0= GPRegs[rA]=AddrSel(rA,a)+b                              GPRegs-Write(S0,S0,S0)
	S0= [A]=AddrSel(rA,a)                                       A-Hold(S0,S0)
	S0= [B]=b                                                   B-Hold(S0,S0)
	S0= [ALUOut]=AddrSel(rA,a)+b                                ALUOut-Hold(S0,S0)
	S0= [DR]={B1,B2,B3,B4}                                      DR-Hold(S0,S0)
	S0= DMem[{pid,AddrSel(rA,a)+b}]={B1,B2,B3,B4}               DMem-Hold(S0,S0)

