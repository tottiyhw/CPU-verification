
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={19,crbD,crbA,crbB,450}                Premise(F2)
	S3= CRRegs[crbA]=a                                          Premise(F3)
	S4= CRRegs[crbB]=b                                          Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.NIA=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMem.PID                                    Premise(F5)
	S8= IMem.PID=pid                                            Path(S5,S7)
	S9= PC.NIA=>IMem.Addr                                       Premise(F6)
	S10= IMem.Addr=addr                                         Path(S6,S9)
	S11= IMem.RData={19,crbD,crbA,crbB,450}                     IMem-Read(S8,S10,S2)
	S12= IMem.RData=>IR.In                                      Premise(F7)
	S13= IR.In={19,crbD,crbA,crbB,450}                          Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F22)
	S15= CtrlPCInc=1                                            Premise(F23)
	S16= PC[Out]=addr+4                                         PC-Inc(S1,S14,S15)
	S17= CtrlIR=1                                               Premise(F24)
	S18= [IR]={19,crbD,crbA,crbB,450}                           IR-Write(S13,S17)
	S19= CtrlCRRegs=0                                           Premise(F25)
	S20= CRRegs[crbA]=a                                         CRRegs-Hold(S3,S19)
	S21= CRRegs[crbB]=b                                         CRRegs-Hold(S4,S19)

ID	S22= IR.Out11_15=crbA                                       IR-Out(S18)
	S23= IR.Out16_20=crbB                                       IR-Out(S18)
	S24= IR.Out11_15=>CRRegs.RReg1                              Premise(F36)
	S25= CRRegs.RReg1=crbA                                      Path(S22,S24)
	S26= CRRegs.RData1=a                                        CRRegs-Read(S25,S20)
	S27= IR.Out16_20=>CRRegs.RReg2                              Premise(F37)
	S28= CRRegs.RReg2=crbB                                      Path(S23,S27)
	S29= CRRegs.RData2=b                                        CRRegs-Read(S28,S21)
	S30= CRRegs.RData1=>A.In                                    Premise(F39)
	S31= A.In=a                                                 Path(S26,S30)
	S32= CRRegs.RData2=>B.In                                    Premise(F40)
	S33= B.In=b                                                 Path(S29,S32)
	S34= CtrlPC=0                                               Premise(F49)
	S35= CtrlPCInc=0                                            Premise(F50)
	S36= PC[Out]=addr+4                                         PC-Hold(S16,S34,S35)
	S37= CtrlIR=0                                               Premise(F51)
	S38= [IR]={19,crbD,crbA,crbB,450}                           IR-Hold(S18,S37)
	S39= CtrlA=1                                                Premise(F56)
	S40= [A]=a                                                  A-Write(S31,S39)
	S41= CtrlB=1                                                Premise(F57)
	S42= [B]=b                                                  B-Write(S33,S41)

EX	S43= A.Out=a                                                A-Out(S40)
	S44= B.Out=b                                                B-Out(S42)
	S45= A.Out=>ALU.A                                           Premise(F68)
	S46= ALU.A=a                                                Path(S43,S45)
	S47= B.Out=>ALU.B                                           Premise(F69)
	S48= ALU.B=b                                                Path(S44,S47)
	S49= ALU.Out=~(a&b)                                         ALU(S46,S48)
	S50= ALU.Out=>ALUOut.In                                     Premise(F71)
	S51= ALUOut.In=~(a&b)                                       Path(S49,S50)
	S52= CtrlPC=0                                               Premise(F76)
	S53= CtrlPCInc=0                                            Premise(F77)
	S54= PC[Out]=addr+4                                         PC-Hold(S36,S52,S53)
	S55= CtrlIR=0                                               Premise(F78)
	S56= [IR]={19,crbD,crbA,crbB,450}                           IR-Hold(S38,S55)
	S57= CtrlALUOut=1                                           Premise(F85)
	S58= [ALUOut]=~(a&b)                                        ALUOut-Write(S51,S57)

MEM	S59= CtrlPC=0                                               Premise(F103)
	S60= CtrlPCInc=0                                            Premise(F104)
	S61= PC[Out]=addr+4                                         PC-Hold(S54,S59,S60)
	S62= CtrlIR=0                                               Premise(F105)
	S63= [IR]={19,crbD,crbA,crbB,450}                           IR-Hold(S56,S62)
	S64= CtrlALUOut=0                                           Premise(F112)
	S65= [ALUOut]=~(a&b)                                        ALUOut-Hold(S58,S64)

WB	S66= IR.Out6_10=crbD                                        IR-Out(S63)
	S67= ALUOut.Out=~(a&b)                                      ALUOut-Out(S65)
	S68= IR.Out6_10=>CRRegs.WReg                                Premise(F126)
	S69= CRRegs.WReg=crbD                                       Path(S66,S68)
	S70= ALUOut.Out=>CRRegs.WData                               Premise(F127)
	S71= CRRegs.WData=~(a&b)                                    Path(S67,S70)
	S72= CtrlPC=0                                               Premise(F130)
	S73= CtrlPCInc=0                                            Premise(F131)
	S74= PC[Out]=addr+4                                         PC-Hold(S61,S72,S73)
	S75= CtrlCRRegs=1                                           Premise(F133)
	S76= CRRegs[crbD]=~(a&b)                                    CRRegs-Write(S69,S71,S75)

POST	S74= PC[Out]=addr+4                                         PC-Hold(S61,S72,S73)
	S76= CRRegs[crbD]=~(a&b)                                    CRRegs-Write(S69,S71,S75)

