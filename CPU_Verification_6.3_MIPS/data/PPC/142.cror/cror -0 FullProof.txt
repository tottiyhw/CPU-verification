
----------------------------------- FullProof -----------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={19,crbD,crbA,crbB,898}                Premise(F2)
	S0= CRRegs[crbA]=a                                          Premise(F3)
	S0= CRRegs[crbB]=b                                          Premise(F4)

IF	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.NIA=addr                                             PC-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F5)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F6)
	S0= IMem.Addr=addr                                          Path(S0,S0)
	S0= IMem.RData={19,crbD,crbA,crbB,898}                      IMem-Read(S0,S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F7)
	S0= IR.In={19,crbD,crbA,crbB,898}                           Path(S0,S0)
	S0= IR.Out0_5=>CU.Op                                        Premise(F8)
	S0= IR.Out11_15=>CRRegs.RReg1                               Premise(F9)
	S0= IR.Out16_20=>CRRegs.RReg2                               Premise(F10)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F11)
	S0= CRRegs.RData1=>A.In                                     Premise(F12)
	S0= CRRegs.RData2=>B.In                                     Premise(F13)
	S0= A.Out=>ALU.A                                            Premise(F14)
	S0= B.Out=>ALU.B                                            Premise(F15)
	S0= CU.Func=>ALU.Func                                       Premise(F16)
	S0= ALU.Out=>ALUOut.In                                      Premise(F17)
	S0= IR.Out6_10=>CRRegs.WReg                                 Premise(F18)
	S0= ALUOut.Out=>CRRegs.WData                                Premise(F19)
	S0= CtrlPIDReg=0                                            Premise(F20)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F21)
	S0= IMem[{pid,addr}]={19,crbD,crbA,crbB,898}                IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F22)
	S0= CtrlPCInc=1                                             Premise(F23)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIR=1                                                Premise(F24)
	S0= [IR]={19,crbD,crbA,crbB,898}                            IR-Write(S0,S0)
	S0= CtrlCRRegs=0                                            Premise(F25)
	S0= CRRegs[crbA]=a                                          CRRegs-Hold(S0,S0)
	S0= CRRegs[crbB]=b                                          CRRegs-Hold(S0,S0)
	S0= CtrlCRRegsCR0=0                                         Premise(F26)
	S0= CtrlCRRegsW4bitRegs=0                                   Premise(F27)
	S0= CtrlCRRegsW1bitRegs=0                                   Premise(F28)
	S0= CtrlA=0                                                 Premise(F29)
	S0= CtrlB=0                                                 Premise(F30)
	S0= CtrlALUOut=0                                            Premise(F31)

ID	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= IR.Out0_5=19                                            IR-Out(S0)
	S0= IR.Out6_10=crbD                                         IR-Out(S0)
	S0= IR.Out11_15=crbA                                        IR-Out(S0)
	S0= IR.Out16_20=crbB                                        IR-Out(S0)
	S0= IR.Out21_31=898                                         IR-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F32)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F33)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F34)
	S0= IR.Out0_5=>CU.Op                                        Premise(F35)
	S0= CU.Op=19                                                Path(S0,S0)
	S0= IR.Out11_15=>CRRegs.RReg1                               Premise(F36)
	S0= CRRegs.RReg1=crbA                                       Path(S0,S0)
	S0= CRRegs.RData1=a                                         CRRegs-Read(S0,S0)
	S0= IR.Out16_20=>CRRegs.RReg2                               Premise(F37)
	S0= CRRegs.RReg2=crbB                                       Path(S0,S0)
	S0= CRRegs.RData2=b                                         CRRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F38)
	S0= CU.IRFunc=898                                           Path(S0,S0)
	S0= CU.Func=alu_or                                          CU(S0,S0)
	S0= CRRegs.RData1=>A.In                                     Premise(F39)
	S0= A.In=a                                                  Path(S0,S0)
	S0= CRRegs.RData2=>B.In                                     Premise(F40)
	S0= B.In=b                                                  Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F41)
	S0= B.Out=>ALU.B                                            Premise(F42)
	S0= CU.Func=>ALU.Func                                       Premise(F43)
	S0= ALU.Func=alu_or                                         Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F44)
	S0= IR.Out6_10=>CRRegs.WReg                                 Premise(F45)
	S0= CRRegs.WReg=crbD                                        Path(S0,S0)
	S0= ALUOut.Out=>CRRegs.WData                                Premise(F46)
	S0= CtrlPIDReg=0                                            Premise(F47)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F48)
	S0= IMem[{pid,addr}]={19,crbD,crbA,crbB,898}                IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F49)
	S0= CtrlPCInc=0                                             Premise(F50)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F51)
	S0= [IR]={19,crbD,crbA,crbB,898}                            IR-Hold(S0,S0)
	S0= CtrlCRRegs=0                                            Premise(F52)
	S0= CRRegs[crbA]=a                                          CRRegs-Hold(S0,S0)
	S0= CRRegs[crbB]=b                                          CRRegs-Hold(S0,S0)
	S0= CtrlCRRegsCR0=0                                         Premise(F53)
	S0= CtrlCRRegsW4bitRegs=0                                   Premise(F54)
	S0= CtrlCRRegsW1bitRegs=0                                   Premise(F55)
	S0= CtrlA=1                                                 Premise(F56)
	S0= [A]=a                                                   A-Write(S0,S0)
	S0= CtrlB=1                                                 Premise(F57)
	S0= [B]=b                                                   B-Write(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F58)

EX	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=19                                            IR-Out(S0)
	S0= IR.Out6_10=crbD                                         IR-Out(S0)
	S0= IR.Out11_15=crbA                                        IR-Out(S0)
	S0= IR.Out16_20=crbB                                        IR-Out(S0)
	S0= IR.Out21_31=898                                         IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out=b                                                 B-Out(S0)
	S0= B.Out1_0={b}[1:0]                                       B-Out(S0)
	S0= B.Out4_0={b}[4:0]                                       B-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F59)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F60)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F61)
	S0= IR.Out0_5=>CU.Op                                        Premise(F62)
	S0= CU.Op=19                                                Path(S0,S0)
	S0= IR.Out11_15=>CRRegs.RReg1                               Premise(F63)
	S0= CRRegs.RReg1=crbA                                       Path(S0,S0)
	S0= CRRegs.RData1=a                                         CRRegs-Read(S0,S0)
	S0= IR.Out16_20=>CRRegs.RReg2                               Premise(F64)
	S0= CRRegs.RReg2=crbB                                       Path(S0,S0)
	S0= CRRegs.RData2=b                                         CRRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F65)
	S0= CU.IRFunc=898                                           Path(S0,S0)
	S0= CU.Func=alu_or                                          CU(S0,S0)
	S0= CRRegs.RData1=>A.In                                     Premise(F66)
	S0= A.In=a                                                  Path(S0,S0)
	S0= CRRegs.RData2=>B.In                                     Premise(F67)
	S0= B.In=b                                                  Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F68)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F69)
	S0= ALU.B=b                                                 Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F70)
	S0= ALU.Func=alu_or                                         Path(S0,S0)
	S0= ALU.Out=a|b                                             ALU(S0,S0)
	S0= ALU.CMP=Compare0(a|b)                                   ALU(S0,S0)
	S0= ALU.OV=OverFlow(a|b)                                    ALU(S0,S0)
	S0= ALU.CA=Carry(a|b)                                       ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F71)
	S0= ALUOut.In=a|b                                           Path(S0,S0)
	S0= IR.Out6_10=>CRRegs.WReg                                 Premise(F72)
	S0= CRRegs.WReg=crbD                                        Path(S0,S0)
	S0= ALUOut.Out=>CRRegs.WData                                Premise(F73)
	S0= CtrlPIDReg=0                                            Premise(F74)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F75)
	S0= IMem[{pid,addr}]={19,crbD,crbA,crbB,898}                IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F76)
	S0= CtrlPCInc=0                                             Premise(F77)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F78)
	S0= [IR]={19,crbD,crbA,crbB,898}                            IR-Hold(S0,S0)
	S0= CtrlCRRegs=0                                            Premise(F79)
	S0= CRRegs[crbA]=a                                          CRRegs-Hold(S0,S0)
	S0= CRRegs[crbB]=b                                          CRRegs-Hold(S0,S0)
	S0= CtrlCRRegsCR0=0                                         Premise(F80)
	S0= CtrlCRRegsW4bitRegs=0                                   Premise(F81)
	S0= CtrlCRRegsW1bitRegs=0                                   Premise(F82)
	S0= CtrlA=0                                                 Premise(F83)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F84)
	S0= [B]=b                                                   B-Hold(S0,S0)
	S0= CtrlALUOut=1                                            Premise(F85)
	S0= [ALUOut]=a|b                                            ALUOut-Write(S0,S0)

MEM	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=19                                            IR-Out(S0)
	S0= IR.Out6_10=crbD                                         IR-Out(S0)
	S0= IR.Out11_15=crbA                                        IR-Out(S0)
	S0= IR.Out16_20=crbB                                        IR-Out(S0)
	S0= IR.Out21_31=898                                         IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out=b                                                 B-Out(S0)
	S0= B.Out1_0={b}[1:0]                                       B-Out(S0)
	S0= B.Out4_0={b}[4:0]                                       B-Out(S0)
	S0= ALUOut.Out=a|b                                          ALUOut-Out(S0)
	S0= ALUOut.Out1_0={a|b}[1:0]                                ALUOut-Out(S0)
	S0= ALUOut.Out4_0={a|b}[4:0]                                ALUOut-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F86)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F87)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F88)
	S0= IR.Out0_5=>CU.Op                                        Premise(F89)
	S0= CU.Op=19                                                Path(S0,S0)
	S0= IR.Out11_15=>CRRegs.RReg1                               Premise(F90)
	S0= CRRegs.RReg1=crbA                                       Path(S0,S0)
	S0= CRRegs.RData1=a                                         CRRegs-Read(S0,S0)
	S0= IR.Out16_20=>CRRegs.RReg2                               Premise(F91)
	S0= CRRegs.RReg2=crbB                                       Path(S0,S0)
	S0= CRRegs.RData2=b                                         CRRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F92)
	S0= CU.IRFunc=898                                           Path(S0,S0)
	S0= CU.Func=alu_or                                          CU(S0,S0)
	S0= CRRegs.RData1=>A.In                                     Premise(F93)
	S0= A.In=a                                                  Path(S0,S0)
	S0= CRRegs.RData2=>B.In                                     Premise(F94)
	S0= B.In=b                                                  Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F95)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F96)
	S0= ALU.B=b                                                 Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F97)
	S0= ALU.Func=alu_or                                         Path(S0,S0)
	S0= ALU.Out=a|b                                             ALU(S0,S0)
	S0= ALU.CMP=Compare0(a|b)                                   ALU(S0,S0)
	S0= ALU.OV=OverFlow(a|b)                                    ALU(S0,S0)
	S0= ALU.CA=Carry(a|b)                                       ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F98)
	S0= ALUOut.In=a|b                                           Path(S0,S0)
	S0= IR.Out6_10=>CRRegs.WReg                                 Premise(F99)
	S0= CRRegs.WReg=crbD                                        Path(S0,S0)
	S0= ALUOut.Out=>CRRegs.WData                                Premise(F100)
	S0= CRRegs.WData=a|b                                        Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F101)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F102)
	S0= IMem[{pid,addr}]={19,crbD,crbA,crbB,898}                IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F103)
	S0= CtrlPCInc=0                                             Premise(F104)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F105)
	S0= [IR]={19,crbD,crbA,crbB,898}                            IR-Hold(S0,S0)
	S0= CtrlCRRegs=0                                            Premise(F106)
	S0= CRRegs[crbA]=a                                          CRRegs-Hold(S0,S0)
	S0= CRRegs[crbB]=b                                          CRRegs-Hold(S0,S0)
	S0= CtrlCRRegsCR0=0                                         Premise(F107)
	S0= CtrlCRRegsW4bitRegs=0                                   Premise(F108)
	S0= CtrlCRRegsW1bitRegs=0                                   Premise(F109)
	S0= CtrlA=0                                                 Premise(F110)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F111)
	S0= [B]=b                                                   B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F112)
	S0= [ALUOut]=a|b                                            ALUOut-Hold(S0,S0)

WB	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=19                                            IR-Out(S0)
	S0= IR.Out6_10=crbD                                         IR-Out(S0)
	S0= IR.Out11_15=crbA                                        IR-Out(S0)
	S0= IR.Out16_20=crbB                                        IR-Out(S0)
	S0= IR.Out21_31=898                                         IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= B.Out=b                                                 B-Out(S0)
	S0= B.Out1_0={b}[1:0]                                       B-Out(S0)
	S0= B.Out4_0={b}[4:0]                                       B-Out(S0)
	S0= ALUOut.Out=a|b                                          ALUOut-Out(S0)
	S0= ALUOut.Out1_0={a|b}[1:0]                                ALUOut-Out(S0)
	S0= ALUOut.Out4_0={a|b}[4:0]                                ALUOut-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F113)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F114)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F115)
	S0= IR.Out0_5=>CU.Op                                        Premise(F116)
	S0= CU.Op=19                                                Path(S0,S0)
	S0= IR.Out11_15=>CRRegs.RReg1                               Premise(F117)
	S0= CRRegs.RReg1=crbA                                       Path(S0,S0)
	S0= CRRegs.RData1=a                                         CRRegs-Read(S0,S0)
	S0= IR.Out16_20=>CRRegs.RReg2                               Premise(F118)
	S0= CRRegs.RReg2=crbB                                       Path(S0,S0)
	S0= CRRegs.RData2=b                                         CRRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F119)
	S0= CU.IRFunc=898                                           Path(S0,S0)
	S0= CU.Func=alu_or                                          CU(S0,S0)
	S0= CRRegs.RData1=>A.In                                     Premise(F120)
	S0= A.In=a                                                  Path(S0,S0)
	S0= CRRegs.RData2=>B.In                                     Premise(F121)
	S0= B.In=b                                                  Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F122)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F123)
	S0= ALU.B=b                                                 Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F124)
	S0= ALU.Func=alu_or                                         Path(S0,S0)
	S0= ALU.Out=a|b                                             ALU(S0,S0)
	S0= ALU.CMP=Compare0(a|b)                                   ALU(S0,S0)
	S0= ALU.OV=OverFlow(a|b)                                    ALU(S0,S0)
	S0= ALU.CA=Carry(a|b)                                       ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F125)
	S0= ALUOut.In=a|b                                           Path(S0,S0)
	S0= IR.Out6_10=>CRRegs.WReg                                 Premise(F126)
	S0= CRRegs.WReg=crbD                                        Path(S0,S0)
	S0= ALUOut.Out=>CRRegs.WData                                Premise(F127)
	S0= CRRegs.WData=a|b                                        Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F128)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F129)
	S0= IMem[{pid,addr}]={19,crbD,crbA,crbB,898}                IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F130)
	S0= CtrlPCInc=0                                             Premise(F131)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F132)
	S0= [IR]={19,crbD,crbA,crbB,898}                            IR-Hold(S0,S0)
	S0= CtrlCRRegs=1                                            Premise(F133)
	S0= CRRegs[crbD]=a|b                                        CRRegs-Write(S0,S0,S0)
	S0= CtrlCRRegsCR0=0                                         Premise(F134)
	S0= CtrlCRRegsW4bitRegs=0                                   Premise(F135)
	S0= CtrlCRRegsW1bitRegs=0                                   Premise(F136)
	S0= CtrlA=0                                                 Premise(F137)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F138)
	S0= [B]=b                                                   B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F139)
	S0= [ALUOut]=a|b                                            ALUOut-Hold(S0,S0)

POST	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= IMem[{pid,addr}]={19,crbD,crbA,crbB,898}                IMem-Hold(S0,S0)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= [IR]={19,crbD,crbA,crbB,898}                            IR-Hold(S0,S0)
	S0= CRRegs[crbD]=a|b                                        CRRegs-Write(S0,S0,S0)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= [B]=b                                                   B-Hold(S0,S0)
	S0= [ALUOut]=a|b                                            ALUOut-Hold(S0,S0)

