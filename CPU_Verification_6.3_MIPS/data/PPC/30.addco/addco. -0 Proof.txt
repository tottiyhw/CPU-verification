
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,1045}                     Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.NIA=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S9= IMem.PID=pid                                            Path(S6,S8)
	S10= PC.NIA=>IMem.Addr                                      Premise(F7)
	S11= IMem.Addr=addr                                         Path(S7,S10)
	S12= IMem.RData={31,rT,rA,rB,1045}                          IMem-Read(S9,S11,S2)
	S13= IMem.RData=>IR.In                                      Premise(F8)
	S14= IR.In={31,rT,rA,rB,1045}                               Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F35)
	S16= CtrlPCInc=1                                            Premise(F36)
	S17= PC[Out]=addr+4                                         PC-Inc(S1,S15,S16)
	S18= CtrlIR=1                                               Premise(F37)
	S19= [IR]={31,rT,rA,rB,1045}                                IR-Write(S14,S18)
	S20= CtrlGPRegs=0                                           Premise(F38)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)
	S22= GPRegs[rB]=b                                           GPRegs-Hold(S4,S20)
	S23= CtrlXERSO=0                                            Premise(F44)
	S24= XER[SO]=so                                             XER-SO-Hold(S5,S23)

ID	S25= IR.Out11_15=rA                                         IR-Out(S19)
	S26= IR.Out16_20=rB                                         IR-Out(S19)
	S27= IR.Out11_15=>GPRegs.RReg1                              Premise(F57)
	S28= GPRegs.RReg1=rA                                        Path(S25,S27)
	S29= GPRegs.RData1=a                                        GPRegs-Read(S28,S21)
	S30= IR.Out16_20=>GPRegs.RReg2                              Premise(F58)
	S31= GPRegs.RReg2=rB                                        Path(S26,S30)
	S32= GPRegs.RData2=b                                        GPRegs-Read(S31,S22)
	S33= GPRegs.RData1=>A.In                                    Premise(F60)
	S34= A.In=a                                                 Path(S29,S33)
	S35= GPRegs.RData2=>B.In                                    Premise(F61)
	S36= B.In=b                                                 Path(S32,S35)
	S37= CtrlPC=0                                               Premise(F82)
	S38= CtrlPCInc=0                                            Premise(F83)
	S39= PC[Out]=addr+4                                         PC-Hold(S17,S37,S38)
	S40= CtrlIR=0                                               Premise(F84)
	S41= [IR]={31,rT,rA,rB,1045}                                IR-Hold(S19,S40)
	S42= CtrlA=1                                                Premise(F86)
	S43= [A]=a                                                  A-Write(S34,S42)
	S44= CtrlB=1                                                Premise(F87)
	S45= [B]=b                                                  B-Write(S36,S44)
	S46= CtrlXERSO=0                                            Premise(F91)
	S47= XER[SO]=so                                             XER-SO-Hold(S24,S46)

EX	S48= A.Out=a                                                A-Out(S43)
	S49= B.Out=b                                                B-Out(S45)
	S50= XER.SOOut=so                                           XER-SO-Out(S47)
	S51= A.Out=>ALU.A                                           Premise(F109)
	S52= ALU.A=a                                                Path(S48,S51)
	S53= B.Out=>ALU.B                                           Premise(F110)
	S54= ALU.B=b                                                Path(S49,S53)
	S55= ALU.Out=a+b                                            ALU(S52,S54)
	S56= ALU.CMP=Compare0(a+b)                                  ALU(S52,S54)
	S57= ALU.OV=OverFlow(a+b)                                   ALU(S52,S54)
	S58= ALU.CA=Carry(a+b)                                      ALU(S52,S54)
	S59= ALU.Out=>ALUOut.In                                     Premise(F112)
	S60= ALUOut.In=a+b                                          Path(S55,S59)
	S61= ALU.CA=>CAReg.In                                       Premise(F113)
	S62= CAReg.In=Carry(a+b)                                    Path(S58,S61)
	S63= ALU.CMP=>DataCmb.A                                     Premise(F114)
	S64= DataCmb.A=Compare0(a+b)                                Path(S56,S63)
	S65= ORGate.Out=>DataCmb.B                                  Premise(F115)
	S66= ALU.OV=>OVReg.In                                       Premise(F116)
	S67= OVReg.In=OverFlow(a+b)                                 Path(S57,S66)
	S68= XER.SOOut=>ORGate.A                                    Premise(F117)
	S69= ORGate.A=so                                            Path(S50,S68)
	S70= ALU.OV=>ORGate.B                                       Premise(F118)
	S71= ORGate.B=OverFlow(a+b)                                 Path(S57,S70)
	S72= ORGate.Out=so|OverFlow(a+b)                            ORGate(S69,S71)
	S73= DataCmb.B=so|OverFlow(a+b)                             Path(S72,S65)
	S74= DataCmb.Out={Compare0(a+b),so|OverFlow(a+b)}           DataCmb(S64,S73)
	S75= ORGate.Out=>DR1bit.In                                  Premise(F119)
	S76= DR1bit.In=so|OverFlow(a+b)                             Path(S72,S75)
	S77= DataCmb.Out=>DR4bit.In                                 Premise(F120)
	S78= DR4bit.In={Compare0(a+b),so|OverFlow(a+b)}             Path(S74,S77)
	S79= CtrlPC=0                                               Premise(F129)
	S80= CtrlPCInc=0                                            Premise(F130)
	S81= PC[Out]=addr+4                                         PC-Hold(S39,S79,S80)
	S82= CtrlIR=0                                               Premise(F131)
	S83= [IR]={31,rT,rA,rB,1045}                                IR-Hold(S41,S82)
	S84= CtrlALUOut=1                                           Premise(F135)
	S85= [ALUOut]=a+b                                           ALUOut-Write(S60,S84)
	S86= CtrlCAReg=1                                            Premise(F136)
	S87= [CAReg]=Carry(a+b)                                     CAReg-Write(S62,S86)
	S88= CtrlOVReg=1                                            Premise(F137)
	S89= [OVReg]=OverFlow(a+b)                                  OVReg-Write(S67,S88)
	S90= CtrlDR1bit=1                                           Premise(F141)
	S91= [DR1bit]=so|OverFlow(a+b)                              DR1bit-Write(S76,S90)
	S92= CtrlDR4bit=1                                           Premise(F142)
	S93= [DR4bit]={Compare0(a+b),so|OverFlow(a+b)}              DR4bit-Write(S78,S92)

MEM	S94= CtrlPC=0                                               Premise(F176)
	S95= CtrlPCInc=0                                            Premise(F177)
	S96= PC[Out]=addr+4                                         PC-Hold(S81,S94,S95)
	S97= CtrlIR=0                                               Premise(F178)
	S98= [IR]={31,rT,rA,rB,1045}                                IR-Hold(S83,S97)
	S99= CtrlALUOut=0                                           Premise(F182)
	S100= [ALUOut]=a+b                                          ALUOut-Hold(S85,S99)
	S101= CtrlCAReg=0                                           Premise(F183)
	S102= [CAReg]=Carry(a+b)                                    CAReg-Hold(S87,S101)
	S103= CtrlOVReg=0                                           Premise(F184)
	S104= [OVReg]=OverFlow(a+b)                                 OVReg-Hold(S89,S103)
	S105= CtrlDR1bit=0                                          Premise(F188)
	S106= [DR1bit]=so|OverFlow(a+b)                             DR1bit-Hold(S91,S105)
	S107= CtrlDR4bit=0                                          Premise(F189)
	S108= [DR4bit]={Compare0(a+b),so|OverFlow(a+b)}             DR4bit-Hold(S93,S107)

WB	S109= IR.Out6_10=rT                                         IR-Out(S98)
	S110= ALUOut.Out=a+b                                        ALUOut-Out(S100)
	S111= CAReg.Out=Carry(a+b)                                  CAReg-Out(S102)
	S112= OVReg.Out=OverFlow(a+b)                               OVReg-Out(S104)
	S113= DR1bit.Out=so|OverFlow(a+b)                           DR1bit-Out(S106)
	S114= DR4bit.Out={Compare0(a+b),so|OverFlow(a+b)}           DR4bit-Out(S108)
	S115= IR.Out6_10=>GPRegs.WReg                               Premise(F215)
	S116= GPRegs.WReg=rT                                        Path(S109,S115)
	S117= ALUOut.Out=>GPRegs.WData                              Premise(F216)
	S118= GPRegs.WData=a+b                                      Path(S110,S117)
	S119= DR4bit.Out=>CRRegs.CR0In                              Premise(F217)
	S120= CRRegs.CR0In={Compare0(a+b),so|OverFlow(a+b)}         Path(S114,S119)
	S121= DR1bit.Out=>XER.SOIn                                  Premise(F218)
	S122= XER.SOIn=so|OverFlow(a+b)                             Path(S113,S121)
	S123= CAReg.Out=>XER.CAIn                                   Premise(F219)
	S124= XER.CAIn=Carry(a+b)                                   Path(S111,S123)
	S125= OVReg.Out=>XER.OVIn                                   Premise(F220)
	S126= XER.OVIn=OverFlow(a+b)                                Path(S112,S125)
	S127= CtrlPC=0                                              Premise(F223)
	S128= CtrlPCInc=0                                           Premise(F224)
	S129= PC[Out]=addr+4                                        PC-Hold(S96,S127,S128)
	S130= CtrlGPRegs=1                                          Premise(F226)
	S131= GPRegs[rT]=a+b                                        GPRegs-Write(S116,S118,S130)
	S132= CtrlXERSO=1                                           Premise(F232)
	S133= XER[SO]=so|OverFlow(a+b)                              XER-SO-Write(S122,S132)
	S134= CtrlXEROV=1                                           Premise(F233)
	S135= XER[OV]=OverFlow(a+b)                                 XER-OV-Write(S126,S134)
	S136= CtrlXERCA=1                                           Premise(F234)
	S137= XER[CA]=Carry(a+b)                                    XER-CA-Write(S124,S136)
	S138= CtrlCRRegsCR0=1                                       Premise(F238)
	S139= CRRegs[CR0]={Compare0(a+b),so|OverFlow(a+b)}          CRRegs-CR0-Write(S120,S138)

POST	S129= PC[Out]=addr+4                                        PC-Hold(S96,S127,S128)
	S131= GPRegs[rT]=a+b                                        GPRegs-Write(S116,S118,S130)
	S133= XER[SO]=so|OverFlow(a+b)                              XER-SO-Write(S122,S132)
	S135= XER[OV]=OverFlow(a+b)                                 XER-OV-Write(S126,S134)
	S137= XER[CA]=Carry(a+b)                                    XER-CA-Write(S124,S136)
	S139= CRRegs[CR0]={Compare0(a+b),so|OverFlow(a+b)}          CRRegs-CR0-Write(S120,S138)

