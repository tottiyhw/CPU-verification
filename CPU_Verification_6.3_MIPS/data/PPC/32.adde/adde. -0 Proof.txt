
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,277}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)
	S6= XER[CA]=ca                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.NIA=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMem.PID                                    Premise(F7)
	S10= IMem.PID=pid                                           Path(S7,S9)
	S11= PC.NIA=>IMem.Addr                                      Premise(F8)
	S12= IMem.Addr=addr                                         Path(S8,S11)
	S13= IMem.RData={31,rT,rA,rB,277}                           IMem-Read(S10,S12,S2)
	S14= IMem.RData=>IR.In                                      Premise(F9)
	S15= IR.In={31,rT,rA,rB,277}                                Path(S13,S14)
	S16= CtrlPC=0                                               Premise(F31)
	S17= CtrlPCInc=1                                            Premise(F32)
	S18= PC[Out]=addr+4                                         PC-Inc(S1,S16,S17)
	S19= CtrlIR=1                                               Premise(F33)
	S20= [IR]={31,rT,rA,rB,277}                                 IR-Write(S15,S19)
	S21= CtrlGPRegs=0                                           Premise(F34)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= GPRegs[rB]=b                                           GPRegs-Hold(S4,S21)
	S24= CtrlXERSO=0                                            Premise(F37)
	S25= XER[SO]=so                                             XER-SO-Hold(S5,S24)
	S26= CtrlXERCA=0                                            Premise(F39)
	S27= XER[CA]=ca                                             XER-CA-Hold(S6,S26)

ID	S28= IR.Out11_15=rA                                         IR-Out(S20)
	S29= IR.Out16_20=rB                                         IR-Out(S20)
	S30= IR.Out11_15=>GPRegs.RReg1                              Premise(F51)
	S31= GPRegs.RReg1=rA                                        Path(S28,S30)
	S32= GPRegs.RData1=a                                        GPRegs-Read(S31,S22)
	S33= IR.Out16_20=>GPRegs.RReg2                              Premise(F52)
	S34= GPRegs.RReg2=rB                                        Path(S29,S33)
	S35= GPRegs.RData2=b                                        GPRegs-Read(S34,S23)
	S36= GPRegs.RData1=>A.In                                    Premise(F54)
	S37= A.In=a                                                 Path(S32,S36)
	S38= GPRegs.RData2=>B.In                                    Premise(F55)
	S39= B.In=b                                                 Path(S35,S38)
	S40= CtrlPC=0                                               Premise(F71)
	S41= CtrlPCInc=0                                            Premise(F72)
	S42= PC[Out]=addr+4                                         PC-Hold(S18,S40,S41)
	S43= CtrlIR=0                                               Premise(F73)
	S44= [IR]={31,rT,rA,rB,277}                                 IR-Hold(S20,S43)
	S45= CtrlA=1                                                Premise(F75)
	S46= [A]=a                                                  A-Write(S37,S45)
	S47= CtrlB=1                                                Premise(F76)
	S48= [B]=b                                                  B-Write(S39,S47)
	S49= CtrlXERSO=0                                            Premise(F77)
	S50= XER[SO]=so                                             XER-SO-Hold(S25,S49)
	S51= CtrlXERCA=0                                            Premise(F79)
	S52= XER[CA]=ca                                             XER-CA-Hold(S27,S51)

EX	S53= A.Out=a                                                A-Out(S46)
	S54= B.Out=b                                                B-Out(S48)
	S55= XER.SOOut=so                                           XER-SO-Out(S50)
	S56= XER.CAOut=ca                                           XER-CA-Out(S52)
	S57= A.Out=>ALU.A                                           Premise(F96)
	S58= ALU.A=a                                                Path(S53,S57)
	S59= B.Out=>ALU.B                                           Premise(F97)
	S60= ALU.B=b                                                Path(S54,S59)
	S61= XER.CAOut=>ALU.CAIn                                    Premise(F98)
	S62= ALU.CAIn=ca                                            Path(S56,S61)
	S63= ALU.Out=a+b+ca                                         ALU(S58,S60,S62)
	S64= ALU.CMP=Compare0(a+b+ca)                               ALU(S58,S60,S62)
	S65= ALU.CA=Carry(a+b+ca)                                   ALU(S58,S60,S62)
	S66= ALU.Out=>ALUOut.In                                     Premise(F100)
	S67= ALUOut.In=a+b+ca                                       Path(S63,S66)
	S68= ALU.CA=>CAReg.In                                       Premise(F101)
	S69= CAReg.In=Carry(a+b+ca)                                 Path(S65,S68)
	S70= ALU.CMP=>DataCmb.A                                     Premise(F102)
	S71= DataCmb.A=Compare0(a+b+ca)                             Path(S64,S70)
	S72= XER.SOOut=>DataCmb.B                                   Premise(F103)
	S73= DataCmb.B=so                                           Path(S55,S72)
	S74= DataCmb.Out={Compare0(a+b+ca),so}                      DataCmb(S71,S73)
	S75= DataCmb.Out=>DR4bit.In                                 Premise(F104)
	S76= DR4bit.In={Compare0(a+b+ca),so}                        Path(S74,S75)
	S77= CtrlPC=0                                               Premise(F111)
	S78= CtrlPCInc=0                                            Premise(F112)
	S79= PC[Out]=addr+4                                         PC-Hold(S42,S77,S78)
	S80= CtrlIR=0                                               Premise(F113)
	S81= [IR]={31,rT,rA,rB,277}                                 IR-Hold(S44,S80)
	S82= CtrlALUOut=1                                           Premise(F120)
	S83= [ALUOut]=a+b+ca                                        ALUOut-Write(S67,S82)
	S84= CtrlCAReg=1                                            Premise(F121)
	S85= [CAReg]=Carry(a+b+ca)                                  CAReg-Write(S69,S84)
	S86= CtrlDR4bit=1                                           Premise(F122)
	S87= [DR4bit]={Compare0(a+b+ca),so}                         DR4bit-Write(S76,S86)

MEM	S88= CtrlPC=0                                               Premise(F151)
	S89= CtrlPCInc=0                                            Premise(F152)
	S90= PC[Out]=addr+4                                         PC-Hold(S79,S88,S89)
	S91= CtrlIR=0                                               Premise(F153)
	S92= [IR]={31,rT,rA,rB,277}                                 IR-Hold(S81,S91)
	S93= CtrlALUOut=0                                           Premise(F160)
	S94= [ALUOut]=a+b+ca                                        ALUOut-Hold(S83,S93)
	S95= CtrlCAReg=0                                            Premise(F161)
	S96= [CAReg]=Carry(a+b+ca)                                  CAReg-Hold(S85,S95)
	S97= CtrlDR4bit=0                                           Premise(F162)
	S98= [DR4bit]={Compare0(a+b+ca),so}                         DR4bit-Hold(S87,S97)

WB	S99= IR.Out6_10=rT                                          IR-Out(S92)
	S100= ALUOut.Out=a+b+ca                                     ALUOut-Out(S94)
	S101= CAReg.Out=Carry(a+b+ca)                               CAReg-Out(S96)
	S102= DR4bit.Out={Compare0(a+b+ca),so}                      DR4bit-Out(S98)
	S103= IR.Out6_10=>GPRegs.WReg                               Premise(F185)
	S104= GPRegs.WReg=rT                                        Path(S99,S103)
	S105= ALUOut.Out=>GPRegs.WData                              Premise(F186)
	S106= GPRegs.WData=a+b+ca                                   Path(S100,S105)
	S107= CAReg.Out=>XER.CAIn                                   Premise(F187)
	S108= XER.CAIn=Carry(a+b+ca)                                Path(S101,S107)
	S109= DR4bit.Out=>CRRegs.CR0In                              Premise(F188)
	S110= CRRegs.CR0In={Compare0(a+b+ca),so}                    Path(S102,S109)
	S111= CtrlPC=0                                              Premise(F191)
	S112= CtrlPCInc=0                                           Premise(F192)
	S113= PC[Out]=addr+4                                        PC-Hold(S90,S111,S112)
	S114= CtrlGPRegs=1                                          Premise(F194)
	S115= GPRegs[rT]=a+b+ca                                     GPRegs-Write(S104,S106,S114)
	S116= CtrlXERCA=1                                           Premise(F199)
	S117= XER[CA]=Carry(a+b+ca)                                 XER-CA-Write(S108,S116)
	S118= CtrlCRRegsCR0=1                                       Premise(F204)
	S119= CRRegs[CR0]={Compare0(a+b+ca),so}                     CRRegs-CR0-Write(S110,S118)

POST	S113= PC[Out]=addr+4                                        PC-Hold(S90,S111,S112)
	S115= GPRegs[rT]=a+b+ca                                     GPRegs-Write(S104,S106,S114)
	S117= XER[CA]=Carry(a+b+ca)                                 XER-CA-Write(S108,S116)
	S119= CRRegs[CR0]={Compare0(a+b+ca),so}                     CRRegs-CR0-Write(S110,S118)

