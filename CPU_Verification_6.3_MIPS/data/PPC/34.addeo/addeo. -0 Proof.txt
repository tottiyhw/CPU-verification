
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,1301}                     Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[CA]=ca                                              Premise(F5)
	S6= XER[SO]=so                                              Premise(F6)

IF	S7= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S8= PC.NIA=addr                                             PC-Out(S1)
	S9= PIDReg.Out=>IMem.PID                                    Premise(F7)
	S10= IMem.PID=pid                                           Path(S7,S9)
	S11= PC.NIA=>IMem.Addr                                      Premise(F8)
	S12= IMem.Addr=addr                                         Path(S8,S11)
	S13= IMem.RData={31,rT,rA,rB,1301}                          IMem-Read(S10,S12,S2)
	S14= IMem.RData=>IR.In                                      Premise(F9)
	S15= IR.In={31,rT,rA,rB,1301}                               Path(S13,S14)
	S16= CtrlPC=0                                               Premise(F37)
	S17= CtrlPCInc=1                                            Premise(F38)
	S18= PC[Out]=addr+4                                         PC-Inc(S1,S16,S17)
	S19= CtrlIR=1                                               Premise(F39)
	S20= [IR]={31,rT,rA,rB,1301}                                IR-Write(S15,S19)
	S21= CtrlGPRegs=0                                           Premise(F40)
	S22= GPRegs[rA]=a                                           GPRegs-Hold(S3,S21)
	S23= GPRegs[rB]=b                                           GPRegs-Hold(S4,S21)
	S24= CtrlXERSO=0                                            Premise(F43)
	S25= XER[SO]=so                                             XER-SO-Hold(S6,S24)
	S26= CtrlXERCA=0                                            Premise(F45)
	S27= XER[CA]=ca                                             XER-CA-Hold(S5,S26)

ID	S28= IR.Out11_15=rA                                         IR-Out(S20)
	S29= IR.Out16_20=rB                                         IR-Out(S20)
	S30= IR.Out11_15=>GPRegs.RReg1                              Premise(F59)
	S31= GPRegs.RReg1=rA                                        Path(S28,S30)
	S32= GPRegs.RData1=a                                        GPRegs-Read(S31,S22)
	S33= IR.Out16_20=>GPRegs.RReg2                              Premise(F60)
	S34= GPRegs.RReg2=rB                                        Path(S29,S33)
	S35= GPRegs.RData2=b                                        GPRegs-Read(S34,S23)
	S36= GPRegs.RData1=>A.In                                    Premise(F62)
	S37= A.In=a                                                 Path(S32,S36)
	S38= GPRegs.RData2=>B.In                                    Premise(F63)
	S39= B.In=b                                                 Path(S35,S38)
	S40= CtrlPC=0                                               Premise(F85)
	S41= CtrlPCInc=0                                            Premise(F86)
	S42= PC[Out]=addr+4                                         PC-Hold(S18,S40,S41)
	S43= CtrlIR=0                                               Premise(F87)
	S44= [IR]={31,rT,rA,rB,1301}                                IR-Hold(S20,S43)
	S45= CtrlA=1                                                Premise(F89)
	S46= [A]=a                                                  A-Write(S37,S45)
	S47= CtrlB=1                                                Premise(F90)
	S48= [B]=b                                                  B-Write(S39,S47)
	S49= CtrlXERSO=0                                            Premise(F91)
	S50= XER[SO]=so                                             XER-SO-Hold(S25,S49)
	S51= CtrlXERCA=0                                            Premise(F93)
	S52= XER[CA]=ca                                             XER-CA-Hold(S27,S51)

EX	S53= A.Out=a                                                A-Out(S46)
	S54= B.Out=b                                                B-Out(S48)
	S55= XER.SOOut=so                                           XER-SO-Out(S50)
	S56= XER.CAOut=ca                                           XER-CA-Out(S52)
	S57= A.Out=>ALU.A                                           Premise(F112)
	S58= ALU.A=a                                                Path(S53,S57)
	S59= B.Out=>ALU.B                                           Premise(F113)
	S60= ALU.B=b                                                Path(S54,S59)
	S61= XER.CAOut=>ALU.CAIn                                    Premise(F114)
	S62= ALU.CAIn=ca                                            Path(S56,S61)
	S63= ALU.Out=a+b+ca                                         ALU(S58,S60,S62)
	S64= ALU.CMP=Compare0(a+b+ca)                               ALU(S58,S60,S62)
	S65= ALU.OV=OverFlow(a+b+ca)                                ALU(S58,S60,S62)
	S66= ALU.CA=Carry(a+b+ca)                                   ALU(S58,S60,S62)
	S67= ALU.Out=>ALUOut.In                                     Premise(F116)
	S68= ALUOut.In=a+b+ca                                       Path(S63,S67)
	S69= ALU.CA=>CAReg.In                                       Premise(F117)
	S70= CAReg.In=Carry(a+b+ca)                                 Path(S66,S69)
	S71= ALU.CMP=>DataCmb.A                                     Premise(F118)
	S72= DataCmb.A=Compare0(a+b+ca)                             Path(S64,S71)
	S73= ORGate.Out=>DataCmb.B                                  Premise(F119)
	S74= ALU.OV=>OVReg.In                                       Premise(F120)
	S75= OVReg.In=OverFlow(a+b+ca)                              Path(S65,S74)
	S76= XER.SOOut=>ORGate.A                                    Premise(F121)
	S77= ORGate.A=so                                            Path(S55,S76)
	S78= ALU.OV=>ORGate.B                                       Premise(F122)
	S79= ORGate.B=OverFlow(a+b+ca)                              Path(S65,S78)
	S80= ORGate.Out=so|OverFlow(a+b+ca)                         ORGate(S77,S79)
	S81= DataCmb.B=so|OverFlow(a+b+ca)                          Path(S80,S73)
	S82= DataCmb.Out={Compare0(a+b+ca),so|OverFlow(a+b+ca)}     DataCmb(S72,S81)
	S83= ORGate.Out=>DR1bit.In                                  Premise(F123)
	S84= DR1bit.In=so|OverFlow(a+b+ca)                          Path(S80,S83)
	S85= DataCmb.Out=>DR4bit.In                                 Premise(F124)
	S86= DR4bit.In={Compare0(a+b+ca),so|OverFlow(a+b+ca)}       Path(S82,S85)
	S87= CtrlPC=0                                               Premise(F133)
	S88= CtrlPCInc=0                                            Premise(F134)
	S89= PC[Out]=addr+4                                         PC-Hold(S42,S87,S88)
	S90= CtrlIR=0                                               Premise(F135)
	S91= [IR]={31,rT,rA,rB,1301}                                IR-Hold(S44,S90)
	S92= CtrlALUOut=1                                           Premise(F142)
	S93= [ALUOut]=a+b+ca                                        ALUOut-Write(S68,S92)
	S94= CtrlCAReg=1                                            Premise(F143)
	S95= [CAReg]=Carry(a+b+ca)                                  CAReg-Write(S70,S94)
	S96= CtrlOVReg=1                                            Premise(F144)
	S97= [OVReg]=OverFlow(a+b+ca)                               OVReg-Write(S75,S96)
	S98= CtrlDR1bit=1                                           Premise(F145)
	S99= [DR1bit]=so|OverFlow(a+b+ca)                           DR1bit-Write(S84,S98)
	S100= CtrlDR4bit=1                                          Premise(F146)
	S101= [DR4bit]={Compare0(a+b+ca),so|OverFlow(a+b+ca)}       DR4bit-Write(S86,S100)

MEM	S102= CtrlPC=0                                              Premise(F181)
	S103= CtrlPCInc=0                                           Premise(F182)
	S104= PC[Out]=addr+4                                        PC-Hold(S89,S102,S103)
	S105= CtrlIR=0                                              Premise(F183)
	S106= [IR]={31,rT,rA,rB,1301}                               IR-Hold(S91,S105)
	S107= CtrlALUOut=0                                          Premise(F190)
	S108= [ALUOut]=a+b+ca                                       ALUOut-Hold(S93,S107)
	S109= CtrlCAReg=0                                           Premise(F191)
	S110= [CAReg]=Carry(a+b+ca)                                 CAReg-Hold(S95,S109)
	S111= CtrlOVReg=0                                           Premise(F192)
	S112= [OVReg]=OverFlow(a+b+ca)                              OVReg-Hold(S97,S111)
	S113= CtrlDR1bit=0                                          Premise(F193)
	S114= [DR1bit]=so|OverFlow(a+b+ca)                          DR1bit-Hold(S99,S113)
	S115= CtrlDR4bit=0                                          Premise(F194)
	S116= [DR4bit]={Compare0(a+b+ca),so|OverFlow(a+b+ca)}       DR4bit-Hold(S101,S115)

WB	S117= IR.Out6_10=rT                                         IR-Out(S106)
	S118= ALUOut.Out=a+b+ca                                     ALUOut-Out(S108)
	S119= CAReg.Out=Carry(a+b+ca)                               CAReg-Out(S110)
	S120= OVReg.Out=OverFlow(a+b+ca)                            OVReg-Out(S112)
	S121= DR1bit.Out=so|OverFlow(a+b+ca)                        DR1bit-Out(S114)
	S122= DR4bit.Out={Compare0(a+b+ca),so|OverFlow(a+b+ca)}     DR4bit-Out(S116)
	S123= IR.Out6_10=>GPRegs.WReg                               Premise(F221)
	S124= GPRegs.WReg=rT                                        Path(S117,S123)
	S125= ALUOut.Out=>GPRegs.WData                              Premise(F222)
	S126= GPRegs.WData=a+b+ca                                   Path(S118,S125)
	S127= DR4bit.Out=>CRRegs.CR0In                              Premise(F223)
	S128= CRRegs.CR0In={Compare0(a+b+ca),so|OverFlow(a+b+ca)}   Path(S122,S127)
	S129= DR1bit.Out=>XER.SOIn                                  Premise(F224)
	S130= XER.SOIn=so|OverFlow(a+b+ca)                          Path(S121,S129)
	S131= CAReg.Out=>XER.CAIn                                   Premise(F225)
	S132= XER.CAIn=Carry(a+b+ca)                                Path(S119,S131)
	S133= OVReg.Out=>XER.OVIn                                   Premise(F226)
	S134= XER.OVIn=OverFlow(a+b+ca)                             Path(S120,S133)
	S135= CtrlPC=0                                              Premise(F229)
	S136= CtrlPCInc=0                                           Premise(F230)
	S137= PC[Out]=addr+4                                        PC-Hold(S104,S135,S136)
	S138= CtrlGPRegs=1                                          Premise(F232)
	S139= GPRegs[rT]=a+b+ca                                     GPRegs-Write(S124,S126,S138)
	S140= CtrlXERSO=1                                           Premise(F235)
	S141= XER[SO]=so|OverFlow(a+b+ca)                           XER-SO-Write(S130,S140)
	S142= CtrlXEROV=1                                           Premise(F236)
	S143= XER[OV]=OverFlow(a+b+ca)                              XER-OV-Write(S134,S142)
	S144= CtrlXERCA=1                                           Premise(F237)
	S145= XER[CA]=Carry(a+b+ca)                                 XER-CA-Write(S132,S144)
	S146= CtrlCRRegsCR0=1                                       Premise(F244)
	S147= CRRegs[CR0]={Compare0(a+b+ca),so|OverFlow(a+b+ca)}    CRRegs-CR0-Write(S128,S146)

POST	S137= PC[Out]=addr+4                                        PC-Hold(S104,S135,S136)
	S139= GPRegs[rT]=a+b+ca                                     GPRegs-Write(S124,S126,S138)
	S141= XER[SO]=so|OverFlow(a+b+ca)                           XER-SO-Write(S130,S140)
	S143= XER[OV]=OverFlow(a+b+ca)                              XER-OV-Write(S134,S142)
	S145= XER[CA]=Carry(a+b+ca)                                 XER-CA-Write(S132,S144)
	S147= CRRegs[CR0]={Compare0(a+b+ca),so|OverFlow(a+b+ca)}    CRRegs-CR0-Write(S128,S146)

