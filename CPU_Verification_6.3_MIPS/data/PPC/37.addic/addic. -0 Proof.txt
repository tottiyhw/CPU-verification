
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={13,rT,rA,SIMM}                        Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.NIA=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMem.PID                                    Premise(F5)
	S8= IMem.PID=pid                                            Path(S5,S7)
	S9= PC.NIA=>IMem.Addr                                       Premise(F6)
	S10= IMem.Addr=addr                                         Path(S6,S9)
	S11= IMem.RData={13,rT,rA,SIMM}                             IMem-Read(S8,S10,S2)
	S12= IMem.RData=>IR.In                                      Premise(F7)
	S13= IR.In={13,rT,rA,SIMM}                                  Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F27)
	S15= CtrlPCInc=1                                            Premise(F28)
	S16= PC[Out]=addr+4                                         PC-Inc(S1,S14,S15)
	S17= CtrlIR=1                                               Premise(F29)
	S18= [IR]={13,rT,rA,SIMM}                                   IR-Write(S13,S17)
	S19= CtrlGPRegs=0                                           Premise(F30)
	S20= GPRegs[rA]=a                                           GPRegs-Hold(S3,S19)
	S21= CtrlXERSO=0                                            Premise(F35)
	S22= XER[SO]=so                                             XER-SO-Hold(S4,S21)

ID	S23= IR.Out11_15=rA                                         IR-Out(S18)
	S24= IR.Out16_31=SIMM                                       IR-Out(S18)
	S25= IR.Out11_15=>GPRegs.RReg1                              Premise(F47)
	S26= GPRegs.RReg1=rA                                        Path(S23,S25)
	S27= GPRegs.RData1=a                                        GPRegs-Read(S26,S20)
	S28= IR.Out16_31=>IMMEXT.In                                 Premise(F48)
	S29= IMMEXT.In=SIMM                                         Path(S24,S28)
	S30= IMMEXT.Out={16{SIMM[15]},SIMM}                         IMMEXT(S29)
	S31= GPRegs.RData1=>A.In                                    Premise(F49)
	S32= A.In=a                                                 Path(S27,S31)
	S33= IMMEXT.Out=>B.In                                       Premise(F50)
	S34= B.In={16{SIMM[15]},SIMM}                               Path(S30,S33)
	S35= CtrlPC=0                                               Premise(F65)
	S36= CtrlPCInc=0                                            Premise(F66)
	S37= PC[Out]=addr+4                                         PC-Hold(S16,S35,S36)
	S38= CtrlIR=0                                               Premise(F67)
	S39= [IR]={13,rT,rA,SIMM}                                   IR-Hold(S18,S38)
	S40= CtrlA=1                                                Premise(F69)
	S41= [A]=a                                                  A-Write(S32,S40)
	S42= CtrlB=1                                                Premise(F70)
	S43= [B]={16{SIMM[15]},SIMM}                                B-Write(S34,S42)
	S44= CtrlXERSO=0                                            Premise(F73)
	S45= XER[SO]=so                                             XER-SO-Hold(S22,S44)

EX	S46= A.Out=a                                                A-Out(S41)
	S47= B.Out={16{SIMM[15]},SIMM}                              B-Out(S43)
	S48= XER.SOOut=so                                           XER-SO-Out(S45)
	S49= A.Out=>ALU.A                                           Premise(F89)
	S50= ALU.A=a                                                Path(S46,S49)
	S51= B.Out=>ALU.B                                           Premise(F90)
	S52= ALU.B={16{SIMM[15]},SIMM}                              Path(S47,S51)
	S53= ALU.Out=a+{16{SIMM[15]},SIMM}                          ALU(S50,S52)
	S54= ALU.CMP=Compare0(a+{16{SIMM[15]},SIMM})                ALU(S50,S52)
	S55= ALU.CA=Carry(a+{16{SIMM[15]},SIMM})                    ALU(S50,S52)
	S56= ALU.Out=>ALUOut.In                                     Premise(F92)
	S57= ALUOut.In=a+{16{SIMM[15]},SIMM}                        Path(S53,S56)
	S58= ALU.CA=>CAReg.In                                       Premise(F93)
	S59= CAReg.In=Carry(a+{16{SIMM[15]},SIMM})                  Path(S55,S58)
	S60= ALU.CMP=>DataCmb.A                                     Premise(F94)
	S61= DataCmb.A=Compare0(a+{16{SIMM[15]},SIMM})              Path(S54,S60)
	S62= XER.SOOut=>DataCmb.B                                   Premise(F95)
	S63= DataCmb.B=so                                           Path(S48,S62)
	S64= DataCmb.Out={Compare0(a+{16{SIMM[15]},SIMM}),so}       DataCmb(S61,S63)
	S65= DataCmb.Out=>DR4bit.In                                 Premise(F96)
	S66= DR4bit.In={Compare0(a+{16{SIMM[15]},SIMM}),so}         Path(S64,S65)
	S67= CtrlPC=0                                               Premise(F103)
	S68= CtrlPCInc=0                                            Premise(F104)
	S69= PC[Out]=addr+4                                         PC-Hold(S37,S67,S68)
	S70= CtrlIR=0                                               Premise(F105)
	S71= [IR]={13,rT,rA,SIMM}                                   IR-Hold(S39,S70)
	S72= CtrlALUOut=1                                           Premise(F109)
	S73= [ALUOut]=a+{16{SIMM[15]},SIMM}                         ALUOut-Write(S57,S72)
	S74= CtrlCAReg=1                                            Premise(F110)
	S75= [CAReg]=Carry(a+{16{SIMM[15]},SIMM})                   CAReg-Write(S59,S74)
	S76= CtrlDR4bit=1                                           Premise(F114)
	S77= [DR4bit]={Compare0(a+{16{SIMM[15]},SIMM}),so}          DR4bit-Write(S66,S76)

MEM	S78= CtrlPC=0                                               Premise(F141)
	S79= CtrlPCInc=0                                            Premise(F142)
	S80= PC[Out]=addr+4                                         PC-Hold(S69,S78,S79)
	S81= CtrlIR=0                                               Premise(F143)
	S82= [IR]={13,rT,rA,SIMM}                                   IR-Hold(S71,S81)
	S83= CtrlALUOut=0                                           Premise(F147)
	S84= [ALUOut]=a+{16{SIMM[15]},SIMM}                         ALUOut-Hold(S73,S83)
	S85= CtrlCAReg=0                                            Premise(F148)
	S86= [CAReg]=Carry(a+{16{SIMM[15]},SIMM})                   CAReg-Hold(S75,S85)
	S87= CtrlDR4bit=0                                           Premise(F152)
	S88= [DR4bit]={Compare0(a+{16{SIMM[15]},SIMM}),so}          DR4bit-Hold(S77,S87)

WB	S89= IR.Out6_10=rT                                          IR-Out(S82)
	S90= ALUOut.Out=a+{16{SIMM[15]},SIMM}                       ALUOut-Out(S84)
	S91= CAReg.Out=Carry(a+{16{SIMM[15]},SIMM})                 CAReg-Out(S86)
	S92= DR4bit.Out={Compare0(a+{16{SIMM[15]},SIMM}),so}        DR4bit-Out(S88)
	S93= IR.Out6_10=>GPRegs.WReg                                Premise(F173)
	S94= GPRegs.WReg=rT                                         Path(S89,S93)
	S95= ALUOut.Out=>GPRegs.WData                               Premise(F174)
	S96= GPRegs.WData=a+{16{SIMM[15]},SIMM}                     Path(S90,S95)
	S97= DR4bit.Out=>CRRegs.CR0In                               Premise(F175)
	S98= CRRegs.CR0In={Compare0(a+{16{SIMM[15]},SIMM}),so}      Path(S92,S97)
	S99= CAReg.Out=>XER.CAIn                                    Premise(F176)
	S100= XER.CAIn=Carry(a+{16{SIMM[15]},SIMM})                 Path(S91,S99)
	S101= CtrlPC=0                                              Premise(F179)
	S102= CtrlPCInc=0                                           Premise(F180)
	S103= PC[Out]=addr+4                                        PC-Hold(S80,S101,S102)
	S104= CtrlGPRegs=1                                          Premise(F182)
	S105= GPRegs[rT]=a+{16{SIMM[15]},SIMM}                      GPRegs-Write(S94,S96,S104)
	S106= CtrlXERCA=1                                           Premise(F189)
	S107= XER[CA]=Carry(a+{16{SIMM[15]},SIMM})                  XER-CA-Write(S100,S106)
	S108= CtrlCRRegsCR0=1                                       Premise(F192)
	S109= CRRegs[CR0]={Compare0(a+{16{SIMM[15]},SIMM}),so}      CRRegs-CR0-Write(S98,S108)

POST	S103= PC[Out]=addr+4                                        PC-Hold(S80,S101,S102)
	S105= GPRegs[rT]=a+{16{SIMM[15]},SIMM}                      GPRegs-Write(S94,S96,S104)
	S107= XER[CA]=Carry(a+{16{SIMM[15]},SIMM})                  XER-CA-Write(S100,S106)
	S109= CRRegs[CR0]={Compare0(a+{16{SIMM[15]},SIMM}),so}      CRRegs-CR0-Write(S98,S108)

