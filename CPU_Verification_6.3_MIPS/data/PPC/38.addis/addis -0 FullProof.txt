
----------------------------------- FullProof -----------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={15,rT,rA,SIMM}                        Premise(F2)
	S0= GPRegs[rA]=a                                            Premise(F3)

IF	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.NIA=addr                                             PC-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F4)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F5)
	S0= IMem.Addr=addr                                          Path(S0,S0)
	S0= IMem.RData={15,rT,rA,SIMM}                              IMem-Read(S0,S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F6)
	S0= IR.In={15,rT,rA,SIMM}                                   Path(S0,S0)
	S0= IR.Out0_5=>CU.Op                                        Premise(F7)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F8)
	S0= IR.Out11_15=>AddrSelMux.Sel                             Premise(F9)
	S0= GPRegs.RData1=>AddrSelMux.Data                          Premise(F10)
	S0= AddrSelMux.Out=>A.In                                    Premise(F11)
	S0= IR.Out16_31=>IMMSEXT.In                                 Premise(F12)
	S0= IMMSEXT.Out=>B.In                                       Premise(F13)
	S0= A.Out=>ALU.A                                            Premise(F14)
	S0= B.Out=>ALU.B                                            Premise(F15)
	S0= CU.Func=>ALU.Func                                       Premise(F16)
	S0= ALU.Out=>ALUOut.In                                      Premise(F17)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F18)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F19)
	S0= CtrlPIDReg=0                                            Premise(F20)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F21)
	S0= IMem[{pid,addr}]={15,rT,rA,SIMM}                        IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F22)
	S0= CtrlPCInc=1                                             Premise(F23)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIR=1                                                Premise(F24)
	S0= [IR]={15,rT,rA,SIMM}                                    IR-Write(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F25)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F26)
	S0= CtrlB=0                                                 Premise(F27)
	S0= CtrlALUOut=0                                            Premise(F28)

ID	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= IR.Out0_5=15                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_31=SIMM                                        IR-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F29)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F30)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F31)
	S0= IR.Out0_5=>CU.Op                                        Premise(F32)
	S0= CU.Op=15                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F33)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.RData1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out11_15=>AddrSelMux.Sel                             Premise(F34)
	S0= AddrSelMux.Sel=rA                                       Path(S0,S0)
	S0= GPRegs.RData1=>AddrSelMux.Data                          Premise(F35)
	S0= AddrSelMux.Data=a                                       Path(S0,S0)
	S0= AddrSelMux.Out=AddrSel(rA,a)                            AddrSelMux(S0,S0)
	S0= AddrSelMux.Out=>A.In                                    Premise(F36)
	S0= A.In=AddrSel(rA,a)                                      Path(S0,S0)
	S0= IR.Out16_31=>IMMSEXT.In                                 Premise(F37)
	S0= IMMSEXT.In=SIMM                                         Path(S0,S0)
	S0= IMMSEXT.Out={SIMM,0}                                    IMMSEXT(S0)
	S0= IMMSEXT.Out=>B.In                                       Premise(F38)
	S0= B.In={SIMM,0}                                           Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F39)
	S0= B.Out=>ALU.B                                            Premise(F40)
	S0= CU.Func=>ALU.Func                                       Premise(F41)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F42)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F43)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F44)
	S0= CtrlPIDReg=0                                            Premise(F45)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F46)
	S0= IMem[{pid,addr}]={15,rT,rA,SIMM}                        IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F47)
	S0= CtrlPCInc=0                                             Premise(F48)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F49)
	S0= [IR]={15,rT,rA,SIMM}                                    IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F50)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=1                                                 Premise(F51)
	S0= [A]=AddrSel(rA,a)                                       A-Write(S0,S0)
	S0= CtrlB=1                                                 Premise(F52)
	S0= [B]={SIMM,0}                                            B-Write(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F53)

EX	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=15                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_31=SIMM                                        IR-Out(S0)
	S0= A.Out=AddrSel(rA,a)                                     A-Out(S0)
	S0= A.Out1_0={AddrSel(rA,a)}[1:0]                           A-Out(S0)
	S0= A.Out4_0={AddrSel(rA,a)}[4:0]                           A-Out(S0)
	S0= B.Out={SIMM,0}                                          B-Out(S0)
	S0= B.Out1_0={{SIMM,0}}[1:0]                                B-Out(S0)
	S0= B.Out4_0={{SIMM,0}}[4:0]                                B-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F54)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F55)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F56)
	S0= IR.Out0_5=>CU.Op                                        Premise(F57)
	S0= CU.Op=15                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F58)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.RData1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out11_15=>AddrSelMux.Sel                             Premise(F59)
	S0= AddrSelMux.Sel=rA                                       Path(S0,S0)
	S0= GPRegs.RData1=>AddrSelMux.Data                          Premise(F60)
	S0= AddrSelMux.Data=a                                       Path(S0,S0)
	S0= AddrSelMux.Out=AddrSel(rA,a)                            AddrSelMux(S0,S0)
	S0= AddrSelMux.Out=>A.In                                    Premise(F61)
	S0= A.In=AddrSel(rA,a)                                      Path(S0,S0)
	S0= IR.Out16_31=>IMMSEXT.In                                 Premise(F62)
	S0= IMMSEXT.In=SIMM                                         Path(S0,S0)
	S0= IMMSEXT.Out={SIMM,0}                                    IMMSEXT(S0)
	S0= IMMSEXT.Out=>B.In                                       Premise(F63)
	S0= B.In={SIMM,0}                                           Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F64)
	S0= ALU.A=AddrSel(rA,a)                                     Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F65)
	S0= ALU.B={SIMM,0}                                          Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F66)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=AddrSel(rA,a)+{SIMM,0}                          ALU(S0,S0)
	S0= ALU.CMP=Compare0(AddrSel(rA,a)+{SIMM,0})                ALU(S0,S0)
	S0= ALU.OV=OverFlow(AddrSel(rA,a)+{SIMM,0})                 ALU(S0,S0)
	S0= ALU.CA=Carry(AddrSel(rA,a)+{SIMM,0})                    ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F67)
	S0= ALUOut.In=AddrSel(rA,a)+{SIMM,0}                        Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F68)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F69)
	S0= CtrlPIDReg=0                                            Premise(F70)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F71)
	S0= IMem[{pid,addr}]={15,rT,rA,SIMM}                        IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F72)
	S0= CtrlPCInc=0                                             Premise(F73)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F74)
	S0= [IR]={15,rT,rA,SIMM}                                    IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F75)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F76)
	S0= [A]=AddrSel(rA,a)                                       A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F77)
	S0= [B]={SIMM,0}                                            B-Hold(S0,S0)
	S0= CtrlALUOut=1                                            Premise(F78)
	S0= [ALUOut]=AddrSel(rA,a)+{SIMM,0}                         ALUOut-Write(S0,S0)

MEM	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=15                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_31=SIMM                                        IR-Out(S0)
	S0= A.Out=AddrSel(rA,a)                                     A-Out(S0)
	S0= A.Out1_0={AddrSel(rA,a)}[1:0]                           A-Out(S0)
	S0= A.Out4_0={AddrSel(rA,a)}[4:0]                           A-Out(S0)
	S0= B.Out={SIMM,0}                                          B-Out(S0)
	S0= B.Out1_0={{SIMM,0}}[1:0]                                B-Out(S0)
	S0= B.Out4_0={{SIMM,0}}[4:0]                                B-Out(S0)
	S0= ALUOut.Out=AddrSel(rA,a)+{SIMM,0}                       ALUOut-Out(S0)
	S0= ALUOut.Out1_0={AddrSel(rA,a)+{SIMM,0}}[1:0]             ALUOut-Out(S0)
	S0= ALUOut.Out4_0={AddrSel(rA,a)+{SIMM,0}}[4:0]             ALUOut-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F79)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F80)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F81)
	S0= IR.Out0_5=>CU.Op                                        Premise(F82)
	S0= CU.Op=15                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F83)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.RData1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out11_15=>AddrSelMux.Sel                             Premise(F84)
	S0= AddrSelMux.Sel=rA                                       Path(S0,S0)
	S0= GPRegs.RData1=>AddrSelMux.Data                          Premise(F85)
	S0= AddrSelMux.Data=a                                       Path(S0,S0)
	S0= AddrSelMux.Out=AddrSel(rA,a)                            AddrSelMux(S0,S0)
	S0= AddrSelMux.Out=>A.In                                    Premise(F86)
	S0= A.In=AddrSel(rA,a)                                      Path(S0,S0)
	S0= IR.Out16_31=>IMMSEXT.In                                 Premise(F87)
	S0= IMMSEXT.In=SIMM                                         Path(S0,S0)
	S0= IMMSEXT.Out={SIMM,0}                                    IMMSEXT(S0)
	S0= IMMSEXT.Out=>B.In                                       Premise(F88)
	S0= B.In={SIMM,0}                                           Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F89)
	S0= ALU.A=AddrSel(rA,a)                                     Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F90)
	S0= ALU.B={SIMM,0}                                          Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F91)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=AddrSel(rA,a)+{SIMM,0}                          ALU(S0,S0)
	S0= ALU.CMP=Compare0(AddrSel(rA,a)+{SIMM,0})                ALU(S0,S0)
	S0= ALU.OV=OverFlow(AddrSel(rA,a)+{SIMM,0})                 ALU(S0,S0)
	S0= ALU.CA=Carry(AddrSel(rA,a)+{SIMM,0})                    ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F92)
	S0= ALUOut.In=AddrSel(rA,a)+{SIMM,0}                        Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F93)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F94)
	S0= GPRegs.WData=AddrSel(rA,a)+{SIMM,0}                     Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F95)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F96)
	S0= IMem[{pid,addr}]={15,rT,rA,SIMM}                        IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F97)
	S0= CtrlPCInc=0                                             Premise(F98)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F99)
	S0= [IR]={15,rT,rA,SIMM}                                    IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F100)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F101)
	S0= [A]=AddrSel(rA,a)                                       A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F102)
	S0= [B]={SIMM,0}                                            B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F103)
	S0= [ALUOut]=AddrSel(rA,a)+{SIMM,0}                         ALUOut-Hold(S0,S0)

WB	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=15                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_31=SIMM                                        IR-Out(S0)
	S0= A.Out=AddrSel(rA,a)                                     A-Out(S0)
	S0= A.Out1_0={AddrSel(rA,a)}[1:0]                           A-Out(S0)
	S0= A.Out4_0={AddrSel(rA,a)}[4:0]                           A-Out(S0)
	S0= B.Out={SIMM,0}                                          B-Out(S0)
	S0= B.Out1_0={{SIMM,0}}[1:0]                                B-Out(S0)
	S0= B.Out4_0={{SIMM,0}}[4:0]                                B-Out(S0)
	S0= ALUOut.Out=AddrSel(rA,a)+{SIMM,0}                       ALUOut-Out(S0)
	S0= ALUOut.Out1_0={AddrSel(rA,a)+{SIMM,0}}[1:0]             ALUOut-Out(S0)
	S0= ALUOut.Out4_0={AddrSel(rA,a)+{SIMM,0}}[4:0]             ALUOut-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F104)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F105)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F106)
	S0= IR.Out0_5=>CU.Op                                        Premise(F107)
	S0= CU.Op=15                                                Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F108)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.RData1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out11_15=>AddrSelMux.Sel                             Premise(F109)
	S0= AddrSelMux.Sel=rA                                       Path(S0,S0)
	S0= GPRegs.RData1=>AddrSelMux.Data                          Premise(F110)
	S0= AddrSelMux.Data=a                                       Path(S0,S0)
	S0= AddrSelMux.Out=AddrSel(rA,a)                            AddrSelMux(S0,S0)
	S0= AddrSelMux.Out=>A.In                                    Premise(F111)
	S0= A.In=AddrSel(rA,a)                                      Path(S0,S0)
	S0= IR.Out16_31=>IMMSEXT.In                                 Premise(F112)
	S0= IMMSEXT.In=SIMM                                         Path(S0,S0)
	S0= IMMSEXT.Out={SIMM,0}                                    IMMSEXT(S0)
	S0= IMMSEXT.Out=>B.In                                       Premise(F113)
	S0= B.In={SIMM,0}                                           Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F114)
	S0= ALU.A=AddrSel(rA,a)                                     Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F115)
	S0= ALU.B={SIMM,0}                                          Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F116)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=AddrSel(rA,a)+{SIMM,0}                          ALU(S0,S0)
	S0= ALU.CMP=Compare0(AddrSel(rA,a)+{SIMM,0})                ALU(S0,S0)
	S0= ALU.OV=OverFlow(AddrSel(rA,a)+{SIMM,0})                 ALU(S0,S0)
	S0= ALU.CA=Carry(AddrSel(rA,a)+{SIMM,0})                    ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F117)
	S0= ALUOut.In=AddrSel(rA,a)+{SIMM,0}                        Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F118)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F119)
	S0= GPRegs.WData=AddrSel(rA,a)+{SIMM,0}                     Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F120)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F121)
	S0= IMem[{pid,addr}]={15,rT,rA,SIMM}                        IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F122)
	S0= CtrlPCInc=0                                             Premise(F123)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F124)
	S0= [IR]={15,rT,rA,SIMM}                                    IR-Hold(S0,S0)
	S0= CtrlGPRegs=1                                            Premise(F125)
	S0= GPRegs[rT]=AddrSel(rA,a)+{SIMM,0}                       GPRegs-Write(S0,S0,S0)
	S0= CtrlA=0                                                 Premise(F126)
	S0= [A]=AddrSel(rA,a)                                       A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F127)
	S0= [B]={SIMM,0}                                            B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F128)
	S0= [ALUOut]=AddrSel(rA,a)+{SIMM,0}                         ALUOut-Hold(S0,S0)

POST	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= IMem[{pid,addr}]={15,rT,rA,SIMM}                        IMem-Hold(S0,S0)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= [IR]={15,rT,rA,SIMM}                                    IR-Hold(S0,S0)
	S0= GPRegs[rT]=AddrSel(rA,a)+{SIMM,0}                       GPRegs-Write(S0,S0,S0)
	S0= [A]=AddrSel(rA,a)                                       A-Hold(S0,S0)
	S0= [B]={SIMM,0}                                            B-Hold(S0,S0)
	S0= [ALUOut]=AddrSel(rA,a)+{SIMM,0}                         ALUOut-Hold(S0,S0)

