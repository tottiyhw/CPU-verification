
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,404}                       Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[CA]=ca                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.NIA=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMem.PID                                    Premise(F5)
	S8= IMem.PID=pid                                            Path(S5,S7)
	S9= PC.NIA=>IMem.Addr                                       Premise(F6)
	S10= IMem.Addr=addr                                         Path(S6,S9)
	S11= IMem.RData={31,rT,rA,0,404}                            IMem-Read(S8,S10,S2)
	S12= IMem.RData=>IR.In                                      Premise(F7)
	S13= IR.In={31,rT,rA,0,404}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F23)
	S15= CtrlPCInc=1                                            Premise(F24)
	S16= PC[Out]=addr+4                                         PC-Inc(S1,S14,S15)
	S17= CtrlIR=1                                               Premise(F25)
	S18= [IR]={31,rT,rA,0,404}                                  IR-Write(S13,S17)
	S19= CtrlGPRegs=0                                           Premise(F26)
	S20= GPRegs[rA]=a                                           GPRegs-Hold(S3,S19)
	S21= CtrlXERCA=0                                            Premise(F31)
	S22= XER[CA]=ca                                             XER-CA-Hold(S4,S21)

ID	S23= IR.Out11_15=rA                                         IR-Out(S18)
	S24= IR.Out11_15=>GPRegs.RReg1                              Premise(F38)
	S25= GPRegs.RReg1=rA                                        Path(S23,S24)
	S26= GPRegs.RData1=a                                        GPRegs-Read(S25,S20)
	S27= GPRegs.RData1=>A.In                                    Premise(F40)
	S28= A.In=a                                                 Path(S26,S27)
	S29= B.In=32'd0                                             Premise(F41)
	S30= CtrlPC=0                                               Premise(F53)
	S31= CtrlPCInc=0                                            Premise(F54)
	S32= PC[Out]=addr+4                                         PC-Hold(S16,S30,S31)
	S33= CtrlIR=0                                               Premise(F55)
	S34= [IR]={31,rT,rA,0,404}                                  IR-Hold(S18,S33)
	S35= CtrlA=1                                                Premise(F57)
	S36= [A]=a                                                  A-Write(S28,S35)
	S37= CtrlB=1                                                Premise(F58)
	S38= [B]=32'd0                                              B-Write(S29,S37)
	S39= CtrlXERCA=0                                            Premise(F61)
	S40= XER[CA]=ca                                             XER-CA-Hold(S22,S39)

EX	S41= A.Out=a                                                A-Out(S36)
	S42= B.Out=32'd0                                            B-Out(S38)
	S43= XER.CAOut=ca                                           XER-CA-Out(S40)
	S44= A.Out=>ALU.A                                           Premise(F71)
	S45= ALU.A=a                                                Path(S41,S44)
	S46= B.Out=>ALU.B                                           Premise(F72)
	S47= ALU.B=32'd0                                            Path(S42,S46)
	S48= XER.CAOut=>ALU.CAIn                                    Premise(F73)
	S49= ALU.CAIn=ca                                            Path(S43,S48)
	S50= ALU.Out=a+32'd0+ca                                     ALU(S45,S47,S49)
	S51= ALU.CA=Carry(a+32'd0+ca)                               ALU(S45,S47,S49)
	S52= ALU.Out=>ALUOut.In                                     Premise(F75)
	S53= ALUOut.In=a+32'd0+ca                                   Path(S50,S52)
	S54= ALU.CA=>CAReg.In                                       Premise(F76)
	S55= CAReg.In=Carry(a+32'd0+ca)                             Path(S51,S54)
	S56= CtrlPC=0                                               Premise(F82)
	S57= CtrlPCInc=0                                            Premise(F83)
	S58= PC[Out]=addr+4                                         PC-Hold(S32,S56,S57)
	S59= CtrlIR=0                                               Premise(F84)
	S60= [IR]={31,rT,rA,0,404}                                  IR-Hold(S34,S59)
	S61= CtrlALUOut=1                                           Premise(F91)
	S62= [ALUOut]=a+32'd0+ca                                    ALUOut-Write(S53,S61)
	S63= CtrlCAReg=1                                            Premise(F92)
	S64= [CAReg]=Carry(a+32'd0+ca)                              CAReg-Write(S55,S63)

MEM	S65= CtrlPC=0                                               Premise(F111)
	S66= CtrlPCInc=0                                            Premise(F112)
	S67= PC[Out]=addr+4                                         PC-Hold(S58,S65,S66)
	S68= CtrlIR=0                                               Premise(F113)
	S69= [IR]={31,rT,rA,0,404}                                  IR-Hold(S60,S68)
	S70= CtrlALUOut=0                                           Premise(F120)
	S71= [ALUOut]=a+32'd0+ca                                    ALUOut-Hold(S62,S70)
	S72= CtrlCAReg=0                                            Premise(F121)
	S73= [CAReg]=Carry(a+32'd0+ca)                              CAReg-Hold(S64,S72)

WB	S74= IR.Out6_10=rT                                          IR-Out(S69)
	S75= ALUOut.Out=a+32'd0+ca                                  ALUOut-Out(S71)
	S76= CAReg.Out=Carry(a+32'd0+ca)                            CAReg-Out(S73)
	S77= IR.Out6_10=>GPRegs.WReg                                Premise(F135)
	S78= GPRegs.WReg=rT                                         Path(S74,S77)
	S79= ALUOut.Out=>GPRegs.WData                               Premise(F136)
	S80= GPRegs.WData=a+32'd0+ca                                Path(S75,S79)
	S81= CAReg.Out=>XER.CAIn                                    Premise(F137)
	S82= XER.CAIn=Carry(a+32'd0+ca)                             Path(S76,S81)
	S83= CtrlPC=0                                               Premise(F140)
	S84= CtrlPCInc=0                                            Premise(F141)
	S85= PC[Out]=addr+4                                         PC-Hold(S67,S83,S84)
	S86= CtrlGPRegs=1                                           Premise(F143)
	S87= GPRegs[rT]=a+32'd0+ca                                  GPRegs-Write(S78,S80,S86)
	S88= CtrlXERCA=1                                            Premise(F148)
	S89= XER[CA]=Carry(a+32'd0+ca)                              XER-CA-Write(S82,S88)

POST	S85= PC[Out]=addr+4                                         PC-Hold(S67,S83,S84)
	S87= GPRegs[rT]=a+32'd0+ca                                  GPRegs-Write(S78,S80,S86)
	S89= XER[CA]=Carry(a+32'd0+ca)                              XER-CA-Write(S82,S88)

