
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,1428}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[CA]=ca                                              Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.NIA=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S9= IMem.PID=pid                                            Path(S6,S8)
	S10= PC.NIA=>IMem.Addr                                      Premise(F7)
	S11= IMem.Addr=addr                                         Path(S7,S10)
	S12= IMem.RData={31,rT,rA,0,1428}                           IMem-Read(S9,S11,S2)
	S13= IMem.RData=>IR.In                                      Premise(F8)
	S14= IR.In={31,rT,rA,0,1428}                                Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F30)
	S16= CtrlPCInc=1                                            Premise(F31)
	S17= PC[Out]=addr+4                                         PC-Inc(S1,S15,S16)
	S18= CtrlIR=1                                               Premise(F32)
	S19= [IR]={31,rT,rA,0,1428}                                 IR-Write(S14,S18)
	S20= CtrlGPRegs=0                                           Premise(F33)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)
	S22= CtrlXERSO=0                                            Premise(F36)
	S23= XER[SO]=so                                             XER-SO-Hold(S5,S22)
	S24= CtrlXERCA=0                                            Premise(F38)
	S25= XER[CA]=ca                                             XER-CA-Hold(S4,S24)

ID	S26= IR.Out11_15=rA                                         IR-Out(S19)
	S27= IR.Out11_15=>GPRegs.RReg1                              Premise(F47)
	S28= GPRegs.RReg1=rA                                        Path(S26,S27)
	S29= GPRegs.RData1=a                                        GPRegs-Read(S28,S21)
	S30= GPRegs.RData1=>A.In                                    Premise(F49)
	S31= A.In=a                                                 Path(S29,S30)
	S32= B.In=32'd0                                             Premise(F50)
	S33= CtrlPC=0                                               Premise(F68)
	S34= CtrlPCInc=0                                            Premise(F69)
	S35= PC[Out]=addr+4                                         PC-Hold(S17,S33,S34)
	S36= CtrlIR=0                                               Premise(F70)
	S37= [IR]={31,rT,rA,0,1428}                                 IR-Hold(S19,S36)
	S38= CtrlA=1                                                Premise(F72)
	S39= [A]=a                                                  A-Write(S31,S38)
	S40= CtrlB=1                                                Premise(F73)
	S41= [B]=32'd0                                              B-Write(S32,S40)
	S42= CtrlXERSO=0                                            Premise(F74)
	S43= XER[SO]=so                                             XER-SO-Hold(S23,S42)
	S44= CtrlXERCA=0                                            Premise(F76)
	S45= XER[CA]=ca                                             XER-CA-Hold(S25,S44)

EX	S46= A.Out=a                                                A-Out(S39)
	S47= B.Out=32'd0                                            B-Out(S41)
	S48= XER.SOOut=so                                           XER-SO-Out(S43)
	S49= XER.CAOut=ca                                           XER-CA-Out(S45)
	S50= A.Out=>ALU.A                                           Premise(F88)
	S51= ALU.A=a                                                Path(S46,S50)
	S52= B.Out=>ALU.B                                           Premise(F89)
	S53= ALU.B=32'd0                                            Path(S47,S52)
	S54= XER.CAOut=>ALU.CAIn                                    Premise(F90)
	S55= ALU.CAIn=ca                                            Path(S49,S54)
	S56= ALU.Out=a+32'd0+ca                                     ALU(S51,S53,S55)
	S57= ALU.OV=OverFlow(a+32'd0+ca)                            ALU(S51,S53,S55)
	S58= ALU.CA=Carry(a+32'd0+ca)                               ALU(S51,S53,S55)
	S59= ALU.Out=>ALUOut.In                                     Premise(F92)
	S60= ALUOut.In=a+32'd0+ca                                   Path(S56,S59)
	S61= ALU.CA=>CAReg.In                                       Premise(F93)
	S62= CAReg.In=Carry(a+32'd0+ca)                             Path(S58,S61)
	S63= ALU.OV=>OVReg.In                                       Premise(F94)
	S64= OVReg.In=OverFlow(a+32'd0+ca)                          Path(S57,S63)
	S65= XER.SOOut=>ORGate.A                                    Premise(F95)
	S66= ORGate.A=so                                            Path(S48,S65)
	S67= ALU.OV=>ORGate.B                                       Premise(F96)
	S68= ORGate.B=OverFlow(a+32'd0+ca)                          Path(S57,S67)
	S69= ORGate.Out=so|OverFlow(a+32'd0+ca)                     ORGate(S66,S68)
	S70= ORGate.Out=>DR1bit.In                                  Premise(F97)
	S71= DR1bit.In=so|OverFlow(a+32'd0+ca)                      Path(S69,S70)
	S72= CtrlPC=0                                               Premise(F105)
	S73= CtrlPCInc=0                                            Premise(F106)
	S74= PC[Out]=addr+4                                         PC-Hold(S35,S72,S73)
	S75= CtrlIR=0                                               Premise(F107)
	S76= [IR]={31,rT,rA,0,1428}                                 IR-Hold(S37,S75)
	S77= CtrlALUOut=1                                           Premise(F114)
	S78= [ALUOut]=a+32'd0+ca                                    ALUOut-Write(S60,S77)
	S79= CtrlCAReg=1                                            Premise(F115)
	S80= [CAReg]=Carry(a+32'd0+ca)                              CAReg-Write(S62,S79)
	S81= CtrlOVReg=1                                            Premise(F116)
	S82= [OVReg]=OverFlow(a+32'd0+ca)                           OVReg-Write(S64,S81)
	S83= CtrlDR1bit=1                                           Premise(F117)
	S84= [DR1bit]=so|OverFlow(a+32'd0+ca)                       DR1bit-Write(S71,S83)

MEM	S85= CtrlPC=0                                               Premise(F142)
	S86= CtrlPCInc=0                                            Premise(F143)
	S87= PC[Out]=addr+4                                         PC-Hold(S74,S85,S86)
	S88= CtrlIR=0                                               Premise(F144)
	S89= [IR]={31,rT,rA,0,1428}                                 IR-Hold(S76,S88)
	S90= CtrlALUOut=0                                           Premise(F151)
	S91= [ALUOut]=a+32'd0+ca                                    ALUOut-Hold(S78,S90)
	S92= CtrlCAReg=0                                            Premise(F152)
	S93= [CAReg]=Carry(a+32'd0+ca)                              CAReg-Hold(S80,S92)
	S94= CtrlOVReg=0                                            Premise(F153)
	S95= [OVReg]=OverFlow(a+32'd0+ca)                           OVReg-Hold(S82,S94)
	S96= CtrlDR1bit=0                                           Premise(F154)
	S97= [DR1bit]=so|OverFlow(a+32'd0+ca)                       DR1bit-Hold(S84,S96)

WB	S98= IR.Out6_10=rT                                          IR-Out(S89)
	S99= ALUOut.Out=a+32'd0+ca                                  ALUOut-Out(S91)
	S100= CAReg.Out=Carry(a+32'd0+ca)                           CAReg-Out(S93)
	S101= OVReg.Out=OverFlow(a+32'd0+ca)                        OVReg-Out(S95)
	S102= DR1bit.Out=so|OverFlow(a+32'd0+ca)                    DR1bit-Out(S97)
	S103= IR.Out6_10=>GPRegs.WReg                               Premise(F172)
	S104= GPRegs.WReg=rT                                        Path(S98,S103)
	S105= ALUOut.Out=>GPRegs.WData                              Premise(F173)
	S106= GPRegs.WData=a+32'd0+ca                               Path(S99,S105)
	S107= DR1bit.Out=>XER.SOIn                                  Premise(F174)
	S108= XER.SOIn=so|OverFlow(a+32'd0+ca)                      Path(S102,S107)
	S109= CAReg.Out=>XER.CAIn                                   Premise(F175)
	S110= XER.CAIn=Carry(a+32'd0+ca)                            Path(S100,S109)
	S111= OVReg.Out=>XER.OVIn                                   Premise(F176)
	S112= XER.OVIn=OverFlow(a+32'd0+ca)                         Path(S101,S111)
	S113= CtrlPC=0                                              Premise(F179)
	S114= CtrlPCInc=0                                           Premise(F180)
	S115= PC[Out]=addr+4                                        PC-Hold(S87,S113,S114)
	S116= CtrlGPRegs=1                                          Premise(F182)
	S117= GPRegs[rT]=a+32'd0+ca                                 GPRegs-Write(S104,S106,S116)
	S118= CtrlXERSO=1                                           Premise(F185)
	S119= XER[SO]=so|OverFlow(a+32'd0+ca)                       XER-SO-Write(S108,S118)
	S120= CtrlXEROV=1                                           Premise(F186)
	S121= XER[OV]=OverFlow(a+32'd0+ca)                          XER-OV-Write(S112,S120)
	S122= CtrlXERCA=1                                           Premise(F187)
	S123= XER[CA]=Carry(a+32'd0+ca)                             XER-CA-Write(S110,S122)

POST	S115= PC[Out]=addr+4                                        PC-Hold(S87,S113,S114)
	S117= GPRegs[rT]=a+32'd0+ca                                 GPRegs-Write(S104,S106,S116)
	S119= XER[SO]=so|OverFlow(a+32'd0+ca)                       XER-SO-Write(S108,S118)
	S121= XER[OV]=OverFlow(a+32'd0+ca)                          XER-OV-Write(S112,S120)
	S123= XER[CA]=Carry(a+32'd0+ca)                             XER-CA-Write(S110,S122)

