
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,1429}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[CA]=ca                                              Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.NIA=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S9= IMem.PID=pid                                            Path(S6,S8)
	S10= PC.NIA=>IMem.Addr                                      Premise(F7)
	S11= IMem.Addr=addr                                         Path(S7,S10)
	S12= IMem.RData={31,rT,rA,0,1429}                           IMem-Read(S9,S11,S2)
	S13= IMem.RData=>IR.In                                      Premise(F8)
	S14= IR.In={31,rT,rA,0,1429}                                Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F34)
	S16= CtrlPCInc=1                                            Premise(F35)
	S17= PC[Out]=addr+4                                         PC-Inc(S1,S15,S16)
	S18= CtrlIR=1                                               Premise(F36)
	S19= [IR]={31,rT,rA,0,1429}                                 IR-Write(S14,S18)
	S20= CtrlGPRegs=0                                           Premise(F37)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)
	S22= CtrlXERSO=0                                            Premise(F40)
	S23= XER[SO]=so                                             XER-SO-Hold(S5,S22)
	S24= CtrlXERCA=0                                            Premise(F42)
	S25= XER[CA]=ca                                             XER-CA-Hold(S4,S24)

ID	S26= IR.Out11_15=rA                                         IR-Out(S19)
	S27= IR.Out11_15=>GPRegs.RReg1                              Premise(F56)
	S28= GPRegs.RReg1=rA                                        Path(S26,S27)
	S29= GPRegs.RData1=a                                        GPRegs-Read(S28,S21)
	S30= GPRegs.RData1=>A.In                                    Premise(F58)
	S31= A.In=a                                                 Path(S29,S30)
	S32= B.In=32'd0                                             Premise(F59)
	S33= CtrlPC=0                                               Premise(F81)
	S34= CtrlPCInc=0                                            Premise(F82)
	S35= PC[Out]=addr+4                                         PC-Hold(S17,S33,S34)
	S36= CtrlIR=0                                               Premise(F83)
	S37= [IR]={31,rT,rA,0,1429}                                 IR-Hold(S19,S36)
	S38= CtrlA=1                                                Premise(F85)
	S39= [A]=a                                                  A-Write(S31,S38)
	S40= CtrlB=1                                                Premise(F86)
	S41= [B]=32'd0                                              B-Write(S32,S40)
	S42= CtrlXERSO=0                                            Premise(F87)
	S43= XER[SO]=so                                             XER-SO-Hold(S23,S42)
	S44= CtrlXERCA=0                                            Premise(F89)
	S45= XER[CA]=ca                                             XER-CA-Hold(S25,S44)

EX	S46= A.Out=a                                                A-Out(S39)
	S47= B.Out=32'd0                                            B-Out(S41)
	S48= XER.SOOut=so                                           XER-SO-Out(S43)
	S49= XER.CAOut=ca                                           XER-CA-Out(S45)
	S50= A.Out=>ALU.A                                           Premise(F106)
	S51= ALU.A=a                                                Path(S46,S50)
	S52= B.Out=>ALU.B                                           Premise(F107)
	S53= ALU.B=32'd0                                            Path(S47,S52)
	S54= XER.CAOut=>ALU.CAIn                                    Premise(F108)
	S55= ALU.CAIn=ca                                            Path(S49,S54)
	S56= ALU.Out=a+32'd0+ca                                     ALU(S51,S53,S55)
	S57= ALU.CMP=Compare0(a+32'd0+ca)                           ALU(S51,S53,S55)
	S58= ALU.OV=OverFlow(a+32'd0+ca)                            ALU(S51,S53,S55)
	S59= ALU.CA=Carry(a+32'd0+ca)                               ALU(S51,S53,S55)
	S60= ALU.Out=>ALUOut.In                                     Premise(F110)
	S61= ALUOut.In=a+32'd0+ca                                   Path(S56,S60)
	S62= ALU.CA=>CAReg.In                                       Premise(F111)
	S63= CAReg.In=Carry(a+32'd0+ca)                             Path(S59,S62)
	S64= ALU.CMP=>DataCmb.A                                     Premise(F112)
	S65= DataCmb.A=Compare0(a+32'd0+ca)                         Path(S57,S64)
	S66= ORGate.Out=>DataCmb.B                                  Premise(F113)
	S67= ALU.OV=>OVReg.In                                       Premise(F114)
	S68= OVReg.In=OverFlow(a+32'd0+ca)                          Path(S58,S67)
	S69= XER.SOOut=>ORGate.A                                    Premise(F115)
	S70= ORGate.A=so                                            Path(S48,S69)
	S71= ALU.OV=>ORGate.B                                       Premise(F116)
	S72= ORGate.B=OverFlow(a+32'd0+ca)                          Path(S58,S71)
	S73= ORGate.Out=so|OverFlow(a+32'd0+ca)                     ORGate(S70,S72)
	S74= DataCmb.B=so|OverFlow(a+32'd0+ca)                      Path(S73,S66)
	S75= DataCmb.Out={Compare0(a+32'd0+ca),so|OverFlow(a+32'd0+ca)}DataCmb(S65,S74)
	S76= ORGate.Out=>DR1bit.In                                  Premise(F117)
	S77= DR1bit.In=so|OverFlow(a+32'd0+ca)                      Path(S73,S76)
	S78= DataCmb.Out=>DR4bit.In                                 Premise(F118)
	S79= DR4bit.In={Compare0(a+32'd0+ca),so|OverFlow(a+32'd0+ca)}Path(S75,S78)
	S80= CtrlPC=0                                               Premise(F127)
	S81= CtrlPCInc=0                                            Premise(F128)
	S82= PC[Out]=addr+4                                         PC-Hold(S35,S80,S81)
	S83= CtrlIR=0                                               Premise(F129)
	S84= [IR]={31,rT,rA,0,1429}                                 IR-Hold(S37,S83)
	S85= CtrlALUOut=1                                           Premise(F136)
	S86= [ALUOut]=a+32'd0+ca                                    ALUOut-Write(S61,S85)
	S87= CtrlCAReg=1                                            Premise(F137)
	S88= [CAReg]=Carry(a+32'd0+ca)                              CAReg-Write(S63,S87)
	S89= CtrlOVReg=1                                            Premise(F138)
	S90= [OVReg]=OverFlow(a+32'd0+ca)                           OVReg-Write(S68,S89)
	S91= CtrlDR1bit=1                                           Premise(F139)
	S92= [DR1bit]=so|OverFlow(a+32'd0+ca)                       DR1bit-Write(S77,S91)
	S93= CtrlDR4bit=1                                           Premise(F140)
	S94= [DR4bit]={Compare0(a+32'd0+ca),so|OverFlow(a+32'd0+ca)}DR4bit-Write(S79,S93)

MEM	S95= CtrlPC=0                                               Premise(F173)
	S96= CtrlPCInc=0                                            Premise(F174)
	S97= PC[Out]=addr+4                                         PC-Hold(S82,S95,S96)
	S98= CtrlIR=0                                               Premise(F175)
	S99= [IR]={31,rT,rA,0,1429}                                 IR-Hold(S84,S98)
	S100= CtrlALUOut=0                                          Premise(F182)
	S101= [ALUOut]=a+32'd0+ca                                   ALUOut-Hold(S86,S100)
	S102= CtrlCAReg=0                                           Premise(F183)
	S103= [CAReg]=Carry(a+32'd0+ca)                             CAReg-Hold(S88,S102)
	S104= CtrlOVReg=0                                           Premise(F184)
	S105= [OVReg]=OverFlow(a+32'd0+ca)                          OVReg-Hold(S90,S104)
	S106= CtrlDR1bit=0                                          Premise(F185)
	S107= [DR1bit]=so|OverFlow(a+32'd0+ca)                      DR1bit-Hold(S92,S106)
	S108= CtrlDR4bit=0                                          Premise(F186)
	S109= [DR4bit]={Compare0(a+32'd0+ca),so|OverFlow(a+32'd0+ca)}DR4bit-Hold(S94,S108)

WB	S110= IR.Out6_10=rT                                         IR-Out(S99)
	S111= ALUOut.Out=a+32'd0+ca                                 ALUOut-Out(S101)
	S112= CAReg.Out=Carry(a+32'd0+ca)                           CAReg-Out(S103)
	S113= OVReg.Out=OverFlow(a+32'd0+ca)                        OVReg-Out(S105)
	S114= DR1bit.Out=so|OverFlow(a+32'd0+ca)                    DR1bit-Out(S107)
	S115= DR4bit.Out={Compare0(a+32'd0+ca),so|OverFlow(a+32'd0+ca)}DR4bit-Out(S109)
	S116= IR.Out6_10=>GPRegs.WReg                               Premise(F211)
	S117= GPRegs.WReg=rT                                        Path(S110,S116)
	S118= ALUOut.Out=>GPRegs.WData                              Premise(F212)
	S119= GPRegs.WData=a+32'd0+ca                               Path(S111,S118)
	S120= DR4bit.Out=>CRRegs.CR0In                              Premise(F213)
	S121= CRRegs.CR0In={Compare0(a+32'd0+ca),so|OverFlow(a+32'd0+ca)}Path(S115,S120)
	S122= DR1bit.Out=>XER.SOIn                                  Premise(F214)
	S123= XER.SOIn=so|OverFlow(a+32'd0+ca)                      Path(S114,S122)
	S124= CAReg.Out=>XER.CAIn                                   Premise(F215)
	S125= XER.CAIn=Carry(a+32'd0+ca)                            Path(S112,S124)
	S126= OVReg.Out=>XER.OVIn                                   Premise(F216)
	S127= XER.OVIn=OverFlow(a+32'd0+ca)                         Path(S113,S126)
	S128= CtrlPC=0                                              Premise(F219)
	S129= CtrlPCInc=0                                           Premise(F220)
	S130= PC[Out]=addr+4                                        PC-Hold(S97,S128,S129)
	S131= CtrlGPRegs=1                                          Premise(F222)
	S132= GPRegs[rT]=a+32'd0+ca                                 GPRegs-Write(S117,S119,S131)
	S133= CtrlXERSO=1                                           Premise(F225)
	S134= XER[SO]=so|OverFlow(a+32'd0+ca)                       XER-SO-Write(S123,S133)
	S135= CtrlXEROV=1                                           Premise(F226)
	S136= XER[OV]=OverFlow(a+32'd0+ca)                          XER-OV-Write(S127,S135)
	S137= CtrlXERCA=1                                           Premise(F227)
	S138= XER[CA]=Carry(a+32'd0+ca)                             XER-CA-Write(S125,S137)
	S139= CtrlCRRegsCR0=1                                       Premise(F234)
	S140= CRRegs[CR0]={Compare0(a+32'd0+ca),so|OverFlow(a+32'd0+ca)}CRRegs-CR0-Write(S121,S139)

POST	S130= PC[Out]=addr+4                                        PC-Hold(S97,S128,S129)
	S132= GPRegs[rT]=a+32'd0+ca                                 GPRegs-Write(S117,S119,S131)
	S134= XER[SO]=so|OverFlow(a+32'd0+ca)                       XER-SO-Write(S123,S133)
	S136= XER[OV]=OverFlow(a+32'd0+ca)                          XER-OV-Write(S127,S135)
	S138= XER[CA]=Carry(a+32'd0+ca)                             XER-CA-Write(S125,S137)
	S140= CRRegs[CR0]={Compare0(a+32'd0+ca),so|OverFlow(a+32'd0+ca)}CRRegs-CR0-Write(S121,S139)

