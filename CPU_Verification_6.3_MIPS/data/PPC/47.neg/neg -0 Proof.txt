
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,208}                       Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.NIA=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMem.PID                                    Premise(F4)
	S7= IMem.PID=pid                                            Path(S4,S6)
	S8= PC.NIA=>IMem.Addr                                       Premise(F5)
	S9= IMem.Addr=addr                                          Path(S5,S8)
	S10= IMem.RData={31,rT,rA,0,208}                            IMem-Read(S7,S9,S2)
	S11= IMem.RData=>IR.In                                      Premise(F6)
	S12= IR.In={31,rT,rA,0,208}                                 Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F18)
	S14= CtrlPCInc=1                                            Premise(F19)
	S15= PC[Out]=addr+4                                         PC-Inc(S1,S13,S14)
	S16= CtrlIR=1                                               Premise(F20)
	S17= [IR]={31,rT,rA,0,208}                                  IR-Write(S12,S16)
	S18= CtrlGPRegs=0                                           Premise(F21)
	S19= GPRegs[rA]=a                                           GPRegs-Hold(S3,S18)

ID	S20= IR.Out11_15=rA                                         IR-Out(S17)
	S21= IR.Out11_15=>GPRegs.RReg1                              Premise(F28)
	S22= GPRegs.RReg1=rA                                        Path(S20,S21)
	S23= GPRegs.RData1=a                                        GPRegs-Read(S22,S19)
	S24= GPRegs.RData1=>A.In                                    Premise(F30)
	S25= A.In=a                                                 Path(S23,S24)
	S26= CtrlPC=0                                               Premise(F38)
	S27= CtrlPCInc=0                                            Premise(F39)
	S28= PC[Out]=addr+4                                         PC-Hold(S15,S26,S27)
	S29= CtrlIR=0                                               Premise(F40)
	S30= [IR]={31,rT,rA,0,208}                                  IR-Hold(S17,S29)
	S31= CtrlA=1                                                Premise(F42)
	S32= [A]=a                                                  A-Write(S25,S31)

EX	S33= A.Out=a                                                A-Out(S32)
	S34= A.Out=>ALU.A                                           Premise(F51)
	S35= ALU.A=a                                                Path(S33,S34)
	S36= ALU.Out=(-a)                                           ALU(S35)
	S37= ALU.Out=>ALUOut.In                                     Premise(F53)
	S38= ALUOut.In=(-a)                                         Path(S36,S37)
	S39= CtrlPC=0                                               Premise(F58)
	S40= CtrlPCInc=0                                            Premise(F59)
	S41= PC[Out]=addr+4                                         PC-Hold(S28,S39,S40)
	S42= CtrlIR=0                                               Premise(F60)
	S43= [IR]={31,rT,rA,0,208}                                  IR-Hold(S30,S42)
	S44= CtrlALUOut=1                                           Premise(F63)
	S45= [ALUOut]=(-a)                                          ALUOut-Write(S38,S44)

MEM	S46= CtrlPC=0                                               Premise(F78)
	S47= CtrlPCInc=0                                            Premise(F79)
	S48= PC[Out]=addr+4                                         PC-Hold(S41,S46,S47)
	S49= CtrlIR=0                                               Premise(F80)
	S50= [IR]={31,rT,rA,0,208}                                  IR-Hold(S43,S49)
	S51= CtrlALUOut=0                                           Premise(F83)
	S52= [ALUOut]=(-a)                                          ALUOut-Hold(S45,S51)

WB	S53= IR.Out6_10=rT                                          IR-Out(S50)
	S54= ALUOut.Out=(-a)                                        ALUOut-Out(S52)
	S55= IR.Out6_10=>GPRegs.WReg                                Premise(F94)
	S56= GPRegs.WReg=rT                                         Path(S53,S55)
	S57= ALUOut.Out=>GPRegs.WData                               Premise(F95)
	S58= GPRegs.WData=(-a)                                      Path(S54,S57)
	S59= CtrlPC=0                                               Premise(F98)
	S60= CtrlPCInc=0                                            Premise(F99)
	S61= PC[Out]=addr+4                                         PC-Hold(S48,S59,S60)
	S62= CtrlGPRegs=1                                           Premise(F101)
	S63= GPRegs[rT]=(-a)                                        GPRegs-Write(S56,S58,S62)

POST	S61= PC[Out]=addr+4                                         PC-Hold(S48,S59,S60)
	S63= GPRegs[rT]=(-a)                                        GPRegs-Write(S56,S58,S62)

