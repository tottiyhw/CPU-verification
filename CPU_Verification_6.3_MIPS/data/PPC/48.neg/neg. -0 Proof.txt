
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,209}                       Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.NIA=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMem.PID                                    Premise(F5)
	S8= IMem.PID=pid                                            Path(S5,S7)
	S9= PC.NIA=>IMem.Addr                                       Premise(F6)
	S10= IMem.Addr=addr                                         Path(S6,S9)
	S11= IMem.RData={31,rT,rA,0,209}                            IMem-Read(S8,S10,S2)
	S12= IMem.RData=>IR.In                                      Premise(F7)
	S13= IR.In={31,rT,rA,0,209}                                 Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F23)
	S15= CtrlPCInc=1                                            Premise(F24)
	S16= PC[Out]=addr+4                                         PC-Inc(S1,S14,S15)
	S17= CtrlIR=1                                               Premise(F25)
	S18= [IR]={31,rT,rA,0,209}                                  IR-Write(S13,S17)
	S19= CtrlGPRegs=0                                           Premise(F26)
	S20= GPRegs[rA]=a                                           GPRegs-Hold(S3,S19)
	S21= CtrlXERSO=0                                            Premise(F29)
	S22= XER[SO]=so                                             XER-SO-Hold(S4,S21)

ID	S23= IR.Out11_15=rA                                         IR-Out(S18)
	S24= IR.Out11_15=>GPRegs.RReg1                              Premise(F41)
	S25= GPRegs.RReg1=rA                                        Path(S23,S24)
	S26= GPRegs.RData1=a                                        GPRegs-Read(S25,S20)
	S27= GPRegs.RData1=>A.In                                    Premise(F43)
	S28= A.In=a                                                 Path(S26,S27)
	S29= CtrlPC=0                                               Premise(F55)
	S30= CtrlPCInc=0                                            Premise(F56)
	S31= PC[Out]=addr+4                                         PC-Hold(S16,S29,S30)
	S32= CtrlIR=0                                               Premise(F57)
	S33= [IR]={31,rT,rA,0,209}                                  IR-Hold(S18,S32)
	S34= CtrlA=1                                                Premise(F59)
	S35= [A]=a                                                  A-Write(S28,S34)
	S36= CtrlXERSO=0                                            Premise(F61)
	S37= XER[SO]=so                                             XER-SO-Hold(S22,S36)

EX	S38= A.Out=a                                                A-Out(S35)
	S39= XER.SOOut=so                                           XER-SO-Out(S37)
	S40= A.Out=>ALU.A                                           Premise(F76)
	S41= ALU.A=a                                                Path(S38,S40)
	S42= ALU.Out=(-a)                                           ALU(S41)
	S43= ALU.CMP=Compare0((-a))                                 ALU(S41)
	S44= ALU.Out=>ALUOut.In                                     Premise(F78)
	S45= ALUOut.In=(-a)                                         Path(S42,S44)
	S46= ALU.CMP=>DataCmb.A                                     Premise(F79)
	S47= DataCmb.A=Compare0((-a))                               Path(S43,S46)
	S48= XER.SOOut=>DataCmb.B                                   Premise(F80)
	S49= DataCmb.B=so                                           Path(S39,S48)
	S50= DataCmb.Out={Compare0((-a)),so}                        DataCmb(S47,S49)
	S51= DataCmb.Out=>DR4bit.In                                 Premise(F81)
	S52= DR4bit.In={Compare0((-a)),so}                          Path(S50,S51)
	S53= CtrlPC=0                                               Premise(F87)
	S54= CtrlPCInc=0                                            Premise(F88)
	S55= PC[Out]=addr+4                                         PC-Hold(S31,S53,S54)
	S56= CtrlIR=0                                               Premise(F89)
	S57= [IR]={31,rT,rA,0,209}                                  IR-Hold(S33,S56)
	S58= CtrlALUOut=1                                           Premise(F92)
	S59= [ALUOut]=(-a)                                          ALUOut-Write(S45,S58)
	S60= CtrlDR4bit=1                                           Premise(F96)
	S61= [DR4bit]={Compare0((-a)),so}                           DR4bit-Write(S52,S60)

MEM	S62= CtrlPC=0                                               Premise(F119)
	S63= CtrlPCInc=0                                            Premise(F120)
	S64= PC[Out]=addr+4                                         PC-Hold(S55,S62,S63)
	S65= CtrlIR=0                                               Premise(F121)
	S66= [IR]={31,rT,rA,0,209}                                  IR-Hold(S57,S65)
	S67= CtrlALUOut=0                                           Premise(F124)
	S68= [ALUOut]=(-a)                                          ALUOut-Hold(S59,S67)
	S69= CtrlDR4bit=0                                           Premise(F128)
	S70= [DR4bit]={Compare0((-a)),so}                           DR4bit-Hold(S61,S69)

WB	S71= IR.Out6_10=rT                                          IR-Out(S66)
	S72= ALUOut.Out=(-a)                                        ALUOut-Out(S68)
	S73= DR4bit.Out={Compare0((-a)),so}                         DR4bit-Out(S70)
	S74= IR.Out6_10=>GPRegs.WReg                                Premise(F146)
	S75= GPRegs.WReg=rT                                         Path(S71,S74)
	S76= ALUOut.Out=>GPRegs.WData                               Premise(F147)
	S77= GPRegs.WData=(-a)                                      Path(S72,S76)
	S78= DR4bit.Out=>CRRegs.CR0In                               Premise(F148)
	S79= CRRegs.CR0In={Compare0((-a)),so}                       Path(S73,S78)
	S80= CtrlPC=0                                               Premise(F151)
	S81= CtrlPCInc=0                                            Premise(F152)
	S82= PC[Out]=addr+4                                         PC-Hold(S64,S80,S81)
	S83= CtrlGPRegs=1                                           Premise(F154)
	S84= GPRegs[rT]=(-a)                                        GPRegs-Write(S75,S77,S83)
	S85= CtrlCRRegsCR0=1                                        Premise(F162)
	S86= CRRegs[CR0]={Compare0((-a)),so}                        CRRegs-CR0-Write(S79,S85)

POST	S82= PC[Out]=addr+4                                         PC-Hold(S64,S80,S81)
	S84= GPRegs[rT]=(-a)                                        GPRegs-Write(S75,S77,S83)
	S86= CRRegs[CR0]={Compare0((-a)),so}                        CRRegs-CR0-Write(S79,S85)

