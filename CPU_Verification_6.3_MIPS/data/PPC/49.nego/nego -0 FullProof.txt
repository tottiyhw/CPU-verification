
----------------------------------- FullProof -----------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={31,rT,rA,0,1232}                      Premise(F2)
	S0= GPRegs[rA]=a                                            Premise(F3)
	S0= XER[SO]=so                                              Premise(F4)

IF	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.NIA=addr                                             PC-Out(S0)
	S0= XER.SOOut=so                                            XER-SO-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F5)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F6)
	S0= IMem.Addr=addr                                          Path(S0,S0)
	S0= IMem.RData={31,rT,rA,0,1232}                            IMem-Read(S0,S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F7)
	S0= IR.In={31,rT,rA,0,1232}                                 Path(S0,S0)
	S0= IR.Out0_5=>CU.Op                                        Premise(F8)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F9)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F10)
	S0= GPRegs.RData1=>A.In                                     Premise(F11)
	S0= A.Out=>ALU.A                                            Premise(F12)
	S0= CU.Func=>ALU.Func                                       Premise(F13)
	S0= ALU.Out=>ALUOut.In                                      Premise(F14)
	S0= ALU.OV=>OVReg.In                                        Premise(F15)
	S0= XER.SOOut=>ORGate.A                                     Premise(F16)
	S0= ORGate.A=so                                             Path(S0,S0)
	S0= ALU.OV=>ORGate.B                                        Premise(F17)
	S0= ORGate.Out=>DR1bit.In                                   Premise(F18)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F19)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F20)
	S0= DR1bit.Out=>XER.SOIn                                    Premise(F21)
	S0= OVReg.Out=>XER.OVIn                                     Premise(F22)
	S0= CtrlPIDReg=0                                            Premise(F23)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F24)
	S0= IMem[{pid,addr}]={31,rT,rA,0,1232}                      IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F25)
	S0= CtrlPCInc=1                                             Premise(F26)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIR=1                                                Premise(F27)
	S0= [IR]={31,rT,rA,0,1232}                                  IR-Write(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F28)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F29)
	S0= CtrlALUOut=0                                            Premise(F30)
	S0= CtrlOVReg=0                                             Premise(F31)
	S0= CtrlXERSO=0                                             Premise(F32)
	S0= XER[SO]=so                                              XER-SO-Hold(S0,S0)
	S0= CtrlXEROV=0                                             Premise(F33)
	S0= CtrlXERCA=0                                             Premise(F34)
	S0= CtrlDR1bit=0                                            Premise(F35)

ID	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=0                                           IR-Out(S0)
	S0= IR.Out21_31=1232                                        IR-Out(S0)
	S0= XER.SOOut=so                                            XER-SO-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F36)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F37)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F38)
	S0= IR.Out0_5=>CU.Op                                        Premise(F39)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F40)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.RData1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F41)
	S0= CU.IRFunc=1232                                          Path(S0,S0)
	S0= CU.Func=alu_neg                                         CU(S0,S0)
	S0= GPRegs.RData1=>A.In                                     Premise(F42)
	S0= A.In=a                                                  Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F43)
	S0= CU.Func=>ALU.Func                                       Premise(F44)
	S0= ALU.Func=alu_neg                                        Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F45)
	S0= ALU.OV=>OVReg.In                                        Premise(F46)
	S0= XER.SOOut=>ORGate.A                                     Premise(F47)
	S0= ORGate.A=so                                             Path(S0,S0)
	S0= ALU.OV=>ORGate.B                                        Premise(F48)
	S0= ORGate.Out=>DR1bit.In                                   Premise(F49)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F50)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F51)
	S0= DR1bit.Out=>XER.SOIn                                    Premise(F52)
	S0= OVReg.Out=>XER.OVIn                                     Premise(F53)
	S0= CtrlPIDReg=0                                            Premise(F54)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F55)
	S0= IMem[{pid,addr}]={31,rT,rA,0,1232}                      IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F56)
	S0= CtrlPCInc=0                                             Premise(F57)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F58)
	S0= [IR]={31,rT,rA,0,1232}                                  IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F59)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=1                                                 Premise(F60)
	S0= [A]=a                                                   A-Write(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F61)
	S0= CtrlOVReg=0                                             Premise(F62)
	S0= CtrlXERSO=0                                             Premise(F63)
	S0= XER[SO]=so                                              XER-SO-Hold(S0,S0)
	S0= CtrlXEROV=0                                             Premise(F64)
	S0= CtrlXERCA=0                                             Premise(F65)
	S0= CtrlDR1bit=0                                            Premise(F66)

EX	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=0                                           IR-Out(S0)
	S0= IR.Out21_31=1232                                        IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= XER.SOOut=so                                            XER-SO-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F67)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F68)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F69)
	S0= IR.Out0_5=>CU.Op                                        Premise(F70)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F71)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.RData1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F72)
	S0= CU.IRFunc=1232                                          Path(S0,S0)
	S0= CU.Func=alu_neg                                         CU(S0,S0)
	S0= GPRegs.RData1=>A.In                                     Premise(F73)
	S0= A.In=a                                                  Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F74)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F75)
	S0= ALU.Func=alu_neg                                        Path(S0,S0)
	S0= ALU.Out=(-a)                                            ALU(S0)
	S0= ALU.CMP=Compare0((-a))                                  ALU(S0)
	S0= ALU.OV=OverFlow((-a))                                   ALU(S0)
	S0= ALU.CA=Carry((-a))                                      ALU(S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F76)
	S0= ALUOut.In=(-a)                                          Path(S0,S0)
	S0= ALU.OV=>OVReg.In                                        Premise(F77)
	S0= OVReg.In=OverFlow((-a))                                 Path(S0,S0)
	S0= XER.SOOut=>ORGate.A                                     Premise(F78)
	S0= ORGate.A=so                                             Path(S0,S0)
	S0= ALU.OV=>ORGate.B                                        Premise(F79)
	S0= ORGate.B=OverFlow((-a))                                 Path(S0,S0)
	S0= ORGate.Out=so|OverFlow((-a))                            ORGate(S0,S0)
	S0= ORGate.Out=>DR1bit.In                                   Premise(F80)
	S0= DR1bit.In=so|OverFlow((-a))                             Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F81)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F82)
	S0= DR1bit.Out=>XER.SOIn                                    Premise(F83)
	S0= OVReg.Out=>XER.OVIn                                     Premise(F84)
	S0= CtrlPIDReg=0                                            Premise(F85)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F86)
	S0= IMem[{pid,addr}]={31,rT,rA,0,1232}                      IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F87)
	S0= CtrlPCInc=0                                             Premise(F88)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F89)
	S0= [IR]={31,rT,rA,0,1232}                                  IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F90)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F91)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlALUOut=1                                            Premise(F92)
	S0= [ALUOut]=(-a)                                           ALUOut-Write(S0,S0)
	S0= CtrlOVReg=1                                             Premise(F93)
	S0= [OVReg]=OverFlow((-a))                                  OVReg-Write(S0,S0)
	S0= CtrlXERSO=0                                             Premise(F94)
	S0= XER[SO]=so                                              XER-SO-Hold(S0,S0)
	S0= CtrlXEROV=0                                             Premise(F95)
	S0= CtrlXERCA=0                                             Premise(F96)
	S0= CtrlDR1bit=1                                            Premise(F97)
	S0= [DR1bit]=so|OverFlow((-a))                              DR1bit-Write(S0,S0)

MEM	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=0                                           IR-Out(S0)
	S0= IR.Out21_31=1232                                        IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= ALUOut.Out=(-a)                                         ALUOut-Out(S0)
	S0= ALUOut.Out1_0={(-a)}[1:0]                               ALUOut-Out(S0)
	S0= ALUOut.Out4_0={(-a)}[4:0]                               ALUOut-Out(S0)
	S0= OVReg.Out=OverFlow((-a))                                OVReg-Out(S0)
	S0= OVReg.Out1_0={OverFlow((-a))}[1:0]                      OVReg-Out(S0)
	S0= OVReg.Out4_0={OverFlow((-a))}[4:0]                      OVReg-Out(S0)
	S0= XER.SOOut=so                                            XER-SO-Out(S0)
	S0= DR1bit.Out=so|OverFlow((-a))                            DR1bit-Out(S0)
	S0= DR1bit.Out1_0={so|OverFlow((-a))}[1:0]                  DR1bit-Out(S0)
	S0= DR1bit.Out4_0={so|OverFlow((-a))}[4:0]                  DR1bit-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F98)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F99)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F100)
	S0= IR.Out0_5=>CU.Op                                        Premise(F101)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F102)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.RData1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F103)
	S0= CU.IRFunc=1232                                          Path(S0,S0)
	S0= CU.Func=alu_neg                                         CU(S0,S0)
	S0= GPRegs.RData1=>A.In                                     Premise(F104)
	S0= A.In=a                                                  Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F105)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F106)
	S0= ALU.Func=alu_neg                                        Path(S0,S0)
	S0= ALU.Out=(-a)                                            ALU(S0)
	S0= ALU.CMP=Compare0((-a))                                  ALU(S0)
	S0= ALU.OV=OverFlow((-a))                                   ALU(S0)
	S0= ALU.CA=Carry((-a))                                      ALU(S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F107)
	S0= ALUOut.In=(-a)                                          Path(S0,S0)
	S0= ALU.OV=>OVReg.In                                        Premise(F108)
	S0= OVReg.In=OverFlow((-a))                                 Path(S0,S0)
	S0= XER.SOOut=>ORGate.A                                     Premise(F109)
	S0= ORGate.A=so                                             Path(S0,S0)
	S0= ALU.OV=>ORGate.B                                        Premise(F110)
	S0= ORGate.B=OverFlow((-a))                                 Path(S0,S0)
	S0= ORGate.Out=so|OverFlow((-a))                            ORGate(S0,S0)
	S0= ORGate.Out=>DR1bit.In                                   Premise(F111)
	S0= DR1bit.In=so|OverFlow((-a))                             Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F112)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F113)
	S0= GPRegs.WData=(-a)                                       Path(S0,S0)
	S0= DR1bit.Out=>XER.SOIn                                    Premise(F114)
	S0= XER.SOIn=so|OverFlow((-a))                              Path(S0,S0)
	S0= OVReg.Out=>XER.OVIn                                     Premise(F115)
	S0= XER.OVIn=OverFlow((-a))                                 Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F116)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F117)
	S0= IMem[{pid,addr}]={31,rT,rA,0,1232}                      IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F118)
	S0= CtrlPCInc=0                                             Premise(F119)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F120)
	S0= [IR]={31,rT,rA,0,1232}                                  IR-Hold(S0,S0)
	S0= CtrlGPRegs=0                                            Premise(F121)
	S0= GPRegs[rA]=a                                            GPRegs-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F122)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F123)
	S0= [ALUOut]=(-a)                                           ALUOut-Hold(S0,S0)
	S0= CtrlOVReg=0                                             Premise(F124)
	S0= [OVReg]=OverFlow((-a))                                  OVReg-Hold(S0,S0)
	S0= CtrlXERSO=0                                             Premise(F125)
	S0= XER[SO]=so                                              XER-SO-Hold(S0,S0)
	S0= CtrlXEROV=0                                             Premise(F126)
	S0= CtrlXERCA=0                                             Premise(F127)
	S0= CtrlDR1bit=0                                            Premise(F128)
	S0= [DR1bit]=so|OverFlow((-a))                              DR1bit-Hold(S0,S0)

WB	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=31                                            IR-Out(S0)
	S0= IR.Out6_10=rT                                           IR-Out(S0)
	S0= IR.Out11_15=rA                                          IR-Out(S0)
	S0= IR.Out16_20=0                                           IR-Out(S0)
	S0= IR.Out21_31=1232                                        IR-Out(S0)
	S0= A.Out=a                                                 A-Out(S0)
	S0= A.Out1_0={a}[1:0]                                       A-Out(S0)
	S0= A.Out4_0={a}[4:0]                                       A-Out(S0)
	S0= ALUOut.Out=(-a)                                         ALUOut-Out(S0)
	S0= ALUOut.Out1_0={(-a)}[1:0]                               ALUOut-Out(S0)
	S0= ALUOut.Out4_0={(-a)}[4:0]                               ALUOut-Out(S0)
	S0= OVReg.Out=OverFlow((-a))                                OVReg-Out(S0)
	S0= OVReg.Out1_0={OverFlow((-a))}[1:0]                      OVReg-Out(S0)
	S0= OVReg.Out4_0={OverFlow((-a))}[4:0]                      OVReg-Out(S0)
	S0= XER.SOOut=so                                            XER-SO-Out(S0)
	S0= DR1bit.Out=so|OverFlow((-a))                            DR1bit-Out(S0)
	S0= DR1bit.Out1_0={so|OverFlow((-a))}[1:0]                  DR1bit-Out(S0)
	S0= DR1bit.Out4_0={so|OverFlow((-a))}[4:0]                  DR1bit-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F129)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F130)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F131)
	S0= IR.Out0_5=>CU.Op                                        Premise(F132)
	S0= CU.Op=31                                                Path(S0,S0)
	S0= IR.Out11_15=>GPRegs.RReg1                               Premise(F133)
	S0= GPRegs.RReg1=rA                                         Path(S0,S0)
	S0= GPRegs.RData1=a                                         GPRegs-Read(S0,S0)
	S0= IR.Out21_31=>CU.IRFunc                                  Premise(F134)
	S0= CU.IRFunc=1232                                          Path(S0,S0)
	S0= CU.Func=alu_neg                                         CU(S0,S0)
	S0= GPRegs.RData1=>A.In                                     Premise(F135)
	S0= A.In=a                                                  Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F136)
	S0= ALU.A=a                                                 Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F137)
	S0= ALU.Func=alu_neg                                        Path(S0,S0)
	S0= ALU.Out=(-a)                                            ALU(S0)
	S0= ALU.CMP=Compare0((-a))                                  ALU(S0)
	S0= ALU.OV=OverFlow((-a))                                   ALU(S0)
	S0= ALU.CA=Carry((-a))                                      ALU(S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F138)
	S0= ALUOut.In=(-a)                                          Path(S0,S0)
	S0= ALU.OV=>OVReg.In                                        Premise(F139)
	S0= OVReg.In=OverFlow((-a))                                 Path(S0,S0)
	S0= XER.SOOut=>ORGate.A                                     Premise(F140)
	S0= ORGate.A=so                                             Path(S0,S0)
	S0= ALU.OV=>ORGate.B                                        Premise(F141)
	S0= ORGate.B=OverFlow((-a))                                 Path(S0,S0)
	S0= ORGate.Out=so|OverFlow((-a))                            ORGate(S0,S0)
	S0= ORGate.Out=>DR1bit.In                                   Premise(F142)
	S0= DR1bit.In=so|OverFlow((-a))                             Path(S0,S0)
	S0= IR.Out6_10=>GPRegs.WReg                                 Premise(F143)
	S0= GPRegs.WReg=rT                                          Path(S0,S0)
	S0= ALUOut.Out=>GPRegs.WData                                Premise(F144)
	S0= GPRegs.WData=(-a)                                       Path(S0,S0)
	S0= DR1bit.Out=>XER.SOIn                                    Premise(F145)
	S0= XER.SOIn=so|OverFlow((-a))                              Path(S0,S0)
	S0= OVReg.Out=>XER.OVIn                                     Premise(F146)
	S0= XER.OVIn=OverFlow((-a))                                 Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F147)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F148)
	S0= IMem[{pid,addr}]={31,rT,rA,0,1232}                      IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F149)
	S0= CtrlPCInc=0                                             Premise(F150)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F151)
	S0= [IR]={31,rT,rA,0,1232}                                  IR-Hold(S0,S0)
	S0= CtrlGPRegs=1                                            Premise(F152)
	S0= GPRegs[rT]=(-a)                                         GPRegs-Write(S0,S0,S0)
	S0= CtrlA=0                                                 Premise(F153)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F154)
	S0= [ALUOut]=(-a)                                           ALUOut-Hold(S0,S0)
	S0= CtrlOVReg=0                                             Premise(F155)
	S0= [OVReg]=OverFlow((-a))                                  OVReg-Hold(S0,S0)
	S0= CtrlXERSO=1                                             Premise(F156)
	S0= XER[SO]=so|OverFlow((-a))                               XER-SO-Write(S0,S0)
	S0= CtrlXEROV=1                                             Premise(F157)
	S0= XER[OV]=OverFlow((-a))                                  XER-OV-Write(S0,S0)
	S0= CtrlXERCA=0                                             Premise(F158)
	S0= CtrlDR1bit=0                                            Premise(F159)
	S0= [DR1bit]=so|OverFlow((-a))                              DR1bit-Hold(S0,S0)

POST	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= IMem[{pid,addr}]={31,rT,rA,0,1232}                      IMem-Hold(S0,S0)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= [IR]={31,rT,rA,0,1232}                                  IR-Hold(S0,S0)
	S0= GPRegs[rT]=(-a)                                         GPRegs-Write(S0,S0,S0)
	S0= [A]=a                                                   A-Hold(S0,S0)
	S0= [ALUOut]=(-a)                                           ALUOut-Hold(S0,S0)
	S0= [OVReg]=OverFlow((-a))                                  OVReg-Hold(S0,S0)
	S0= XER[SO]=so|OverFlow((-a))                               XER-SO-Write(S0,S0)
	S0= XER[OV]=OverFlow((-a))                                  XER-OV-Write(S0,S0)
	S0= [DR1bit]=so|OverFlow((-a))                              DR1bit-Hold(S0,S0)

