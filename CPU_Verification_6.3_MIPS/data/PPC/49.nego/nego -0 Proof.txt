
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,1232}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.NIA=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMem.PID                                    Premise(F5)
	S8= IMem.PID=pid                                            Path(S5,S7)
	S9= PC.NIA=>IMem.Addr                                       Premise(F6)
	S10= IMem.Addr=addr                                         Path(S6,S9)
	S11= IMem.RData={31,rT,rA,0,1232}                           IMem-Read(S8,S10,S2)
	S12= IMem.RData=>IR.In                                      Premise(F7)
	S13= IR.In={31,rT,rA,0,1232}                                Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F25)
	S15= CtrlPCInc=1                                            Premise(F26)
	S16= PC[Out]=addr+4                                         PC-Inc(S1,S14,S15)
	S17= CtrlIR=1                                               Premise(F27)
	S18= [IR]={31,rT,rA,0,1232}                                 IR-Write(S13,S17)
	S19= CtrlGPRegs=0                                           Premise(F28)
	S20= GPRegs[rA]=a                                           GPRegs-Hold(S3,S19)
	S21= CtrlXERSO=0                                            Premise(F32)
	S22= XER[SO]=so                                             XER-SO-Hold(S4,S21)

ID	S23= IR.Out11_15=rA                                         IR-Out(S18)
	S24= IR.Out11_15=>GPRegs.RReg1                              Premise(F40)
	S25= GPRegs.RReg1=rA                                        Path(S23,S24)
	S26= GPRegs.RData1=a                                        GPRegs-Read(S25,S20)
	S27= GPRegs.RData1=>A.In                                    Premise(F42)
	S28= A.In=a                                                 Path(S26,S27)
	S29= CtrlPC=0                                               Premise(F56)
	S30= CtrlPCInc=0                                            Premise(F57)
	S31= PC[Out]=addr+4                                         PC-Hold(S16,S29,S30)
	S32= CtrlIR=0                                               Premise(F58)
	S33= [IR]={31,rT,rA,0,1232}                                 IR-Hold(S18,S32)
	S34= CtrlA=1                                                Premise(F60)
	S35= [A]=a                                                  A-Write(S28,S34)
	S36= CtrlXERSO=0                                            Premise(F63)
	S37= XER[SO]=so                                             XER-SO-Hold(S22,S36)

EX	S38= A.Out=a                                                A-Out(S35)
	S39= XER.SOOut=so                                           XER-SO-Out(S37)
	S40= A.Out=>ALU.A                                           Premise(F74)
	S41= ALU.A=a                                                Path(S38,S40)
	S42= ALU.Out=(-a)                                           ALU(S41)
	S43= ALU.OV=OverFlow((-a))                                  ALU(S41)
	S44= ALU.Out=>ALUOut.In                                     Premise(F76)
	S45= ALUOut.In=(-a)                                         Path(S42,S44)
	S46= ALU.OV=>OVReg.In                                       Premise(F77)
	S47= OVReg.In=OverFlow((-a))                                Path(S43,S46)
	S48= XER.SOOut=>ORGate.A                                    Premise(F78)
	S49= ORGate.A=so                                            Path(S39,S48)
	S50= ALU.OV=>ORGate.B                                       Premise(F79)
	S51= ORGate.B=OverFlow((-a))                                Path(S43,S50)
	S52= ORGate.Out=so|OverFlow((-a))                           ORGate(S49,S51)
	S53= ORGate.Out=>DR1bit.In                                  Premise(F80)
	S54= DR1bit.In=so|OverFlow((-a))                            Path(S52,S53)
	S55= CtrlPC=0                                               Premise(F87)
	S56= CtrlPCInc=0                                            Premise(F88)
	S57= PC[Out]=addr+4                                         PC-Hold(S31,S55,S56)
	S58= CtrlIR=0                                               Premise(F89)
	S59= [IR]={31,rT,rA,0,1232}                                 IR-Hold(S33,S58)
	S60= CtrlALUOut=1                                           Premise(F92)
	S61= [ALUOut]=(-a)                                          ALUOut-Write(S45,S60)
	S62= CtrlOVReg=1                                            Premise(F93)
	S63= [OVReg]=OverFlow((-a))                                 OVReg-Write(S47,S62)
	S64= CtrlDR1bit=1                                           Premise(F97)
	S65= [DR1bit]=so|OverFlow((-a))                             DR1bit-Write(S54,S64)

MEM	S66= CtrlPC=0                                               Premise(F118)
	S67= CtrlPCInc=0                                            Premise(F119)
	S68= PC[Out]=addr+4                                         PC-Hold(S57,S66,S67)
	S69= CtrlIR=0                                               Premise(F120)
	S70= [IR]={31,rT,rA,0,1232}                                 IR-Hold(S59,S69)
	S71= CtrlALUOut=0                                           Premise(F123)
	S72= [ALUOut]=(-a)                                          ALUOut-Hold(S61,S71)
	S73= CtrlOVReg=0                                            Premise(F124)
	S74= [OVReg]=OverFlow((-a))                                 OVReg-Hold(S63,S73)
	S75= CtrlDR1bit=0                                           Premise(F128)
	S76= [DR1bit]=so|OverFlow((-a))                             DR1bit-Hold(S65,S75)

WB	S77= IR.Out6_10=rT                                          IR-Out(S70)
	S78= ALUOut.Out=(-a)                                        ALUOut-Out(S72)
	S79= OVReg.Out=OverFlow((-a))                               OVReg-Out(S74)
	S80= DR1bit.Out=so|OverFlow((-a))                           DR1bit-Out(S76)
	S81= IR.Out6_10=>GPRegs.WReg                                Premise(F143)
	S82= GPRegs.WReg=rT                                         Path(S77,S81)
	S83= ALUOut.Out=>GPRegs.WData                               Premise(F144)
	S84= GPRegs.WData=(-a)                                      Path(S78,S83)
	S85= DR1bit.Out=>XER.SOIn                                   Premise(F145)
	S86= XER.SOIn=so|OverFlow((-a))                             Path(S80,S85)
	S87= OVReg.Out=>XER.OVIn                                    Premise(F146)
	S88= XER.OVIn=OverFlow((-a))                                Path(S79,S87)
	S89= CtrlPC=0                                               Premise(F149)
	S90= CtrlPCInc=0                                            Premise(F150)
	S91= PC[Out]=addr+4                                         PC-Hold(S68,S89,S90)
	S92= CtrlGPRegs=1                                           Premise(F152)
	S93= GPRegs[rT]=(-a)                                        GPRegs-Write(S82,S84,S92)
	S94= CtrlXERSO=1                                            Premise(F156)
	S95= XER[SO]=so|OverFlow((-a))                              XER-SO-Write(S86,S94)
	S96= CtrlXEROV=1                                            Premise(F157)
	S97= XER[OV]=OverFlow((-a))                                 XER-OV-Write(S88,S96)

POST	S91= PC[Out]=addr+4                                         PC-Hold(S68,S89,S90)
	S93= GPRegs[rT]=(-a)                                        GPRegs-Write(S82,S84,S92)
	S95= XER[SO]=so|OverFlow((-a))                              XER-SO-Write(S86,S94)
	S97= XER[OV]=OverFlow((-a))                                 XER-OV-Write(S88,S96)

