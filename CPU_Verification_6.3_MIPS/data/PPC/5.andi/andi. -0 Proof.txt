
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={28,rS,rA,UIMM}                        Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.NIA=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMem.PID                                    Premise(F5)
	S8= IMem.PID=pid                                            Path(S5,S7)
	S9= PC.NIA=>IMem.Addr                                       Premise(F6)
	S10= IMem.Addr=addr                                         Path(S6,S9)
	S11= IMem.RData={28,rS,rA,UIMM}                             IMem-Read(S8,S10,S2)
	S12= IMem.RData=>IR.In                                      Premise(F7)
	S13= IR.In={28,rS,rA,UIMM}                                  Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F25)
	S15= CtrlPCInc=1                                            Premise(F26)
	S16= PC[Out]=addr+4                                         PC-Inc(S1,S14,S15)
	S17= CtrlIR=1                                               Premise(F27)
	S18= [IR]={28,rS,rA,UIMM}                                   IR-Write(S13,S17)
	S19= CtrlGPRegs=0                                           Premise(F28)
	S20= GPRegs[rA]=a                                           GPRegs-Hold(S3,S19)
	S21= CtrlXERSO=0                                            Premise(F32)
	S22= XER[SO]=so                                             XER-SO-Hold(S4,S21)

ID	S23= IR.Out11_15=rA                                         IR-Out(S18)
	S24= IR.Out16_31=UIMM                                       IR-Out(S18)
	S25= IR.Out11_15=>GPRegs.RReg1                              Premise(F44)
	S26= GPRegs.RReg1=rA                                        Path(S23,S25)
	S27= GPRegs.RData1=a                                        GPRegs-Read(S26,S20)
	S28= IR.Out16_31=>LIMMEXT.In                                Premise(F45)
	S29= LIMMEXT.In=UIMM                                        Path(S24,S28)
	S30= LIMMEXT.Out={0,UIMM}                                   LIMMEXT(S29)
	S31= GPRegs.RData1=>A.In                                    Premise(F46)
	S32= A.In=a                                                 Path(S27,S31)
	S33= LIMMEXT.Out=>B.In                                      Premise(F47)
	S34= B.In={0,UIMM}                                          Path(S30,S33)
	S35= CtrlPC=0                                               Premise(F60)
	S36= CtrlPCInc=0                                            Premise(F61)
	S37= PC[Out]=addr+4                                         PC-Hold(S16,S35,S36)
	S38= CtrlIR=0                                               Premise(F62)
	S39= [IR]={28,rS,rA,UIMM}                                   IR-Hold(S18,S38)
	S40= CtrlA=1                                                Premise(F64)
	S41= [A]=a                                                  A-Write(S32,S40)
	S42= CtrlB=1                                                Premise(F65)
	S43= [B]={0,UIMM}                                           B-Write(S34,S42)
	S44= CtrlXERSO=0                                            Premise(F67)
	S45= XER[SO]=so                                             XER-SO-Hold(S22,S44)

EX	S46= A.Out=a                                                A-Out(S41)
	S47= B.Out={0,UIMM}                                         B-Out(S43)
	S48= XER.SOOut=so                                           XER-SO-Out(S45)
	S49= A.Out=>ALU.A                                           Premise(F83)
	S50= ALU.A=a                                                Path(S46,S49)
	S51= B.Out=>ALU.B                                           Premise(F84)
	S52= ALU.B={0,UIMM}                                         Path(S47,S51)
	S53= ALU.Out=a&{0,UIMM}                                     ALU(S50,S52)
	S54= ALU.CMP=Compare0(a&{0,UIMM})                           ALU(S50,S52)
	S55= ALU.Out=>ALUOut.In                                     Premise(F86)
	S56= ALUOut.In=a&{0,UIMM}                                   Path(S53,S55)
	S57= ALU.CMP=>DataCmb.A                                     Premise(F87)
	S58= DataCmb.A=Compare0(a&{0,UIMM})                         Path(S54,S57)
	S59= XER.SOOut=>DataCmb.B                                   Premise(F88)
	S60= DataCmb.B=so                                           Path(S48,S59)
	S61= DataCmb.Out={Compare0(a&{0,UIMM}),so}                  DataCmb(S58,S60)
	S62= DataCmb.Out=>DR4bit.In                                 Premise(F89)
	S63= DR4bit.In={Compare0(a&{0,UIMM}),so}                    Path(S61,S62)
	S64= CtrlPC=0                                               Premise(F95)
	S65= CtrlPCInc=0                                            Premise(F96)
	S66= PC[Out]=addr+4                                         PC-Hold(S37,S64,S65)
	S67= CtrlIR=0                                               Premise(F97)
	S68= [IR]={28,rS,rA,UIMM}                                   IR-Hold(S39,S67)
	S69= CtrlALUOut=1                                           Premise(F101)
	S70= [ALUOut]=a&{0,UIMM}                                    ALUOut-Write(S56,S69)
	S71= CtrlDR4bit=1                                           Premise(F105)
	S72= [DR4bit]={Compare0(a&{0,UIMM}),so}                     DR4bit-Write(S63,S71)

MEM	S73= CtrlPC=0                                               Premise(F130)
	S74= CtrlPCInc=0                                            Premise(F131)
	S75= PC[Out]=addr+4                                         PC-Hold(S66,S73,S74)
	S76= CtrlIR=0                                               Premise(F132)
	S77= [IR]={28,rS,rA,UIMM}                                   IR-Hold(S68,S76)
	S78= CtrlALUOut=0                                           Premise(F136)
	S79= [ALUOut]=a&{0,UIMM}                                    ALUOut-Hold(S70,S78)
	S80= CtrlDR4bit=0                                           Premise(F140)
	S81= [DR4bit]={Compare0(a&{0,UIMM}),so}                     DR4bit-Hold(S72,S80)

WB	S82= IR.Out6_10=rS                                          IR-Out(S77)
	S83= ALUOut.Out=a&{0,UIMM}                                  ALUOut-Out(S79)
	S84= DR4bit.Out={Compare0(a&{0,UIMM}),so}                   DR4bit-Out(S81)
	S85= IR.Out6_10=>GPRegs.WReg                                Premise(F160)
	S86= GPRegs.WReg=rS                                         Path(S82,S85)
	S87= ALUOut.Out=>GPRegs.WData                               Premise(F161)
	S88= GPRegs.WData=a&{0,UIMM}                                Path(S83,S87)
	S89= DR4bit.Out=>CRRegs.CR0In                               Premise(F162)
	S90= CRRegs.CR0In={Compare0(a&{0,UIMM}),so}                 Path(S84,S89)
	S91= CtrlPC=0                                               Premise(F165)
	S92= CtrlPCInc=0                                            Premise(F166)
	S93= PC[Out]=addr+4                                         PC-Hold(S75,S91,S92)
	S94= CtrlGPRegs=1                                           Premise(F168)
	S95= GPRegs[rS]=a&{0,UIMM}                                  GPRegs-Write(S86,S88,S94)
	S96= CtrlCRRegsCR0=1                                        Premise(F177)
	S97= CRRegs[CR0]={Compare0(a&{0,UIMM}),so}                  CRRegs-CR0-Write(S90,S96)

POST	S93= PC[Out]=addr+4                                         PC-Hold(S75,S91,S92)
	S95= GPRegs[rS]=a&{0,UIMM}                                  GPRegs-Write(S86,S88,S94)
	S97= CRRegs[CR0]={Compare0(a&{0,UIMM}),so}                  CRRegs-CR0-Write(S90,S96)

