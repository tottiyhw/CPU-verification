
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,1233}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)

IF	S5= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S6= PC.NIA=addr                                             PC-Out(S1)
	S7= PIDReg.Out=>IMem.PID                                    Premise(F5)
	S8= IMem.PID=pid                                            Path(S5,S7)
	S9= PC.NIA=>IMem.Addr                                       Premise(F6)
	S10= IMem.Addr=addr                                         Path(S6,S9)
	S11= IMem.RData={31,rT,rA,0,1233}                           IMem-Read(S8,S10,S2)
	S12= IMem.RData=>IR.In                                      Premise(F7)
	S13= IR.In={31,rT,rA,0,1233}                                Path(S11,S12)
	S14= CtrlPC=0                                               Premise(F29)
	S15= CtrlPCInc=1                                            Premise(F30)
	S16= PC[Out]=addr+4                                         PC-Inc(S1,S14,S15)
	S17= CtrlIR=1                                               Premise(F31)
	S18= [IR]={31,rT,rA,0,1233}                                 IR-Write(S13,S17)
	S19= CtrlGPRegs=0                                           Premise(F32)
	S20= GPRegs[rA]=a                                           GPRegs-Hold(S3,S19)
	S21= CtrlXERSO=0                                            Premise(F36)
	S22= XER[SO]=so                                             XER-SO-Hold(S4,S21)

ID	S23= IR.Out11_15=rA                                         IR-Out(S18)
	S24= IR.Out11_15=>GPRegs.RReg1                              Premise(F49)
	S25= GPRegs.RReg1=rA                                        Path(S23,S24)
	S26= GPRegs.RData1=a                                        GPRegs-Read(S25,S20)
	S27= GPRegs.RData1=>A.In                                    Premise(F51)
	S28= A.In=a                                                 Path(S26,S27)
	S29= CtrlPC=0                                               Premise(F69)
	S30= CtrlPCInc=0                                            Premise(F70)
	S31= PC[Out]=addr+4                                         PC-Hold(S16,S29,S30)
	S32= CtrlIR=0                                               Premise(F71)
	S33= [IR]={31,rT,rA,0,1233}                                 IR-Hold(S18,S32)
	S34= CtrlA=1                                                Premise(F73)
	S35= [A]=a                                                  A-Write(S28,S34)
	S36= CtrlXERSO=0                                            Premise(F76)
	S37= XER[SO]=so                                             XER-SO-Hold(S22,S36)

EX	S38= A.Out=a                                                A-Out(S35)
	S39= XER.SOOut=so                                           XER-SO-Out(S37)
	S40= A.Out=>ALU.A                                           Premise(F92)
	S41= ALU.A=a                                                Path(S38,S40)
	S42= ALU.Out=(-a)                                           ALU(S41)
	S43= ALU.CMP=Compare0((-a))                                 ALU(S41)
	S44= ALU.OV=OverFlow((-a))                                  ALU(S41)
	S45= ALU.Out=>ALUOut.In                                     Premise(F94)
	S46= ALUOut.In=(-a)                                         Path(S42,S45)
	S47= ALU.CMP=>DataCmb.A                                     Premise(F95)
	S48= DataCmb.A=Compare0((-a))                               Path(S43,S47)
	S49= ORGate.Out=>DataCmb.B                                  Premise(F96)
	S50= ALU.OV=>OVReg.In                                       Premise(F97)
	S51= OVReg.In=OverFlow((-a))                                Path(S44,S50)
	S52= XER.SOOut=>ORGate.A                                    Premise(F98)
	S53= ORGate.A=so                                            Path(S39,S52)
	S54= ALU.OV=>ORGate.B                                       Premise(F99)
	S55= ORGate.B=OverFlow((-a))                                Path(S44,S54)
	S56= ORGate.Out=so|OverFlow((-a))                           ORGate(S53,S55)
	S57= DataCmb.B=so|OverFlow((-a))                            Path(S56,S49)
	S58= DataCmb.Out={Compare0((-a)),so|OverFlow((-a))}         DataCmb(S48,S57)
	S59= ORGate.Out=>DR1bit.In                                  Premise(F100)
	S60= DR1bit.In=so|OverFlow((-a))                            Path(S56,S59)
	S61= DataCmb.Out=>DR4bit.In                                 Premise(F101)
	S62= DR4bit.In={Compare0((-a)),so|OverFlow((-a))}           Path(S58,S61)
	S63= CtrlPC=0                                               Premise(F109)
	S64= CtrlPCInc=0                                            Premise(F110)
	S65= PC[Out]=addr+4                                         PC-Hold(S31,S63,S64)
	S66= CtrlIR=0                                               Premise(F111)
	S67= [IR]={31,rT,rA,0,1233}                                 IR-Hold(S33,S66)
	S68= CtrlALUOut=1                                           Premise(F114)
	S69= [ALUOut]=(-a)                                          ALUOut-Write(S46,S68)
	S70= CtrlOVReg=1                                            Premise(F115)
	S71= [OVReg]=OverFlow((-a))                                 OVReg-Write(S51,S70)
	S72= CtrlDR1bit=1                                           Premise(F119)
	S73= [DR1bit]=so|OverFlow((-a))                             DR1bit-Write(S60,S72)
	S74= CtrlDR4bit=1                                           Premise(F120)
	S75= [DR4bit]={Compare0((-a)),so|OverFlow((-a))}            DR4bit-Write(S62,S74)

MEM	S76= CtrlPC=0                                               Premise(F149)
	S77= CtrlPCInc=0                                            Premise(F150)
	S78= PC[Out]=addr+4                                         PC-Hold(S65,S76,S77)
	S79= CtrlIR=0                                               Premise(F151)
	S80= [IR]={31,rT,rA,0,1233}                                 IR-Hold(S67,S79)
	S81= CtrlALUOut=0                                           Premise(F154)
	S82= [ALUOut]=(-a)                                          ALUOut-Hold(S69,S81)
	S83= CtrlOVReg=0                                            Premise(F155)
	S84= [OVReg]=OverFlow((-a))                                 OVReg-Hold(S71,S83)
	S85= CtrlDR1bit=0                                           Premise(F159)
	S86= [DR1bit]=so|OverFlow((-a))                             DR1bit-Hold(S73,S85)
	S87= CtrlDR4bit=0                                           Premise(F160)
	S88= [DR4bit]={Compare0((-a)),so|OverFlow((-a))}            DR4bit-Hold(S75,S87)

WB	S89= IR.Out6_10=rT                                          IR-Out(S80)
	S90= ALUOut.Out=(-a)                                        ALUOut-Out(S82)
	S91= OVReg.Out=OverFlow((-a))                               OVReg-Out(S84)
	S92= DR1bit.Out=so|OverFlow((-a))                           DR1bit-Out(S86)
	S93= DR4bit.Out={Compare0((-a)),so|OverFlow((-a))}          DR4bit-Out(S88)
	S94= IR.Out6_10=>GPRegs.WReg                                Premise(F182)
	S95= GPRegs.WReg=rT                                         Path(S89,S94)
	S96= ALUOut.Out=>GPRegs.WData                               Premise(F183)
	S97= GPRegs.WData=(-a)                                      Path(S90,S96)
	S98= DR4bit.Out=>CRRegs.CR0In                               Premise(F184)
	S99= CRRegs.CR0In={Compare0((-a)),so|OverFlow((-a))}        Path(S93,S98)
	S100= DR1bit.Out=>XER.SOIn                                  Premise(F185)
	S101= XER.SOIn=so|OverFlow((-a))                            Path(S92,S100)
	S102= OVReg.Out=>XER.OVIn                                   Premise(F186)
	S103= XER.OVIn=OverFlow((-a))                               Path(S91,S102)
	S104= CtrlPC=0                                              Premise(F189)
	S105= CtrlPCInc=0                                           Premise(F190)
	S106= PC[Out]=addr+4                                        PC-Hold(S78,S104,S105)
	S107= CtrlGPRegs=1                                          Premise(F192)
	S108= GPRegs[rT]=(-a)                                       GPRegs-Write(S95,S97,S107)
	S109= CtrlXERSO=1                                           Premise(F196)
	S110= XER[SO]=so|OverFlow((-a))                             XER-SO-Write(S101,S109)
	S111= CtrlXEROV=1                                           Premise(F197)
	S112= XER[OV]=OverFlow((-a))                                XER-OV-Write(S103,S111)
	S113= CtrlCRRegsCR0=1                                       Premise(F202)
	S114= CRRegs[CR0]={Compare0((-a)),so|OverFlow((-a))}        CRRegs-CR0-Write(S99,S113)

POST	S106= PC[Out]=addr+4                                        PC-Hold(S78,S104,S105)
	S108= GPRegs[rT]=(-a)                                       GPRegs-Write(S95,S97,S107)
	S110= XER[SO]=so|OverFlow((-a))                             XER-SO-Write(S101,S109)
	S112= XER[OV]=OverFlow((-a))                                XER-OV-Write(S103,S111)
	S114= CRRegs[CR0]={Compare0((-a)),so|OverFlow((-a))}        CRRegs-CR0-Write(S99,S113)

