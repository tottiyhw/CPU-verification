
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,1104}                     Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.NIA=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S9= IMem.PID=pid                                            Path(S6,S8)
	S10= PC.NIA=>IMem.Addr                                      Premise(F7)
	S11= IMem.Addr=addr                                         Path(S7,S10)
	S12= IMem.RData={31,rT,rA,rB,1104}                          IMem-Read(S9,S11,S2)
	S13= IMem.RData=>IR.In                                      Premise(F8)
	S14= IR.In={31,rT,rA,rB,1104}                               Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F29)
	S16= CtrlPCInc=1                                            Premise(F30)
	S17= PC[Out]=addr+4                                         PC-Inc(S1,S15,S16)
	S18= CtrlIR=1                                               Premise(F31)
	S19= [IR]={31,rT,rA,rB,1104}                                IR-Write(S14,S18)
	S20= CtrlGPRegs=0                                           Premise(F32)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)
	S22= GPRegs[rB]=b                                           GPRegs-Hold(S4,S20)
	S23= CtrlXERSO=0                                            Premise(F37)
	S24= XER[SO]=so                                             XER-SO-Hold(S5,S23)

ID	S25= IR.Out11_15=rA                                         IR-Out(S19)
	S26= IR.Out16_20=rB                                         IR-Out(S19)
	S27= IR.Out11_15=>GPRegs.RReg1                              Premise(F45)
	S28= GPRegs.RReg1=rA                                        Path(S25,S27)
	S29= GPRegs.RData1=a                                        GPRegs-Read(S28,S21)
	S30= IR.Out16_20=>GPRegs.RReg2                              Premise(F46)
	S31= GPRegs.RReg2=rB                                        Path(S26,S30)
	S32= GPRegs.RData2=b                                        GPRegs-Read(S31,S22)
	S33= GPRegs.RData1=>A.In                                    Premise(F48)
	S34= A.In=a                                                 Path(S29,S33)
	S35= GPRegs.RData2=>B.In                                    Premise(F49)
	S36= B.In=b                                                 Path(S32,S35)
	S37= CtrlPC=0                                               Premise(F64)
	S38= CtrlPCInc=0                                            Premise(F65)
	S39= PC[Out]=addr+4                                         PC-Hold(S17,S37,S38)
	S40= CtrlIR=0                                               Premise(F66)
	S41= [IR]={31,rT,rA,rB,1104}                                IR-Hold(S19,S40)
	S42= CtrlA=1                                                Premise(F68)
	S43= [A]=a                                                  A-Write(S34,S42)
	S44= CtrlB=1                                                Premise(F69)
	S45= [B]=b                                                  B-Write(S36,S44)
	S46= CtrlXERSO=0                                            Premise(F72)
	S47= XER[SO]=so                                             XER-SO-Hold(S24,S46)

EX	S48= A.Out=a                                                A-Out(S43)
	S49= B.Out=b                                                B-Out(S45)
	S50= XER.SOOut=so                                           XER-SO-Out(S47)
	S51= A.Out=>ALU.A                                           Premise(F85)
	S52= ALU.A=a                                                Path(S48,S51)
	S53= B.Out=>ALU.B                                           Premise(F86)
	S54= ALU.B=b                                                Path(S49,S53)
	S55= ALU.Out=b-a                                            ALU(S52,S54)
	S56= ALU.OV=OverFlow(b-a)                                   ALU(S52,S54)
	S57= ALU.Out=>ALUOut.In                                     Premise(F88)
	S58= ALUOut.In=b-a                                          Path(S55,S57)
	S59= ALU.OV=>OVReg.In                                       Premise(F89)
	S60= OVReg.In=OverFlow(b-a)                                 Path(S56,S59)
	S61= XER.SOOut=>ORGate.A                                    Premise(F90)
	S62= ORGate.A=so                                            Path(S50,S61)
	S63= ALU.OV=>ORGate.B                                       Premise(F91)
	S64= ORGate.B=OverFlow(b-a)                                 Path(S56,S63)
	S65= ORGate.Out=so|OverFlow(b-a)                            ORGate(S62,S64)
	S66= ORGate.Out=>DR1bit.In                                  Premise(F92)
	S67= DR1bit.In=so|OverFlow(b-a)                             Path(S65,S66)
	S68= CtrlPC=0                                               Premise(F99)
	S69= CtrlPCInc=0                                            Premise(F100)
	S70= PC[Out]=addr+4                                         PC-Hold(S39,S68,S69)
	S71= CtrlIR=0                                               Premise(F101)
	S72= [IR]={31,rT,rA,rB,1104}                                IR-Hold(S41,S71)
	S73= CtrlALUOut=1                                           Premise(F105)
	S74= [ALUOut]=b-a                                           ALUOut-Write(S58,S73)
	S75= CtrlOVReg=1                                            Premise(F106)
	S76= [OVReg]=OverFlow(b-a)                                  OVReg-Write(S60,S75)
	S77= CtrlDR1bit=1                                           Premise(F110)
	S78= [DR1bit]=so|OverFlow(b-a)                              DR1bit-Write(S67,S77)

MEM	S79= CtrlPC=0                                               Premise(F134)
	S80= CtrlPCInc=0                                            Premise(F135)
	S81= PC[Out]=addr+4                                         PC-Hold(S70,S79,S80)
	S82= CtrlIR=0                                               Premise(F136)
	S83= [IR]={31,rT,rA,rB,1104}                                IR-Hold(S72,S82)
	S84= CtrlALUOut=0                                           Premise(F140)
	S85= [ALUOut]=b-a                                           ALUOut-Hold(S74,S84)
	S86= CtrlOVReg=0                                            Premise(F141)
	S87= [OVReg]=OverFlow(b-a)                                  OVReg-Hold(S76,S86)
	S88= CtrlDR1bit=0                                           Premise(F145)
	S89= [DR1bit]=so|OverFlow(b-a)                              DR1bit-Hold(S78,S88)

WB	S90= IR.Out6_10=rT                                          IR-Out(S83)
	S91= ALUOut.Out=b-a                                         ALUOut-Out(S85)
	S92= OVReg.Out=OverFlow(b-a)                                OVReg-Out(S87)
	S93= DR1bit.Out=so|OverFlow(b-a)                            DR1bit-Out(S89)
	S94= IR.Out6_10=>GPRegs.WReg                                Premise(F163)
	S95= GPRegs.WReg=rT                                         Path(S90,S94)
	S96= ALUOut.Out=>GPRegs.WData                               Premise(F164)
	S97= GPRegs.WData=b-a                                       Path(S91,S96)
	S98= DR1bit.Out=>XER.SOIn                                   Premise(F165)
	S99= XER.SOIn=so|OverFlow(b-a)                              Path(S93,S98)
	S100= OVReg.Out=>XER.OVIn                                   Premise(F166)
	S101= XER.OVIn=OverFlow(b-a)                                Path(S92,S100)
	S102= CtrlPC=0                                              Premise(F169)
	S103= CtrlPCInc=0                                           Premise(F170)
	S104= PC[Out]=addr+4                                        PC-Hold(S81,S102,S103)
	S105= CtrlGPRegs=1                                          Premise(F172)
	S106= GPRegs[rT]=b-a                                        GPRegs-Write(S95,S97,S105)
	S107= CtrlXERSO=1                                           Premise(F177)
	S108= XER[SO]=so|OverFlow(b-a)                              XER-SO-Write(S99,S107)
	S109= CtrlXEROV=1                                           Premise(F178)
	S110= XER[OV]=OverFlow(b-a)                                 XER-OV-Write(S101,S109)

POST	S104= PC[Out]=addr+4                                        PC-Hold(S81,S102,S103)
	S106= GPRegs[rT]=b-a                                        GPRegs-Write(S95,S97,S105)
	S108= XER[SO]=so|OverFlow(b-a)                              XER-SO-Write(S99,S107)
	S110= XER[OV]=OverFlow(b-a)                                 XER-OV-Write(S101,S109)

