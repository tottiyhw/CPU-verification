
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,17}                       Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.NIA=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S9= IMem.PID=pid                                            Path(S6,S8)
	S10= PC.NIA=>IMem.Addr                                      Premise(F7)
	S11= IMem.Addr=addr                                         Path(S7,S10)
	S12= IMem.RData={31,rT,rA,rB,17}                            IMem-Read(S9,S11,S2)
	S13= IMem.RData=>IR.In                                      Premise(F8)
	S14= IR.In={31,rT,rA,rB,17}                                 Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F29)
	S16= CtrlPCInc=1                                            Premise(F30)
	S17= PC[Out]=addr+4                                         PC-Inc(S1,S15,S16)
	S18= CtrlIR=1                                               Premise(F31)
	S19= [IR]={31,rT,rA,rB,17}                                  IR-Write(S14,S18)
	S20= CtrlGPRegs=0                                           Premise(F32)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)
	S22= GPRegs[rB]=b                                           GPRegs-Hold(S4,S20)
	S23= CtrlXERSO=0                                            Premise(F37)
	S24= XER[SO]=so                                             XER-SO-Hold(S5,S23)

ID	S25= IR.Out11_15=rA                                         IR-Out(S19)
	S26= IR.Out16_20=rB                                         IR-Out(S19)
	S27= IR.Out11_15=>GPRegs.RReg1                              Premise(F49)
	S28= GPRegs.RReg1=rA                                        Path(S25,S27)
	S29= GPRegs.RData1=a                                        GPRegs-Read(S28,S21)
	S30= IR.Out16_20=>GPRegs.RReg2                              Premise(F50)
	S31= GPRegs.RReg2=rB                                        Path(S26,S30)
	S32= GPRegs.RData2=b                                        GPRegs-Read(S31,S22)
	S33= GPRegs.RData1=>A.In                                    Premise(F52)
	S34= A.In=a                                                 Path(S29,S33)
	S35= GPRegs.RData2=>B.In                                    Premise(F53)
	S36= B.In=b                                                 Path(S32,S35)
	S37= CtrlPC=0                                               Premise(F68)
	S38= CtrlPCInc=0                                            Premise(F69)
	S39= PC[Out]=addr+4                                         PC-Hold(S17,S37,S38)
	S40= CtrlIR=0                                               Premise(F70)
	S41= [IR]={31,rT,rA,rB,17}                                  IR-Hold(S19,S40)
	S42= CtrlA=1                                                Premise(F72)
	S43= [A]=a                                                  A-Write(S34,S42)
	S44= CtrlB=1                                                Premise(F73)
	S45= [B]=b                                                  B-Write(S36,S44)
	S46= CtrlXERSO=0                                            Premise(F76)
	S47= XER[SO]=so                                             XER-SO-Hold(S24,S46)

EX	S48= A.Out=a                                                A-Out(S43)
	S49= B.Out=b                                                B-Out(S45)
	S50= XER.SOOut=so                                           XER-SO-Out(S47)
	S51= A.Out=>ALU.A                                           Premise(F93)
	S52= ALU.A=a                                                Path(S48,S51)
	S53= B.Out=>ALU.B                                           Premise(F94)
	S54= ALU.B=b                                                Path(S49,S53)
	S55= ALU.Out=b-a                                            ALU(S52,S54)
	S56= ALU.CMP=Compare0(b-a)                                  ALU(S52,S54)
	S57= ALU.CA=Carry(b-a)                                      ALU(S52,S54)
	S58= ALU.Out=>ALUOut.In                                     Premise(F96)
	S59= ALUOut.In=b-a                                          Path(S55,S58)
	S60= ALU.CA=>CAReg.In                                       Premise(F97)
	S61= CAReg.In=Carry(b-a)                                    Path(S57,S60)
	S62= ALU.CMP=>DataCmb.A                                     Premise(F98)
	S63= DataCmb.A=Compare0(b-a)                                Path(S56,S62)
	S64= XER.SOOut=>DataCmb.B                                   Premise(F99)
	S65= DataCmb.B=so                                           Path(S50,S64)
	S66= DataCmb.Out={Compare0(b-a),so}                         DataCmb(S63,S65)
	S67= DataCmb.Out=>DR4bit.In                                 Premise(F100)
	S68= DR4bit.In={Compare0(b-a),so}                           Path(S66,S67)
	S69= CtrlPC=0                                               Premise(F107)
	S70= CtrlPCInc=0                                            Premise(F108)
	S71= PC[Out]=addr+4                                         PC-Hold(S39,S69,S70)
	S72= CtrlIR=0                                               Premise(F109)
	S73= [IR]={31,rT,rA,rB,17}                                  IR-Hold(S41,S72)
	S74= CtrlALUOut=1                                           Premise(F113)
	S75= [ALUOut]=b-a                                           ALUOut-Write(S59,S74)
	S76= CtrlCAReg=1                                            Premise(F114)
	S77= [CAReg]=Carry(b-a)                                     CAReg-Write(S61,S76)
	S78= CtrlDR4bit=1                                           Premise(F118)
	S79= [DR4bit]={Compare0(b-a),so}                            DR4bit-Write(S68,S78)

MEM	S80= CtrlPC=0                                               Premise(F146)
	S81= CtrlPCInc=0                                            Premise(F147)
	S82= PC[Out]=addr+4                                         PC-Hold(S71,S80,S81)
	S83= CtrlIR=0                                               Premise(F148)
	S84= [IR]={31,rT,rA,rB,17}                                  IR-Hold(S73,S83)
	S85= CtrlALUOut=0                                           Premise(F152)
	S86= [ALUOut]=b-a                                           ALUOut-Hold(S75,S85)
	S87= CtrlCAReg=0                                            Premise(F153)
	S88= [CAReg]=Carry(b-a)                                     CAReg-Hold(S77,S87)
	S89= CtrlDR4bit=0                                           Premise(F157)
	S90= [DR4bit]={Compare0(b-a),so}                            DR4bit-Hold(S79,S89)

WB	S91= IR.Out6_10=rT                                          IR-Out(S84)
	S92= ALUOut.Out=b-a                                         ALUOut-Out(S86)
	S93= CAReg.Out=Carry(b-a)                                   CAReg-Out(S88)
	S94= DR4bit.Out={Compare0(b-a),so}                          DR4bit-Out(S90)
	S95= IR.Out6_10=>GPRegs.WReg                                Premise(F179)
	S96= GPRegs.WReg=rT                                         Path(S91,S95)
	S97= ALUOut.Out=>GPRegs.WData                               Premise(F180)
	S98= GPRegs.WData=b-a                                       Path(S92,S97)
	S99= DR4bit.Out=>CRRegs.CR0In                               Premise(F181)
	S100= CRRegs.CR0In={Compare0(b-a),so}                       Path(S94,S99)
	S101= CAReg.Out=>XER.CAIn                                   Premise(F182)
	S102= XER.CAIn=Carry(b-a)                                   Path(S93,S101)
	S103= CtrlPC=0                                              Premise(F185)
	S104= CtrlPCInc=0                                           Premise(F186)
	S105= PC[Out]=addr+4                                        PC-Hold(S82,S103,S104)
	S106= CtrlGPRegs=1                                          Premise(F188)
	S107= GPRegs[rT]=b-a                                        GPRegs-Write(S96,S98,S106)
	S108= CtrlXERCA=1                                           Premise(F195)
	S109= XER[CA]=Carry(b-a)                                    XER-CA-Write(S102,S108)
	S110= CtrlCRRegsCR0=1                                       Premise(F198)
	S111= CRRegs[CR0]={Compare0(b-a),so}                        CRRegs-CR0-Write(S100,S110)

POST	S105= PC[Out]=addr+4                                        PC-Hold(S82,S103,S104)
	S107= GPRegs[rT]=b-a                                        GPRegs-Write(S96,S98,S106)
	S109= XER[CA]=Carry(b-a)                                    XER-CA-Write(S102,S108)
	S111= CRRegs[CR0]={Compare0(b-a),so}                        CRRegs-CR0-Write(S100,S110)

