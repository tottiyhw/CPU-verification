
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,1040}                     Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.NIA=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S9= IMem.PID=pid                                            Path(S6,S8)
	S10= PC.NIA=>IMem.Addr                                      Premise(F7)
	S11= IMem.Addr=addr                                         Path(S7,S10)
	S12= IMem.RData={31,rT,rA,rB,1040}                          IMem-Read(S9,S11,S2)
	S13= IMem.RData=>IR.In                                      Premise(F8)
	S14= IR.In={31,rT,rA,rB,1040}                               Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F31)
	S16= CtrlPCInc=1                                            Premise(F32)
	S17= PC[Out]=addr+4                                         PC-Inc(S1,S15,S16)
	S18= CtrlIR=1                                               Premise(F33)
	S19= [IR]={31,rT,rA,rB,1040}                                IR-Write(S14,S18)
	S20= CtrlGPRegs=0                                           Premise(F34)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)
	S22= GPRegs[rB]=b                                           GPRegs-Hold(S4,S20)
	S23= CtrlXERSO=0                                            Premise(F40)
	S24= XER[SO]=so                                             XER-SO-Hold(S5,S23)

ID	S25= IR.Out11_15=rA                                         IR-Out(S19)
	S26= IR.Out16_20=rB                                         IR-Out(S19)
	S27= IR.Out11_15=>GPRegs.RReg1                              Premise(F48)
	S28= GPRegs.RReg1=rA                                        Path(S25,S27)
	S29= GPRegs.RData1=a                                        GPRegs-Read(S28,S21)
	S30= IR.Out16_20=>GPRegs.RReg2                              Premise(F49)
	S31= GPRegs.RReg2=rB                                        Path(S26,S30)
	S32= GPRegs.RData2=b                                        GPRegs-Read(S31,S22)
	S33= GPRegs.RData1=>A.In                                    Premise(F51)
	S34= A.In=a                                                 Path(S29,S33)
	S35= GPRegs.RData2=>B.In                                    Premise(F52)
	S36= B.In=b                                                 Path(S32,S35)
	S37= CtrlPC=0                                               Premise(F69)
	S38= CtrlPCInc=0                                            Premise(F70)
	S39= PC[Out]=addr+4                                         PC-Hold(S17,S37,S38)
	S40= CtrlIR=0                                               Premise(F71)
	S41= [IR]={31,rT,rA,rB,1040}                                IR-Hold(S19,S40)
	S42= CtrlA=1                                                Premise(F73)
	S43= [A]=a                                                  A-Write(S34,S42)
	S44= CtrlB=1                                                Premise(F74)
	S45= [B]=b                                                  B-Write(S36,S44)
	S46= CtrlXERSO=0                                            Premise(F78)
	S47= XER[SO]=so                                             XER-SO-Hold(S24,S46)

EX	S48= A.Out=a                                                A-Out(S43)
	S49= B.Out=b                                                B-Out(S45)
	S50= XER.SOOut=so                                           XER-SO-Out(S47)
	S51= A.Out=>ALU.A                                           Premise(F91)
	S52= ALU.A=a                                                Path(S48,S51)
	S53= B.Out=>ALU.B                                           Premise(F92)
	S54= ALU.B=b                                                Path(S49,S53)
	S55= ALU.Out=b-a                                            ALU(S52,S54)
	S56= ALU.OV=OverFlow(b-a)                                   ALU(S52,S54)
	S57= ALU.CA=Carry(b-a)                                      ALU(S52,S54)
	S58= ALU.Out=>ALUOut.In                                     Premise(F94)
	S59= ALUOut.In=b-a                                          Path(S55,S58)
	S60= ALU.CA=>CAReg.In                                       Premise(F95)
	S61= CAReg.In=Carry(b-a)                                    Path(S57,S60)
	S62= ALU.OV=>OVReg.In                                       Premise(F96)
	S63= OVReg.In=OverFlow(b-a)                                 Path(S56,S62)
	S64= XER.SOOut=>ORGate.A                                    Premise(F97)
	S65= ORGate.A=so                                            Path(S50,S64)
	S66= ALU.OV=>ORGate.B                                       Premise(F98)
	S67= ORGate.B=OverFlow(b-a)                                 Path(S56,S66)
	S68= ORGate.Out=so|OverFlow(b-a)                            ORGate(S65,S67)
	S69= ORGate.Out=>DR1bit.In                                  Premise(F99)
	S70= DR1bit.In=so|OverFlow(b-a)                             Path(S68,S69)
	S71= CtrlPC=0                                               Premise(F107)
	S72= CtrlPCInc=0                                            Premise(F108)
	S73= PC[Out]=addr+4                                         PC-Hold(S39,S71,S72)
	S74= CtrlIR=0                                               Premise(F109)
	S75= [IR]={31,rT,rA,rB,1040}                                IR-Hold(S41,S74)
	S76= CtrlALUOut=1                                           Premise(F113)
	S77= [ALUOut]=b-a                                           ALUOut-Write(S59,S76)
	S78= CtrlCAReg=1                                            Premise(F114)
	S79= [CAReg]=Carry(b-a)                                     CAReg-Write(S61,S78)
	S80= CtrlOVReg=1                                            Premise(F115)
	S81= [OVReg]=OverFlow(b-a)                                  OVReg-Write(S63,S80)
	S82= CtrlDR1bit=1                                           Premise(F119)
	S83= [DR1bit]=so|OverFlow(b-a)                              DR1bit-Write(S70,S82)

MEM	S84= CtrlPC=0                                               Premise(F145)
	S85= CtrlPCInc=0                                            Premise(F146)
	S86= PC[Out]=addr+4                                         PC-Hold(S73,S84,S85)
	S87= CtrlIR=0                                               Premise(F147)
	S88= [IR]={31,rT,rA,rB,1040}                                IR-Hold(S75,S87)
	S89= CtrlALUOut=0                                           Premise(F151)
	S90= [ALUOut]=b-a                                           ALUOut-Hold(S77,S89)
	S91= CtrlCAReg=0                                            Premise(F152)
	S92= [CAReg]=Carry(b-a)                                     CAReg-Hold(S79,S91)
	S93= CtrlOVReg=0                                            Premise(F153)
	S94= [OVReg]=OverFlow(b-a)                                  OVReg-Hold(S81,S93)
	S95= CtrlDR1bit=0                                           Premise(F157)
	S96= [DR1bit]=so|OverFlow(b-a)                              DR1bit-Hold(S83,S95)

WB	S97= IR.Out6_10=rT                                          IR-Out(S88)
	S98= ALUOut.Out=b-a                                         ALUOut-Out(S90)
	S99= CAReg.Out=Carry(b-a)                                   CAReg-Out(S92)
	S100= OVReg.Out=OverFlow(b-a)                               OVReg-Out(S94)
	S101= DR1bit.Out=so|OverFlow(b-a)                           DR1bit-Out(S96)
	S102= IR.Out6_10=>GPRegs.WReg                               Premise(F176)
	S103= GPRegs.WReg=rT                                        Path(S97,S102)
	S104= ALUOut.Out=>GPRegs.WData                              Premise(F177)
	S105= GPRegs.WData=b-a                                      Path(S98,S104)
	S106= DR1bit.Out=>XER.SOIn                                  Premise(F178)
	S107= XER.SOIn=so|OverFlow(b-a)                             Path(S101,S106)
	S108= CAReg.Out=>XER.CAIn                                   Premise(F179)
	S109= XER.CAIn=Carry(b-a)                                   Path(S99,S108)
	S110= OVReg.Out=>XER.OVIn                                   Premise(F180)
	S111= XER.OVIn=OverFlow(b-a)                                Path(S100,S110)
	S112= CtrlPC=0                                              Premise(F183)
	S113= CtrlPCInc=0                                           Premise(F184)
	S114= PC[Out]=addr+4                                        PC-Hold(S86,S112,S113)
	S115= CtrlGPRegs=1                                          Premise(F186)
	S116= GPRegs[rT]=b-a                                        GPRegs-Write(S103,S105,S115)
	S117= CtrlXERSO=1                                           Premise(F192)
	S118= XER[SO]=so|OverFlow(b-a)                              XER-SO-Write(S107,S117)
	S119= CtrlXEROV=1                                           Premise(F193)
	S120= XER[OV]=OverFlow(b-a)                                 XER-OV-Write(S111,S119)
	S121= CtrlXERCA=1                                           Premise(F194)
	S122= XER[CA]=Carry(b-a)                                    XER-CA-Write(S109,S121)

POST	S114= PC[Out]=addr+4                                        PC-Hold(S86,S112,S113)
	S116= GPRegs[rT]=b-a                                        GPRegs-Write(S103,S105,S115)
	S118= XER[SO]=so|OverFlow(b-a)                              XER-SO-Write(S107,S117)
	S120= XER[OV]=OverFlow(b-a)                                 XER-OV-Write(S111,S119)
	S122= XER[CA]=Carry(b-a)                                    XER-CA-Write(S109,S121)

