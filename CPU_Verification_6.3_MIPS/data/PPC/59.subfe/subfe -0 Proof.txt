
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,272}                      Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[CA]=ca                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.NIA=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S9= IMem.PID=pid                                            Path(S6,S8)
	S10= PC.NIA=>IMem.Addr                                      Premise(F7)
	S11= IMem.Addr=addr                                         Path(S7,S10)
	S12= IMem.RData={31,rT,rA,rB,272}                           IMem-Read(S9,S11,S2)
	S13= IMem.RData=>IR.In                                      Premise(F8)
	S14= IR.In={31,rT,rA,rB,272}                                Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F26)
	S16= CtrlPCInc=1                                            Premise(F27)
	S17= PC[Out]=addr+4                                         PC-Inc(S1,S15,S16)
	S18= CtrlIR=1                                               Premise(F28)
	S19= [IR]={31,rT,rA,rB,272}                                 IR-Write(S14,S18)
	S20= CtrlGPRegs=0                                           Premise(F29)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)
	S22= GPRegs[rB]=b                                           GPRegs-Hold(S4,S20)
	S23= CtrlXERCA=0                                            Premise(F34)
	S24= XER[CA]=ca                                             XER-CA-Hold(S5,S23)

ID	S25= IR.Out11_15=rA                                         IR-Out(S19)
	S26= IR.Out16_20=rB                                         IR-Out(S19)
	S27= IR.Out11_15=>GPRegs.RReg1                              Premise(F41)
	S28= GPRegs.RReg1=rA                                        Path(S25,S27)
	S29= GPRegs.RData1=a                                        GPRegs-Read(S28,S21)
	S30= IR.Out16_20=>GPRegs.RReg2                              Premise(F42)
	S31= GPRegs.RReg2=rB                                        Path(S26,S30)
	S32= GPRegs.RData2=b                                        GPRegs-Read(S31,S22)
	S33= GPRegs.RData1=>A.In                                    Premise(F44)
	S34= A.In=a                                                 Path(S29,S33)
	S35= GPRegs.RData2=>B.In                                    Premise(F45)
	S36= B.In=b                                                 Path(S32,S35)
	S37= CtrlPC=0                                               Premise(F57)
	S38= CtrlPCInc=0                                            Premise(F58)
	S39= PC[Out]=addr+4                                         PC-Hold(S17,S37,S38)
	S40= CtrlIR=0                                               Premise(F59)
	S41= [IR]={31,rT,rA,rB,272}                                 IR-Hold(S19,S40)
	S42= CtrlA=1                                                Premise(F61)
	S43= [A]=a                                                  A-Write(S34,S42)
	S44= CtrlB=1                                                Premise(F62)
	S45= [B]=b                                                  B-Write(S36,S44)
	S46= CtrlXERCA=0                                            Premise(F65)
	S47= XER[CA]=ca                                             XER-CA-Hold(S24,S46)

EX	S48= A.Out=a                                                A-Out(S43)
	S49= B.Out=b                                                B-Out(S45)
	S50= XER.CAOut=ca                                           XER-CA-Out(S47)
	S51= A.Out=>ALU.A                                           Premise(F77)
	S52= ALU.A=a                                                Path(S48,S51)
	S53= B.Out=>ALU.B                                           Premise(F78)
	S54= ALU.B=b                                                Path(S49,S53)
	S55= XER.CAOut=>ALU.CAIn                                    Premise(F79)
	S56= ALU.CAIn=ca                                            Path(S50,S55)
	S57= ALU.Out=b-a+ca                                         ALU(S52,S54,S56)
	S58= ALU.CA=Carry(b-a+ca)                                   ALU(S52,S54,S56)
	S59= ALU.Out=>ALUOut.In                                     Premise(F81)
	S60= ALUOut.In=b-a+ca                                       Path(S57,S59)
	S61= ALU.CA=>CAReg.In                                       Premise(F82)
	S62= CAReg.In=Carry(b-a+ca)                                 Path(S58,S61)
	S63= CtrlPC=0                                               Premise(F88)
	S64= CtrlPCInc=0                                            Premise(F89)
	S65= PC[Out]=addr+4                                         PC-Hold(S39,S63,S64)
	S66= CtrlIR=0                                               Premise(F90)
	S67= [IR]={31,rT,rA,rB,272}                                 IR-Hold(S41,S66)
	S68= CtrlALUOut=1                                           Premise(F97)
	S69= [ALUOut]=b-a+ca                                        ALUOut-Write(S60,S68)
	S70= CtrlCAReg=1                                            Premise(F98)
	S71= [CAReg]=Carry(b-a+ca)                                  CAReg-Write(S62,S70)

MEM	S72= CtrlPC=0                                               Premise(F119)
	S73= CtrlPCInc=0                                            Premise(F120)
	S74= PC[Out]=addr+4                                         PC-Hold(S65,S72,S73)
	S75= CtrlIR=0                                               Premise(F121)
	S76= [IR]={31,rT,rA,rB,272}                                 IR-Hold(S67,S75)
	S77= CtrlALUOut=0                                           Premise(F128)
	S78= [ALUOut]=b-a+ca                                        ALUOut-Hold(S69,S77)
	S79= CtrlCAReg=0                                            Premise(F129)
	S80= [CAReg]=Carry(b-a+ca)                                  CAReg-Hold(S71,S79)

WB	S81= IR.Out6_10=rT                                          IR-Out(S76)
	S82= ALUOut.Out=b-a+ca                                      ALUOut-Out(S78)
	S83= CAReg.Out=Carry(b-a+ca)                                CAReg-Out(S80)
	S84= IR.Out6_10=>GPRegs.WReg                                Premise(F145)
	S85= GPRegs.WReg=rT                                         Path(S81,S84)
	S86= ALUOut.Out=>GPRegs.WData                               Premise(F146)
	S87= GPRegs.WData=b-a+ca                                    Path(S82,S86)
	S88= CAReg.Out=>XER.CAIn                                    Premise(F147)
	S89= XER.CAIn=Carry(b-a+ca)                                 Path(S83,S88)
	S90= CtrlPC=0                                               Premise(F150)
	S91= CtrlPCInc=0                                            Premise(F151)
	S92= PC[Out]=addr+4                                         PC-Hold(S74,S90,S91)
	S93= CtrlGPRegs=1                                           Premise(F153)
	S94= GPRegs[rT]=b-a+ca                                      GPRegs-Write(S85,S87,S93)
	S95= CtrlXERCA=1                                            Premise(F158)
	S96= XER[CA]=Carry(b-a+ca)                                  XER-CA-Write(S89,S95)

POST	S92= PC[Out]=addr+4                                         PC-Hold(S74,S90,S91)
	S94= GPRegs[rT]=b-a+ca                                      GPRegs-Write(S85,S87,S93)
	S96= XER[CA]=Carry(b-a+ca)                                  XER-CA-Write(S89,S95)

