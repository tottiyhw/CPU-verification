
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={8,rT,rA,SIMM}                         Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.NIA=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMem.PID                                    Premise(F4)
	S7= IMem.PID=pid                                            Path(S4,S6)
	S8= PC.NIA=>IMem.Addr                                       Premise(F5)
	S9= IMem.Addr=addr                                          Path(S5,S8)
	S10= IMem.RData={8,rT,rA,SIMM}                              IMem-Read(S7,S9,S2)
	S11= IMem.RData=>IR.In                                      Premise(F6)
	S12= IR.In={8,rT,rA,SIMM}                                   Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F22)
	S14= CtrlPCInc=1                                            Premise(F23)
	S15= PC[Out]=addr+4                                         PC-Inc(S1,S13,S14)
	S16= CtrlIR=1                                               Premise(F24)
	S17= [IR]={8,rT,rA,SIMM}                                    IR-Write(S12,S16)
	S18= CtrlGPRegs=0                                           Premise(F25)
	S19= GPRegs[rA]=a                                           GPRegs-Hold(S3,S18)

ID	S20= IR.Out11_15=rA                                         IR-Out(S17)
	S21= IR.Out16_31=SIMM                                       IR-Out(S17)
	S22= IR.Out11_15=>GPRegs.RReg1                              Premise(F37)
	S23= GPRegs.RReg1=rA                                        Path(S20,S22)
	S24= GPRegs.RData1=a                                        GPRegs-Read(S23,S19)
	S25= IR.Out16_31=>IMMEXT.In                                 Premise(F38)
	S26= IMMEXT.In=SIMM                                         Path(S21,S25)
	S27= IMMEXT.Out={16{SIMM[15]},SIMM}                         IMMEXT(S26)
	S28= GPRegs.RData1=>A.In                                    Premise(F39)
	S29= A.In=a                                                 Path(S24,S28)
	S30= IMMEXT.Out=>B.In                                       Premise(F40)
	S31= B.In={16{SIMM[15]},SIMM}                               Path(S27,S30)
	S32= CtrlPC=0                                               Premise(F51)
	S33= CtrlPCInc=0                                            Premise(F52)
	S34= PC[Out]=addr+4                                         PC-Hold(S15,S32,S33)
	S35= CtrlIR=0                                               Premise(F53)
	S36= [IR]={8,rT,rA,SIMM}                                    IR-Hold(S17,S35)
	S37= CtrlA=1                                                Premise(F55)
	S38= [A]=a                                                  A-Write(S29,S37)
	S39= CtrlB=1                                                Premise(F56)
	S40= [B]={16{SIMM[15]},SIMM}                                B-Write(S31,S39)

EX	S41= A.Out=a                                                A-Out(S38)
	S42= B.Out={16{SIMM[15]},SIMM}                              B-Out(S40)
	S43= A.Out=>ALU.A                                           Premise(F70)
	S44= ALU.A=a                                                Path(S41,S43)
	S45= B.Out=>ALU.B                                           Premise(F71)
	S46= ALU.B={16{SIMM[15]},SIMM}                              Path(S42,S45)
	S47= ALU.Out={16{SIMM[15]},SIMM}-a                          ALU(S44,S46)
	S48= ALU.CA=Carry({16{SIMM[15]},SIMM}-a)                    ALU(S44,S46)
	S49= ALU.Out=>ALUOut.In                                     Premise(F73)
	S50= ALUOut.In={16{SIMM[15]},SIMM}-a                        Path(S47,S49)
	S51= ALU.CA=>CAReg.In                                       Premise(F74)
	S52= CAReg.In=Carry({16{SIMM[15]},SIMM}-a)                  Path(S48,S51)
	S53= CtrlPC=0                                               Premise(F80)
	S54= CtrlPCInc=0                                            Premise(F81)
	S55= PC[Out]=addr+4                                         PC-Hold(S34,S53,S54)
	S56= CtrlIR=0                                               Premise(F82)
	S57= [IR]={8,rT,rA,SIMM}                                    IR-Hold(S36,S56)
	S58= CtrlALUOut=1                                           Premise(F86)
	S59= [ALUOut]={16{SIMM[15]},SIMM}-a                         ALUOut-Write(S50,S58)
	S60= CtrlCAReg=1                                            Premise(F87)
	S61= [CAReg]=Carry({16{SIMM[15]},SIMM}-a)                   CAReg-Write(S52,S60)

MEM	S62= CtrlPC=0                                               Premise(F109)
	S63= CtrlPCInc=0                                            Premise(F110)
	S64= PC[Out]=addr+4                                         PC-Hold(S55,S62,S63)
	S65= CtrlIR=0                                               Premise(F111)
	S66= [IR]={8,rT,rA,SIMM}                                    IR-Hold(S57,S65)
	S67= CtrlALUOut=0                                           Premise(F115)
	S68= [ALUOut]={16{SIMM[15]},SIMM}-a                         ALUOut-Hold(S59,S67)
	S69= CtrlCAReg=0                                            Premise(F116)
	S70= [CAReg]=Carry({16{SIMM[15]},SIMM}-a)                   CAReg-Hold(S61,S69)

WB	S71= IR.Out6_10=rT                                          IR-Out(S66)
	S72= ALUOut.Out={16{SIMM[15]},SIMM}-a                       ALUOut-Out(S68)
	S73= CAReg.Out=Carry({16{SIMM[15]},SIMM}-a)                 CAReg-Out(S70)
	S74= IR.Out6_10=>GPRegs.WReg                                Premise(F133)
	S75= GPRegs.WReg=rT                                         Path(S71,S74)
	S76= ALUOut.Out=>GPRegs.WData                               Premise(F134)
	S77= GPRegs.WData={16{SIMM[15]},SIMM}-a                     Path(S72,S76)
	S78= CAReg.Out=>XER.CAIn                                    Premise(F135)
	S79= XER.CAIn=Carry({16{SIMM[15]},SIMM}-a)                  Path(S73,S78)
	S80= CtrlPC=0                                               Premise(F138)
	S81= CtrlPCInc=0                                            Premise(F139)
	S82= PC[Out]=addr+4                                         PC-Hold(S64,S80,S81)
	S83= CtrlGPRegs=1                                           Premise(F141)
	S84= GPRegs[rT]={16{SIMM[15]},SIMM}-a                       GPRegs-Write(S75,S77,S83)
	S85= CtrlXERCA=1                                            Premise(F148)
	S86= XER[CA]=Carry({16{SIMM[15]},SIMM}-a)                   XER-CA-Write(S79,S85)

POST	S82= PC[Out]=addr+4                                         PC-Hold(S64,S80,S81)
	S84= GPRegs[rT]={16{SIMM[15]},SIMM}-a                       GPRegs-Write(S75,S77,S83)
	S86= XER[CA]=Carry({16{SIMM[15]},SIMM}-a)                   XER-CA-Write(S79,S85)

