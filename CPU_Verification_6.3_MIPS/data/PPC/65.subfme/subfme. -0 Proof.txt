
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,0,465}                       Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= XER[SO]=so                                              Premise(F4)
	S5= XER[CA]=ca                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.NIA=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S9= IMem.PID=pid                                            Path(S6,S8)
	S10= PC.NIA=>IMem.Addr                                      Premise(F7)
	S11= IMem.Addr=addr                                         Path(S7,S10)
	S12= IMem.RData={31,rT,rA,0,465}                            IMem-Read(S9,S11,S2)
	S13= IMem.RData=>IR.In                                      Premise(F8)
	S14= IR.In={31,rT,rA,0,465}                                 Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F28)
	S16= CtrlPCInc=1                                            Premise(F29)
	S17= PC[Out]=addr+4                                         PC-Inc(S1,S15,S16)
	S18= CtrlIR=1                                               Premise(F30)
	S19= [IR]={31,rT,rA,0,465}                                  IR-Write(S14,S18)
	S20= CtrlGPRegs=0                                           Premise(F31)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)
	S22= CtrlXERSO=0                                            Premise(F34)
	S23= XER[SO]=so                                             XER-SO-Hold(S4,S22)
	S24= CtrlXERCA=0                                            Premise(F36)
	S25= XER[CA]=ca                                             XER-CA-Hold(S5,S24)

ID	S26= IR.Out11_15=rA                                         IR-Out(S19)
	S27= IR.Out11_15=>GPRegs.RReg1                              Premise(F48)
	S28= GPRegs.RReg1=rA                                        Path(S26,S27)
	S29= GPRegs.RData1=a                                        GPRegs-Read(S28,S21)
	S30= GPRegs.RData1=>A.In                                    Premise(F50)
	S31= A.In=a                                                 Path(S29,S30)
	S32= B.In=32'd(-1)                                          Premise(F51)
	S33= CtrlPC=0                                               Premise(F67)
	S34= CtrlPCInc=0                                            Premise(F68)
	S35= PC[Out]=addr+4                                         PC-Hold(S17,S33,S34)
	S36= CtrlIR=0                                               Premise(F69)
	S37= [IR]={31,rT,rA,0,465}                                  IR-Hold(S19,S36)
	S38= CtrlA=1                                                Premise(F71)
	S39= [A]=a                                                  A-Write(S31,S38)
	S40= CtrlB=1                                                Premise(F72)
	S41= [B]=32'd(-1)                                           B-Write(S32,S40)
	S42= CtrlXERSO=0                                            Premise(F73)
	S43= XER[SO]=so                                             XER-SO-Hold(S23,S42)
	S44= CtrlXERCA=0                                            Premise(F75)
	S45= XER[CA]=ca                                             XER-CA-Hold(S25,S44)

EX	S46= A.Out=a                                                A-Out(S39)
	S47= B.Out=32'd(-1)                                         B-Out(S41)
	S48= XER.SOOut=so                                           XER-SO-Out(S43)
	S49= XER.CAOut=ca                                           XER-CA-Out(S45)
	S50= A.Out=>ALU.A                                           Premise(F90)
	S51= ALU.A=a                                                Path(S46,S50)
	S52= B.Out=>ALU.B                                           Premise(F91)
	S53= ALU.B=32'd(-1)                                         Path(S47,S52)
	S54= XER.CAOut=>ALU.CAIn                                    Premise(F92)
	S55= ALU.CAIn=ca                                            Path(S49,S54)
	S56= ALU.Out=32'd(-1)-a+ca                                  ALU(S51,S53,S55)
	S57= ALU.CMP=Compare0(32'd(-1)-a+ca)                        ALU(S51,S53,S55)
	S58= ALU.CA=Carry(32'd(-1)-a+ca)                            ALU(S51,S53,S55)
	S59= ALU.Out=>ALUOut.In                                     Premise(F94)
	S60= ALUOut.In=32'd(-1)-a+ca                                Path(S56,S59)
	S61= ALU.CA=>CAReg.In                                       Premise(F95)
	S62= CAReg.In=Carry(32'd(-1)-a+ca)                          Path(S58,S61)
	S63= ALU.CMP=>DataCmb.A                                     Premise(F96)
	S64= DataCmb.A=Compare0(32'd(-1)-a+ca)                      Path(S57,S63)
	S65= XER.SOOut=>DataCmb.B                                   Premise(F97)
	S66= DataCmb.B=so                                           Path(S48,S65)
	S67= DataCmb.Out={Compare0(32'd(-1)-a+ca),so}               DataCmb(S64,S66)
	S68= DataCmb.Out=>DR4bit.In                                 Premise(F98)
	S69= DR4bit.In={Compare0(32'd(-1)-a+ca),so}                 Path(S67,S68)
	S70= CtrlPC=0                                               Premise(F105)
	S71= CtrlPCInc=0                                            Premise(F106)
	S72= PC[Out]=addr+4                                         PC-Hold(S35,S70,S71)
	S73= CtrlIR=0                                               Premise(F107)
	S74= [IR]={31,rT,rA,0,465}                                  IR-Hold(S37,S73)
	S75= CtrlALUOut=1                                           Premise(F114)
	S76= [ALUOut]=32'd(-1)-a+ca                                 ALUOut-Write(S60,S75)
	S77= CtrlCAReg=1                                            Premise(F115)
	S78= [CAReg]=Carry(32'd(-1)-a+ca)                           CAReg-Write(S62,S77)
	S79= CtrlDR4bit=1                                           Premise(F116)
	S80= [DR4bit]={Compare0(32'd(-1)-a+ca),so}                  DR4bit-Write(S69,S79)

MEM	S81= CtrlPC=0                                               Premise(F143)
	S82= CtrlPCInc=0                                            Premise(F144)
	S83= PC[Out]=addr+4                                         PC-Hold(S72,S81,S82)
	S84= CtrlIR=0                                               Premise(F145)
	S85= [IR]={31,rT,rA,0,465}                                  IR-Hold(S74,S84)
	S86= CtrlALUOut=0                                           Premise(F152)
	S87= [ALUOut]=32'd(-1)-a+ca                                 ALUOut-Hold(S76,S86)
	S88= CtrlCAReg=0                                            Premise(F153)
	S89= [CAReg]=Carry(32'd(-1)-a+ca)                           CAReg-Hold(S78,S88)
	S90= CtrlDR4bit=0                                           Premise(F154)
	S91= [DR4bit]={Compare0(32'd(-1)-a+ca),so}                  DR4bit-Hold(S80,S90)

WB	S92= IR.Out6_10=rT                                          IR-Out(S85)
	S93= ALUOut.Out=32'd(-1)-a+ca                               ALUOut-Out(S87)
	S94= CAReg.Out=Carry(32'd(-1)-a+ca)                         CAReg-Out(S89)
	S95= DR4bit.Out={Compare0(32'd(-1)-a+ca),so}                DR4bit-Out(S91)
	S96= IR.Out6_10=>GPRegs.WReg                                Premise(F175)
	S97= GPRegs.WReg=rT                                         Path(S92,S96)
	S98= ALUOut.Out=>GPRegs.WData                               Premise(F176)
	S99= GPRegs.WData=32'd(-1)-a+ca                             Path(S93,S98)
	S100= CAReg.Out=>XER.CAIn                                   Premise(F177)
	S101= XER.CAIn=Carry(32'd(-1)-a+ca)                         Path(S94,S100)
	S102= DR4bit.Out=>CRRegs.CR0In                              Premise(F178)
	S103= CRRegs.CR0In={Compare0(32'd(-1)-a+ca),so}             Path(S95,S102)
	S104= CtrlPC=0                                              Premise(F181)
	S105= CtrlPCInc=0                                           Premise(F182)
	S106= PC[Out]=addr+4                                        PC-Hold(S83,S104,S105)
	S107= CtrlGPRegs=1                                          Premise(F184)
	S108= GPRegs[rT]=32'd(-1)-a+ca                              GPRegs-Write(S97,S99,S107)
	S109= CtrlXERCA=1                                           Premise(F189)
	S110= XER[CA]=Carry(32'd(-1)-a+ca)                          XER-CA-Write(S101,S109)
	S111= CtrlCRRegsCR0=1                                       Premise(F194)
	S112= CRRegs[CR0]={Compare0(32'd(-1)-a+ca),so}              CRRegs-CR0-Write(S103,S111)

POST	S106= PC[Out]=addr+4                                        PC-Hold(S83,S104,S105)
	S108= GPRegs[rT]=32'd(-1)-a+ca                              GPRegs-Write(S97,S99,S107)
	S110= XER[CA]=Carry(32'd(-1)-a+ca)                          XER-CA-Write(S101,S109)
	S112= CRRegs[CR0]={Compare0(32'd(-1)-a+ca),so}              CRRegs-CR0-Write(S103,S111)

