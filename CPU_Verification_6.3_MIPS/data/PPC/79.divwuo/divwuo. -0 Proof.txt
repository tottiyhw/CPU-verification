
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,rT,rA,rB,1943}                     Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.NIA=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S9= IMem.PID=pid                                            Path(S6,S8)
	S10= PC.NIA=>IMem.Addr                                      Premise(F7)
	S11= IMem.Addr=addr                                         Path(S7,S10)
	S12= IMem.RData={31,rT,rA,rB,1943}                          IMem-Read(S9,S11,S2)
	S13= IMem.RData=>IR.In                                      Premise(F8)
	S14= IR.In={31,rT,rA,rB,1943}                               Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F31)
	S16= CtrlPCInc=1                                            Premise(F32)
	S17= PC[Out]=addr+4                                         PC-Inc(S1,S15,S16)
	S18= CtrlIR=1                                               Premise(F33)
	S19= [IR]={31,rT,rA,rB,1943}                                IR-Write(S14,S18)
	S20= CtrlGPRegs=0                                           Premise(F34)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)
	S22= GPRegs[rB]=b                                           GPRegs-Hold(S4,S20)
	S23= CtrlXERSO=0                                            Premise(F38)
	S24= XER[SO]=so                                             XER-SO-Hold(S5,S23)

ID	S25= IR.Out11_15=rA                                         IR-Out(S19)
	S26= IR.Out16_20=rB                                         IR-Out(S19)
	S27= IR.Out11_15=>GPRegs.RReg1                              Premise(F51)
	S28= GPRegs.RReg1=rA                                        Path(S25,S27)
	S29= GPRegs.RData1=a                                        GPRegs-Read(S28,S21)
	S30= IR.Out16_20=>GPRegs.RReg2                              Premise(F52)
	S31= GPRegs.RReg2=rB                                        Path(S26,S30)
	S32= GPRegs.RData2=b                                        GPRegs-Read(S31,S22)
	S33= GPRegs.RData1=>A.In                                    Premise(F54)
	S34= A.In=a                                                 Path(S29,S33)
	S35= GPRegs.RData2=>B.In                                    Premise(F55)
	S36= B.In=b                                                 Path(S32,S35)
	S37= CtrlPC=0                                               Premise(F72)
	S38= CtrlPCInc=0                                            Premise(F73)
	S39= PC[Out]=addr+4                                         PC-Hold(S17,S37,S38)
	S40= CtrlIR=0                                               Premise(F74)
	S41= [IR]={31,rT,rA,rB,1943}                                IR-Hold(S19,S40)
	S42= CtrlA=1                                                Premise(F76)
	S43= [A]=a                                                  A-Write(S34,S42)
	S44= CtrlB=1                                                Premise(F77)
	S45= [B]=b                                                  B-Write(S36,S44)
	S46= CtrlXERSO=0                                            Premise(F79)
	S47= XER[SO]=so                                             XER-SO-Hold(S24,S46)

EX	S48= A.Out=a                                                A-Out(S43)
	S49= B.Out=b                                                B-Out(S45)
	S50= XER.SOOut=so                                           XER-SO-Out(S47)
	S51= A.Out=>MDU.A                                           Premise(F97)
	S52= MDU.A=a                                                Path(S48,S51)
	S53= B.Out=>MDU.B                                           Premise(F98)
	S54= MDU.B=b                                                Path(S49,S53)
	S55= MDU.Out0_31=a/b                                        MDU(S52,S54)
	S56= MDU.CMP=Compare0(a/b)                                  MDU(S52,S54)
	S57= MDU.OV=OverFlow(a/b)                                   MDU(S52,S54)
	S58= MDU.Out0_31=>MDUOut.In                                 Premise(F100)
	S59= MDUOut.In=a/b                                          Path(S55,S58)
	S60= MDU.CMP=>DataCmb.A                                     Premise(F101)
	S61= DataCmb.A=Compare0(a/b)                                Path(S56,S60)
	S62= ORGate.Out=>DataCmb.B                                  Premise(F102)
	S63= XER.SOOut=>ORGate.A                                    Premise(F103)
	S64= ORGate.A=so                                            Path(S50,S63)
	S65= MDU.OV=>ORGate.B                                       Premise(F104)
	S66= ORGate.B=OverFlow(a/b)                                 Path(S57,S65)
	S67= ORGate.Out=so|OverFlow(a/b)                            ORGate(S64,S66)
	S68= DataCmb.B=so|OverFlow(a/b)                             Path(S67,S62)
	S69= DataCmb.Out={Compare0(a/b),so|OverFlow(a/b)}           DataCmb(S61,S68)
	S70= ORGate.Out=>DR1bit.In                                  Premise(F105)
	S71= DR1bit.In=so|OverFlow(a/b)                             Path(S67,S70)
	S72= DataCmb.Out=>DR4bit.In                                 Premise(F106)
	S73= DR4bit.In={Compare0(a/b),so|OverFlow(a/b)}             Path(S69,S72)
	S74= CtrlPC=0                                               Premise(F113)
	S75= CtrlPCInc=0                                            Premise(F114)
	S76= PC[Out]=addr+4                                         PC-Hold(S39,S74,S75)
	S77= CtrlIR=0                                               Premise(F115)
	S78= [IR]={31,rT,rA,rB,1943}                                IR-Hold(S41,S77)
	S79= CtrlMDUOut=1                                           Premise(F119)
	S80= [MDUOut]=a/b                                           MDUOut-Write(S59,S79)
	S81= CtrlDR1bit=1                                           Premise(F123)
	S82= [DR1bit]=so|OverFlow(a/b)                              DR1bit-Write(S71,S81)
	S83= CtrlDR4bit=1                                           Premise(F124)
	S84= [DR4bit]={Compare0(a/b),so|OverFlow(a/b)}              DR4bit-Write(S73,S83)

MEM	S85= CtrlPC=0                                               Premise(F154)
	S86= CtrlPCInc=0                                            Premise(F155)
	S87= PC[Out]=addr+4                                         PC-Hold(S76,S85,S86)
	S88= CtrlIR=0                                               Premise(F156)
	S89= [IR]={31,rT,rA,rB,1943}                                IR-Hold(S78,S88)
	S90= CtrlMDUOut=0                                           Premise(F160)
	S91= [MDUOut]=a/b                                           MDUOut-Hold(S80,S90)
	S92= CtrlDR1bit=0                                           Premise(F164)
	S93= [DR1bit]=so|OverFlow(a/b)                              DR1bit-Hold(S82,S92)
	S94= CtrlDR4bit=0                                           Premise(F165)
	S95= [DR4bit]={Compare0(a/b),so|OverFlow(a/b)}              DR4bit-Hold(S84,S94)

WB	S96= IR.Out6_10=rT                                          IR-Out(S89)
	S97= MDUOut.Out=a/b                                         MDUOut-Out(S91)
	S98= DR1bit.Out=so|OverFlow(a/b)                            DR1bit-Out(S93)
	S99= DR4bit.Out={Compare0(a/b),so|OverFlow(a/b)}            DR4bit-Out(S95)
	S100= IR.Out6_10=>GPRegs.WReg                               Premise(F189)
	S101= GPRegs.WReg=rT                                        Path(S96,S100)
	S102= MDUOut.Out=>GPRegs.WData                              Premise(F190)
	S103= GPRegs.WData=a/b                                      Path(S97,S102)
	S104= DR4bit.Out=>CRRegs.CR0In                              Premise(F191)
	S105= CRRegs.CR0In={Compare0(a/b),so|OverFlow(a/b)}         Path(S99,S104)
	S106= DR1bit.Out=>XER.SOIn                                  Premise(F192)
	S107= XER.SOIn=so|OverFlow(a/b)                             Path(S98,S106)
	S108= CtrlPC=0                                              Premise(F195)
	S109= CtrlPCInc=0                                           Premise(F196)
	S110= PC[Out]=addr+4                                        PC-Hold(S87,S108,S109)
	S111= CtrlGPRegs=1                                          Premise(F198)
	S112= GPRegs[rT]=a/b                                        GPRegs-Write(S101,S103,S111)
	S113= CtrlXERSO=1                                           Premise(F202)
	S114= XER[SO]=so|OverFlow(a/b)                              XER-SO-Write(S107,S113)
	S115= CtrlCRRegsCR0=1                                       Premise(F208)
	S116= CRRegs[CR0]={Compare0(a/b),so|OverFlow(a/b)}          CRRegs-CR0-Write(S105,S115)

POST	S110= PC[Out]=addr+4                                        PC-Hold(S87,S108,S109)
	S112= GPRegs[rT]=a/b                                        GPRegs-Write(S101,S103,S111)
	S114= XER[SO]=so|OverFlow(a/b)                              XER-SO-Write(S107,S113)
	S116= CRRegs[CR0]={Compare0(a/b),so|OverFlow(a/b)}          CRRegs-CR0-Write(S105,S115)

