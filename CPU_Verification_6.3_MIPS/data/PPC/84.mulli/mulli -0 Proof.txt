
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={7,rT,rA,SIMM}                         Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)

IF	S4= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S5= PC.NIA=addr                                             PC-Out(S1)
	S6= PIDReg.Out=>IMem.PID                                    Premise(F4)
	S7= IMem.PID=pid                                            Path(S4,S6)
	S8= PC.NIA=>IMem.Addr                                       Premise(F5)
	S9= IMem.Addr=addr                                          Path(S5,S8)
	S10= IMem.RData={7,rT,rA,SIMM}                              IMem-Read(S7,S9,S2)
	S11= IMem.RData=>IR.In                                      Premise(F6)
	S12= IR.In={7,rT,rA,SIMM}                                   Path(S10,S11)
	S13= CtrlPC=0                                               Premise(F20)
	S14= CtrlPCInc=1                                            Premise(F21)
	S15= PC[Out]=addr+4                                         PC-Inc(S1,S13,S14)
	S16= CtrlIR=1                                               Premise(F22)
	S17= [IR]={7,rT,rA,SIMM}                                    IR-Write(S12,S16)
	S18= CtrlGPRegs=0                                           Premise(F23)
	S19= GPRegs[rA]=a                                           GPRegs-Hold(S3,S18)

ID	S20= IR.Out11_15=rA                                         IR-Out(S17)
	S21= IR.Out16_31=SIMM                                       IR-Out(S17)
	S22= IR.Out11_15=>GPRegs.RReg1                              Premise(F31)
	S23= GPRegs.RReg1=rA                                        Path(S20,S22)
	S24= GPRegs.RData1=a                                        GPRegs-Read(S23,S19)
	S25= IR.Out16_31=>IMMEXT.In                                 Premise(F32)
	S26= IMMEXT.In=SIMM                                         Path(S21,S25)
	S27= IMMEXT.Out={16{SIMM[15]},SIMM}                         IMMEXT(S26)
	S28= GPRegs.RData1=>A.In                                    Premise(F33)
	S29= A.In=a                                                 Path(S24,S28)
	S30= IMMEXT.Out=>B.In                                       Premise(F34)
	S31= B.In={16{SIMM[15]},SIMM}                               Path(S27,S30)
	S32= CtrlPC=0                                               Premise(F43)
	S33= CtrlPCInc=0                                            Premise(F44)
	S34= PC[Out]=addr+4                                         PC-Hold(S15,S32,S33)
	S35= CtrlIR=0                                               Premise(F45)
	S36= [IR]={7,rT,rA,SIMM}                                    IR-Hold(S17,S35)
	S37= CtrlA=1                                                Premise(F47)
	S38= [A]=a                                                  A-Write(S29,S37)
	S39= CtrlB=1                                                Premise(F48)
	S40= [B]={16{SIMM[15]},SIMM}                                B-Write(S31,S39)

EX	S41= A.Out=a                                                A-Out(S38)
	S42= B.Out={16{SIMM[15]},SIMM}                              B-Out(S40)
	S43= A.Out=>MDU.A                                           Premise(F58)
	S44= MDU.A=a                                                Path(S41,S43)
	S45= B.Out=>MDU.B                                           Premise(F59)
	S46= MDU.B={16{SIMM[15]},SIMM}                              Path(S42,S45)
	S47= MDU.Out16_47=(a¡Á{16{SIMM[15]},SIMM})[16:47]            MDU(S44,S46)
	S48= MDU.Out16_47=>MDUOut.In                                Premise(F61)
	S49= MDUOut.In=(a¡Á{16{SIMM[15]},SIMM})[16:47]               Path(S47,S48)
	S50= CtrlPC=0                                               Premise(F66)
	S51= CtrlPCInc=0                                            Premise(F67)
	S52= PC[Out]=addr+4                                         PC-Hold(S34,S50,S51)
	S53= CtrlIR=0                                               Premise(F68)
	S54= [IR]={7,rT,rA,SIMM}                                    IR-Hold(S36,S53)
	S55= CtrlMDUOut=1                                           Premise(F72)
	S56= [MDUOut]=(a¡Á{16{SIMM[15]},SIMM})[16:47]                MDUOut-Write(S49,S55)

MEM	S57= CtrlPC=0                                               Premise(F89)
	S58= CtrlPCInc=0                                            Premise(F90)
	S59= PC[Out]=addr+4                                         PC-Hold(S52,S57,S58)
	S60= CtrlIR=0                                               Premise(F91)
	S61= [IR]={7,rT,rA,SIMM}                                    IR-Hold(S54,S60)
	S62= CtrlMDUOut=0                                           Premise(F95)
	S63= [MDUOut]=(a¡Á{16{SIMM[15]},SIMM})[16:47]                MDUOut-Hold(S56,S62)

WB	S64= IR.Out6_10=rT                                          IR-Out(S61)
	S65= MDUOut.Out=(a¡Á{16{SIMM[15]},SIMM})[16:47]              MDUOut-Out(S63)
	S66= IR.Out6_10=>GPRegs.WReg                                Premise(F108)
	S67= GPRegs.WReg=rT                                         Path(S64,S66)
	S68= MDUOut.Out=>GPRegs.WData                               Premise(F109)
	S69= GPRegs.WData=(a¡Á{16{SIMM[15]},SIMM})[16:47]            Path(S65,S68)
	S70= CtrlPC=0                                               Premise(F112)
	S71= CtrlPCInc=0                                            Premise(F113)
	S72= PC[Out]=addr+4                                         PC-Hold(S59,S70,S71)
	S73= CtrlGPRegs=1                                           Premise(F115)
	S74= GPRegs[rT]=(a¡Á{16{SIMM[15]},SIMM})[16:47]              GPRegs-Write(S67,S69,S73)

POST	S72= PC[Out]=addr+4                                         PC-Hold(S59,S70,S71)
	S74= GPRegs[rT]=(a¡Á{16{SIMM[15]},SIMM})[16:47]              GPRegs-Write(S67,S69,S73)

