
----------------------------------- FullProof -----------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S0= PC[Out]=addr                                            Premise(F1)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            Premise(F2)

IF	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.NIA=addr                                             PC-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F3)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F4)
	S0= IMem.Addr=addr                                          Path(S0,S0)
	S0= IMem.RData={18,LI,0,0}                                  IMem-Read(S0,S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F5)
	S0= IR.In={18,LI,0,0}                                       Path(S0,S0)
	S0= IR.Out0_5=>CU.Op                                        Premise(F6)
	S0= IR.Out6_29=>Addr24Ext.In                                Premise(F7)
	S0= IR.Out30=>CU.AA                                         Premise(F8)
	S0= IR.Out31=>CU.LK                                         Premise(F9)
	S0= PC.CIA=>A.In                                            Premise(F10)
	S0= Addr24Ext.Out=>B.In                                     Premise(F11)
	S0= A.Out=>ALU.A                                            Premise(F12)
	S0= B.Out=>ALU.B                                            Premise(F13)
	S0= CU.Func=>ALU.Func                                       Premise(F14)
	S0= ALU.Out=>ALUOut.In                                      Premise(F15)
	S0= ALUOut.Out=>PC.In                                       Premise(F16)
	S0= CtrlPIDReg=0                                            Premise(F17)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F18)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F19)
	S0= CtrlPCInc=1                                             Premise(F20)
	S0= PC[Out]=addr+4                                          PC-Inc(S0,S0,S0)
	S0= PC[CIA]=addr                                            PC-Inc(S0,S0,S0)
	S0= CtrlIR=1                                                Premise(F21)
	S0= [IR]={18,LI,0,0}                                        IR-Write(S0,S0)
	S0= CtrlA=0                                                 Premise(F22)
	S0= CtrlB=0                                                 Premise(F23)
	S0= CtrlALUOut=0                                            Premise(F24)

ID	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= IR.Out0_5=18                                            IR-Out(S0)
	S0= IR.Out6_29=LI                                           IR-Out(S0)
	S0= IR.Out30=0                                              IR-Out(S0)
	S0= IR.Out31=0                                              IR-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F25)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F26)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F27)
	S0= IR.Out0_5=>CU.Op                                        Premise(F28)
	S0= CU.Op=18                                                Path(S0,S0)
	S0= IR.Out6_29=>Addr24Ext.In                                Premise(F29)
	S0= Addr24Ext.In=LI                                         Path(S0,S0)
	S0= Addr24Ext.Out={8{LI[23]},LI}                            Addr24Ext-EXT(S0)
	S0= IR.Out30=>CU.AA                                         Premise(F30)
	S0= CU.AA=0                                                 Path(S0,S0)
	S0= IR.Out31=>CU.LK                                         Premise(F31)
	S0= CU.LK=0                                                 Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0,S0)
	S0= PC.CIA=>A.In                                            Premise(F32)
	S0= A.In=addr                                               Path(S0,S0)
	S0= Addr24Ext.Out=>B.In                                     Premise(F33)
	S0= B.In={8{LI[23]},LI}                                     Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F34)
	S0= B.Out=>ALU.B                                            Premise(F35)
	S0= CU.Func=>ALU.Func                                       Premise(F36)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F37)
	S0= ALUOut.Out=>PC.In                                       Premise(F38)
	S0= CtrlPIDReg=0                                            Premise(F39)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F40)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F41)
	S0= CtrlPCInc=0                                             Premise(F42)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F43)
	S0= [IR]={18,LI,0,0}                                        IR-Hold(S0,S0)
	S0= CtrlA=1                                                 Premise(F44)
	S0= [A]=addr                                                A-Write(S0,S0)
	S0= CtrlB=1                                                 Premise(F45)
	S0= [B]={8{LI[23]},LI}                                      B-Write(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F46)

EX	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=18                                            IR-Out(S0)
	S0= IR.Out6_29=LI                                           IR-Out(S0)
	S0= IR.Out30=0                                              IR-Out(S0)
	S0= IR.Out31=0                                              IR-Out(S0)
	S0= A.Out=addr                                              A-Out(S0)
	S0= A.Out1_0={addr}[1:0]                                    A-Out(S0)
	S0= A.Out4_0={addr}[4:0]                                    A-Out(S0)
	S0= B.Out={8{LI[23]},LI}                                    B-Out(S0)
	S0= B.Out1_0={{8{LI[23]},LI}}[1:0]                          B-Out(S0)
	S0= B.Out4_0={{8{LI[23]},LI}}[4:0]                          B-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F47)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F48)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F49)
	S0= IR.Out0_5=>CU.Op                                        Premise(F50)
	S0= CU.Op=18                                                Path(S0,S0)
	S0= IR.Out6_29=>Addr24Ext.In                                Premise(F51)
	S0= Addr24Ext.In=LI                                         Path(S0,S0)
	S0= Addr24Ext.Out={8{LI[23]},LI}                            Addr24Ext-EXT(S0)
	S0= IR.Out30=>CU.AA                                         Premise(F52)
	S0= CU.AA=0                                                 Path(S0,S0)
	S0= IR.Out31=>CU.LK                                         Premise(F53)
	S0= CU.LK=0                                                 Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0,S0)
	S0= PC.CIA=>A.In                                            Premise(F54)
	S0= A.In=addr                                               Path(S0,S0)
	S0= Addr24Ext.Out=>B.In                                     Premise(F55)
	S0= B.In={8{LI[23]},LI}                                     Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F56)
	S0= ALU.A=addr                                              Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F57)
	S0= ALU.B={8{LI[23]},LI}                                    Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F58)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=addr+{8{LI[23]},LI}                             ALU(S0,S0)
	S0= ALU.CMP=Compare0(addr+{8{LI[23]},LI})                   ALU(S0,S0)
	S0= ALU.OV=OverFlow(addr+{8{LI[23]},LI})                    ALU(S0,S0)
	S0= ALU.CA=Carry(addr+{8{LI[23]},LI})                       ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F59)
	S0= ALUOut.In=addr+{8{LI[23]},LI}                           Path(S0,S0)
	S0= ALUOut.Out=>PC.In                                       Premise(F60)
	S0= CtrlPIDReg=0                                            Premise(F61)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F62)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F63)
	S0= CtrlPCInc=0                                             Premise(F64)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+4                                          PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F65)
	S0= [IR]={18,LI,0,0}                                        IR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F66)
	S0= [A]=addr                                                A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F67)
	S0= [B]={8{LI[23]},LI}                                      B-Hold(S0,S0)
	S0= CtrlALUOut=1                                            Premise(F68)
	S0= [ALUOut]=addr+{8{LI[23]},LI}                            ALUOut-Write(S0,S0)

MEM	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+4                                           PC-Out(S0)
	S0= IR.Out0_5=18                                            IR-Out(S0)
	S0= IR.Out6_29=LI                                           IR-Out(S0)
	S0= IR.Out30=0                                              IR-Out(S0)
	S0= IR.Out31=0                                              IR-Out(S0)
	S0= A.Out=addr                                              A-Out(S0)
	S0= A.Out1_0={addr}[1:0]                                    A-Out(S0)
	S0= A.Out4_0={addr}[4:0]                                    A-Out(S0)
	S0= B.Out={8{LI[23]},LI}                                    B-Out(S0)
	S0= B.Out1_0={{8{LI[23]},LI}}[1:0]                          B-Out(S0)
	S0= B.Out4_0={{8{LI[23]},LI}}[4:0]                          B-Out(S0)
	S0= ALUOut.Out=addr+{8{LI[23]},LI}                          ALUOut-Out(S0)
	S0= ALUOut.Out1_0={addr+{8{LI[23]},LI}}[1:0]                ALUOut-Out(S0)
	S0= ALUOut.Out4_0={addr+{8{LI[23]},LI}}[4:0]                ALUOut-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F69)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F70)
	S0= IMem.Addr=addr+4                                        Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F71)
	S0= IR.Out0_5=>CU.Op                                        Premise(F72)
	S0= CU.Op=18                                                Path(S0,S0)
	S0= IR.Out6_29=>Addr24Ext.In                                Premise(F73)
	S0= Addr24Ext.In=LI                                         Path(S0,S0)
	S0= Addr24Ext.Out={8{LI[23]},LI}                            Addr24Ext-EXT(S0)
	S0= IR.Out30=>CU.AA                                         Premise(F74)
	S0= CU.AA=0                                                 Path(S0,S0)
	S0= IR.Out31=>CU.LK                                         Premise(F75)
	S0= CU.LK=0                                                 Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0,S0)
	S0= PC.CIA=>A.In                                            Premise(F76)
	S0= A.In=addr                                               Path(S0,S0)
	S0= Addr24Ext.Out=>B.In                                     Premise(F77)
	S0= B.In={8{LI[23]},LI}                                     Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F78)
	S0= ALU.A=addr                                              Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F79)
	S0= ALU.B={8{LI[23]},LI}                                    Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F80)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=addr+{8{LI[23]},LI}                             ALU(S0,S0)
	S0= ALU.CMP=Compare0(addr+{8{LI[23]},LI})                   ALU(S0,S0)
	S0= ALU.OV=OverFlow(addr+{8{LI[23]},LI})                    ALU(S0,S0)
	S0= ALU.CA=Carry(addr+{8{LI[23]},LI})                       ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F81)
	S0= ALUOut.In=addr+{8{LI[23]},LI}                           Path(S0,S0)
	S0= ALUOut.Out=>PC.In                                       Premise(F82)
	S0= PC.In=addr+{8{LI[23]},LI}                               Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F83)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F84)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= CtrlPC=1                                                Premise(F85)
	S0= CtrlPCInc=0                                             Premise(F86)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+{8{LI[23]},LI}                             PC-Write(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F87)
	S0= [IR]={18,LI,0,0}                                        IR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F88)
	S0= [A]=addr                                                A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F89)
	S0= [B]={8{LI[23]},LI}                                      B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F90)
	S0= [ALUOut]=addr+{8{LI[23]},LI}                            ALUOut-Hold(S0,S0)

WB	S0= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S0= PIDReg.Out1_0={pid}[1:0]                                PIDReg-Out(S0)
	S0= PIDReg.Out4_0={pid}[4:0]                                PIDReg-Out(S0)
	S0= PC.CIA=addr                                             PC-Out(S0)
	S0= PC.CIA31_28=addr[31:28]                                 PC-Out(S0)
	S0= PC.NIA=addr+{8{LI[23]},LI}                              PC-Out(S0)
	S0= IR.Out0_5=18                                            IR-Out(S0)
	S0= IR.Out6_29=LI                                           IR-Out(S0)
	S0= IR.Out30=0                                              IR-Out(S0)
	S0= IR.Out31=0                                              IR-Out(S0)
	S0= A.Out=addr                                              A-Out(S0)
	S0= A.Out1_0={addr}[1:0]                                    A-Out(S0)
	S0= A.Out4_0={addr}[4:0]                                    A-Out(S0)
	S0= B.Out={8{LI[23]},LI}                                    B-Out(S0)
	S0= B.Out1_0={{8{LI[23]},LI}}[1:0]                          B-Out(S0)
	S0= B.Out4_0={{8{LI[23]},LI}}[4:0]                          B-Out(S0)
	S0= ALUOut.Out=addr+{8{LI[23]},LI}                          ALUOut-Out(S0)
	S0= ALUOut.Out1_0={addr+{8{LI[23]},LI}}[1:0]                ALUOut-Out(S0)
	S0= ALUOut.Out4_0={addr+{8{LI[23]},LI}}[4:0]                ALUOut-Out(S0)
	S0= PIDReg.Out=>IMem.PID                                    Premise(F91)
	S0= IMem.PID=pid                                            Path(S0,S0)
	S0= PC.NIA=>IMem.Addr                                       Premise(F92)
	S0= IMem.Addr=addr+{8{LI[23]},LI}                           Path(S0,S0)
	S0= IMem.RData=>IR.In                                       Premise(F93)
	S0= IR.Out0_5=>CU.Op                                        Premise(F94)
	S0= CU.Op=18                                                Path(S0,S0)
	S0= IR.Out6_29=>Addr24Ext.In                                Premise(F95)
	S0= Addr24Ext.In=LI                                         Path(S0,S0)
	S0= Addr24Ext.Out={8{LI[23]},LI}                            Addr24Ext-EXT(S0)
	S0= IR.Out30=>CU.AA                                         Premise(F96)
	S0= CU.AA=0                                                 Path(S0,S0)
	S0= IR.Out31=>CU.LK                                         Premise(F97)
	S0= CU.LK=0                                                 Path(S0,S0)
	S0= CU.Func=alu_add                                         CU(S0,S0,S0)
	S0= PC.CIA=>A.In                                            Premise(F98)
	S0= A.In=addr                                               Path(S0,S0)
	S0= Addr24Ext.Out=>B.In                                     Premise(F99)
	S0= B.In={8{LI[23]},LI}                                     Path(S0,S0)
	S0= A.Out=>ALU.A                                            Premise(F100)
	S0= ALU.A=addr                                              Path(S0,S0)
	S0= B.Out=>ALU.B                                            Premise(F101)
	S0= ALU.B={8{LI[23]},LI}                                    Path(S0,S0)
	S0= CU.Func=>ALU.Func                                       Premise(F102)
	S0= ALU.Func=alu_add                                        Path(S0,S0)
	S0= ALU.Out=addr+{8{LI[23]},LI}                             ALU(S0,S0)
	S0= ALU.CMP=Compare0(addr+{8{LI[23]},LI})                   ALU(S0,S0)
	S0= ALU.OV=OverFlow(addr+{8{LI[23]},LI})                    ALU(S0,S0)
	S0= ALU.CA=Carry(addr+{8{LI[23]},LI})                       ALU(S0,S0)
	S0= ALU.Out=>ALUOut.In                                      Premise(F103)
	S0= ALUOut.In=addr+{8{LI[23]},LI}                           Path(S0,S0)
	S0= ALUOut.Out=>PC.In                                       Premise(F104)
	S0= PC.In=addr+{8{LI[23]},LI}                               Path(S0,S0)
	S0= CtrlPIDReg=0                                            Premise(F105)
	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= CtrlIMem=0                                              Premise(F106)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= CtrlPC=0                                                Premise(F107)
	S0= CtrlPCInc=0                                             Premise(F108)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+{8{LI[23]},LI}                             PC-Hold(S0,S0,S0)
	S0= CtrlIR=0                                                Premise(F109)
	S0= [IR]={18,LI,0,0}                                        IR-Hold(S0,S0)
	S0= CtrlA=0                                                 Premise(F110)
	S0= [A]=addr                                                A-Hold(S0,S0)
	S0= CtrlB=0                                                 Premise(F111)
	S0= [B]={8{LI[23]},LI}                                      B-Hold(S0,S0)
	S0= CtrlALUOut=0                                            Premise(F112)
	S0= [ALUOut]=addr+{8{LI[23]},LI}                            ALUOut-Hold(S0,S0)

POST	S0= [PIDReg]=pid                                            PIDReg-Hold(S0,S0)
	S0= IMem[{pid,addr}]={18,LI,0,0}                            IMem-Hold(S0,S0)
	S0= PC[CIA]=addr                                            PC-Hold(S0,S0)
	S0= PC[Out]=addr+{8{LI[23]},LI}                             PC-Hold(S0,S0,S0)
	S0= [IR]={18,LI,0,0}                                        IR-Hold(S0,S0)
	S0= [A]=addr                                                A-Hold(S0,S0)
	S0= [B]={8{LI[23]},LI}                                      B-Hold(S0,S0)
	S0= [ALUOut]=addr+{8{LI[23]},LI}                            ALUOut-Hold(S0,S0)

