
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={18,LI,0,0}                            Premise(F2)

IF	S3= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S4= PC.NIA=addr                                             PC-Out(S1)
	S5= PIDReg.Out=>IMem.PID                                    Premise(F3)
	S6= IMem.PID=pid                                            Path(S3,S5)
	S7= PC.NIA=>IMem.Addr                                       Premise(F4)
	S8= IMem.Addr=addr                                          Path(S4,S7)
	S9= IMem.RData={18,LI,0,0}                                  IMem-Read(S6,S8,S2)
	S10= IMem.RData=>IR.In                                      Premise(F5)
	S11= IR.In={18,LI,0,0}                                      Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F19)
	S13= CtrlPCInc=1                                            Premise(F20)
	S14= PC[CIA]=addr                                           PC-Inc(S1,S12,S13)
	S15= CtrlIR=1                                               Premise(F21)
	S16= [IR]={18,LI,0,0}                                       IR-Write(S11,S15)

ID	S17= PC.CIA=addr                                            PC-Out(S14)
	S18= IR.Out6_29=LI                                          IR-Out(S16)
	S19= IR.Out6_29=>Addr24Ext.In                               Premise(F29)
	S20= Addr24Ext.In=LI                                        Path(S18,S19)
	S21= Addr24Ext.Out={8{LI[23]},LI}                           Addr24Ext-EXT(S20)
	S22= PC.CIA=>A.In                                           Premise(F32)
	S23= A.In=addr                                              Path(S17,S22)
	S24= Addr24Ext.Out=>B.In                                    Premise(F33)
	S25= B.In={8{LI[23]},LI}                                    Path(S21,S24)
	S26= CtrlA=1                                                Premise(F44)
	S27= [A]=addr                                               A-Write(S23,S26)
	S28= CtrlB=1                                                Premise(F45)
	S29= [B]={8{LI[23]},LI}                                     B-Write(S25,S28)

EX	S30= A.Out=addr                                             A-Out(S27)
	S31= B.Out={8{LI[23]},LI}                                   B-Out(S29)
	S32= A.Out=>ALU.A                                           Premise(F56)
	S33= ALU.A=addr                                             Path(S30,S32)
	S34= B.Out=>ALU.B                                           Premise(F57)
	S35= ALU.B={8{LI[23]},LI}                                   Path(S31,S34)
	S36= ALU.Out=addr+{8{LI[23]},LI}                            ALU(S33,S35)
	S37= ALU.Out=>ALUOut.In                                     Premise(F59)
	S38= ALUOut.In=addr+{8{LI[23]},LI}                          Path(S36,S37)
	S39= CtrlALUOut=1                                           Premise(F68)
	S40= [ALUOut]=addr+{8{LI[23]},LI}                           ALUOut-Write(S38,S39)

MEM	S41= ALUOut.Out=addr+{8{LI[23]},LI}                         ALUOut-Out(S40)
	S42= ALUOut.Out=>PC.In                                      Premise(F82)
	S43= PC.In=addr+{8{LI[23]},LI}                              Path(S41,S42)
	S44= CtrlPC=1                                               Premise(F85)
	S45= CtrlPCInc=0                                            Premise(F86)
	S46= PC[Out]=addr+{8{LI[23]},LI}                            PC-Write(S43,S44,S45)

WB	S47= CtrlPC=0                                               Premise(F107)
	S48= CtrlPCInc=0                                            Premise(F108)
	S49= PC[Out]=addr+{8{LI[23]},LI}                            PC-Hold(S46,S47,S48)

POST	S49= PC[Out]=addr+{8{LI[23]},LI}                            PC-Hold(S46,S47,S48)

