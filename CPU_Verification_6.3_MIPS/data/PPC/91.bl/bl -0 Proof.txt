
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={18,LI,0,1}                            Premise(F2)

IF	S3= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S4= PC.NIA=addr                                             PC-Out(S1)
	S5= PIDReg.Out=>IMem.PID                                    Premise(F3)
	S6= IMem.PID=pid                                            Path(S3,S5)
	S7= PC.NIA=>IMem.Addr                                       Premise(F4)
	S8= IMem.Addr=addr                                          Path(S4,S7)
	S9= IMem.RData={18,LI,0,1}                                  IMem-Read(S6,S8,S2)
	S10= IMem.RData=>IR.In                                      Premise(F5)
	S11= IR.In={18,LI,0,1}                                      Path(S9,S10)
	S12= CtrlPC=0                                               Premise(F20)
	S13= CtrlPCInc=1                                            Premise(F21)
	S14= PC[Out]=addr+4                                         PC-Inc(S1,S12,S13)
	S15= PC[CIA]=addr                                           PC-Inc(S1,S12,S13)
	S16= CtrlIR=1                                               Premise(F22)
	S17= [IR]={18,LI,0,1}                                       IR-Write(S11,S16)

ID	S18= PC.NIA=addr+4                                          PC-Out(S14)
	S19= PC.CIA=addr                                            PC-Out(S15)
	S20= IR.Out6_29=LI                                          IR-Out(S17)
	S21= IR.Out6_29=>Addr24Ext.In                               Premise(F31)
	S22= Addr24Ext.In=LI                                        Path(S20,S21)
	S23= Addr24Ext.Out={8{LI[23]},LI}                           Addr24Ext-EXT(S22)
	S24= PC.CIA=>A.In                                           Premise(F34)
	S25= A.In=addr                                              Path(S19,S24)
	S26= Addr24Ext.Out=>B.In                                    Premise(F35)
	S27= B.In={8{LI[23]},LI}                                    Path(S23,S26)
	S28= PC.NIA=>LR.In                                          Premise(F36)
	S29= LR.In=addr+4                                           Path(S18,S28)
	S30= CtrlA=1                                                Premise(F47)
	S31= [A]=addr                                               A-Write(S25,S30)
	S32= CtrlB=1                                                Premise(F48)
	S33= [B]={8{LI[23]},LI}                                     B-Write(S27,S32)
	S34= CtrlLR=1                                               Premise(F49)
	S35= [LR]=addr+4                                            LR-Write(S29,S34)

EX	S36= A.Out=addr                                             A-Out(S31)
	S37= B.Out={8{LI[23]},LI}                                   B-Out(S33)
	S38= A.Out=>ALU.A                                           Premise(F61)
	S39= ALU.A=addr                                             Path(S36,S38)
	S40= B.Out=>ALU.B                                           Premise(F62)
	S41= ALU.B={8{LI[23]},LI}                                   Path(S37,S40)
	S42= ALU.Out=addr+{8{LI[23]},LI}                            ALU(S39,S41)
	S43= ALU.Out=>ALUOut.In                                     Premise(F64)
	S44= ALUOut.In=addr+{8{LI[23]},LI}                          Path(S42,S43)
	S45= CtrlLR=0                                               Premise(F73)
	S46= [LR]=addr+4                                            LR-Hold(S35,S45)
	S47= CtrlALUOut=1                                           Premise(F74)
	S48= [ALUOut]=addr+{8{LI[23]},LI}                           ALUOut-Write(S44,S47)

MEM	S49= ALUOut.Out=addr+{8{LI[23]},LI}                         ALUOut-Out(S48)
	S50= ALUOut.Out=>PC.In                                      Premise(F89)
	S51= PC.In=addr+{8{LI[23]},LI}                              Path(S49,S50)
	S52= CtrlPC=1                                               Premise(F92)
	S53= CtrlPCInc=0                                            Premise(F93)
	S54= PC[Out]=addr+{8{LI[23]},LI}                            PC-Write(S51,S52,S53)
	S55= CtrlLR=0                                               Premise(F97)
	S56= [LR]=addr+4                                            LR-Hold(S46,S55)

WB	S57= CtrlPC=0                                               Premise(F116)
	S58= CtrlPCInc=0                                            Premise(F117)
	S59= PC[Out]=addr+{8{LI[23]},LI}                            PC-Hold(S54,S57,S58)
	S60= CtrlLR=0                                               Premise(F121)
	S61= [LR]=addr+4                                            LR-Hold(S56,S60)

POST	S59= PC[Out]=addr+{8{LI[23]},LI}                            PC-Hold(S54,S57,S58)
	S61= [LR]=addr+4                                            LR-Hold(S56,S60)

