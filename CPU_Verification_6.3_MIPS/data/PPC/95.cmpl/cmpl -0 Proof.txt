
------------------------------------- Proof -------------------------------------

PRE	S0= [PIDReg]=pid                                            Premise(F0)
	S1= PC[Out]=addr                                            Premise(F1)
	S2= IMem[{pid,addr}]={31,crfD,0,rA,rB,64}                   Premise(F2)
	S3= GPRegs[rA]=a                                            Premise(F3)
	S4= GPRegs[rB]=b                                            Premise(F4)
	S5= XER[SO]=so                                              Premise(F5)

IF	S6= PIDReg.Out=pid                                          PIDReg-Out(S0)
	S7= PC.NIA=addr                                             PC-Out(S1)
	S8= PIDReg.Out=>IMem.PID                                    Premise(F6)
	S9= IMem.PID=pid                                            Path(S6,S8)
	S10= PC.NIA=>IMem.Addr                                      Premise(F7)
	S11= IMem.Addr=addr                                         Path(S7,S10)
	S12= IMem.RData={31,crfD,0,rA,rB,64}                        IMem-Read(S9,S11,S2)
	S13= IMem.RData=>IR.In                                      Premise(F8)
	S14= IR.In={31,crfD,0,rA,rB,64}                             Path(S12,S13)
	S15= CtrlPC=0                                               Premise(F25)
	S16= CtrlPCInc=1                                            Premise(F26)
	S17= PC[Out]=addr+4                                         PC-Inc(S1,S15,S16)
	S18= CtrlIR=1                                               Premise(F27)
	S19= [IR]={31,crfD,0,rA,rB,64}                              IR-Write(S14,S18)
	S20= CtrlGPRegs=0                                           Premise(F28)
	S21= GPRegs[rA]=a                                           GPRegs-Hold(S3,S20)
	S22= GPRegs[rB]=b                                           GPRegs-Hold(S4,S20)
	S23= CtrlXERSO=0                                            Premise(F31)
	S24= XER[SO]=so                                             XER-SO-Hold(S5,S23)

ID	S25= IR.Out11_15=rA                                         IR-Out(S19)
	S26= IR.Out16_20=rB                                         IR-Out(S19)
	S27= IR.Out11_15=>GPRegs.RReg1                              Premise(F43)
	S28= GPRegs.RReg1=rA                                        Path(S25,S27)
	S29= GPRegs.RData1=a                                        GPRegs-Read(S28,S21)
	S30= IR.Out16_20=>GPRegs.RReg2                              Premise(F44)
	S31= GPRegs.RReg2=rB                                        Path(S26,S30)
	S32= GPRegs.RData2=b                                        GPRegs-Read(S31,S22)
	S33= GPRegs.RData1=>A.In                                    Premise(F46)
	S34= A.In=a                                                 Path(S29,S33)
	S35= GPRegs.RData2=>B.In                                    Premise(F47)
	S36= B.In=b                                                 Path(S32,S35)
	S37= CtrlPC=0                                               Premise(F58)
	S38= CtrlPCInc=0                                            Premise(F59)
	S39= PC[Out]=addr+4                                         PC-Hold(S17,S37,S38)
	S40= CtrlIR=0                                               Premise(F60)
	S41= [IR]={31,crfD,0,rA,rB,64}                              IR-Hold(S19,S40)
	S42= CtrlA=1                                                Premise(F62)
	S43= [A]=a                                                  A-Write(S34,S42)
	S44= CtrlB=1                                                Premise(F63)
	S45= [B]=b                                                  B-Write(S36,S44)
	S46= CtrlXERSO=0                                            Premise(F64)
	S47= XER[SO]=so                                             XER-SO-Hold(S24,S46)

EX	S48= A.Out=a                                                A-Out(S43)
	S49= B.Out=b                                                B-Out(S45)
	S50= XER.SOOut=so                                           XER-SO-Out(S47)
	S51= A.Out=>CMPU.A                                          Premise(F81)
	S52= CMPU.A=a                                               Path(S48,S51)
	S53= B.Out=>CMPU.B                                          Premise(F82)
	S54= CMPU.B=b                                               Path(S49,S53)
	S55= CMPU.Out=CompareU(a,b)                                 CMPU-CMPU(S52,S54)
	S56= CMPU.Out=>DataCmb.A                                    Premise(F84)
	S57= DataCmb.A=CompareU(a,b)                                Path(S55,S56)
	S58= XER.SOOut=>DataCmb.B                                   Premise(F85)
	S59= DataCmb.B=so                                           Path(S50,S58)
	S60= DataCmb.Out={CompareU(a,b),so}                         DataCmb(S57,S59)
	S61= DataCmb.Out=>DR4bit.In                                 Premise(F86)
	S62= DR4bit.In={CompareU(a,b),so}                           Path(S60,S61)
	S63= CtrlPC=0                                               Premise(F91)
	S64= CtrlPCInc=0                                            Premise(F92)
	S65= PC[Out]=addr+4                                         PC-Hold(S39,S63,S64)
	S66= CtrlIR=0                                               Premise(F93)
	S67= [IR]={31,crfD,0,rA,rB,64}                              IR-Hold(S41,S66)
	S68= CtrlDR4bit=1                                           Premise(F100)
	S69= [DR4bit]={CompareU(a,b),so}                            DR4bit-Write(S62,S68)

MEM	S70= CtrlPC=0                                               Premise(F124)
	S71= CtrlPCInc=0                                            Premise(F125)
	S72= PC[Out]=addr+4                                         PC-Hold(S65,S70,S71)
	S73= CtrlIR=0                                               Premise(F126)
	S74= [IR]={31,crfD,0,rA,rB,64}                              IR-Hold(S67,S73)
	S75= CtrlDR4bit=0                                           Premise(F133)
	S76= [DR4bit]={CompareU(a,b),so}                            DR4bit-Hold(S69,S75)

WB	S77= IR.Out6_8=crfD                                         IR-Out(S74)
	S78= DR4bit.Out={CompareU(a,b),so}                          DR4bit-Out(S76)
	S79= IR.Out6_8=>CRRegs.WReg                                 Premise(F153)
	S80= CRRegs.WReg=crfD                                       Path(S77,S79)
	S81= DR4bit.Out=>CRRegs.WData                               Premise(F154)
	S82= CRRegs.WData={CompareU(a,b),so}                        Path(S78,S81)
	S83= CtrlPC=0                                               Premise(F157)
	S84= CtrlPCInc=0                                            Premise(F158)
	S85= PC[Out]=addr+4                                         PC-Hold(S72,S83,S84)
	S86= CtrlCRRegs=1                                           Premise(F167)
	S87= CRRegs[crfD]={CompareU(a,b),so}                        CRRegs-Write(S80,S82,S86)

POST	S85= PC[Out]=addr+4                                         PC-Hold(S72,S83,S84)
	S87= CRRegs[crfD]={CompareU(a,b),so}                        CRRegs-Write(S80,S82,S86)

